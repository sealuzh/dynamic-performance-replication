/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:14:02 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.utiles.ConfigurationManagement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      login0.check_ip(inetAddress0);
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      PrintWriter printWriter0 = login0.getOut();
      login0.setOut(printWriter0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      byte[] byteArray0 = new byte[0];
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login.display_title();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = login0.getServer_fd();
      assertEquals(0, login0.getAuth_max());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(30);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.check_ipmask(31046, ")+4XP");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Login.logUnknownPackets(socket_data0);
      assertNull(socket_data0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.getAuth_num();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      int int0 = Login.mmo_auth_initTXT();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_denynum(2);
      login0.do_initXML();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      login0.do_initXML();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      PrintWriter printWriter0 = login0.getOut();
      assertNull(printWriter0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertNotNull(login_Timer_interval_check_auth_sync0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login.login_log(",");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
      
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertNotNull(socket_data0);
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getName());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getMd5key());
      
      // Undeclared exception!
      try { 
        login0.parse_admin(100000000, socket_data0, login0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertNotNull(socket_data0);
      assertEquals(0, socket_data0.getNew_());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getListenPort());
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      Socket_data socket_data1 = new Socket_data((Socket) null, fromAdmin0);
      assertNotNull(socket_data1);
      assertFalse(socket_data1.equals((Object)socket_data0));
      assertNull(socket_data1.getType());
      assertEquals(0, socket_data1.getUsers());
      assertEquals(0, socket_data1.getEof());
      assertNull(socket_data1.getMd5key());
      assertEquals(0, (int)socket_data1.getAccount_id());
      assertNull(socket_data1.getName());
      assertEquals(0, socket_data1.getNew_());
      assertEquals(0L, socket_data1.scheduledExecutionTime());
      assertEquals(0, socket_data1.getListenPort());
      assertEquals(0, socket_data1.getMaintenance());
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("OFF");
      assertFalse(boolean0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.setAuth_max(31048);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(31048, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = FromChar.REQUEST_ACCOUNT_REG2;
      assertEquals(10030, int0);
      
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      UserManagement.addAccountIdCount(10);
      ConfigurationManagement.setAccess_denynum(5394);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[0] = (byte) (-27);
      byteArray0[2] = (byte)0;
      UserManagement.addAccountIdCount();
      boolean boolean0 = login0.yesNoOnOffToBoolean("YES");
      assertTrue(boolean0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initXML();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      Login.mmo_auth_syncTXT();
      int int0 = login0.check_auth_sync();
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncXML();
      ConfigurationManagement.setAuth_before_save_file(50);
      ConfigurationManagement.setAccess_denynum(2);
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login login1 = new Login();
      assertNotNull(login1);
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      
      boolean boolean0 = login1.yesNoOnOffToBoolean("ON");
      assertNotSame(login1, login0);
      assertFalse(login1.equals((Object)login0));
      assertTrue(boolean0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'O');
      assertNotNull(auth_data0);
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals("-", auth_data0.getEmail());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0, auth_data0.getLogincount());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getVersion());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertNull(auth_data0.getLast_ip());
      assertEquals('O', auth_data0.getSex());
      assertEquals((-1), auth_data0.getCharserver());
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      int int0 = login0.parse_console("conf/subnet_athena.conf");
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      ConfigurationManagement.setAccess_allownum(50);
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initXML();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "Supports Swing: ", "Supports Swing: ", 'Z');
      assertNotNull(auth_data0);
      assertEquals('Z', auth_data0.getSex());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals("Supports Swing: ", auth_data0.getPass());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getVersion());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getLevel());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getLogincount());
      assertNull(auth_data0.getLast_ip());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals("-", auth_data0.getEmail());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals((-1), auth_data0.getCharserver());
      
      Login.mmo_auth_syncTXT();
      Login login1 = new Login();
      assertNotNull(login1);
      assertFalse(login1.equals((Object)login0));
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      // Undeclared exception!
      try { 
        login1.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "NO", "conf/subnet_athena.conf", 'S');
      assertNotNull(auth_data0);
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0, auth_data0.getVersion());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals((-1), auth_data0.getCharserver());
      assertNull(auth_data0.getLast_ip());
      assertEquals("NO", auth_data0.getPass());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals('S', auth_data0.getSex());
      assertEquals("-", auth_data0.getEmail());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getLogin_id1());
      assertFalse(auth_data0.isResetLogincoun());
      
      login0.server_fd = null;
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      ConfigurationManagement.setAccess_allownum(10028);
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_denynum(2);
      login0.do_initXML();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initTXT();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = login0.parse_console("status");
      assertEquals(0, int0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        login0.do_final();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      ConfigurationManagement.setAccess_allownum(50);
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initXML();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      ConfigurationManagement.setAccess_allownum(10028);
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_denynum(2);
      login0.do_initXML();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Login.mmo_auth_syncTXT();
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "DlY'7j]~soI}~x", "u?0p-", '');
      assertNotNull(auth_data0);
      assertEquals("-", auth_data0.getEmail());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals("DlY'7j]~soI}~x", auth_data0.getPass());
      assertEquals(0, auth_data0.getVersion());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertNull(auth_data0.getLast_ip());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0, auth_data0.getLogincount());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals('', auth_data0.getSex());
      
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      login0.do_initTXT();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      login0.do_initXML();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int0 = login0.parse_console("alive");
      assertEquals(0, int0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int1 = Login.getPASSWORDENC();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertNotNull(socket_data0);
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getType());
      
      socket_data0.setMd5key("zvRrW$B:");
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals("zvRrW$B:", socket_data0.getMd5key());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getType());
      
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }
}
