/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:15:02 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1075L));
      CompressedVector compressedVector0 = CompressedVector.random(8, 0.0, (Random) mockRandom0);
      boolean boolean0 = compressedVector0.nonZeroAt(8);
      assertEquals(8, compressedVector0.length());
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toColumnMatrix();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      assertEquals(8, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2142502703;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(2139506740, 2142502703);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2142502703.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2258, 2258);
      double double0 = compressedVector0.getOrElse(540, 419.440265445898);
      assertEquals(419.440265445898, double0, 0.01);
      assertEquals(2258, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -34.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1605));
      // Undeclared exception!
      try { 
        CompressedVector.random((-1605), (double) (-1605), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(4658);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(4658, compressedVector1.length());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-84), (-1617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.non(vectorPredicate0);
      boolean boolean1 = compressedVector0.nonZeroAt((-1593));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 399.4783882473606;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      VectorMatrixOperation<Object> vectorMatrixOperation0 = (VectorMatrixOperation<Object>) mock(VectorMatrixOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      String string0 = compressedVector0.toString();
      assertEquals("399.478 0.000", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-3948.0));
      linkedList0.add(double0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      compressedVector0.toCSV(numberFormat0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 399.4783882473606;
      CompressedVector compressedVector0 = new CompressedVector(1160, 1160, doubleArray0, (int[]) null);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {399.4783882473606, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1160, compressedVector0.cardinality());
      assertEquals(1160, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {399.4783882473606, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1160, compressedVector0.cardinality());
      assertEquals(1160, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      compressedVector0.setAll((-451.24117701));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 330);
      assertNotNull(compressedVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(330, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(330);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(330, compressedVector0.cardinality());
      assertEquals(330, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(330, compressedVector0.cardinality());
      assertEquals(330, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2142502703, 1658);
      assertNotNull(compressedVector0);
      assertEquals(2142502703, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.set(1658, 4434.94);
      assertEquals(4.66743868560711E-10, compressedVector0.density(), 0.01);
      assertEquals(2142502703, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt(2067);
      assertFalse(boolean0);
      assertEquals(4.66743868560711E-10, compressedVector0.density(), 0.01);
      assertEquals(2142502703, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(276);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(276, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(276, compressedVector0.cardinality());
      assertEquals(276, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1226), vectorFunction0);
      assertEquals(276, compressedVector0.cardinality());
      assertEquals(276, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-1226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1226
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 9);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(46883.45225680251).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(9, vectorFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-151), 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(276);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2438L);
      assertNotNull(intStream0);
      
      CompressedVector compressedVector0 = CompressedVector.random(276, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(276, compressedVector0.cardinality());
      assertEquals(276, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2438L).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(276, compressedVector0.cardinality());
      assertEquals(276, compressedVector0.length());
      
      int int0 = 1689;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -590
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[0] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.get(0);
      assertEquals(2.0, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements((-1914), 0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(261, 141);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(261, compressedVector0.length());
      
      VectorOperation<CompressedVector> vectorOperation0 = (VectorOperation<CompressedVector>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      VectorVectorOperation<CompressedVector> vectorVectorOperation0 = (VectorVectorOperation<CompressedVector>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(vectorOperation0).when(vectorVectorOperation0).partiallyApply(any(org.la4j.vector.SparseVector.class));
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(261, compressedVector0.length());
      assertEquals(261, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      CompressedVector compressedVector1 = compressedVector0.apply(vectorVectorOperation0, (Vector) sparseVector0);
      assertNull(compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(261, compressedVector0.length());
      assertEquals(261, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)1, (byte)5, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(261, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(14);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4607.94571595819).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(14, vectorFunction0);
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(14, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1755.9691968419;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 1755.9691968419}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      int int0 = (-2838);
      double double0 = compressedVector0.getOrElse(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1755.9691968419}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1415), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1415
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements((-57), (-57));
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(253);
      assertEquals(253, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertNull(double1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 253);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)7);
      assertEquals(7, int0);
      
      int int1 = Byte.toUnsignedInt((byte)7);
      assertEquals(7, int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (byte)7;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(415, 415);
      assertNotNull(compressedVector0);
      assertEquals(415, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(415, (-3191));
      assertEquals(415, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-2073432487));
      assertEquals((-2073432487), (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double((-2073432487));
      assertEquals((-2.073432487E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertNull(double1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(12);
      assertNotNull(compressedVector0);
      assertEquals(12, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1612.5246)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(12, vectorFunction0);
      assertEquals(12, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(2092, (-1908));
      assertEquals(12, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.08333333333333333, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.zero(162);
      assertNotNull(vector0);
      assertEquals(162, vector0.length());
      
      org.evosuite.runtime.Random.setNextRandom(273);
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 399.4783882473606;
      doubleArray0[1] = 399.4783882473606;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {399.4783882473606, 399.4783882473606}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertArrayEquals(new double[] {399.4783882473606, 399.4783882473606}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {399.4783882473606, 399.4783882473606}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {399.4783882473606, 399.4783882473606}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      Short short0 = new Short((short)1000);
      assertEquals((short)1000, (short)short0);
      assertNotNull(short0);
      
      MockRandom mockRandom0 = new MockRandom((-1945L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(32, 2326.2256964517383, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(276);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2438L);
      assertNotNull(intStream0);
      
      CompressedVector compressedVector0 = CompressedVector.random(276, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(276, compressedVector0.cardinality());
      assertEquals(276, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(275, compressedVector0.cardinality());
      assertEquals(0.9963768115942029, compressedVector0.density(), 0.01);
      assertEquals(276, compressedVector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(500.254).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(276, vectorFunction1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(276, compressedVector0.cardinality());
      assertEquals(276, compressedVector0.length());
      
      CompressedVector compressedVector1 = new CompressedVector(276);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(276, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      long long0 = Byte.toUnsignedLong((byte)7);
      assertEquals(7L, long0);
      
      int int0 = Byte.toUnsignedInt((byte)7);
      assertEquals(7, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (byte)7;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(2, (-2048));
      assertArrayEquals(new double[] {0.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = 2693;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2693;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2693.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      double double0 = compressedVector0.product();
      assertEquals(1.0, double0, 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(243, 243, (double[]) null, (int[]) null);
      assertNotNull(compressedVector0);
      assertEquals(243, compressedVector0.cardinality());
      assertEquals(243, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.toDiagonalMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 399.4783882473606;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {399.4783882473606, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals("%%MatrixMarket vector coordinate real\n2 1\n1 399.478\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {399.4783882473606, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(2, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte0);
      assertNotNull(byte0);
      
      long long0 = Byte.toUnsignedLong((byte) (-122));
      assertEquals(134L, long0);
      
      int int0 = Byte.BYTES;
      assertEquals(1, int0);
      
      Byte byte1 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (byte)47;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertArrayEquals(new double[] {0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(17);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(17, (double) 134L, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      
      compressedVector0.swapElements(211, 0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(211, vectorFunction0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(315, 315);
      assertNotNull(compressedVector0);
      assertEquals(315, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(25.60327962205346);
      assertEquals(315, compressedVector0.cardinality());
      assertEquals(315, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(315);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(32, (-936));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 276;
      MockRandom mockRandom0 = new MockRandom(276);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(276, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(276, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(276, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(500.254).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(276, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) (byte) (-41);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.05, compressedVector0.density(), 0.01);
      assertEquals(20, compressedVector0.length());
      
      double double0 = compressedVector0.sum();
      assertEquals((-41.0), double0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.05, compressedVector0.density(), 0.01);
      assertEquals(20, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.isZeroAt((byte) (-41));
      assertTrue(boolean0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.05, compressedVector0.density(), 0.01);
      assertEquals(20, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.05, compressedVector0.density(), 0.01);
      assertEquals(20, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(0);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = hashMap0.put(integer0, long0);
      assertTrue(long0.equals((Object)long1));
      assertNull(long2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      int int0 = 347;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 347);
      assertNotNull(compressedVector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.002881844380403458, compressedVector0.density(), 0.01);
      assertEquals(347, compressedVector0.length());
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = compressedVector0.isZeroAt(0);
      assertFalse(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.002881844380403458, compressedVector0.density(), 0.01);
      assertEquals(347, compressedVector0.length());
      
      Float float0 = new Float((-2825.2F));
      assertEquals((-2825.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = compressedVector0.equals((Object) float0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.002881844380403458, compressedVector0.density(), 0.01);
      assertEquals(347, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2241);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2241, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(4);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2241, compressedVector0.length());
      assertEquals(4, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(253);
      assertEquals(253, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.max(80.696, 93.0);
      assertEquals(93.0, double1, 0.01);
      
      Double double2 = hashMap0.put(integer0, double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNull(double2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 477);
      assertNotNull(compressedVector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0.0020964360587002098, compressedVector0.density(), 0.01);
      assertEquals(477, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0.0020964360587002098, compressedVector0.density(), 0.01);
      assertEquals(477, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(330);
      assertEquals(330, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long((-2327L));
      assertEquals((-2327L), (long)long0);
      assertNotNull(long0);
      
      Integer integer1 = new Integer(330);
      assertEquals(330, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      CompressedVector compressedVector0 = new CompressedVector(1091);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1091, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.set(3, 3);
      assertEquals(9.165902841429881E-4, compressedVector0.density(), 0.01);
      assertEquals(1091, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(3, 4);
      assertEquals(9.165902841429881E-4, compressedVector0.density(), 0.01);
      assertEquals(1091, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = Float.SIZE;
      assertEquals(32, int0);
      
      int int1 = Float.MAX_EXPONENT;
      assertEquals(127, int1);
      assertFalse(int1 == int0);
      
      long long0 = Long.remainderUnsigned(0L, (-2187L));
      assertEquals(0L, long0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 347);
      assertNotNull(compressedVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(347, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      long long1 = Integer.toUnsignedLong(2383);
      assertEquals(2383L, long1);
      assertFalse(long1 == long0);
      
      compressedVector0.setAll(32);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(347, compressedVector0.cardinality());
      assertEquals(347, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Long long2 = new Long(347);
      assertEquals(347L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long long3 = hashMap0.put(integer0, long2);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNull(long3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      compressedVector0.swapElements(8, 32);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(347, compressedVector0.cardinality());
      assertEquals(347, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(2023);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(347, compressedVector0.cardinality());
      assertEquals(347, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2023, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      org.evosuite.runtime.Random.setNextRandom(32);
      org.evosuite.runtime.Random.setNextRandom(306);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 399.89611957156654;
      doubleArray0[2] = 399.89611957156654;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {399.89611957156654, 0.0, 399.89611957156654, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.2857142857142857, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      compressedVector0.swapElements((-3948), 2);
      assertArrayEquals(new double[] {399.89611957156654, 0.0, 399.89611957156654, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.2857142857142857, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {399.89611957156654, 0.0, 399.89611957156654, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.2857142857142857, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector0 = new CompressedVector(9);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(46883.45225680251).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(9, vectorFunction0);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements((-151), 9);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = Double.BYTES;
      assertEquals(8, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (byte)7;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      String string0 = compressedVector0.toCSV();
      assertEquals("0.000, 0.000, 7.000", string0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Check your map: Index must be 0..n-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      Collection<Long> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      
      compressedVector0.set(0, 0.0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      
      Long long0 = Long.getLong("8/q*D-ceY", (long) 0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = hashMap0.put(integer0, long0);
      assertTrue(integer0.equals((Object)int0));
      assertNull(long1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      compressedVector0.swapElements(0, 8);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("8/q*D-ceY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(343);
      CompressedVector compressedVector0 = new CompressedVector(3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[0] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      double double0 = compressedVector0.get(0);
      assertEquals(2.0, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2294.548041637914, 0.0, (double)0, 0.0, 338.8716007082042).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 399.4783882473606;
      doubleArray0[2] = 399.4783882473606;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {399.4783882473606, 0.0, 399.4783882473606, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertArrayEquals(new double[] {399.4783882473606, 0.0, 399.4783882473606, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {399.4783882473606, 0.0, 399.4783882473606, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(1215, 399.4783882473606, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte0);
      assertNotNull(byte0);
      
      long long0 = Byte.toUnsignedLong((byte) (-122));
      assertEquals(134L, long0);
      
      int int0 = Byte.BYTES;
      assertEquals(1, int0);
      
      Byte byte1 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (byte)47;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(37, 2183);
      assertArrayEquals(new double[] {0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertArrayEquals(new double[] {0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.set(1, 1);
      assertArrayEquals(new double[] {0.0, 0.0, 47.0}, doubleArray0, 0.01);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Integer integer0 = new Integer((byte)31);
      assertEquals(31, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Byte.toUnsignedInt((byte)0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (byte)49;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 49.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      int int1 = 1660;
      compressedVector0.swapElements(1660, 1660);
      assertArrayEquals(new double[] {0.0, 0.0, 49.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      double double0 = compressedVector0.innerProduct(compressedVector0);
      assertEquals(2401.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 49.0}, doubleArray0, 0.01);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("Cardinality should be less then or equal to capacity: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
