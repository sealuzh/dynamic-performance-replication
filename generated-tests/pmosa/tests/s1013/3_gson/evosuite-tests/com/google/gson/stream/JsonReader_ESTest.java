/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:48:24 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("En^ of inpt");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^B5=FCd");
      StringReader stringReader1 = new StringReader("!8{X4@_ITN");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape sequence");
      stringReader0.read();
      stringReader0.read();
      stringReader0.mark(0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!8{X4@_ITN");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.skipValue();
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",=Pjo@&");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("En^ of inpt");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      jsonReader0.close();
      pushbackInputStream0.mark((-187));
      jsonReader0.isLenient();
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.skip(10L);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Czty");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.skip(0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("End of input");
      stringReader0.read();
      stringReader0.mark(69);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":/?_3sFL@>we@XS");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      StringReader stringReader1 = new StringReader("9.");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      StringReader stringReader0 = new StringReader("~9\f/67d&ZT!");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("].");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'X';
      charArray0[2] = '2';
      charArray0[3] = '+';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[4] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      charArrayReader0.read();
      charArrayReader0.read();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+ |kC");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("End of input");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      stringReader0.mark(2);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StringReader stringReader0 = new StringReader("{Uc");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{U?c");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StringReader stringReader0 = new StringReader("{Uc");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginObject();
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape sequence");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader1 = new StringReader("'^=FCd");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^<=FCd");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StringReader stringReader0 = new StringReader("{Uc");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 412;
      jsonReader0.hasNext();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      StringReader stringReader1 = new StringReader("{Uc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StringReader stringReader0 = new StringReader("{Uc");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader0 = new StringReader("!8{X4@_ITN");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f!`=}Kb_&;X,~x0B0");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      StringReader stringReader1 = new StringReader("End of input");
      stringReader1.reset();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!8{X4@_ITN");
      int int0 = ObjectStreamConstants.baseWireHandle;
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextString();
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StringReader stringReader0 = new StringReader("{Uc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.doPeek();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" path ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 407;
      jsonReader0.hasNext();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 412;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 62);
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("{Uc");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginObject();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("}l}X");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("{E`");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.peeked = 5;
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BOOLEAN at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader(".OJX`8E");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".OJX`8E");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      try { 
        jsonReader1.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("En^ of inpt");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1;
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BEGIN_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<ntermiated escape sqnence");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",$]AXX^$UhB<");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.nextDouble();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader1 = new JsonReader(pipedReader0);
      try { 
        jsonReader1.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Uc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = ',';
      charArray0[2] = 'F';
      charArray0[3] = '.';
      charArray0[4] = ';';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[dFlL#=~L[g");
      charArray0[5] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.close();
      charArrayReader0.markSupported();
      jsonReader0.getPath();
      try { 
        charArrayReader0.mark(100);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader(".OJX`8E");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".OJX`8E");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonToken jsonToken1 = jsonReader0.peek();
      assertNotSame(jsonToken1, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(false);
      jsonReader0.peek();
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(pipedReader0);
      try { 
        jsonReader1.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape seqnence");
      int int0 = ObjectStreamConstants.baseWireHandle;
      stringReader0.read();
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = ';';
      charArray0[2] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("].");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'^=FCd");
      int int0 = ObjectStreamConstants.baseWireHandle;
      stringReader0.read();
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = ',';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = 'l';
      charArray0[5] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("98");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("98'");
      StringReader stringReader1 = new StringReader("98'");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(false);
      JsonReader jsonReader1 = new JsonReader(pipedReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("].");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/)k>oP-q{BVf=_l");
      int int0 = ObjectStreamConstants.baseWireHandle;
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("!8{X4@_ITN");
      int int0 = stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      int int1 = jsonReader0.doPeek();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{$YfoMy^SL2ie");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/)k>oP-q{BVf=_l");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/eS");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("l:CVV");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ntermiatNd escape sqnenc$");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".OJX`8E");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".OJX`8E");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{$YfoMy^SL2ie");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("{$YfoMy^SL2ie");
      stringReader1.read();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 14 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!8{X4@_ITN");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.peek();
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 9 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/)k>oP-q{BVf=_l");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)15;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      jsonReader0.doPeek();
      jsonReader0.beginObject();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      int int1 = ObjectStreamConstants.baseWireHandle;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      stringReader0.markSupported();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '{';
      charArray0[2] = 'M';
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peek();
      jsonReader0.beginArray();
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 3 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("'^=FCd");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      StringReader stringReader1 = new StringReader("\"..f#ELk");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '{';
      charArray0[2] = 'y';
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("\"2a{4)oIv{]XRyH\"0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      StringReader stringReader1 = new StringReader("\"..f#ELk");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n'? N+_F1R@O");
      StringReader stringReader1 = new StringReader("Unterminated string");
      stringReader1.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      jsonReader0.doPeek();
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("\"4Z}['&L]Y~Wfkx");
      stringReader0.ready();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("9A9.L)a8U&c/uC.v3pP");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9A9.L)a8U&c/uC.v3pP");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<ntermiated escape sqnence");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[19] = '[';
      charArray0[2] = 'M';
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.setLenient(true);
      jsonReader0.nextLong();
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n9.");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = 'S';
      charArray0[2] = 'J';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n9.");
      charArray0[3] = '_';
      charArray0[4] = 'Q';
      charArray0[5] = '?';
      charArray0[6] = 'w';
      charArray0[7] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      jsonReader1.setLenient(true);
      try { 
        jsonReader1.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<6`?$FBS(Q5D3dc;");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      stringReader0.read();
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 15 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(dataInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      StringReader stringReader0 = new StringReader("C}QKj06;t");
      stringReader0.read();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.setLenient(false);
      JsonReader jsonReader2 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.nextInt();
      jsonReader0.hasNext();
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/)k>oP@q{BVf]_l");
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'U';
      charArray0[2] = 'x';
      stringReader0.read();
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      jsonReader0.doPeek();
      jsonReader0.hasNext();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 13 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<6`?$FBS(Q5D3dc;");
      stringReader0.skip(0L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.mark(113);
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '0';
      charArray0[2] = '6';
      charArray0[3] = '5';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      charArray0[4] = 'A';
      charArray0[5] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/)k>oP-q{BVf=_l");
      byte[] byteArray0 = new byte[9];
      stringReader0.ready();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.setLenient(true);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      StringReader stringReader0 = new StringReader("W mZ],3VKW;zL4");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      StringReader stringReader0 = new StringReader("~71e8$%T5'=ZD");
      stringReader0.read();
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      try { 
        jsonReader2.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)9;
      StringReader stringReader0 = new StringReader("~71e8$%T5'=ZD");
      stringReader0.read();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      JsonReader jsonReader1 = new JsonReader(inputStreamReader0);
      jsonReader0.setLenient(true);
      long long0 = jsonReader0.nextLong();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[19] = '[';
      charArray0[2] = 'M';
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 21 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6-OZ>mH'|(]:`b7TR");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/)k>oP-q{BVf=_l");
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'U';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '{';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 732);
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      jsonReader0.toString();
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected name at line 1 column 3 path $[0].
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/)k>oP-q{BVf=_l");
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      StringReader stringReader1 = new StringReader("null");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.nextInt();
      jsonReader0.skipValue();
      int int1 = jsonReader0.doPeek();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..f#ELk");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(false);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUe_E");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5QiT!l3lm_yZR@l?}V6");
      stringReader0.ready();
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
