/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 00:36:44 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, (Object) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap hashMap2 = (HashMap)doubleKeyMap0.remove(hashMap1, (Object) hashMap1);
      assertTrue(hashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, (Object) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap hashMap2 = (HashMap)doubleKeyMap0.remove(hashMap0, (Object) hashMap1);
      assertEquals(0, hashMap2.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0, class0);
      Integer integer0 = new Integer(880);
      doubleKeyMap1.put((Object) "Td)ZY4))7|NZ^0D", integer0, integer0);
      Map<Integer, Integer> map1 = doubleKeyMap1.remove((Object) "Td)ZY4))7|NZ^0D");
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Integer, Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      doubleKeyMap0.put("", (Object) "", (Map<Integer, Object>) hashMap0);
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap0.get("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0, class0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove("", object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0, class0);
      Map<HashMap<String, Integer>, Map<Integer, Object>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<String, Integer>, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Integer>, Integer, Object>(map1);
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap2.remove((HashMap<String, Integer>) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Integer, Object>>();
      HashMap<Object, Map<Map<Integer, Object>, Object>> hashMap0 = new HashMap<Object, Map<Map<Integer, Object>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Integer, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, Object>, Object>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(0);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<Integer, Object>) hashMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, String>>();
      Map<Integer, HashMap<String, String>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0, class0);
      DoubleKeyMap<Object, String, HashMap<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, String, HashMap<Object, Integer>>((Map<Object, Map<String, HashMap<Object, Integer>>>) null);
      Map<String, HashMap<Object, Integer>> map1 = doubleKeyMap2.remove((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, Object, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Object, Map<Integer, Object>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.put(hashMap0, (Object) null, (Map<Integer, Object>) hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = doubleKeyMap0.put(hashMap0, (Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(class0);
      Integer integer0 = new Integer(1);
      String string0 = doubleKeyMap0.put((Object) null, integer0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Object, Map<HashMap<Object, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>(map0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, hashMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, Integer>();
      Map<String, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(map0);
      Object object0 = doubleKeyMap1.get("", (HashMap<String, Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>((Map<String, Map<Integer, String>>) null);
      Integer integer0 = new Integer(1643);
      String string0 = doubleKeyMap0.get((String) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer(1458);
      Object object1 = doubleKeyMap0.get(object0, integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Map<Integer, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Map<Integer, Object>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, Object>, HashMap<Integer, Object>>();
      Object object0 = new Object();
      Map<Map<Integer, Object>, HashMap<Integer, Object>> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Map<HashMap<String, String>, Object>> hashMap0 = new HashMap<Integer, Map<HashMap<String, String>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, Object>(hashMap0, class0);
      Integer integer0 = new Integer(3399);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, hashMap1, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, (Object) hashMap0);
      Object object0 = doubleKeyMap0.remove(hashMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, String>, String>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put(hashMap0, hashMap1, "OK,86C>hM$)KxJ1a`");
      String string0 = doubleKeyMap0.put(hashMap0, hashMap1, "");
      assertEquals("OK,86C>hM$)KxJ1a`", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = doubleKeyMap1.get((Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      Integer integer0 = new Integer(832);
      doubleKeyMap0.put("", integer0, "");
      String string0 = doubleKeyMap0.get("", integer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<Integer, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Integer, Integer>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      Map<Integer, Integer> map0 = doubleKeyMap0.get(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
