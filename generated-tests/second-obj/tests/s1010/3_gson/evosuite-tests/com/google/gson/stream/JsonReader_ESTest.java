/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:59:15 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F;rd/D)U%vHz");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'v';
      charArray0[2] = 'j';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonReader");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N/Mt[~31");
      stringReader0.mark(4655);
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F;rd/D):;vHz");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(5);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      pipedReader0.markSupported();
      jsonReader0.setLenient(false);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("alse");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lr");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E#Y");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+mStgLp");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":Zc]O*Q93L+");
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[qiq?v8iS");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected BEGIN_ARRAY but was ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.getPath();
      jsonReader0.setLenient(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N/Mt[~31");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 4655);
      lineNumberReader0.ready();
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.reset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F;rd/D):;vHz");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N/Mt[~31");
      stringReader0.read();
      stringReader0.mark(4643);
      char[] charArray0 = new char[9];
      charArray0[5] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",8ObMA!8eRVUGM6]");
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.reset();
      jsonReader0.peeked = 13;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was END_DOCUMENT at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$VALUES");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.mark(2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonReader0.peeked = 36;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.doPeek();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lr");
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = (-1822);
      charArrayReader0.reset();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '\"';
      charArray0[2] = 'u';
      charArray0[3] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      charArrayReader0.mark('\"');
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextBoolean();
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was END_DOCUMENT at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '{';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader2 = new JsonReader(charArrayReader1);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      boolean boolean1 = jsonReader1.hasNext();
      assertFalse(jsonReader1.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(jsonReader1, jsonReader2);
      assertNotSame(jsonReader1, jsonReader0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      stringReader0.mark(5);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', 'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'l', 'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'l', 'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(108, int0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', 'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'n', 'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[dqvniq?8$S");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("48");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lr");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {';', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = 'W';
      charArray0[4] = 't';
      charArray0[6] = 't';
      charArray0[7] = 'W';
      charArray0[8] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', 'W', 't', '\u0000', 't', 'W', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', '\"', 'W', 't', '\u0000', 't', 'W', '\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = 'f';
      charArray0[3] = '\"';
      charArray0[4] = 'f';
      charArray0[5] = '&';
      charArray0[6] = '2';
      charArray0[7] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\"', 'f', '\"', 'f', '&', '2', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', 'f', '\"', 'f', '&', '2', '\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'t'}, charArray0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",8ObMA!8eRVUGM6]");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = 'T';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', 'T', '\"', '\"', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', '\"', 'T', '\"', '\"', '\"'}, charArray0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', '\"', 'T', '\"', '\"', '\"'}, charArray0);
      assertEquals(JsonToken.STRING, jsonToken0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\"', '\"', '\"', 'T', '\"', '\"', '\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = 13;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was NAME at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = 13;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      
      boolean boolean1 = jsonReader0.nextBoolean();
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Charset.forName("cetnc)bszZ^MP!");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // cetnc)bszZ^MP!
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[dqvniq?8$S");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[2] = 'u';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ndnl!r8$Z");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.beginArray();
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'R', 'R'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'R', 'R'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'R', 'R'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ndnl!r8$Z");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      assertNotNull(fileDescriptor1);
      assertFalse(fileDescriptor1.valid());
      assertFalse(fileDescriptor1.equals((Object)fileDescriptor0));
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("48");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertFalse(jsonReader0.isLenient());
      assertEquals(48.0, double0, 0.01);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.reset();
      jsonReader0.peeked = 1;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      boolean boolean2 = jsonReader0.isLenient();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("1tT5Gg{>|e;)r");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 4603);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ndnl!r8$Z");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("48");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.nextInt();
      assertFalse(jsonReader0.isLenient());
      assertEquals(48, int0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.reset();
      stringReader0.reset();
      jsonReader0.peeked = 1;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jsonReader0.peeked = 13;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NAME at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = '(';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '(';
      charArray0[6] = '(';
      charArray0[7] = '(';
      charArray0[8] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'#', '(', '\u0000', '#', '#', '(', '(', '(', '('}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'#', '(', '\u0000', '#', '#', '(', '(', '(', '('}, charArray0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(9, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'x'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'x'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'x'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'x'}, charArray0);
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark(65);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/9");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader(string0);
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = ')';
      charArray0[0] = 'X';
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",8ObMA!8eRVUGM6]");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(",8ObMA!8eRVUGM6]");
      assertNotNull(stringReader0);
      
      int int0 = 2;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",8ObMA!8eRVUGM6]");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("48");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.reset();
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("48", string0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[dqdniq?8$iS");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray0 = new char[3];
      int int0 = jsonReader0.doPeek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(3, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("1tT5Gg{>|e;)r");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 4603);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      assertNotNull(jsonReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader0.isLenient());
      assertEquals(10, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
      
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'D1||4:.J");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.nextBoolean();
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stringReader0.reset();
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'T', 'T', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'-', 'T', 'T', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = 124;
      assertFalse(jsonReader0.isLenient());
      
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[dqdniq?8$iS");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[dqdniq?8$iS");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.beginArray();
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals("$[0]", string0);
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'c', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'c', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'c', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'c', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'c', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'c', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      charArrayReader0.mark(1378);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'c', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " DbG-_O");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("48");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      long long0 = jsonReader0.nextLong();
      assertFalse(jsonReader0.isLenient());
      assertEquals(48L, long0);
      
      long long1 = stringReader0.skip((-321L));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      boolean boolean2 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      jsonReader0.peeked = 12;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean3 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NAME at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      stringReader0.mark(62);
      StringReader stringReader1 = new StringReader("JfHh:QVB(w&1|C]");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      int int0 = stringReader1.read(charArray0);
      assertNotSame(stringReader1, stringReader0);
      assertArrayEquals(new char[] {'J', 'f', 'H'}, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(3, int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'J', 'f', 'H'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'6', 'e', 'e', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'6', 'e', 'e', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("1tT5Gg{>|e;)r");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = stringReader0.markSupported();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 12 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("*/");
      assertNotNull(stringReader0);
      
      boolean boolean2 = stringReader0.markSupported();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = 12;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      jsonReader0.peeked = 16;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape sequence");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      boolean boolean0 = lineNumberReader0.ready();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean3 = lineNumberReader0.markSupported();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[3];
      charArray0[1] = ']';
      charArray0[2] = '9';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'U', 'n', 't'}, charArray0);
      assertEquals(3, int0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      try { 
        jsonReader2.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".7(/");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '.';
      charArray0[3] = '2';
      charArray0[4] = '.';
      charArray0[5] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2', '2', '.', '2', '.', '2'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'2', '2', '.', '2', '.', '2'}, charArray0);
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      EvoSuiteFile evoSuiteFile1 = null;
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("*/");
      assertNotNull(stringReader0);
      
      boolean boolean2 = stringReader0.markSupported();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[qiq?v8iS");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = '4';
      charArray0[2] = 'd';
      charArray0[3] = '#';
      charArray0[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {')', '4', 'd', '#', 'b'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {')', '4', 'd', '#', 'b'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {')', '4', 'd', '#', 'b'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '4';
      charArray0[2] = 'd';
      charArray0[3] = '#';
      charArray0[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '4', 'd', '#', 'b'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '4', 'd', '#', 'b'}, charArray0);
      
      boolean boolean0 = true;
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '4', 'd', '#', 'b'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long long0 = jsonReader0.nextLong();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '4', 'd', '#', 'b'}, charArray0);
      assertEquals(4L, long0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'\u0000', '4', 'd', '#', 'b'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("aht[B3`o+mE'");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aht[B3`o+mE'");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 13 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[6];
      StringReader stringReader0 = new StringReader("-xcJMfTGZQ). 7h4c");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(45, int0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 45);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
