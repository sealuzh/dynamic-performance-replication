/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:33:05 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-145));
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, (String) null, "1^]Hx*7P+E,7_Zv Hzu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(45);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@4ee6bcdb
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-3058), 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(716);
      int int0 = classWriter0.addUninitializedType("", 716);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1871);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat(1871);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(113);
      String string0 = "YEQL^CJ>CM\\u";
      classWriter0.visit((-1), (-1), "+A", string0, string0, (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("`H$K4A R8%z", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1353);
      classWriter0.visitAnnotation("", false);
      classWriter0.newDouble((-850));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      classWriter0.newLong((-850));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.newLong((-219L));
      classWriter0.newLong(32);
      classWriter0.newLong((-219L));
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-510), "", "StackMap", "", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-216));
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      Object object0 = label1.info;
      // Undeclared exception!
      try { 
        classWriter0.visitField(262144, (String) null, (String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-368));
      Item item0 = classWriter0.newConstItem("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2330);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      int int0 = classWriter0.newConst(double0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newField("BJ?KL}{ir", (String) null, "h1/ni0L2/1:_V!/6V)L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(43);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource(" Hz#,~4xr%X22", "%1");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-566));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.SHORT;
      assertEquals(4, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@705030d4
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("pcchQ3v7==xT", "pcchQ3v7==xT", "=]$,&PJ)IF53Gs(V\"He", 67);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777226);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      int int0 = classWriter0.newNameType("-", "-");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = classWriter0.newNameType("-", "-");
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(2, (int)integer0);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("c");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      Integer integer1 = new Integer(1625);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(1625, (int)integer1);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "RuntimeVisibleAnnotations";
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, "aAC)zbSDI$OZOS`9J(", "RuntimeVisibleAnnotations", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = Float.BYTES;
      assertEquals(4, int0);
      
      File file0 = MockFile.createTempFile("?U_EhOgzp)2S<Yy", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("?U_EhOgzp)2S<Yy0AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/?U_EhOgzp)2S<Yy0AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      int int1 = Frame.BASE_KIND;
      assertFalse(int1 == int0);
      assertEquals(267386880, int1);
      
      ClassWriter classWriter0 = new ClassWriter(31);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit(26, 26, "?U_EhOgzp)2S<Yy", "E[/K'`b-S4", (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777230);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit((-769), 16777230, "", "", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = new Item();
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(185);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitOuterClass("", "eXjQri&M<=", "eXjQri&M<=");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, "", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Item item0 = new Item();
      assertNotNull(item0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      assertNotNull(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newNameType("K.6!`4`UWfm2e%", "2FB2[}@]9wPE.-,Nx");
      assertEquals(33, classReader0.getAccess());
      assertEquals(720, int0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "W{2}ULz0tTs";
      int int0 = Double.BYTES;
      assertEquals(8, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Byte byte0 = new Byte((byte) (-118));
      assertNotNull(byte0);
      assertEquals((byte) (-118), (byte)byte0);
      
      int int1 = classWriter0.newConst(byte0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string1 = "org.apache.commons.io.filefilter.HiddenFileFilter";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("Signature", "org.apache.commons.io.filefilter.HiddenFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'Signature.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-554));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Character character0 = Character.valueOf('D');
      assertNotNull(character0);
      assertEquals('D', (char)character0);
      
      boolean boolean0 = Character.isSurrogate('g');
      assertFalse(boolean0);
      
      int int1 = classWriter0.newConst(character0);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">^VcNS7");
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(65535);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.thisName = "gEEQ;\"c8=I .";
      classWriter0.visitSource("gEEQ;\"c8=I .", "i{mg5DE1aV4");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(65535);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = new Item();
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("gEEQ;\"c8=I .");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("gEEQ;\"c8=I .");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1353);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newDouble(2);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Item item1 = classWriter0.newLong(1);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item[] itemArray0 = new Item[3];
      Double double0 = new Double(958.75);
      assertNotNull(double0);
      assertEquals(958.75, (double)double0, 0.01);
      
      classWriter0.threshold = 0;
      Item item0 = classWriter0.newConstItem(double0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Character.MAX_RADIX;
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      itemArray0[0] = item0;
      String[] stringArray0 = new String[0];
      classWriter0.visit(13, 36, "EDJ9m'+|4%9hZ0<", (String) null, (String) null, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "[~!Pnee*{*m<J";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("[~!Pnee*{*m<J", "[~!Pnee*{*m<J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: [~!Pnee*{*m<J
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addType("Synthetic");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.addType("");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2426));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.SHORT_TYPE;
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Double double0 = new Double(958.75);
      assertNotNull(double0);
      assertEquals(958.75, (double)double0, 0.01);
      
      double double1 = Double.sum(2, 2);
      assertEquals(4.0, double1, 0.01);
      
      double double2 = Double.min((-2613.50621955873), (-2613.50621955873));
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2613.50621955873), double2, 0.01);
      
      int int0 = Character.MAX_RADIX;
      assertEquals(36, int0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Type type0 = Type.getObjectType("EDJ9m'+|4%9hZ0<");
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(6, Type.FLOAT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(6, Type.FLOAT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      
      Item item1 = classWriter0.newDouble(1);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newConst(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-671);
      ClassWriter classWriter0 = new ClassWriter((-671));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-671));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1317);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addUninitializedType("", 0);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.newConst("");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int2 = classWriter0.addUninitializedType("", 1317);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      double double0 = Double.min(2, 2);
      assertEquals(2.0, double0, 0.01);
      
      Item item0 = classWriter0.newConstItem("");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newDouble(1317);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(34);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("n4IdP)7ux7[}", "EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: n4IdP)7ux7[}
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1614));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newLong(2);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1614), "", "", "", 1);
      assertNotNull(fieldVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(21);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item[] itemArray0 = new Item[1];
      Item item0 = classWriter0.newDouble(21);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      itemArray0[0] = item0;
      classWriter0.typeTable = itemArray0;
      Attribute attribute0 = new Attribute("LineNumberTable");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newDouble(21);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newInteger(21);
      assertNotNull(item2);
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("LineNumberTable", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1317);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "&59[|^x";
      int int0 = classWriter0.addUninitializedType("&59[|^x", 1317);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Float.BYTES;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Item item0 = new Item(1);
      assertNotNull(item0);
      
      int int2 = classWriter0.addUninitializedType("&59[|^x", 1317);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      double double0 = Double.min(1317, 1);
      assertEquals(1.0, double0, 0.01);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.CHAR_TYPE;
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(2, type0.getSort());
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(1, Type.BOOLEAN);
      
      // Undeclared exception!
      try { 
        Type.getType("&59[|^x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Wz4ks86(rA'wzr(", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      AnnotationVisitor annotationVisitor1 = classWriter0.visitAnnotation("[rPup!Xmx-t/,", true);
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = new Item();
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      int int1 = classWriter0.newConst(long0);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addUninitializedType("", 31);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = Float.BYTES;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = Type.DOUBLE;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, int2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      double double0 = Double.min((-11), 8);
      assertEquals((-11.0), double0, 0.01);
      
      int int3 = classWriter0.addUninitializedType("", (-797));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2, int3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Item item0 = classWriter0.newLong((-1549));
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int4 = classWriter0.addType("");
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(3, int4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int5 = classWriter0.addType("");
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(3, int5);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newDouble(1.0);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        classWriter0.visit(10, 4, (String) null, "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/java/lang/Throwable0The filter must not be null");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      assertFalse(boolean0);
      
      int int0 = 16777218;
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newFloat(16777218);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newFloat(16777218);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "";
      String string1 = "org.apache.commons.io.filefilter.HidenFileFilter";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HidenFileFilter", "org.apache.commons.io.filefilter.HidenFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'org/apache/commons/io/filefilter/HidenFileFilter.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1353);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Item item1 = classWriter0.newLong((-850));
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Float float0 = new Float((float) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      int int0 = classWriter0.newConst(float0);
      assertEquals(3, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(169);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newUTF8("J$t_EhOgzp)2,S<Yy");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      classWriter0.visitInnerClass((String) null, "", "", 16777218);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J$t_EhOgzp)2,S<Yy");
      assertFalse(boolean0);
      
      classWriter0.visitInnerClass("KYXW~fT!w!c?Thor", "[]", "", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(169);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (-523));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Boolean boolean0 = Boolean.valueOf("RuntimeInvisibleAnnotations");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(169);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", 28);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1107);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.SHORT_TYPE;
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      
      int int0 = classWriter0.newConst(type0);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      
      Item item0 = classWriter0.newClassItem("hee'B'* )%,hty#}8{");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "hee'B'* )%,hty#}8{", "Signature", "K<", "hee'B'* )%,hty#}8{");
      assertNotNull(fieldVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "L`4D{_";
      classWriter0.invalidFrames = true;
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.version = (-872);
      String string1 = "";
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1315);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addUninitializedType("", (-11));
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Float.BYTES;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = Type.DOUBLE;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, int2);
      
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character character0 = Character.valueOf('3');
      assertNotNull(character0);
      assertEquals('3', (char)character0);
      
      char char0 = Character.lowSurrogate(4);
      assertEquals('\uDC04', char0);
      
      Item item0 = classWriter0.newLong(1729L);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int3 = classWriter0.addType("InnerClasses");
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, int3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.visitOuterClass((String) null, "ScGGE2=x-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      double double0 = Double.min(1, 1);
      assertEquals(1.0, double0, 0.01);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(47);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newInteger(47);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newClassItem("Signature");
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      classWriter0.visit(16777218, 23, "org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter", (String) null, (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.DOUBLE;
      assertEquals(16777219, int0);
      
      int int1 = Type.INT;
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("b'JKFInje1EQw", ")}jX(V%!#$nGd=i;2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'b'JKFInje1EQw.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-566));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.SHORT;
      assertEquals(4, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "W{2}ULz0tTs";
      stringArray0[1] = "W{2}ULz0tTs";
      stringArray0[2] = "W{2}ULz0tTs";
      stringArray0[3] = "W{2}ULz0tTs";
      stringArray0[4] = "W{2}ULz0tTs";
      classWriter0.visit((-566), 18, "W{2}ULz0tTs", "W{2}ULz0tTs", "W{2}ULz0tTs", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@1662d382
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      double double0 = Double.min(1, 1);
      assertEquals(1.0, double0, 0.01);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitOuterClass("wQDv4oE^B`DwTE", (String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("wQDv4oE^B`DwTE");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ClassReader classReader0 = new ClassReader(byteArray0);
      assertNotNull(classReader0);
      assertEquals(0, classReader0.getAccess());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(10, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      char[] charArray0 = new char[0];
      Label[] labelArray0 = new Label[0];
      Attribute attribute1 = attribute0.read(classReader0, 2, 2, charArray0, 8, labelArray0);
      assertNotNull(attribute1);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(0, classReader0.getAccess());
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(10, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      classWriter0.visitAttribute(attribute1);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(0, classReader0.getAccess());
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(10, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      
      Item item1 = classWriter0.newInteger(0);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EnclosingMethod";
      // Undeclared exception!
      try { 
        classWriter0.visit((-382), (-1), (String) null, "wQDv4oE^B`DwTE", "EnclosingMethod", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = Integer.getInteger("Signature");
      assertNull(integer0);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitOuterClass("Signature", "ll/<hI9&Wc12|-^u", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addType("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newLong(1535L);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newInteger((-913));
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newLong(1);
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      stringArray0[1] = "LqZ7JN' biXbGAPG1";
      stringArray0[2] = "";
      stringArray0[3] = "J$t_EhOgzp)2,S<Yy";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(1, (String) null, "-", "LqZ7JN' biXbGAPG1", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`BFVvBG2x/j";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1, "", "", (String) null, stringArray0);
      assertNotNull(methodVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("", "`BFVvBG2x/j", "%dHVYM'eNprgMN", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newField("`BFVvBG2x/j", "void", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visit(16777218, (-1025), "org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter", "-", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.DOUBLE;
      assertEquals(16777219, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      classWriter0.visit(16777218, 32767, "org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter", "-", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.DOUBLE;
      assertEquals(16777219, int0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(32767, 16777218);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newClassItem("Signature");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      classWriter0.visit(32767, (-1664), "-", (String) null, "2zdvAM`:.`;m:", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.DOUBLE;
      assertEquals(16777219, int0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(16777219, 3095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(16777188);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = ClassReader.SIGNATURES;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = classWriter0.newMethod("?U_EhOgzp)2S<Yy", "f", "ESi\"2a ure", false);
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.newMethod("?U_EhOgzp)2S<Yy", "f", "ESi\"2a ure", false);
      assertTrue(int1 == int0);
      assertEquals(6, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(6);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newMethod("?U_EhOgzp)2S<Yy", "-", "Signature", false);
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(6);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newFieldItem("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter", "Signature");
      assertNotNull(item1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(6);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = Float.BYTES;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      File file0 = MockFile.createTempFile("?U_EhOgzp)2S<Yy", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("?U_EhOgzp)2S<Yy0AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/?U_EhOgzp)2S<Yy0AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", file0.toString());
      
      int int2 = Frame.BASE_KIND;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(267386880, int2);
      
      int int3 = classWriter0.newUTF8("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(12, int3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter1.newMethodItem("java/lang/Throwable", "?U_EhOgzp)2S<Yy", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", false);
      assertNotNull(item2);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter1.visitEnd();
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item3 = classWriter0.newLong(0L);
      assertNotNull(item3);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      assertNotSame(item3, item2);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNull(methodWriter1);
      
      String string1 = classWriter1.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "java/lang/Throwable");
      assertNotNull(string1);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals("java/lang/Object", string1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter2 = classWriter1.lastMethod;
      assertNull(methodWriter2);
      
      String string2 = classWriter1.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "java/lang/Object");
      assertNotNull(string2);
      assertNotSame(classWriter1, classWriter0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals("java/lang/Object", string2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("java/lang/Object", "java/lang/Object");
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter1.getMergedType(127, (-1518));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
