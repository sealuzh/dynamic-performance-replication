/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:35:46 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2876.422977548), (-2876.422977548), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init((-2876.422977548), doubleArray0, 2.791031173360063E-281);
      eventFilter0.eventOccurred((-161.18242560279714), doubleArray0, false);
      eventFilter0.init(1.0510656833648682, doubleArray0, 1.0510656833648682);
      dormandPrince54Integrator0.addEventHandler((EventHandler) eventFilter0, (-2876.422977548), (-2876.422977548), 1716);
      double double0 = dormandPrince54Integrator0.getMinReduction();
      assertEquals(0.2, double0, 0.01);
      
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.setMinReduction(0.2);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0510656833648682, 0.2, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-161.18242560279714);
      doubleArray2[1] = (double) 5;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 8;
      doubleArray2[4] = 1.0510656833648682;
      doubleArray2[5] = (double) 1716;
      doubleArray1[7] = doubleArray2;
      doubleArray1[8] = doubleArray0;
      dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray2, (-161.18242560279714));
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 795.277554;
      doubleArray0[1] = (-182.860135);
      doubleArray0[2] = (-182.860135);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-182.860135), (-2199.2013936330563), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(0);
      dormandPrince853Integrator0.setStepSizeControl(0.0, (-182.860135), 0.0, 0.0);
      dormandPrince853Integrator0.getSafety();
      dormandPrince853Integrator0.setMaxGrowth((-182.860135));
      dormandPrince853Integrator0.setMaxGrowth((-2199.2013936330563));
      dormandPrince853Integrator0.getMaxGrowth();
      double[] doubleArray1 = null;
      HighamHall54Integrator highamHall54Integrator0 = null;
      try {
        highamHall54Integrator0 = new HighamHall54Integrator(3663.1036401308984, 0, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2961.32, 10.0, (-2830.1676877474), 10.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1.687819480895996;
      double double1 = (-1131.3982318738542);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(206.66127062614575, 206.66127062614575, (-1131.3982318738542), (-290.0183335091191));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2296.20175075001);
      doubleArray0[1] = 10.0;
      HighamHall54Integrator highamHall54Integrator2 = new HighamHall54Integrator(2961.32, 1.687819480895996, doubleArray0, doubleArray0);
      highamHall54Integrator2.vecRelativeTolerance = doubleArray0;
      // Undeclared exception!
      highamHall54Integrator2.integrate(expandableStatefulODE0, (-2830.1676877474));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = (-407.39);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(206.66127062614575, 206.66127062614575, (-407.39), (-407.39));
      int int0 = 12;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 206.66127062614575);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(219.36535397378236, 1833.520854640285, 779.3503796, 779.3503796);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(35).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 219.36535397378236);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 206.66127062614575;
      double double1 = (-407.39);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(206.66127062614575, 206.66127062614575, (-407.39), (-407.39));
      int int0 = 1355;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1355).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1338.0595025));
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 206.66127062614575);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-328.85084), 779.3503796, 779.3503796, 779.3503796);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.getStepHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1.4310357570648193);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 779.3503796);
  }
}
