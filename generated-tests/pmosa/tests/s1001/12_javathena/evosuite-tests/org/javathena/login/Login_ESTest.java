/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:19:40 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Excecutable;
import org.javathena.core.data.IParse;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      MySQLConfig.setLogin_server_pw("@:d)u@sq3\"hk#{J");
      login0.getOut();
      login0.setOut((PrintWriter) null);
      ConfigurationManagement.lesslessAuth_before_save_file();
      login0.setAuth_max(0);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("R", 30, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@8090e22a
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      int int0 = login0.getAuth_num();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_denynum(9);
      login0.save_config_in_log();
      MySQLConfig.setLogin_server_id("'zLPwK2@]>pC%O8Alq");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      login0.check_ip(inetAddress0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)115;
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-16);
      Login.showTab(byteArray0);
      login0.do_initTXT();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      login0.save_config_in_log();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_denynum((-2527));
      login0.save_config_in_log();
      Login.login_log("conf/subnet_athena.conf");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      Login.mmo_auth_syncTXT();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      Login.mmo_auth_initXML();
      Login.display_title();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      Login.showTab(byteArray0);
      intArray0[1] = 100000000;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 2;
      login0.setServer_fd(intArray0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@968ba12e
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("cF}yD;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login.mmo_auth_initXML();
      Login.mmo_auth_initXML();
      Login.setPASSWORDENC((-2006));
      Login login0 = new Login();
      String string0 = "{E>778:loteeo-oI!";
      login0.setAuth_max((-893));
      login0.auth_max = (-969);
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("{E>778:loteeo-oI!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_deny("conf/subnet_athena.conf");
      login0.do_final();
      Login.End login_End0 = login0.new End();
      login0.getOut();
      login0.setOut((PrintWriter) null);
      MockThread.reset();
      MockThread.reset();
      MockThread.reset();
      MockThread.dumpStack();
      login_End0.getStackTrace();
      MockThread.getAllStackTraces();
      login_End0.run();
      Socket_data socket_data0 = new Socket_data((Socket) null, (IParse) null);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login login0 = new Login();
      int int0 = (-409);
      Socket_data socket_data0 = null;
      Login login1 = new Login();
      Login.mmo_auth_initTXT();
      login1.auth_max = 50;
      login0.save_config_in_log();
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[1] = 100000000;
      intArray0[2] = 2;
      intArray0[3] = 2000000;
      intArray0[4] = 50;
      intArray0[5] = 50;
      intArray0[6] = 2;
      ConfigurationManagement.setSubneti(intArray0);
      login0.do_initXML();
      UserManagement.setAccountIdCount(1279);
      // Undeclared exception!
      try { 
        login1.do_final();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      ConfigurationManagement.setAccess_allow("");
      ConfigurationManagement.setAccess_allownum(1);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("E#}ShMosHFj", 31040);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MySQLConfig.setLogin_server_pw("");
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      Login.setPASSWORDENC(2);
      login0.check_ip(inetAddress0);
      login0.getOut();
      login0.setOut((PrintWriter) null);
      login0.getAuth_max();
      Login.mmo_auth_syncXML();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      login0.getAuth_max();
      UserManagement.addUserTXT("conf/subnet_athena.conf", "gwV", "conf/subnet_athena.conf", 'D');
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      login0.setAuth_max(9981);
      Login.mmo_auth_syncTXT();
      int int0 = login0.check_auth_sync();
      assertEquals(9981, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login.login_log((String) null);
      Login login0 = new Login();
      int int0 = 31040;
      Login.setPASSWORDENC(31040);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      login_ConnectionListener0.close();
      login_ConnectionListener0.close();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("conf/subnet_athena.conf", 2811);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@809232ed
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      Login.mmo_auth_initXML();
      login0.check_ipmask(0, "- to ALLOW new users (with _F/_M).");
      byte[] byteArray0 = new byte[0];
      try { 
        MockInetAddress.getByAddress("", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: []
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login.getDbManagemtType();
      Login login0 = new Login();
      login0.save_config_in_log();
      MySQLConfig.setLogin_server_id("k(h`|fvrB!y x");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      login0.check_ip(inetAddress0);
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-114);
      Login.showTab(byteArray0);
      login0.do_initTXT();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      Login.auth_num = 10;
      login0.check_auth_sync();
      // Undeclared exception!
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      Login.getPASSWORDENC();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("\"7\".1K*FDC{<", 1086);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@8091620a
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      int int0 = FromChar.REQUEST_ACCOUNT_REG2;
      Login.getPASSWORDENC();
      login0.getAuth_max();
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data((Socket) null, fromChar0);
      Login.logUnknownPackets(socket_data0);
      assertNull(socket_data0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      login0.getServer_fd();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress("conf/subnet_athena.conf", (-1953388252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1953388252
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      login1.yesNoOnOffToBoolean("NO");
      int int0 = Login.mmo_auth_initTXT();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)97;
      byte byte1 = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-9);
      byte byte2 = (byte) (-109);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)35;
      byte byte3 = (byte) (-33);
      byteArray0[7] = (byte) (-33);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Login login0 = new Login();
      UserManagement.addUserTXT("PaAoc*MFXdTH", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 't');
      Login.mmo_auth_syncXML();
      InetAddress inetAddress0 = MockInetAddress.getByName("The login-server is ready (Server is listening on the port %d).");
      login0.check_ip(inetAddress0);
      login0.getLog_fp();
      int[] intArray0 = new int[2];
      intArray0[0] = 2000000;
      intArray0[1] = 2000000;
      login0.setServer_fd(intArray0);
      login0.check_ip(inetAddress0);
      login0.setAuth_max((-1));
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConfigurationManagement.setAccess_denynum(9);
      MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)74;
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-16);
      Login.showTab(byteArray0);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      login0.parse_console("help");
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      int int0 = login0.parse_console("TK:}B9QY%[");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      login0.auth_max = 86400000;
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UserManagement.addUserTXT("TK:}B9Y%", "TK:}B9Y%", "TK:}B9Y%", '^');
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      MySQLConfig.setLogin_server_db("c!v");
      login0.parse_console("l FsU");
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_allownum(10);
      ConfigurationManagement.setAccess_order(aCO0);
      int int0 = login0.parse_console("p#N=Taa$");
      assertEquals(0, int0);
      
      login0.do_initTXT();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(2);
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Login.login_log(">05D8rr0*91f9.1");
      login0.save_config_in_log();
      ConfigurationManagement.setAccess_allownum(2);
      ACO aCO0 = ACO.ALLOW_DENY;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "l)FsU");
      ConfigurationManagement.setAccess_order(aCO0);
      login0.parse_console("l)FsU");
      login0.do_initTXT();
      login0.getLog_fp();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      UserManagement.setAccountIdCount(10);
      login0.parse_console("- to ALLOW new users (with _F/_M).");
      int int0 = login0.parse_console("WmFX");
      assertEquals(0, int0);
      
      Login login1 = new Login();
      boolean boolean0 = login1.yesNoOnOffToBoolean("YES");
      assertEquals(0, login1.getAuth_max());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      login0.save_config_in_log();
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      // Undeclared exception!
      try { 
        login0.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      int int0 = login0.parse_console("alive");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Login login0 = new Login();
      FromChar fromChar0 = new FromChar();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      mockSocket0.close();
      login0.parse_admin((-1961), socket_data0, (Login) null);
      Login.setPASSWORDENC(10024);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UserManagement.addUserTXT("ID)K|c", "ID)K|c", "ID)K|c", '^');
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      login0.auth_max = (-673);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addUserTXT(".", "login_log_42", "conf/subnet_athena.conf", 'E');
      Login login1 = new Login();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        login1.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(1);
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }
}
