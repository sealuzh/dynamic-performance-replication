/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:07:54 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ONU^!u8C>");
      assertNotNull(stringReader0);
      
      int int0 = (-1381);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1381), (-1381));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[5];
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\52XF!7Cu");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup((-3062));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3061, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 928, 86, 79);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3062, javaCharStream0.bufpos);
      assertEquals('\\', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('2', char1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream0.ReInit((Reader) stringReader0, 4087, 0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[0];
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-38), (-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[1];
      stringReader0.reset();
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((-38));
      assertEquals(37, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.adjustBeginLineColumn((-1), (-38));
      assertEquals(37, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (-497), 101, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.ReInit((InputStream) pipedInputStream0, 0, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5684), (-5684));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      charArray0[0] = '\"';
      charArray0[1] = 'W';
      charArray0[2] = 'U';
      charArray0[3] = 'Y';
      charArray0[4] = 'C';
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      charArray0[5] = 'P';
      charArray0[6] = 'B';
      charArray0[7] = '%';
      charArray0[8] = 'G';
      int int1 = stringReader0.read(charArray0);
      assertTrue(int1 == int0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\"', 'W', 'U', 'Y', 'C', 'P', 'B', '%', 'G'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 4477, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
      
      JavaCharStream.hexval('0');
      StringReader stringReader0 = new StringReader("@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(8);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      javaCharStream0.ReInit((InputStream) mockFileInputStream0, 2662, (-1), 8);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 9);
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('Y', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("58B:Z~7k@AQ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 13);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('5', char0);
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      char[] charArray0 = javaCharStream0.buffer;
      assertEquals(4096, charArray0.length);
      assertNotNull(charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1455));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1455), (-2406), 15);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, (-1), 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream1.readChar();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('y', char0);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int1 = javaCharStream1.getLine();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 99, (-1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      javaCharStream2.Done();
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      javaCharStream2.ReInit((InputStream) pipedInputStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      javaCharStream2.AdjustBuffSize();
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 71, (-336), 1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream1.bufsize = 3353;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream1.adjustBeginLineColumn(93, 469);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(94, javaCharStream1.getBeginLine());
      assertEquals(469, javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.backup(13);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3339, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(94, javaCharStream1.getBeginLine());
      assertEquals(469, javaCharStream1.getColumn());
      assertEquals(93, javaCharStream1.getLine());
      assertEquals(93, javaCharStream1.getEndLine());
      assertEquals(469, javaCharStream1.getBeginColumn());
      assertEquals(469, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.UpdateLineColumn('Q');
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3339, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(94, javaCharStream1.getBeginLine());
      assertEquals(470, javaCharStream1.getColumn());
      assertEquals(94, javaCharStream1.getLine());
      assertEquals(94, javaCharStream1.getEndLine());
      assertEquals(469, javaCharStream1.getBeginColumn());
      assertEquals(470, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int1 = javaCharStream1.getEndColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(int1 == int0);
      assertEquals(3339, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(470, int1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(94, javaCharStream1.getBeginLine());
      assertEquals(470, javaCharStream1.getColumn());
      assertEquals(94, javaCharStream1.getLine());
      assertEquals(94, javaCharStream1.getEndLine());
      assertEquals(469, javaCharStream1.getBeginColumn());
      assertEquals(470, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.ReInit((Reader) stringReader1, 85, (-840), 14);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("age9xN|':T,kRvqu*X");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1090, 1090, 11);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 1090, 11);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 3179;
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3179, 3179);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3099, 3099);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = " <@PjzcK*[]-iC";
      File file0 = MockFile.createTempFile(" <@PjzcK*[]-iC", "");
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/ <@PjzcK*[]-iC0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(" <@PjzcK*[]-iC0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      int int0 = 140;
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 135, 135, 140);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/ <@PjzcK*[]-iC0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(" <@PjzcK*[]-iC0", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?(\"2rOkm@N ycHNm^g ");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('1');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-38), (-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[1];
      stringReader0.reset();
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      javaCharStream0.backup((-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.adjustBeginLineColumn((-1), (-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9TyRQiue`}");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-394), (-394), 878);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('9', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 71, 2815);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(114);
      assertEquals(3981, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(3981, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(int1 == int0);
      assertEquals(3981, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.UpdateLineColumn('3');
      assertEquals(3981, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(2815, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2815, javaCharStream0.getColumn());
      
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      stringReader0.mark(88);
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((-1184));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1183, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.adjustBeginLineColumn(114, 14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1183, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1183, javaCharStream0.bufpos);
      assertEquals('$', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      char[] charArray0 = javaCharStream0.GetSuffix(55);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1183, javaCharStream0.bufpos);
      assertEquals(55, charArray0.length);
      assertNotNull(charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(int1 == int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1183, javaCharStream0.bufpos);
      assertEquals(0, int1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-38), (-38));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn((-1), (-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1982), (-1982));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3672, 3672);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 0;
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long long0 = stringReader0.skip((-2929L));
      assertEquals(0L, long0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-937), 0, 14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int2 = (-1180);
      javaCharStream0.bufpos = (-1180);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">rD 9+.~RNqPBn");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">rD 9+.~RNqPBn");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(71);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4024, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaCharStream0.backup(114);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3910, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3911, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("},J#-z");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1422), (-1422), 605);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char char0 = '`';
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn((-400), 460);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-399), javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-399), javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      StringReader stringReader0 = new StringReader(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(stringReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-399), javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-400), 1, 4814);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-400), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-400), javaCharStream0.getLine());
      assertEquals((-400), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-400), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-400), javaCharStream0.getLine());
      assertEquals((-400), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      char[] charArray0 = javaCharStream0.GetSuffix(460);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(460, charArray0.length);
      assertNotNull(charArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-400), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-400), javaCharStream0.getLine());
      assertEquals((-400), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, int1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-400), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-400), javaCharStream0.getLine());
      assertEquals((-400), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = 0;
      javaCharStream0.adjustBeginLineColumn(0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(" column ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~ARVl&`|E9b");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\YE52XF!+C9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\\', char0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 71, 2815);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.backup(114);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3981, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3981, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.backup(87);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4008, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4008, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(83);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3925, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.UpdateLineColumn('*');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3925, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      int int0 = javaCharStream0.getColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3925, javaCharStream0.bufpos);
      assertEquals(1, int0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("y[P)4A!C$C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      char char0 = 'e';
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(114);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3981, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.backup(71);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3910, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3911, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(185, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      char[] charArray0 = javaCharStream0.buffer;
      assertEquals(4096, charArray0.length);
      assertNotNull(charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, 1778);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1472));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1), 15, 68);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1, 92, 92);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('y', char0);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream0.getLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(int1 == int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), int1);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 68, 94);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[6];
      charArray0[1] = '+';
      charArray0[2] = '_';
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
      
      StringReader stringReader1 = new StringReader("y[P)4A!C$C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("*v");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1244, (-1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.backup(90);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4005, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4005, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      
      int int1 = javaCharStream0.getEndLine();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int1 == int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4005, javaCharStream0.bufpos);
      assertEquals(0, int1);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char char0 = 'V';
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 12;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 12, 12);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      char char0 = 'M';
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      byte[] byteArray0 = new byte[2];
      javaCharStream0.backup(12);
      assertEquals(4083, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-80);
      try { 
        mockFileInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CB:z{WX");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      StringReader stringReader0 = new StringReader("\\52XF!7Cu");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((-3062));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3061, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      int int1 = JavaCharStream.hexval('3');
      assertTrue(int1 == int0);
      assertEquals(3, int1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 928, 73, 58);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3062, javaCharStream0.bufpos);
      assertEquals('\\', char0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      try { 
        JavaCharStream.hexval('$');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 4086;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 4086, 4086, 4086);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("*v");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 71, (-336), 1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.ReInit((InputStream) pipedInputStream0, 1244, (-1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream1.backup(90);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4005, javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
      
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">rD 9+.~RNqPBn");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 1, 1, 4);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      javaCharStream2.ReInit((InputStream) pipedInputStream0, (-41), 1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.backup((-1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      StringReader stringReader0 = new StringReader("r");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, 94);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 70, (-139));
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-139), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)9, (byte)120, (byte) (-5)}, byteArray0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 9, 0, (int) (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-139), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)9, (byte)120, (byte) (-5)}, byteArray0);
      
      StringReader stringReader1 = new StringReader("Invalid escape character at line ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.backup(114);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3981, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char char0 = '6';
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("+S`K\"Oas#:[d9");
      assertNotNull(stringReader0);
      
      stringReader0.mark(6);
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(43, int1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.prevCharIsCR = false;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean2 = stringReader0.markSupported();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(char1 == char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('', char1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.close();
      javaCharStream0.line = 6;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.Done();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int2 = 102;
      javaCharStream0.ReInit((Reader) stringReader0, 102, 92, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertArrayEquals(new char[] {'', ''}, charArray0);
      
      // Undeclared exception!
      try { 
        charBuffer0.put("+S`K\"Oas#:[d9", 92, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.available = (-193);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(460);
      assertEquals(3635, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(3636, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(3636, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn((-1), 460);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      StringReader stringReader0 = new StringReader(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(stringReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 460, (-1), 4069);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn((-1), 460);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      StringReader stringReader0 = new StringReader(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(stringReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 460, (-1), 4069);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(460, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(460, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals(460, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = 2741;
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2741, 2741);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = javaCharStream0.GetSuffix(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      
      long long0 = pipedInputStream0.skip((-1));
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(pipedInputStream0, pipedInputStream1);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream1, 1778, 59, 0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream1.available());
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertNotSame(pipedInputStream1, pipedInputStream0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream1, 0, 474);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream1.available());
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertNotSame(pipedInputStream1, pipedInputStream0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(pipedInputStream0, pipedInputStream1);
      
      javaCharStream0.ReInit((Reader) stringReader0, 4059, 2048, 0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(pipedInputStream0, pipedInputStream1);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-38), (-38));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      javaCharStream0.backup((-38));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader1, stringReader0);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.adjustBeginLineColumn(37, 37);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream.hexval('c');
      javaCharStream0.ReInit((Reader) stringReader1, 12, 67);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6>-G$[%r?_dPk^");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 98, 4089);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      javaCharStream0.backup(98);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3997, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn(98, 4089);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3997, javaCharStream0.bufpos);
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(4089, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(4089, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(4089, javaCharStream0.getColumn());
      
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-2663));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-38), (-38));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[1];
      stringReader0.reset();
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = 0;
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1829));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int1 = (-1224);
      javaCharStream0.backup((-1224));
      assertEquals(1223, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      int int2 = 101;
      javaCharStream0.adjustBeginLineColumn(74, 101);
      assertEquals(1223, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      byte byte0 = (byte)72;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-1), 59);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream2.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3179, 445);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(3179, (-988));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-988), javaCharStream0.getBeginColumn());
      assertEquals(3180, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals((-988), javaCharStream0.getBeginColumn());
      assertEquals(3180, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('Y', char0);
      assertEquals((-988), javaCharStream0.getBeginColumn());
      assertEquals(3180, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn((-988), 1499);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1499, javaCharStream0.getBeginColumn());
      assertEquals((-986), javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(2161);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1934, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1935, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\u008B');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\52XF!7Cu");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((-3062));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3061, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.backup(80);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2981, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1319);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream0.backup((-3062));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(6043, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6044
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
      
      StringReader stringReader0 = new StringReader("%~ @");
      assertNotNull(stringReader0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(1678);
      assertEquals(2417, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(2418, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 71, (-336), 1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.bufsize = 3353;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.backup(13);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3339, javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.UpdateLineColumn('Q');
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3339, javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-336), javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(71, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-336), javaCharStream1.getEndColumn());
      assertEquals(71, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int1 = javaCharStream1.getEndColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(int1 == int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3339, javaCharStream1.bufpos);
      assertEquals((-336), int1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-336), javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(71, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-336), javaCharStream1.getEndColumn());
      assertEquals(71, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UkqlI ");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(85, int0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 521, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"!<FP!g}NUE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\"', char0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      
      char[] charArray0 = new char[8];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      charArray0[0] = '\"';
      boolean boolean1 = stringReader0.markSupported();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = 'p';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      javaCharStream0.buffer = charArray0;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.available = (-20);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1469), (-2406), 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, (-1), 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      javaCharStream1.bufcolumn = intArray0;
      assertEquals((-1), javaCharStream1.getBeginColumn());
      
      char char0 = javaCharStream1.readChar();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals('y', char0);
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int1 = JavaCharStream.hexval('D');
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      javaCharStream0.adjustBeginLineColumn(0, 5);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "$";
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      StringReader stringReader1 = new StringReader("$");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = stringReader0.ready();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      
      stringReader0.reset();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1775), (byte)0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-77), (byte) (-8), (byte) (-1)}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-77), (byte) (-8), (byte) (-1)}, byteArray0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(5, byteArray0.length);
      assertNotNull(bufferedInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-77), (byte) (-8), (byte) (-1)}, byteArray0);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-77), (byte) (-8), (byte) (-1)}, byteArray0);
      
      bufferedInputStream1.mark((-2592));
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-77), (byte) (-8), (byte) (-1)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream1, (byte) (-8), (byte) (-77), (byte) (-1));
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-77), (byte) (-8), (byte) (-1)}, byteArray0);
      
      javaCharStream0.Done();
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte) (-77), (byte) (-8), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3134, 3134);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "$";
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn((-400), 445);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(445, javaCharStream0.getBeginColumn());
      assertEquals((-399), javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(445, javaCharStream0.getBeginColumn());
      assertEquals((-399), javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(445, javaCharStream0.getBeginColumn());
      assertEquals((-399), javaCharStream0.getBeginLine());
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals((-399), int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(445, javaCharStream0.getBeginColumn());
      assertEquals((-399), javaCharStream0.getBeginLine());
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(4124);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-29), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -28
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, 1778);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1449));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("saqjs{z/y)$,U");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("saqjs{z/y)$,U");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      javaCharStream0.ReInit((Reader) stringReader2, 92, 1661, 2951);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      int int0 = stringReader0.read();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), int0);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      javaCharStream0.Done();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6[P)4A!;$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, 73, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 86, 1778, 86);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream1.readChar();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals('6', char0);
      assertEquals(86, javaCharStream1.getBeginLine());
      assertEquals(86, javaCharStream1.getLine());
      assertEquals(1778, javaCharStream1.getColumn());
      assertEquals(1778, javaCharStream1.getBeginColumn());
      assertEquals(86, javaCharStream1.getEndLine());
      assertEquals(1778, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-38), (-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup((-38));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      int int1 = JavaCharStream.hexval('a');
      assertFalse(int1 == int0);
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 0;
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(0);
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      int int1 = 11;
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(85, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn((-1), 460);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(460, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = 53;
      javaCharStream0.ReInit((Reader) null, (-3686), 53, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int1 = (-113);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 4096, (-113));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream1.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      javaCharStream0.nextCharInd = 62;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      javaCharStream0.maxNextCharInd = 0;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, (-3028), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = 'M';
      charArray0[2] = 'o';
      charArray0[3] = '}';
      charArray0[4] = 'K';
      charArray0[5] = '|';
      charArray0[6] = 's';
      charArray0[7] = 'm';
      charArray0[8] = '^';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 1661, 788, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1469), (-2406), 15);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char char0 = 'V';
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wZs#HN?qGsBen4q-I.T");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, 927, 114);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("CPXrWIJq+E<{N9`z87L");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader1, 815, 114, (-2406));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[4] = 'f';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'f';
      StringReader stringReader0 = new StringReader("@lza2\"FSk {");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('@', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(char1 == char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('l', char1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      
      byteArrayInputStream0.mark(219);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 1465, (int) (byte)1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      
      javaCharStream0.backup(2815);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1280, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      StringReader stringReader0 = new StringReader("\\52XF!7Cu");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((-3062));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3061, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = 'p';
      javaCharStream0.buffer = charArray0;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.backup(928);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2133, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\\', char0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader0 = new StringReader(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(stringReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 460, (-1), 460);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(460, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(460, javaCharStream0.getBeginLine());
      assertEquals(460, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getColumn());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(71);
      assertEquals(4024, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(71);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream1.backup(71);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4024, javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(4025, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream1.ReInit((Reader) stringReader0, 4025, 1, 3);
      javaCharStream0.getColumn();
      assertEquals(4025, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W-$V~@1`99g.");
      assertNotNull(stringReader0);
      
      int int0 = 3;
      int int1 = 3;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, 3, 3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '_';
      charArray0[2] = '&';
      charArray0[3] = '\\';
      charArray0[4] = '3';
      charArray0[5] = '2';
      charArray0[6] = 'I';
      charArray0[7] = '^';
      int int2 = stringReader0.read(charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charArray0.length);
      assertEquals(8, int2);
      assertArrayEquals(new char[] {'W', '-', '$', 'V', '~', '@', '1', '`'}, charArray0);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('7');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4649);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0, 4649, (-1), (-1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, 0, 4649);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1453), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.backup(460);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3635, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3636, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(460, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-38), (-38));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufsize = 81;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      javaCharStream0.backup((-38));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(37, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.adjustBeginLineColumn(37, 37);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(37, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(37, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = stringReader1.markSupported();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      
      StringReader stringReader2 = new StringReader("");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      javaCharStream0.ReInit((Reader) stringReader2, 81, 81);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.adjustBeginLineColumn((-1), 460);
      javaCharStream0.adjustBeginLineColumn(460, (-1459));
      String string0 = javaCharStream0.GetImage();
      StringReader stringReader0 = new StringReader(string0);
      assertEquals((-1459), javaCharStream0.getBeginColumn());
      assertEquals(462, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1, 4, (-735));
      javaCharStream0.backup(1);
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (-557), 4);
      javaCharStream0.adjustBeginLineColumn(80, (-755));
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 76);
      javaCharStream0.backup(97);
      javaCharStream0.UpdateLineColumn(';');
      assertEquals(3998, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1, 1, 82);
      javaCharStream1.adjustBeginLineColumn(117, (-1));
      javaCharStream1.GetImage();
      StringReader stringReader1 = new StringReader("!E.;guvoZ`FnOu|G`");
      javaCharStream0.ReInit((Reader) stringReader0, (-2062), 2951, 9);
      char char0 = javaCharStream1.BeginToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals('y', char0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      stringReader0.close();
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(71);
      PipedInputStream pipedInputStream0 = new PipedInputStream(71);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaCharStream1.backup(71);
      javaCharStream0.BeginToken();
      JavaCharStream.hexval('3');
      javaCharStream0.GetImage();
      javaCharStream0.UpdateLineColumn('3');
      assertEquals(1, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char char0 = javaCharStream0.ReadByte();
      assertEquals('Y', char0);
      
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      char[] charArray0 = javaCharStream0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, 7);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1455));
      javaCharStream0.getBeginLine();
      javaCharStream0.ReInit((Reader) stringReader0, 0, (-2406), 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uY9*238VRb&%!p?a");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 2161, 2980);
      javaCharStream0.backup(4072);
      PipedInputStream pipedInputStream0 = new PipedInputStream(23);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0);
      javaCharStream1.backup(2161);
      javaCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        javaCharStream1.ReInit((Reader) null, 4086, 4072, (-2341));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(30);
      javaCharStream0.BeginToken();
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      int[] intArray0 = new int[0];
      javaCharStream1.bufcolumn = intArray0;
      int int0 = (-1761);
      // Undeclared exception!
      try { 
        javaCharStream1.adjustBeginLineColumn(460, (-1761));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JavaCharStream.hexval('F');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 15, (-1195), (-1195));
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 101, (-1295));
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">rD 9+.~RNqPBn");
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(91);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      sequenceInputStream0.mark(97);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.AdjustBuffSize();
      char[] charArray0 = javaCharStream0.GetSuffix(91);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(91, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = '_';
      PipedInputStream pipedInputStream0 = new PipedInputStream(446);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-5934), 11, (-1));
      javaCharStream2.ReInit((InputStream) pipedInputStream0, (-1), (-1));
      JavaCharStream.hexval('b');
      javaCharStream1.FillBuff();
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream3.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      stringReader0.close();
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(71);
      PipedInputStream pipedInputStream0 = new PipedInputStream(71);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaCharStream1.backup(71);
      javaCharStream0.BeginToken();
      JavaCharStream.hexval('3');
      javaCharStream1.GetImage();
      javaCharStream1.UpdateLineColumn('3');
      assertEquals(4024, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      javaCharStream0.GetSuffix(0);
      JavaCharStream.hexval('4');
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      StringReader stringReader1 = new StringReader("y[P)4A!C$C");
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.bufpos = 1;
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(2048);
      javaCharStream0.BeginToken();
      javaCharStream0.AdjustBuffSize();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1673), 2161);
      javaCharStream1.Done();
      // Undeclared exception!
      try { 
        javaCharStream1.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.adjustBeginLineColumn((-400), 430);
      javaCharStream0.GetImage();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.adjustBeginLineColumn(2958, 8);
      javaCharStream0.GetImage();
      javaCharStream0.getBeginLine();
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\YE52XF!+C9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup((-3062));
      assertEquals(3061, javaCharStream0.bufpos);
      
      javaCharStream0.backup((-1411));
      javaCharStream0.BeginToken();
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.adjustBeginLineColumn(704, 218);
      javaCharStream0.AdjustBuffSize();
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaCharStream.hexval('8');
      MockFile mockFile0 = new MockFile("", "");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      javaCharStream0.GetSuffix(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, 7);
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReadByte();
      JavaCharStream.hexval('E');
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-38), (-38));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~K]3Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('M');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      int int0 = (-400);
      int int1 = 460;
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 460, 4063, 4063);
      javaCharStream1.backup(4107);
      // Undeclared exception!
      try { 
        javaCharStream1.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('f');
      StringReader stringReader0 = new StringReader("ey1;n");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.GetImage();
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      stringReader0.close();
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      javaCharStream0.GetSuffix(0);
      JavaCharStream.hexval('4');
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (-1), 69, 1088);
      javaCharStream1.ReInit((InputStream) pipedInputStream0, 4, 7);
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JavaCharStream.hexval('F');
      JavaCharStream.hexval('F');
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4 yVdC");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 0;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.getBeginLine();
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 71, 71, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      javaCharStream0.backup(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringReader stringReader1 = new StringReader("saqjs{z/y)$,U");
      StringReader stringReader2 = new StringReader("saqjs{z/y)$,U");
      stringReader2.skip((-1L));
      javaCharStream0.getBeginColumn();
      javaCharStream0.ReInit((Reader) stringReader2, 92, 1661, 2951);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1), 0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      int int1 = (-4986);
      javaCharStream0.backup((-2092));
      javaCharStream0.ReInit((InputStream) pipedInputStream0, (-4986), 0, (-4986));
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, (-3028), 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = 'M';
      charArray0[2] = 'o';
      charArray0[3] = '}';
      charArray0[4] = 'K';
      charArray0[5] = '|';
      charArray0[6] = 's';
      charArray0[7] = 'm';
      charArray0[8] = '^';
      javaCharStream0.nextCharBuf = charArray0;
      StringReader stringReader0 = new StringReader("");
      javaCharStream0.ReInit((Reader) stringReader0, 1661, 788, 0);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-3224));
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      boolean boolean0 = false;
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader1 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      javaCharStream1.ReInit((InputStream) pipedInputStream0, (-1469), (-1469));
      javaCharStream1.ReInit((Reader) stringReader1, 80, (-293), 15);
      javaCharStream0.getBeginLine();
      javaCharStream1.ReInit((Reader) stringReader0, (-1469), 2, 15);
      try { 
        JavaCharStream.hexval('%');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 1462);
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2481), 4069);
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-2481));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      char char0 = 'V';
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      javaCharStream0.GetSuffix(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip(0L);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, 7);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1449));
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, (-1449), (-2406), 15);
      javaCharStream0.getBeginLine();
      javaCharStream0.readChar();
      javaCharStream0.ExpandBuff(true);
      assertEquals((-1449), javaCharStream0.getBeginLine());
      
      javaCharStream0.ExpandBuff(false);
      assertEquals(15, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JavaCharStream.hexval('4');
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, 4, 65);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vnCF>3|/&>u$q,IV");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 132, 132, 132);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\YE52XF!+C9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup((-3062));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 3, 3061, 70);
      javaCharStream1.readChar();
      javaCharStream1.adjustBeginLineColumn(801, 2930);
      char char0 = javaCharStream1.ReadByte();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals('E', char0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, 927, 114);
      InputStream inputStream0 = null;
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      javaCharStream0.GetSuffix(0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 0, (-1544));
      javaCharStream0.ReInit((Reader) stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      javaCharStream1.ReInit((Reader) stringReader0, 282, (-1544), 282);
      javaCharStream0.getBeginLine();
      JavaCharStream javaCharStream2 = new JavaCharStream(sequenceInputStream0);
      javaCharStream2.ReInit((Reader) stringReader0, 72, 0, 1);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("");
      stringReader1.ready();
      stringReader1.reset();
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.backup(114);
      javaCharStream0.inputStream = (Reader) stringReader0;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.backup(71);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(3911, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3179, 445);
      stringReader0.markSupported();
      javaCharStream0.adjustBeginLineColumn(3179, (-988));
      javaCharStream0.GetImage();
      javaCharStream0.ReadByte();
      javaCharStream0.adjustBeginLineColumn((-988), 1499);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.backup(90);
      javaCharStream0.AdjustBuffSize();
      int int0 = javaCharStream0.getEndLine();
      assertEquals(4005, javaCharStream0.bufpos);
      assertEquals((-987), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UkqlI ");
      stringReader0.read();
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 521, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 97, 97);
      javaCharStream0.backup(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1740);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.getLine();
      assertEquals(4095, javaCharStream0.bufpos);
      
      javaCharStream1.AdjustBuffSize();
      assertEquals((-1), javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1616, (-3756), (-938));
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a0P");
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '@';
      stringReader0.read(charArray0, 1, 1);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.adjustBeginLineColumn(3858, 3858);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      javaCharStream0.available = (int) (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)65;
      try { 
        JavaCharStream.hexval('\'');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaCharStream.hexval('0');
      MockFile mockFile0 = new MockFile("tu[VADDEPe*LySz", "tu[VADDEPe*LySz");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3303), (-3303), 0);
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn((-3303), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = '_';
      charArray0[3] = 'X';
      charArray0[4] = '.';
      charArray0[5] = '6';
      stringReader0.read(charArray0);
      stringReader0.reset();
      javaCharStream0.GetSuffix(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip(0L);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1778, 0, 7);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1449));
      javaCharStream0.ReInit((Reader) stringReader0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringReader0.read(charBuffer0);
      javaCharStream0.ReInit((Reader) stringReader0, (-1449), (-2406), 15);
      javaCharStream0.getBeginLine();
      javaCharStream0.readChar();
      javaCharStream0.ExpandBuff(true);
      assertEquals(15, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">rD 9+.~RNqPBn");
      StringReader stringReader1 = new StringReader(".");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M4:Av?zV-jUGgiz;");
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, 2885, 2885);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(0);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      byteArrayInputStream0.skip((byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      javaCharStream0.ReInit((InputStream) dataInputStream0, 1, (-1011), 1);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 95, (-2304));
      javaCharStream0.adjustBeginLineColumn((-2304), (-2304));
      assertEquals((-2304), javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-38), (-38));
      stringReader0.reset();
      javaCharStream0.backup((-38));
      stringReader1.reset();
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JavaCharStream.hexval('8');
      StringReader stringReader0 = new StringReader(" column ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 9, 8, 67);
      int[] intArray0 = new int[5];
      intArray0[0] = 67;
      intArray0[1] = 9;
      intArray0[2] = 97;
      intArray0[3] = 9;
      intArray0[4] = (-1);
      javaCharStream0.ReInit((Reader) stringReader0, (-1), 3163, 3163);
      javaCharStream0.bufline = intArray0;
      javaCharStream0.readChar();
      javaCharStream0.getLine();
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Y");
      int int0 = (-21);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 100, (-21), 100);
      javaCharStream0.readChar();
      javaCharStream0.getLine();
      javaCharStream0.AdjustBuffSize();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char char0 = ']';
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">rD 9+.~RNqPBn");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.close();
      javaCharStream0.backup(2161);
      javaCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, 1363, 1363, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(71);
      javaCharStream0.backup(114);
      javaCharStream0.BeginToken();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.AdjustBuffSize();
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(185, javaCharStream0.bufpos);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">yv'k");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char char0 = javaCharStream0.ReadByte();
      assertEquals('>', char0);
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals('y', char1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn((-1), 460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1455), 0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 11, 0, (-1455));
      int int0 = 0;
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 11, 0, (-1455));
      int int1 = 15;
      javaCharStream0.ReInit((Reader) stringReader0, (-2096), 1257, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = (-1204);
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, (-4362), (-1204));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      int int0 = 114;
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.adjustBeginLineColumn((-424), 460);
      javaCharStream0.GetImage();
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3970, 60);
      javaCharStream0.backup(88);
      javaCharStream0.adjustBeginLineColumn(3970, 88);
      JavaCharStream.hexval('D');
      int int0 = javaCharStream0.getEndLine();
      assertEquals(4007, javaCharStream0.bufpos);
      assertEquals(3970, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[P)4A!C$C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      javaCharStream0.GetSuffix(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip(0L);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (-497), 101, 0);
      javaCharStream1.ReInit((InputStream) pipedInputStream0, 1089, 1089);
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char char0 = 'T';
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      javaCharStream0.backup(0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('u');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4095
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      int int0 = 0;
      javaCharStream0.adjustBeginLineColumn((-400), 445);
      javaCharStream0.GetImage();
      int int1 = 0;
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.adjustBeginLineColumn((-1), 460);
      javaCharStream0.backup(1);
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1438, 92);
      StringReader stringReader0 = new StringReader("hI");
      javaCharStream0.ReInit((Reader) stringReader0, 1438, 92, 1);
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3179, 3179);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("Y");
      stringReader1.reset();
      javaCharStream0.GetSuffix(67);
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReadByte();
      javaCharStream0.getBeginLine();
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, 927, 114);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
}
