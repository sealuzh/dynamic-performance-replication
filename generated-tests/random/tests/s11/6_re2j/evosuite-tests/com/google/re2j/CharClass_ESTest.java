/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:41:27 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 443;
      intArray0[1] = 66640;
      intArray0[2] = (-1);
      intArray0[3] = 382;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {443, 66640, (-1), 382}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-1), 382, 443, 66640}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {383, 442, 66641, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 442, 443, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.appendRange(0, 66640);
      assertArrayEquals(new int[] {0, 442, 0, 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3146;
      intArray0[1] = (-5090);
      intArray0[2] = 1349;
      intArray0[3] = (-234);
      intArray0[4] = 8554;
      intArray0[5] = 852;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3146, (-5090), 1349, (-234), 8554, 852}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1349, 281);
      assertArrayEquals(new int[] {3146, (-5090), 1349, (-234), 8554, 852}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[8][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, (-2));
      assertArrayEquals(new int[] {3146, (-5090), 1349, (-234), 8554, 852}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      int[] intArray2 = charClass1.toArray();
      assertArrayEquals(new int[] {3146, (-5090), 1349, (-234), 8554, 852}, intArray0);
      assertArrayEquals(new int[] {3146, (-5090), 1349, (-234), 8554, 852, 1349, 1349, 0, 1114111}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(10, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass3 = charClass0.appendClass(intArray2);
      assertArrayEquals(new int[] {3146, (-5090), 1349, (-234), 8554, 852}, intArray0);
      assertArrayEquals(new int[] {3146, (-5090), 1349, (-234), 8554, 852, 1349, 1349, 0, 1114111}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(10, intArray2.length);
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(65073, 1);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-239);
      intArray0[2] = 65073;
      CharClass charClass2 = charClass1.appendLiteral(50, 1);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {1, (-239), 65073, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      intArray0[3] = 1;
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, (-239));
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass0.appendRange(1, 65073);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass5.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      
      CharClass charClass8 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      
      CharClass charClass9 = charClass8.appendLiteral(50, 1114111);
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      
      CharClass charClass10 = charClass8.negateClass();
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      
      CharClass charClass11 = charClass5.appendRange(1, 722);
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass11);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass10);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      
      CharClass charClass12 = charClass8.cleanClass();
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass12);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass12);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 65073;
      intArray1[1] = 722;
      intArray1[2] = 50;
      intArray1[3] = 1;
      intArray1[4] = 50;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 65073;
      CharClass charClass13 = charClass4.appendClassWithSign(intArray1, 722);
      assertArrayEquals(new int[] {65073, 722, 50, 1, 50, 1, 1, 65073}, intArray1);
      assertArrayEquals(new int[] {1, (-239), 65073, 1}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass13);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass10);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass7);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-251);
      intArray0[1] = 9;
      intArray0[2] = 119163;
      intArray0[3] = 1861;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-251), 9, 119163, 1861}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-251), 9, 119163, 1861}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[8][0];
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1341);
      intArray2[1] = 9;
      intArray2[2] = 1861;
      intArray2[3] = (-251);
      intArray2[4] = 1861;
      intArray2[5] = 119163;
      intArray2[6] = 119163;
      intArray2[7] = 751;
      intArray2[8] = 119163;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 1861;
      intArray3[1] = 751;
      intArray3[2] = (-1341);
      intArray3[3] = (-251);
      intArray3[4] = 9;
      intArray3[5] = (-656);
      intArray3[6] = (-251);
      intArray3[7] = (-251);
      intArray1[1] = intArray3;
      intArray1[2] = intArray0;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      
      intArray4[0] = 9;
      intArray4[1] = (-656);
      intArray4[2] = 1;
      intArray4[3] = (-251);
      intArray4[4] = (-656);
      intArray1[3] = intArray4;
      intArray1[4] = intArray0;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 1;
      intArray5[1] = (-656);
      intArray5[2] = (-1341);
      intArray1[5] = intArray5;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 7530);
      assertArrayEquals(new int[] {(-251), 9, 119163, 1861}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray5));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 11790;
      intArray0[1] = (-8773728);
      intArray0[2] = (-1393);
      int int0 = (-8703266);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {11790, (-8773728), (-1393), 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {11790, (-8773728), (-1393), 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      intArray0[3] = (-8703266);
      intArray0[4] = 1655;
      intArray0[5] = 1114110;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2424);
      intArray0[1] = 611;
      intArray0[2] = 66640;
      intArray0[3] = 2778;
      intArray0[4] = 3292;
      intArray0[5] = 2448;
      intArray0[6] = 1270;
      intArray0[7] = (-1324);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-2424), 611, 66640, 2778, 3292, 2448, 1270, (-1324)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 66640);
      assertArrayEquals(new int[] {(-2424), 611, 66640, 2778, 3292, 2448, 1270, (-1324)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {(-2424), 611, 66640, 2778, 3292, 2448, 1270, (-1324)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 2448);
      assertArrayEquals(new int[] {(-2424), 611, 66640, 2778, 3292, 2448, 1270, (-1324)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      
      CharClass charClass5 = charClass4.appendLiteral((-1879), 92);
      assertArrayEquals(new int[] {(-2424), 611, 66640, 2778, 3292, 2448, 1270, (-1324)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-923), (-923));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = charClass1.toArray();
      assertArrayEquals(new int[] {(-923), (-923)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-923));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(899, (-909));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange((-1111), 756);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 899;
      intArray0[1] = 756;
      intArray0[2] = (-909);
      intArray0[3] = (-1381);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {899, 756, (-909), (-1381)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendFoldedRange(899, (-1381));
      assertArrayEquals(new int[] {899, 756, (-909), (-1381)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass5.appendRange((-1381), (-909));
      assertArrayEquals(new int[] {899, 756, (-909), (-1381)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 66640;
      intArray2[1] = 93;
      CharClass charClass2 = charClass0.appendClass(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 0, 0, 0, 0}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 0, 0, 0, 0}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[2] = 2;
      intArray2[3] = 6435;
      intArray2[4] = (-1081);
      intArray2[5] = 64;
      CharClass charClass4 = charClass0.appendClassWithSign(intArray2, 64324);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 2, 6435, (-1081), 64}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass5 = charClass4.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 2, 6435, (-1081), 64}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass5);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass6 = charClass5.appendRange(66640, 66640);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 2, 6435, (-1081), 64}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass6);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass7 = charClass5.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 2, 6435, (-1081), 64}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass7);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass8 = charClass7.appendTable(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 2, 6435, (-1081), 64}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass9 = charClass5.appendClass(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 2, 6435, (-1081), 64}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass9);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      String string0 = charClass0.toString();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[0xfffffbc7-0x1923 0x10450 0x10450-0x5d 0xfffffbc7-0x1923]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass10 = charClass4.appendTableWithSign(intArray1, 3325);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {66640, 93, 2, 6435, (-1081), 64}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotNull(charClass10);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass3);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2406;
      intArray0[2] = 2;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2406);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 66513;
      intArray2[3] = 0;
      intArray2[4] = (-1961);
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = 0;
      intArray1[3] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-1961);
      intArray3[1] = 66513;
      intArray3[2] = 66513;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 8287;
      CharClass charClass2 = charClass1.appendRange(789, 8287);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 8287;
      intArray1[1] = (-290);
      intArray1[2] = 789;
      intArray1[3] = 789;
      intArray1[4] = 789;
      intArray0[0] = intArray1;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      String string0 = charClass1.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1255);
      intArray0[3] = 0;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 3294);
      assertArrayEquals(new int[] {0, 0, (-1255), 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 0, (-1255), 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-1255), 127199);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      CharClass charClass4 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendLiteral((-218), (-4150));
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass3.appendClass(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = charClass6.toString();
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals("[0xfffffb19-0x1f0df]", string0);
      assertEquals(2, intArray1.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      charClass1.appendFoldedRange(0, 42124);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendLiteral(91, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 91;
      intArray0[3] = (-1);
      intArray0[4] = 91;
      intArray0[5] = 91;
      intArray0[6] = 91;
      intArray0[7] = 91;
      intArray0[8] = 604;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 120071;
      intArray0[1] = 2928;
      intArray0[2] = (-590);
      intArray0[3] = (-2695);
      intArray0[4] = 2914;
      intArray0[5] = 1755;
      intArray0[6] = (-34);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {120071, 2928, (-590), (-2695), 2914, 1755, (-34)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-2420877), 8615);
      assertArrayEquals(new int[] {120071, 2928, (-590), (-2695), 2914, 1755, (-34)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {120071, 2928, (-590), (-2695), 2914, 1755, (-34)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendRange(2914, 64);
      assertArrayEquals(new int[] {120071, 2928, (-590), (-2695), 2914, 1755, (-34)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      
      String string0 = charClass3.toString();
      assertArrayEquals(new int[] {120071, 2928, (-590), (-2695), 2914, 1755, (-34)}, intArray0);
      assertEquals("[0x1d507-0xb70 0xfffffdb2-0xfffff579 0xb62-0x6db 0xffffffde-0xffdb0f73 0xffdb0f73-0x0 0x10ffff-0x0]", string0);
      assertEquals(7, intArray0.length);
      assertNotNull(string0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      
      int int0 = 65;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 1178;
      intArray1[1] = (-2415906);
      intArray1[2] = 64324;
      intArray1[3] = 2914;
      intArray1[4] = (-1);
      intArray1[5] = 65;
      intArray1[6] = (-790);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-790);
      intArray2[1] = 2914;
      intArray2[2] = 2914;
      intArray2[3] = 65;
      intArray2[4] = 2914;
      intArray2[5] = (-1);
      intArray2[6] = 65;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-790);
      intArray3[1] = 65;
      intArray3[2] = (-1);
      intArray3[3] = 2914;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 2914;
      intArray4[1] = (-2415906);
      intArray4[2] = (-1);
      intArray4[3] = (-1);
      intArray4[4] = 64324;
      intArray4[5] = 1178;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2914;
      int int0 = 25;
      intArray5[1] = 25;
      intArray5[2] = 96;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = (-1);
      intArray6[1] = 1178;
      intArray6[2] = (-3530);
      intArray6[3] = 2914;
      intArray6[4] = 25;
      intArray6[5] = (-790);
      intArray6[6] = (-2415906);
      intArray6[7] = 64324;
      intArray0[5] = intArray6;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 891;
      intArray0[1] = (-2422534);
      intArray0[2] = 932;
      intArray0[3] = 7088;
      intArray0[4] = (-2527);
      intArray0[5] = 2;
      intArray0[6] = 2422;
      intArray0[7] = (-2430818);
      String string0 = CharClass.charClassToString(intArray0, (-2430818));
      assertArrayEquals(new int[] {891, (-2422534), 932, 7088, (-2527), 2, 2422, (-2430818)}, intArray0);
      assertEquals("[]", string0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 489;
      intArray0[1] = (-2190);
      intArray0[2] = (-327020);
      intArray0[3] = (-214);
      intArray0[4] = 2128;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {489, (-2190), (-327020), (-214), 2128}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange(93, 2);
      assertArrayEquals(new int[] {489, (-2190), (-327020), (-214), 2128}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {489, (-2190), (-327020), (-214), 1114111}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      
      // Undeclared exception!
      try { 
        charClass2.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1236;
      intArray0[1] = (-2419220);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1236, (-2419220)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1236, 1236);
      assertArrayEquals(new int[] {1236, (-2419220)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1236, (-2419220)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray1 = new int[2][4];
      intArray1[0] = intArray0;
      String string0 = charClass2.toString();
      assertArrayEquals(new int[] {1236, (-2419220)}, intArray0);
      assertEquals("[0x4d4-0xffdb15ec 0x4d4-0x4d5 0x4d4-0xffdb15ec]", string0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[8];
      intArray0[0] = (-2437446);
      intArray0[1] = (-2437446);
      intArray0[2] = 3089;
      intArray0[3] = 3316;
      intArray0[4] = 2575;
      intArray0[5] = 961;
      intArray0[6] = (-2427504);
      intArray0[7] = (-2704);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 3316);
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 6683);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass4.appendTable(intArray1);
      CharClass charClass6 = charClass5.appendTable(intArray1);
      charClass5.appendTable(intArray1);
      // Undeclared exception!
      charClass6.appendFoldedRange(961, 2928);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[9][9];
      int[] intArray1 = new int[9];
      intArray1[0] = 43447;
      intArray1[1] = (-1156);
      intArray1[2] = (-2783);
      intArray1[3] = (-724);
      intArray1[4] = (-2434132);
      intArray1[5] = (-1126);
      intArray1[6] = (-4042);
      intArray1[7] = (-2437447);
      intArray1[8] = 4;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = (-2783);
      intArray2[1] = (-1126);
      intArray2[2] = (-1156);
      intArray2[3] = (-724);
      intArray2[4] = (-2437447);
      intArray2[5] = (-2434132);
      intArray2[6] = (-2425848);
      intArray2[7] = (-2437447);
      intArray2[8] = (-4042);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = (-1156);
      intArray3[1] = (-2434132);
      intArray3[2] = (-4042);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 43447;
      intArray4[1] = (-2434132);
      intArray4[2] = (-724);
      intArray4[3] = (-2434132);
      intArray4[4] = 43447;
      intArray4[5] = (-2425848);
      intArray4[6] = (-4042);
      intArray4[7] = (-2437447);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      intArray6[0] = (-2437447);
      intArray6[1] = 4;
      intArray6[2] = (-1156);
      intArray6[3] = (-157);
      intArray6[4] = (-2434132);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      intArray7[0] = (-2434132);
      intArray7[1] = (-2434132);
      intArray7[2] = (-2783);
      intArray7[3] = (-2437447);
      intArray7[4] = (-157);
      intArray7[5] = (-1634);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      intArray8[0] = (-1126);
      intArray8[1] = 4;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      intArray9[0] = 43447;
      intArray9[1] = (-2783);
      intArray9[2] = (-2424191);
      intArray9[3] = (-2437447);
      intArray9[4] = (-2425848);
      intArray9[5] = (-1126);
      intArray9[6] = (-157);
      intArray0[8] = intArray9;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-2783));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 5740;
      intArray0[1] = 573;
      intArray0[2] = (-1949);
      intArray0[3] = (-2420876);
      intArray0[4] = 1;
      intArray0[5] = (-2425848);
      intArray0[6] = 4;
      intArray0[7] = 1315;
      CharClass.charClassToString(intArray0, (-2425848));
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendClass(intArray0);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass3.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1271);
      intArray0[1] = (-2437446);
      intArray0[2] = 2401;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-3174));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
