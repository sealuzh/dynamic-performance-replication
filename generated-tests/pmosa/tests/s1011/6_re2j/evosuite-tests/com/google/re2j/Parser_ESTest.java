/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:07:46 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("+.r2n(7e", (-2016));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1639);
      String string0 = "(?P<";
      try { 
        Parser.parse("(?P<", (-1639));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("q(?i~", 2428);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?i~`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("9(", 624);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `9(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      regexp0.equals((Object) null);
      regexp0.toString();
      try { 
        Parser.parse("(<", (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-1596);
      String string0 = "(?P<";
      try { 
        Parser.parse("(?P<", (-1596));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("(", (-2683));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1596);
      try { 
        Parser.parse("+Q7m`", (-1596));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 209;
      try { 
        Parser.parse("wwDb^,2q:Bl(fgj{M.", 209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `wwDb^,2q:Bl(fgj{M.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "{)*D;V";
      try { 
        Parser.parse("{)*D;V", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{", 68);
      regexp0.toString();
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 68, (-452));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{=", 17);
      String string0 = regexp0.toString();
      assertEquals("(?i:\\{=)", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 64;
      Regexp regexp0 = Parser.parse("invalid repeat count", 64);
      int int1 = 1023;
      regexp0.max = 1023;
      Parser parser0 = new Parser("invalid repeat count", 0);
      Parser.parse("Other_Math", 0);
      String string0 = "P7u6$]Lv6#Tx";
      Parser.parse("P7u6$]Lv6#Tx", 0);
      Regexp regexp1 = Parser.parse("invalid repeat count", (-1026));
      int int2 = (-4553);
      Parser.parse("invalid repeat count", (-4553));
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      Regexp regexp2 = Parser.parse("invalid repeat count", 45);
      regexp2.name = "invalid repeat count";
      regexpArray0[6] = regexp2;
      regexp1.reinit();
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-4553), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4553
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^G00-x{10FFFF}]", (-1776));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      regexp0.equals(regexp_Op0);
      regexp0.toString();
      Regexp regexp1 = Parser.parse("|", (-1596));
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Parser.subarray(regexpArray0, 104, 104);
      try { 
        Parser.parse("|*~$sM-Z\"J?6]}T[", 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("M|", 577);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|ph+!", (-771));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("b|gS", 4673);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4|", (-328));
      Parser parser0 = new Parser("B@tUuqsW}+l;i", (-328));
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 45, 36);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|U", 109);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      int int0 = 1366;
      Regexp regexp3 = Parser.parse("missing closing )", 1366);
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp5 = new Regexp(regexp_Op2);
      regexpArray0[4] = regexp5;
      try { 
        Parser.parse("missing closing )", 1613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Parser.parse(")24i+x<YklkaX~gn", (-1596));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Parser parser0 = new Parser("+zt\">-XwX-VE4RV", (-942));
      Parser.parse("$.H|zoFwLn'::Y.3>", 12336);
      Parser.parse("+zt\">-XwX-VE4RV", (-942));
      Parser.parse("+zt\">-XwX-VE4RV", (-942));
      Parser.parse("+zt\">-XwX-VE4RV", (-942));
      Regexp regexp0 = Parser.parse("$.H|zoFwLn'::Y.3>", 0);
      Parser parser1 = new Parser("", 26);
      Parser.parse("+zt\">-XwX-VE4RV", 49);
      Parser.parse("Braille", (-1596));
      Regexp regexp1 = Parser.parse("$.H|zoFwLn'::Y.3>", 33);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "trailing backslash at end of expression";
      int int0 = 209;
      Parser.parse("trailing backslash at end of expression", 209);
      String string1 = "[::";
      int int1 = 80;
      try { 
        Parser.parse("[::", 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[::`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "\\pP";
      int int0 = 209;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = Parser.parse("pP", 1369);
      regexp0.equals(regexp_Op0);
      String string1 = regexp0.toString();
      assertEquals("(?i:PP)", string1);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 608;
      try { 
        Parser.parse("(?(?-s:.)Hx7f|zoFwLn'::Y(?-s:.)3>", 608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vA?*pvu~L yj<l=!xY$", (-194));
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp1;
      regexp1.toString();
      Parser.parse("h`k>g}94OL", 0);
      Parser.parse("(?:)", (-1596));
      Parser.parse(";q|+oa/GP", (-194));
      Parser parser0 = new Parser("{1HrFC", 0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 40981, (-194));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", (-1375));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-1776));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = new Parser("D=;7^f^g;~FQ=S?ra", (-2959));
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("D=;7^f^g;~FQ=S?ra", (-2959));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("D=;7^f^g;~FQ=S?ra", (-2959));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      Parser.parse("^x00-x{10FFFF}", (-2959));
      Parser.parse("^x00-x{10FFFF}", 109);
      Parser.parse("Ar=", (-2959));
      int int0 = 102;
      Parser.parse("5J/In#EBf", 32);
      Parser.parse("-l4", 102);
      try { 
        Parser.parse("?k28>XM`JAAG'shR", 113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 41);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser.parse("^x0-xK10FFFFq", 689);
      String string0 = "\\.+*?()|[]{}\\K^$";
      int int0 = 64;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Parser.parse("^e7Ft^^M_4l\"d+fM>|D", 262);
      Parser.parse("uP=tJnvZB|#/%0", 922);
      Regexp regexp1 = Parser.parse("^7avDrk5Z?Nw+]^", (-36));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", 585);
      String string0 = regexp0.toString();
      assertEquals("(?i:S)", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Canadian_Aboriginal", 80);
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      regexp0.equals(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.toString();
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 80);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = new Parser("[::]", 193);
      Regexp regexp0 = Parser.parse("[::]", 193);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Parser.parse("[A-*=Z&.]CKb", (-2976));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `A-*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-607);
      Parser.parse("\u0004", (-607));
      Regexp[] regexpArray0 = null;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser.parse("'gtI4\u0005,sf/W", 84);
      String string0 = "Ogham";
      int int0 = 8139;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "!\\5@<`*U!Or&g";
      int int0 = (-580);
      Parser.parse("!\u0005@<`*U!Or&g", (-580));
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-8);
      Parser parser0 = new Parser("MuXOVHk)4,V", (-8));
      String string0 = "\\p\\5,sf/W";
      Parser.parse("p\u0005,sf/W", (-8));
      Parser parser1 = new Parser(string0, int0);
      Regexp[] regexpArray0 = null;
      int int1 = (-1738);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = new Parser("Canadian_Aboriginal", 101);
      Regexp regexp0 = Parser.parse("e$9>$1aUd_?", 101);
      Regexp regexp1 = Parser.parse("C", 109);
      Regexp regexp2 = Parser.parse("Canadian_Aboriginal", 109);
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp0);
      Regexp regexp4 = Parser.parse("-l4", 101);
      Regexp regexp5 = Parser.parse("-l4", 19);
      assertFalse(regexp5.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vA?*pvu~L yj<l=!xY$", (-194));
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp1;
      regexp1.toString();
      Parser.parse("h`k>g}94OL", 0);
      Parser.parse("(?:)", (-1596));
      Parser.parse(";q|+oa/GP", (-194));
      Parser.parse("{1HrFC", (-1596));
      Parser parser0 = new Parser(";q|+oa/GP", 45);
      try { 
        Parser.parse("[:j", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:j`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 364;
      Parser parser0 = new Parser("o{9#", 364);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("o{9#", 364);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = null;
      try {
        regexp3 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Parser parser0 = new Parser("pP", (-1824));
      Parser.parse("pP", (-1824));
      Parser parser1 = new Parser("pMQ|l>", (-366));
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser.parse("pP", 209);
      Regexp regexp0 = Parser.parse("Hex_Digit", 209);
      regexp0.toString();
      Regexp regexp1 = Parser.parse("|@Q", 209);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":N3ei}$vy&1kxdOlt", 80);
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      regexp0.equals(regexp_Op0);
      String string0 = null;
      int int0 = 2479;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = new Parser("", 283);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("", 283);
      regexpArray0[0] = regexp0;
      Parser.parse("Jd0$ L*r1+n|L", 0);
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp1;
      Parser.parse("", 283);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp3 = new Regexp(regexp_Op1);
      try { 
        Parser.parse("[", 1396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = new Parser("p", 100);
      Parser.parse("p", 99);
      int int0 = 109;
      String string0 = "\\C";
      int int1 = 1601;
      Parser.parse("C", 1601);
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser.parse("Canadian_Aboriginal", 80);
      Regexp regexp0 = Parser.parse("KvD_=Q`+F~FbveDIw", 912);
      Parser.parse("/w9G5{c{", 912);
      Regexp regexp1 = Parser.parse("C", (-1899));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 209;
      Parser.parse("pP", 209);
      Parser.parse("pP", 209);
      String string0 = "{1HrFC";
      Parser.parse("P:", 209);
      int int1 = 45;
      Parser parser0 = new Parser(string0, int0);
      int int2 = 485;
      int int3 = 688;
      Regexp[] regexpArray0 = null;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Canadian_Aboriginal", 80);
      Parser.parse("Mc", 67);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = Parser.parse("[:^cntrl:]", 1601);
      assertFalse(regexp3.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "+zt\">-XwX-VE4RV";
      Parser.parse("^x00-x{10FFFF}", 711);
      try { 
        Parser.parse(".j*?()0[]}$", 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]}$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$.H|zoFwLn'::Y.3>", 580);
      String string0 = regexp0.toString();
      assertEquals("$(?-s:.)H\\x7f|zoFwLn'::Y(?-s:.)3>", string0);
      
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp1 = Parser.parse("$(?-s:.)Hx7f|zoFwLn'::Y(?-s:.)3>", 42725);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", (-63));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "(?-s";
      int int0 = (-3227);
      try { 
        Parser.parse("(?-s", (-3227));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "|";
      String string1 = "\\P\\x00-\\x{10FFFF}";
      Parser.parse("1D*()w\rP0?rvH", 9);
      Regexp[] regexpArray0 = new Regexp[9];
      int int0 = 880;
      Regexp regexp0 = Parser.parse("UF.;^~2X~L", 880);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("Px00-x{10FFFF}", 880);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      String string2 = "wf2\"J\\Z";
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\Z`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser.parse("co6", 99);
      Regexp[] regexpArray0 = new Regexp[6];
      String string0 = "ZWe|$r`&:jHh6)";
      try { 
        Parser.parse("ZWe|$r`&:jHh6)", 3632);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 109);
      Regexp regexp1 = new Regexp(regexp0);
      Parser parser0 = new Parser("^x00-x{10FFFF}", 109);
      Parser.parse("4rs3BiRWX0zrug", 109);
      Regexp regexp2 = Parser.parse("^x00-x{10FFFF}", 127744);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 116);
      Parser.parse("4rs3BiRWX0zrug", 116);
      Regexp regexp1 = Parser.parse("^x00-x{10FFFF}", 32);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "(?(?-s:.)H\\x7f|zoFwLn'::Y(?-s:.)3>";
      try { 
        Parser.parse("(?(?-s:.)Hx7f|zoFwLn'::Y(?-s:.)3>", 608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Canadian_Aboriginal", 80);
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = Parser.parse("]UiK\fb<", 80);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 68;
      String string0 = "\\4";
      Regexp regexp0 = Parser.parse("\u0004", 68);
      regexp0.toString();
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 724;
      Parser.parse("^x00-xK10FFFFq", 724);
      String string0 = "\\.+*?()|[]{}\\K^$";
      int int1 = 64;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Canadian_Aboriginal", (-2975));
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      regexp0.equals(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.toString();
      Regexp regexp1 = Parser.parse("z", (-2975));
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp2;
      Regexp regexp3 = new Regexp(regexp0.op);
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp1;
      Regexp regexp4 = new Regexp(regexp1);
      regexp4.cap = 92;
      regexpArray0[6] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1298, (-1543));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = new Parser("\n", 120);
      Parser.parse("\n", 12593);
      Regexp regexp0 = Parser.parse("\n", 182);
      regexp0.toString();
      Regexp regexp1 = Parser.parse("\n", 120);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexp0.toString();
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      Parser.subarray(regexpArray0, 120, 120);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2445), 12593);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2445
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 201);
      Parser parser0 = new Parser("^<00-x{10FFFF}", 201);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = Parser.parse("D", (-3245));
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d|U", 7141);
      Regexp regexp1 = Parser.parse("d|U", 76);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Parser.parse("1^[^{TFLwwB~$", 7677);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^{TFLwwB~$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("/e\u0000;", 9388);
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      regexp0.op = regexp_Op0;
      regexp0.toString();
      int int0 = 7677;
      regexp0.max = 9388;
      Parser.parse("/e\u0000;", 7677);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 64, 8336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("/\u0000;", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = new Parser("invalid nested repetition operator", 36);
      Regexp regexp0 = Parser.parse(">y?{5{Ny", 36);
      Parser.parse("invalid nested repetition operator", 124);
      Regexp regexp1 = Parser.parse("\u0000", 36);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      String string0 = "\\A";
      Regexp regexp2 = Parser.parse("A", 6744);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("A", (-1485));
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      regexp4.reinit();
      regexp3.flags = 6744;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[4] = regexp5;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1485), (-1485));
      Parser.parse("A", (-1485));
      String string1 = "[:^graph:]";
      Regexp regexp6 = Parser.parse("[:^graph:]", (-1485));
      regexp3.equals(regexp6);
      Parser parser0 = new Parser("A", 120);
      regexp3.max = 45;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 6744, 109);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = new Parser("c", 100);
      Regexp regexp0 = Parser.parse("NPfqRK*4{|]|JL", 76);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?(?-s:.)Hx7f|zoFwLn':Y(?s:.)3>", 373);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(?-s:.)Hx7f|zoFwLn':Y(?s:.)3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Parser.parse("\t", 120);
      Parser.parse("\t", 120);
      Parser parser0 = new Parser("\t", 181);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      regexp0.max = (-1713);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexpArray0[3] = regexp3;
      String string0 = "%&n!\\a8~mu";
      regexp0.min = (-1854);
      regexp3.flags = 12443;
      Regexp regexp4 = Parser.parse("%&n!a8~mu", 2261);
      regexpArray0[4] = regexp4;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 2261, 2261);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 2261, 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 11084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 12;
      Parser parser0 = new Parser("stack underflow", 12);
      Parser.parse("Phags_Pa", 12);
      Regexp[] regexpArray0 = new Regexp[2];
      int int1 = 65913;
      try { 
        Parser.parse("{S5%{!i@(z7[-Zh['0l", 65913);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-Zh['0l`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      try { 
        Parser.parse("[:-Z-gTRP", (-2019));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `[:-Z-gTRP`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 236);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Parser.parse("8lc<Yiv\u0001Q($", (-2247));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `8lc<Yiv\u0001Q($`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 12;
      String string0 = "Phags_Pa";
      Parser.parse("Phags_Pa", 12);
      Regexp[] regexpArray0 = new Regexp[2];
      try { 
        Parser.parse("{S5%{!i@(z7[-Zh['0l", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-Zh['0l`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PL", (-2875));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", 64);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 64, 1991);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = new Parser("CHAR_CLASS", (-580));
      Parser.parse("CHAR_CLASS", (-580));
      int int0 = (-1870);
      Parser.parse("(N", (-1870));
      Parser.parse("u*2SrPtk>qL dN#*5Nd", (-580));
      Parser.parse("invalid repeat count", 76);
      int int1 = (-3772);
      Parser.parse("3}I9^NcQ#a3n&v", (-3772));
      Parser.parse("invalid character class", (-580));
      try { 
        Parser.parse(".\"_Gy]?B(>%isL", (-580));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `.\"_Gy]?B(>%isL`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp regexp0 = Parser.parse("k7MrSW|e=GbV{48qu", 65);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("EC{97vr9", 760);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "hQ\\6cR1Ij+";
      Parser parser0 = new Parser("hQ\u0006cR1Ij+", 125);
      Parser.parse("hQ\u0006cR1Ij+", 824);
      int int0 = 70;
      Parser.parse(string0, int0);
      int int1 = (-2379);
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "hQ\\6cR1Ij+";
      Parser parser0 = new Parser("hQ\u0006cR1Ij+", 125);
      try { 
        Parser.parse("&*&I|q@gY\"2d=[b<LN-", 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[b<LN-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Parser.parse(",t6\u0000(Q|6SRv9", 265);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `,t6\u0000(Q|6SRv9`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 209;
      Parser.parse("\bfpP", 209);
      Parser.parse("\bfpP", 209);
      String string0 = "{1HrFC";
      Regexp regexp0 = Parser.parse("{1HrFC", 209);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 64, 4353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("&K##,|wL\u0002q", (-2480));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int0 = (-844);
      try { 
        Parser.parse("Y\"CO{-=N(x|C|e3", (-844));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Y\"CO{-=N(x|C|e3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser.parse("[:\u0000-x{10FF}]", 288);
      Parser parser0 = new Parser("/o+aJ,;!K)k^)I;GvY", 288);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 716);
      Regexp regexp1 = Parser.parse("(?-m:$)", 3705);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 3705, 3705);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "\\P{Zim=";
      Parser parser0 = new Parser("P{Zim=", (-259));
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("P{Zim=", (-259));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int0 = (-2061);
      Regexp regexp2 = Parser.parse(string0, int0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexpArray0[1]);
      regexpArray0[2] = regexp3;
      int int1 = 128563;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P{Zim=", (-259));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4e[Q]T`", 1709);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4e[Q]T`", 49);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Parser.parse("L00%J (\u0007j", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `L00%J (\u0007j`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser parser0 = new Parser("1c${!:2AN`9,z@f", 2591);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      int int0 = (-1236);
      Regexp regexp3 = Parser.parse("[::]", (-1236));
      regexpArray0[2] = regexp3;
      Regexp regexp4 = null;
      try {
        regexp4 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4[Q]`", 1700);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("_g?rP|_S1kAWDF", (-3380));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("_g?rP|_S1kAWDF", (-4603));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0003`\u0007;", (-63));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">C<bP^{4}2Vbgh7zD", (-1068));
      Parser parser0 = new Parser(">C<bP^{4}2Vbgh7zD", (-1068));
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp1 = Parser.parse(":aff+r'i Ehg", (-1316));
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 96, (-1068));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
