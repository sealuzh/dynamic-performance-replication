/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:37:44 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2832.26642;
      doubleArray1[1] = 0.964;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 4734.45;
      doubleArray1[4] = (-52.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-52.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 2832.26642;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2150.5245303600022;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-4.376425430785615);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 0.83;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2150.31;
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(2, 2, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-289.42363745450643);
      doubleArray1[2] = 2.8867396816513534E-15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.8867396816513534E-15;
      doubleArray2[1] = 2.8867396816513534E-15;
      doubleArray2[2] = 2.8867396816513534E-15;
      doubleArray2[3] = 2.8867396816513534E-15;
      doubleArray2[4] = 2.8867396816513534E-15;
      doubleArray2[5] = (-289.42363745450643);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix1);
      eigenDecompositor0.decompose();
      assertEquals((-289.42363745450643), rowMajorSparseMatrix1.min(), 0.01);
      assertTrue(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(8);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(8, 8);
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(2, 2, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-14, 0.0, (double)2, 2.0, (double)8).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix1.toColumnMajorSparseMatrix();
      denseMatrix0.updateColumn(2, vectorFunction0);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, sparseMatrix1);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix1);
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(denseMatrix0);
      Random.setNextRandom(1932735283);
      eigenDecompositor0.applicableTo(matrix0);
      eigenDecompositor0.applicableTo(matrix0);
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertTrue(denseMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2150.31;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2150.31;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2150.31;
      doubleArray1[1] = (-288.034481);
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = (-288.034481);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2150.31;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = (-288.034481);
      doubleArray3[4] = 2.0;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      assertEquals(2150.31, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals((-288.034481), rowMajorSparseMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(8, 8);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 3, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, (-0.49941955836074065), (double)2, (double)8, (double)8).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.toColumnMajorSparseMatrix();
      denseMatrix0.updateColumn(3, vectorFunction0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, sparseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(matrix0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.decompose();
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertTrue(denseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2150.31;
      doubleArray1[1] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2150.31;
      doubleArray2[2] = 2150.31;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = (-52.0);
      doubleArray2[5] = 2.0;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      assertEquals(2150.31, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-288.034481);
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = (-288.034481);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      Random.setNextRandom((-689));
      boolean boolean0 = eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2172.8001746994933;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[2] = (-2152.31);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix.diagonal(8, 8);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 8;
      doubleArray2[1] = (double) 8;
      doubleArray2[2] = (double) 8;
      doubleArray2[3] = (double) 8;
      doubleArray2[4] = (double) 8;
      doubleArray2[5] = (double) 8;
      doubleArray2[6] = 2.0;
      doubleArray2[7] = (double) 8;
      doubleArray2[8] = 2.0;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1318.1407607473);
      doubleArray3[1] = (double) 8;
      doubleArray3[2] = 2.0;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      assertEquals(0.6666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(8.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2150.31;
      doubleArray1[1] = 2150.31;
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = (-288.034481);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2150.31;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = (-288.034481);
      doubleArray3[4] = 2.0;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.matrix = (Matrix) rowMajorSparseMatrix0;
      eigenDecompositor0.matrix = (Matrix) rowMajorSparseMatrix0;
      eigenDecompositor0.decompose();
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      Random.setNextRandom((-680));
      Random.setNextRandom((-2271));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(30, 30);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray1);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.matrix = (Matrix) rowMajorSparseMatrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2150.31;
      doubleArray1[2] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 2.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      boolean boolean0 = eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2150.31;
      doubleArray1[2] = (-28.14118527826966);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-28.14118527826966);
      doubleArray2[2] = (-28.14118527826966);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      assertEquals(2150.31, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.6666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals((-28.14118527826966), rowMajorSparseMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2150.31;
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom(33L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(12, 12, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }
}
