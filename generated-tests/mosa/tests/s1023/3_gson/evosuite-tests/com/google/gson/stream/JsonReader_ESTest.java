/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:00:26 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.Reader;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":Ja9}");
      StringReader stringReader1 = new StringReader(":Ja9}");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TDK/:X5v]TZ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]Sa9V");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0!\"K[r :6z9M3P");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 15;
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      String string0 = jsonReader0.nextString();
      assertEquals("11", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      StringReader stringReader0 = new StringReader("4ty8ahXlXC:2\"/C%o|");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("com.google.gson.stream.JsonToken", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected ':'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_OBJECT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      charArrayReader0.ready();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected name");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("");
      charset0.encode("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l7Ddl");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+fC/dt_m");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l7Ddl");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#%dL?B-k<fn@0]l|");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+fC/dt_m");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("+fC", string0);
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(PZ3D)~77D^bWim^lm");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("(PZ3D)~77D^bWim^lm", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 19 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      double double0 = jsonReader1.nextDouble();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(jsonReader1.isLenient());
      assertEquals(66.0, double0, 0.01);
      assertNotSame(jsonReader1, jsonReader0);
      
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      
      jsonReader2.close();
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(jsonReader2.isLenient());
      assertNotSame(jsonReader2, jsonReader1);
      assertNotSame(jsonReader2, jsonReader0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_OBJECT");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(PZ3D)~77D^bWim^lm");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("(PZ3D)~77D^bWim^lm", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 19 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l7Ddl");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (-249);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      charArrayReader0.mark(58);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0!\"K[r :6z9M3P");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H-B>");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8[JPEvmYDrg`o^OT");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("8", string0);
      
      String string1 = jsonReader0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 2 path $", string1);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
      
      long long0 = jsonReader0.nextLong();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertEquals(66L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      long long0 = jsonReader0.nextLong();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertEquals(66L, long0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '}';
      charArray0[4] = '+';
      charArray0[5] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '6', '6', '}', '+', '-', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '6', '6', '}', '+', '-', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'-', '6', '6', '}', '+', '-', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NUMBER at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "\\u";
      StringReader stringReader0 = new StringReader(string0);
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = true;
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '7';
      charArray1[1] = ',';
      charArray1[2] = 'o';
      charArray1[3] = 'a';
      charArray1[4] = 'y';
      charArray1[5] = 'U';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'7', ',', 'o', 'a', 'y', 'U'}, charArray1);
      assertNotNull(charArrayReader1);
      
      boolean boolean0 = charArrayReader1.ready();
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'7', ',', 'o', 'a', 'y', 'U'}, charArray1);
      assertTrue(boolean0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      StringReader stringReader0 = new StringReader("BEGIN_OBJECT");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'7', ',', 'o', 'a', 'y', 'U'}, charArray1);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'7', ',', 'o', 'a', 'y', 'U'}, charArray1);
      assertNotNull(charArrayReader2);
      
      String string0 = jsonReader0.toString();
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'7', ',', 'o', 'a', 'y', 'U'}, charArray1);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("30k_]TVYV.`jQ_}w");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)3);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("30k_", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'.', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'.', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l7Ddl");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (-2457);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertNotNull(charArrayReader1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;syId");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("^", string0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[13];
      StringReader stringReader0 = new StringReader("BEGIU_OBJECT");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("$", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      
      charArray0[1] = '5';
      charArray0[5] = '5';
      charArray0[6] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'5', '5', '\u0000', '\u0000', '\u0000', '5', 'm'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'5', '5', '\u0000', '\u0000', '\u0000', '5', 'm'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'5', '5', '\u0000', '\u0000', '\u0000', '5', 'm'}, charArray0);
      assertEquals(53, int0);
      
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader("t{L<?ZVQ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = true;
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)114, (byte)114}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)114, (byte)114}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(3, byteArrayInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InputStreamReader inputStreamReader1 = new InputStreamReader(byteArrayInputStream0);
      assertFalse(inputStreamReader1.equals((Object)inputStreamReader0));
      assertArrayEquals(new byte[] {(byte)84, (byte)114, (byte)114}, byteArray0);
      assertNotNull(inputStreamReader1);
      assertEquals(3, byteArrayInputStream0.available());
      
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader1, 114);
      assertFalse(inputStreamReader1.equals((Object)inputStreamReader0));
      assertArrayEquals(new byte[] {(byte)84, (byte)114, (byte)114}, byteArray0);
      assertNotNull(bufferedReader0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertArrayEquals(new byte[] {(byte)84, (byte)114, (byte)114}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertArrayEquals(new byte[] {(byte)84, (byte)114, (byte)114}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertNotSame(inputStreamReader0, inputStreamReader1);
      
      String string0 = jsonReader0.nextString();
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertArrayEquals(new byte[] {(byte)84, (byte)114, (byte)114}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertEquals("Trr", string0);
      assertNotSame(inputStreamReader0, inputStreamReader1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{?~N<>G");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (-3089);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",iEj");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '<';
      charArray0[2] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'F', '<', '<'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'F', '<', '<'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'F', '<', '<'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("H-B>");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.beginArray();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = '.';
      charArray0[2] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {')', '.', '\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {')', '.', '\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {')', '.', '\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.nextInt();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertEquals(66, int0);
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = jsonReader0.doPeek();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertEquals(17, int2);
      
      String string0 = jsonReader0.toString();
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 3 path $", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(charArrayReader1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '['}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (-1804);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '['}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '['}, charArray0);
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = 606;
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte)12}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte)12}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(3, byteArrayInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte)12}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte)12}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[7] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)0, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)0, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)12, (byte)0, (byte)12, (byte)12, (byte)0, (byte)12}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+fC/dt_m");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'M';
      charArray0[2] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'S', 'M', 'r'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'S', 'M', 'r'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'S', 'M', 'r'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'S', 'M', 'r'}, charArray0);
      assertEquals(83, int0);
      
      StringReader stringReader1 = new StringReader("(i?&@}j5yGnuuY*,");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      int int1 = stringReader0.read(charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'+', '', 'f'}, charArray0);
      assertEquals(3, int1);
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("QE X");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      long long0 = stringReader2.skip(2301L);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(4L, long0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      jsonReader1.setLenient(true);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(jsonReader1.isLenient());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(jsonReader1, jsonReader0);
      
      String string0 = jsonReader1.nextString();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(string0);
      assertTrue(jsonReader1.isLenient());
      assertEquals("(i?&@", string0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(jsonReader1, jsonReader0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("io&VMOB ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string1 = jsonReader0.nextString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(jsonReader0.isLenient());
      assertEquals("io&VMOB", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#%dL?B-k<fn@0]l|");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 18 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"5k");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;@yId");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JsonReader jsonReader1 = new JsonReader(lineNumberReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.setLenient(true);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      
      String string0 = jsonReader1.nextString();
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(string0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader1.isLenient());
      assertEquals("^", string0);
      assertNotSame(jsonReader1, jsonReader0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSON forbids NaN and infinities: ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("JSON", string0);
      
      String string1 = jsonReader0.getPath();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(jsonReader0.isLenient());
      assertEquals("$", string1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'0', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'0', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'0', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      int int0 = jsonReader0.nextInt();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'0', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertEquals(0, int0);
      assertNotSame(charArrayReader0, charArrayReader1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("\"5k");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.setLenient(true);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(inputStreamReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonReader1);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(jsonReader1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;@yId");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JsonReader jsonReader1 = new JsonReader(lineNumberReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.setLenient(true);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      
      jsonReader0.setLenient(true);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=WB");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new byte[] {(byte)34, (byte)34}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0', '0', 'g'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'0', '0', 'g'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'[', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 3 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-9), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("4ty8ahXlXC:2\"/C%o|");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("4ty8ahXlXC", string0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertNotNull(charArrayReader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      boolean boolean1 = lineNumberReader0.markSupported();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(boolean1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertNotNull(jsonReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      double double0 = jsonReader0.nextDouble();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\u0000', '6'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader0.isLenient());
      assertEquals(6.0, double0, 0.01);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(17, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader1 = new InputStreamReader(byteArrayInputStream0);
      assertFalse(inputStreamReader1.equals((Object)inputStreamReader0));
      assertNotNull(inputStreamReader1);
      assertEquals(17, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertNotNull(jsonReader0);
      assertEquals(17, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertEquals(17, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertNotSame(inputStreamReader0, inputStreamReader1);
      
      jsonReader0.skipValue();
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertNotSame(inputStreamReader0, inputStreamReader1);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(inputStreamReader0.equals((Object)inputStreamReader1));
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean0);
      assertNotSame(inputStreamReader0, inputStreamReader1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-20);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte)0, (byte)114, (byte)10, (byte)84}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte)0, (byte)114, (byte)10, (byte)84}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0, (byte)114);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte)0, (byte)114, (byte)10, (byte)84}, byteArray0);
      assertNotNull(bufferedReader0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte)0, (byte)114, (byte)10, (byte)84}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte)0, (byte)114, (byte)10, (byte)84}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20), (byte)0, (byte)114, (byte)10, (byte)84}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertEquals("\u0000\uFFFD\u0000r", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'g';
      charArray0[2] = ',';
      charArray0[3] = '';
      charArray0[4] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'G', 'g', ',', '', '4'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'G', 'g', ',', '', '4'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'G', 'g', ',', '', '4'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'G', 'g', ',', '', '4'}, charArray0);
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-1), (byte)7, (byte)42, (byte)7}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-1), (byte)7, (byte)42, (byte)7}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-1), (byte)7, (byte)42, (byte)7}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)16, (byte) (-19), (byte) (-105), (byte)61, (byte) (-123), (byte)9}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)16, (byte) (-19), (byte) (-105), (byte)61, (byte) (-123), (byte)9}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(7, byteArrayInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)16, (byte) (-19), (byte) (-105), (byte)61, (byte) (-123), (byte)9}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)16, (byte) (-19), (byte) (-105), (byte)61, (byte) (-123), (byte)9}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new byte[] {(byte) (-55), (byte)16, (byte) (-19), (byte) (-105), (byte)61, (byte) (-123), (byte)9}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+fC/dt_m");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertNotNull(charArrayReader1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("BY-->7:");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("BY-->7:", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      int int0 = charArrayReader1.read(charBuffer0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("Y-->7:", charBuffer0.toString());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertEquals(1, int0);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jsonReader0.setLenient(true);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '}';
      charArray0[2] = 'D';
      charArray0[3] = '0';
      charArray0[4] = 'c';
      charArray0[5] = '8';
      charArray0[6] = '|';
      charArray0[7] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'G', '}', 'D', '0', 'c', '8', '|', 'e'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'G', '}', 'D', '0', 'c', '8', '|', 'e'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      long long0 = charArrayReader0.skip((-3699L));
      assertArrayEquals(new char[] {'G', '}', 'D', '0', 'c', '8', '|', 'e'}, charArray0);
      assertEquals(0L, long0);
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'G', '}', 'D', '0', 'c', '8', '|', 'e'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'G', '}', 'D', '0', 'c', '8', '|', 'e'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'G', '}', 'D', '0', 'c', '8', '|', 'e'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)0, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)0, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)0, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)0, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)0, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)0, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'd';
      charArray0[2] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertNotNull(charArrayReader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      
      ByteBuffer byteBuffer1 = charset0.encode("");
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer1.toString());
      assertNotSame(byteBuffer1, byteBuffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'd';
      charArray0[2] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'd', '\''}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\'', 'd', '\''}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\'', 'd', '\''}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'a';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '=';
      charArray0[5] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'C', 'a', '2', '2', '=', 'n'}, charArray0);
      assertNotNull(charArrayReader0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'C';
      charArray1[1] = 'p';
      charArray1[2] = 'a';
      charArray1[3] = 'n';
      charArray1[4] = 'H';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'C', 'p', 'a', 'n', 'H'}, charArray1);
      assertNotNull(charArrayReader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'C', 'a', '2', '2', '=', 'n'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'C', 'a', '2', '2', '=', 'n'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.nextNull();
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)34, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)9, (byte)34, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)9, (byte)34, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new byte[] {(byte)9, (byte)34, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.peeked;
      assertArrayEquals(new byte[] {(byte)9, (byte)34, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertEquals(0, int0);
      
      jsonReader0.skipValue();
      assertArrayEquals(new byte[] {(byte)9, (byte)34, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '[', '[', '[', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '[', '[', '[', '['}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '[', '[', '[', '['}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'\u0000', '[', '[', '[', '['}, charArray0);
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '[';
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-20);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0000', '['}, charArray0);
      assertNotNull(charArrayReader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0000', '['}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0000', '['}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'd';
      charArray0[2] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertNotNull(charArrayReader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 4408);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 's'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'd';
      charArray0[2] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[2] = '[';
      charArray0[2] = '[';
      charArray0[2] = '[';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated array at line 1 column 4 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      assertEquals(9, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)34;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)34, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)34, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)34, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertNotNull(jsonReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(inputStreamReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new byte[] {(byte)34, (byte)14, (byte)34, (byte)0, (byte)0, (byte)14, (byte)34, (byte)14}, byteArray0);
      assertNotNull(jsonReader1);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(jsonReader1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'd';
      charArray0[2] = 'm';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\'', 'd', 'm'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
