/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:03:31 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("7eOr=v]:y&xdk8a");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, 0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '*';
      charArray0[2] = ';';
      charArray0[3] = '&';
      charArray0[4] = 'z';
      classReader0.getInterfaces();
      charArray0[5] = '&';
      charArray0[6] = 's';
      charArray0[7] = 'q';
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.getItem((-2206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2206
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)9, 16777219);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream0.skip((-842L));
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(dataInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.cr = classReader0;
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(510, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) classAdapter0, 132);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(43);
      ClassWriter classWriter1 = new ClassWriter(434);
      classReader0.accept((ClassVisitor) classWriter1, 10);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '*';
      charArray0[2] = ';';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Object");
      charArray0[3] = '&';
      ClassWriter classWriter0 = new ClassWriter(927);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 5370);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
      ClassWriter classWriter0 = new ClassWriter(534);
      classReader0.accept((ClassVisitor) classWriter0, 131072);
      assertEquals(534, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader0.header);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '*';
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 2);
      charArray0[2] = ';';
      charArray0[3] = '&';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      charArray0[4] = 'z';
      classReader0.getInterfaces();
      charArray0[5] = 'v';
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      int int0 = classReader1.readUnsignedShort(3);
      assertEquals(48640, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = '*';
      charArray0[2] = '/';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(760);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 760);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(927);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, 758);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassReader classReader1 = new ClassReader(classReader0.b, 1903, 1903);
      ClassWriter classWriter1 = null;
      try {
        classWriter1 = new ClassWriter(classReader1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6144
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(182);
      classReader0.copyPool(classWriter0);
      classReader0.getInterfaces();
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      int int0 = classReader1.readByte(584);
      assertEquals(110, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      ClassReader classReader1 = new ClassReader(classReader0.b, 927, 833);
      assertEquals(937, classReader1.header);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter((-2579));
      classReader1.accept((ClassVisitor) classWriter0, 377);
      ClassWriter classWriter1 = new ClassWriter(8);
      classReader1.accept((ClassVisitor) classWriter1, 2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter(1903);
      classReader0.accept((ClassVisitor) classWriter1, 7);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Type");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-3368));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      classReader0.accept((ClassVisitor) classWriter0, 8);
      ClassReader classReader1 = new ClassReader(classReader0.b, 33, (-1385));
      assertEquals(259, classReader1.header);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
      ClassWriter classWriter0 = new ClassWriter(1);
      char[] charArray0 = new char[4];
      classReader0.getInterfaces();
      charArray0[0] = 'w';
      charArray0[1] = 'a';
      charArray0[2] = '{';
      charArray0[3] = 'F';
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      classReader1.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader1.accept((ClassVisitor) classWriter0, 2);
      classReader0.getClassName();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader0.header);
      
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      assertEquals(19569, classReader1.header);
      
      String string0 = classReader1.getClassName();
      assertEquals("java/lang/Class", string0);
      
      String string1 = classReader1.getSuperName();
      assertEquals("java/lang/Object", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.MethodWriter");
      ClassReader classReader1 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader1, 1);
      classReader0.accept((ClassVisitor) classWriter0, 63);
      ClassWriter classWriter1 = new ClassWriter(63);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      classReader0.accept((ClassVisitor) classAdapter0, (-131));
      ClassWriter classWriter2 = new ClassWriter(927);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("Synthetic");
      int int0 = 240;
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'q';
      charArray0[2] = '*';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = ' ';
      charArray0[6] = ';';
      Label[] labelArray0 = new Label[3];
      Label label0 = classReader1.readLabel(1, labelArray0);
      Label label1 = label0.next;
      labelArray0[0] = null;
      Label label2 = label0.next;
      labelArray0[1] = null;
      Label label3 = classReader0.readLabel(10, labelArray0);
      labelArray0[2] = label3;
      Attribute attribute1 = attribute0.read(classReader1, classReader1.SKIP_CODE, int0, charArray0, classWriter0.COMPUTE_FRAMES, labelArray0);
      attributeArray0[0] = attribute1;
      int int1 = 512;
      classReader0.accept((ClassVisitor) classWriter2, attributeArray0, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertEquals(510, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter((-369));
      classReader0.accept((ClassVisitor) classWriter0, (-1033));
      int int0 = classReader0.readInt(1);
      assertEquals((-21316096), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader1.accept((ClassVisitor) classWriter0, 8);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      classReader1.accept((ClassVisitor) classWriter0, 8);
      int int0 = 907;
      classReader1.readByte(int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter0, (-886));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(classReader1, 19569);
      classReader1.accept((ClassVisitor) classWriter0, classReader0.EXPAND_FRAMES);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader1.accept((ClassVisitor) classWriter0, 32);
      String string0 = classReader0.getSuperName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 745
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(8);
      classWriter0.cr = classReader0;
      classReader0.accept((ClassVisitor) classWriter0, 1);
      int int0 = classReader0.getAccess();
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "java/lang/Class";
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      int int0 = (-429);
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = ']';
      charArray0[2] = 'Z';
      charArray0[3] = '[';
      charArray0[4] = '.';
      charArray0[5] = '@';
      charArray0[6] = '+';
      charArray0[7] = 's';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(128, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1000);
      classReader0.copyPool(classWriter0);
      // Undeclared exception!
      try { 
        classReader1.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classReader0.accept((ClassVisitor) classWriter0, (-453));
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'K';
      charArray0[2] = 'y';
      charArray0[3] = 'I';
      charArray0[4] = 'l';
      charArray0[5] = '.';
      charArray0[6] = 'S';
      charArray0[7] = 'w';
      charArray0[8] = '^';
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'y';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        classReader0.readConst(64, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(classReader1, 181);
      classReader0.copyPool(classWriter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassReader classReader1 = new ClassReader("wheel.asm.Label");
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      // Undeclared exception!
      try { 
        classReader1.readConst(69, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
