/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:31:44 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<PipedInputStream> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<PipedInputStream>((ObjectConstructor<PipedInputStream>) null, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      reflectiveTypeAdapterFactory_Adapter0.toJson(pipedInputStream0);
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Type> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Type>((ObjectConstructor<Type>) null, hashMap0);
      JsonElement jsonElement0 = reflectiveTypeAdapterFactory_Adapter0.toJsonTree((Type) null);
      reflectiveTypeAdapterFactory_Adapter0.fromJsonTree(jsonElement0);
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Excluder excluder1 = excluder0.withVersion((-1.0));
      assertFalse(excluder1.equals((Object)excluder0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Object> class0 = Object.class;
      Boolean.valueOf(true);
      TypeToken.get(class0);
      Class<InputStream> class1 = InputStream.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) class1, (Type) class1);
      // Undeclared exception!
      try { 
        jsonElement0.getAsByte();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = gson0.toString();
      Class<Type> class0 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(string0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Register an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      EvoSuiteFile evoSuiteFile0 = null;
      typeToken0.toString();
      typeToken0.toString();
      gson0.excluder();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeToken0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Type> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Type>((ObjectConstructor<Type>) null, hashMap0);
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      Gson gson1 = new Gson();
      int[] intArray0 = new int[1];
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Class<Integer> class1 = Integer.TYPE;
      Gson gson2 = new Gson();
      excluder1.disableInnerClassSerialization();
      Gson gson3 = new Gson();
      TypeToken<Integer> typeToken0 = TypeToken.get(class1);
      TypeToken.getArray(class0);
      Excluder excluder2 = new Excluder();
      Gson gson4 = new Gson();
      Excluder excluder3 = excluder2.withVersion(0.0);
      // Undeclared exception!
      try { 
        gson4.getDelegateAdapter((TypeAdapterFactory) excluder3, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize int
         //
         verifyException("com.google.gson.Gson", e);
      }
  }
}
