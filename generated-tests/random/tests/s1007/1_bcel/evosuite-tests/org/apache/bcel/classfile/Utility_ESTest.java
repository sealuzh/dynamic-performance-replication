/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:55:28 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)1;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "e'hym;%*n dC$";
      try { 
        Utility.decode("e'hym;%*n dC$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)46;
      byteArray0[3] = (byte)54;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)43;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 97);
      assertEquals("0:    areturn\n1:    ishl\n2:    astore_1\n3:    istore\t\t%0\n5:    castore\n6:    i2s\n7:    aload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, (int) (byte)76, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.setBit(39, 39);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, (int) (byte)5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.replace("H696tPwuId8_{yH4V$j", "jz:pAfzQr4#/", "jz:pAfzQr4#/");
      Utility.fillup("|)#hD;jIN+", 1181, true, 'R');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-76);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)60, (int) (byte) (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.isJavaIdentifierPart('t');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, (int) (byte) (-47), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)28;
      byte byte0 = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-59);
      ConstantPool constantPool0 = null;
      int int0 = 157;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1338, 157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(242);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)105;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 141, (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17257. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L5>f{<R.>#Rz!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L5>f{<R.>#Rz!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.getSignature("z@RO`{%u6)");
      assertEquals("Lz@RO`{%u6);", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)98;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2313), 3611);
      assertEquals("0:    breakpoint\n1:    iconst_m1\n2:    aload_3\n3:    lconst_0\n4:    fload_2\n5:    if_icmpge\t\t#-21669\n8:    fadd\n", string1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ret\t\t%28", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.compactClassName("44%3-=o(z]&G0", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte)55;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-121), (-2039), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2s
         // 1:    faload
         // 2:    return
         // 3:    i2d
         // 4:    <illegal opcode>
         // 5:    lreturn
         // 6:    lload_1
         // 7:    iand
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.classOrInterface(88);
      String string0 = "@?7tSI&B&Y`t6^n?";
      boolean boolean0 = false;
      Utility.compactClassName("@?7tSI&B&Y`t6^n?", "dsub", false);
      try { 
        Utility.typeOfSignature("@?7tSI&B&Y`t6^n?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @?7tSI&B&Y`t6^n?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, (-1006), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-46);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Invalid method signature: ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)49, 653, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Utility.typeOfSignature("72kRUv$L0>FZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 72kRUv$L0>FZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.clearBit((-475), (-475));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2700, 83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.isSet(11, 11);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, true, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("{java.lang.Object@3ab10346, java.lang.Object@794d4dc6, java.lang.Object@13144abf, java.lang.Object@5d5422f7, java.lang.Object@6fcdb128, java.lang.Object@7cfde26a}");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "{java.lang.Object@3ab10346, java.lang.Object@794d4dc6, java.lang.Object@13144abf, java.lang.Object@5d5422f7, java.lang.Object@6fcdb128, java.lang.Object@7cfde26a}", 11, 11);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)50;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-30), (byte)62);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1026, (-482));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16108. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)38;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.isSet((-1535), 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)31;
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(164);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, (byte) (-32));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("invokevirtual");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((-3766));
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1349, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-53), (int) (byte)29, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_3
         // 1:    <illegal opcode>
         // 2:    bastore
         // 3:    astore_0
         // 4:    iconst_1
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("I5", true);
      Utility.isSet(48, 347);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)122;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-3351);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 195, (-3351));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 26138. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-116);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (int) (byte)12);
      try { 
        Utility.methodSignatureReturnType("invokeinterface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.accessToString(91, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-94);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)73;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet(10, (-2127));
      Utility.format(49, 49, true, 'G');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)110, (int) (byte) (-94), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1249), 24);
      assertEquals("0:    if_icmplt\t\t#-12540\n3:    <illegal opcode>\n4:    ifnonnull\t\t#13629\n7:    fsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.convertString("athrow");
      assertEquals("athrow", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-40);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)6, 87, false);
      assertEquals("6:    impdep2\n7:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.getSignature("@w9");
      Utility.fillup("L@w9;", 52, true, 'I');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13502. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.format((-4079), 1644, false, 'E');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE-4079
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3456, 438);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.typeOfSignature("Z>.NLxFE|+<8f");
      try { 
        Utility.methodSignatureArgumentTypes("invokestatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("mo_F/dPC6ZKq");
      Utility.compactClassName("P");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-107);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (-1281));
      String string1 = Utility.fillup("0:    fsub\n1:    astore_2\n2:    iastore\n3:    d2f\n4:    iconst_2\n5:    istore_2\n6:    fcmpl\n", (byte)77, true, 'h');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-17);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-223), (-223), true);
      assertEquals("0:    fastore\n1:    fstore_1\n2:    <illegal opcode>\n3:    iconst_2\n4:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.setBit(312, 370);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)7;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(262456, (-630));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-932), (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 37638. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)23;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantInteger constantInteger0 = new ConstantInteger(14);
      constantPool0.constantToString((Constant) constantInteger0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-68), 2051);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48357. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.fillup("Ay'PKe2G:GTB9pm:K", 91, true, 'i');
      Utility.accessToString((-2607), true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-64);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3210), (int) (byte)22, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload\t\t%166
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-122);
      byteArray0[0] = (byte) (-122);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1060.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 10, 9969, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "SimpleElementValue class does not know how to stringify type ";
      Utility.typeOfSignature("SimpleElementValue class does not know how to stringify type ");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte) (-98);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$ab$9f$Q_$R$ff$3d$9e", true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte) (-97);
      byteArray1[5] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)79, (-1518));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Y!td=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y!td=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-26);
      byte byte0 = (byte)8;
      byteArray0[7] = (byte)8;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = ":";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.decode(":", false);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "Mq~n`2{6";
      try { 
        Utility.typeOfSignature("Mq~n`2{6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mq~n`2{6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-98);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[8] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.close();
      byteSequence0.readInt();
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-33);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, 1174, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.replace("\tdefault = ", ">\t", "getstatic");
      assertEquals("\tdefault = ", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnonnull\t\t#-22950", string1);
      
      String string2 = Utility.compactClassName("monitorenter", "],x", false);
      assertEquals("monitorenter", string2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)93;
      byte byte0 = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-53), (int) (byte)66, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_3
         // 1:    <illegal opcode>
         // 2:    bastore
         // 3:    astore_0
         // 4:    iconst_1
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2713), 314);
      assertTrue(boolean0);
      
      String string0 = Utility.replace("freturn", "JhS`wY", "lload_0");
      assertEquals("freturn", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)43;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("JhS`wY");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-24), (int) (byte)107, true);
      assertEquals("0:    <illegal opcode>\n1:    dmul\n2:    ifge\t\t#-16671\n5:    aload_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-55);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2020), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-107);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (-1281));
      String string1 = Utility.fillup("0:    fsub\n1:    astore_2\n2:    iastore\n3:    i2d\n4:    iconst_2\n5:    istore_2\n6:    fcmpl\n", (byte)77, true, 'h');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.clearBit(16384, (-2996));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("{}", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)67;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(56);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (-3406));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("\")", "+*J\"v!Q", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, (int) (byte)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-125);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1945, (byte) (-14));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant constant0 = constantMethodref1.copy();
      constantArray0[0] = constant0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("#9~hr[q=6e$bW-Ei");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)82);
      constantArray0[2] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2498);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte) (-125), false);
      assertEquals("0:    dastore\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    lxor\n", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)105;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(177, true);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(178, 173);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-962), 512);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)8, 164);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("public final transient");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)105);
      constantArray0[4] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, 177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)7;
      byteArray0[6] = (byte)62;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte)5;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("48 48 07 05 07 00 3e 05", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte)5);
      assertEquals("5:    nop\n6:    istore_3\n7:    iconst_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (-2420), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "<O";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("<O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.clearBit(1, 1628);
      Utility.convertString("\b");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.clearBit((-1712), 1445);
      byte[] byteArray1 = Utility.decode("L;V", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 43, 668);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)124;
      byte byte0 = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-50);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, 52, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "void");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("void");
      try { 
        Utility.typeOfSignature(".Hhb 2k?q6TS?Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Hhb 2k?q6TS?Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-128));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 36, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.signatureToString("Byte code error: ", true);
      Utility.isJavaIdentifierPart('z');
      Utility.isJavaIdentifierPart('@');
      Utility.accessToString(64, true);
      Utility.searchOpcode("Byte code error: ");
      Utility.searchOpcode("byte");
      Utility.compactClassName("newarray");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)61;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("newarray");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(256, (-2607));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat0 = new ConstantFloat(64);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)78, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.setBit(1798, 1798);
      String string0 = "XfkMF0yku%h}(H-~-J";
      try { 
        Utility.typeOfSignature("XfkMF0yku%h}(H-~-J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XfkMF0yku%h}(H-~-J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The suffix must not be null");
      String string0 = Utility.fillup("The suffix must not be null", 4, false, 'y');
      assertEquals("The suffix must not be null", string0);
      
      int int0 = Utility.clearBit((-1393), (-1889));
      assertEquals(2147482255, int0);
      
      byte byte0 = Utility.typeOfSignature("The suffix must not be null");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.getSignature("j7%w,MD_V^un=");
      assertEquals("Lj7%w,MD_V^un=;", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "impdep2";
      Utility.convertString("impdep2");
      String string1 = "+\\;D24)k";
      try { 
        Utility.typeOfSignature("+;D24)k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;D24)k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("{java.lang.Object@1638db66, java.lang.Object@45c736b, java.lang.Object@3522266c}");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string1 = Utility.printArray(objectArray0, true, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fload_0", string2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)1;
      byte byte0 = (byte)91;
      byteArray0[7] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (-2924), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "!~;fY#c";
      try { 
        Utility.typeOfSignature("!~;fY#c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~;fY#c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.accessToString((-2976));
      Utility.classOrInterface((-387));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)44;
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong((byte)32);
      constantArray0[0] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString((-5393));
      constantArray0[1] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(200, 60);
      constantArray0[2] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-45));
      constantArray0[4] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)126, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-20);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)23;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.decode("*[(LKE~_N", false);
      Utility.replace("*[(LKE~_N", "*[(LKE~_N", "D");
      Utility.typeOfSignature("*[(LKE~_N");
      try { 
        Utility.typeOfMethodSignature("*[(LKE~_N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *[(LKE~_N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ax4ZgJH8AeX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ax4ZgJH8AeX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("JR{Gyc'jqBq$IDbmZ", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "long";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "long";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "long";
      Utility.printArray(objectArray0);
      int int0 = 5;
      Utility.accessToString(5, false);
      try { 
        Utility.methodSignatureReturnType(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.methodTypeToSignature("h[K|!IoQ\b5]3&km<M", (String[]) null);
      Utility.replace("()[Lh;", "h[K|!IoQ\b5]3&km<M", "org.apache.bcel.classfile.Utility$JavaReader");
      Utility.methodSignatureArgumentTypes("()[Lh;");
      // Undeclared exception!
      try { 
        Utility.signatureToString(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.typeOfSignature("V");
      Utility.clearBit((byte)12, (byte)12);
      String string0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V", "e}ZHV,;Sfx<KyL", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte)49, false);
      Utility.setBit((byte)49, 3593);
      String string0 = Utility.convertString("Illegal type: ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public final synchronized";
      objectArray0[2] = (Object) "public final synchronized";
      objectArray0[3] = (Object) (byte)49;
      objectArray0[4] = (Object) "Illegal type: ";
      objectArray0[5] = (Object) "Illegal type: ";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-1880);
      Utility.setBit((-1880), 65);
      Utility.isJavaIdentifierPart('q');
      Utility.isJavaIdentifierPart('N');
      try { 
        Utility.typeOfSignature("W+C]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W+C]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)44;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), (-269));
      Utility.getSignature("0UTQ'`}=VI2");
      Utility.convertString("0:    swap\n1:    <illegal opcode>\n2:    monitorexit\n3:    aload_2\n");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<q;nGC4e+'3YuD";
      stringArray0[1] = "0UTQ'`}=VI2";
      Utility.methodTypeToSignature("L0UTQ'`}=VI2;", stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("(L<q;nGC4e+'3YuD;L0UTQ'`}=VI2;)LL0UTQ'`}=VI2;;", "char");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // char
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T;x2zww=}Y*");
      Utility.methodSignatureReturnType("T;x2zww=}Y*", false);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)80;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1875, 88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.fillup("fREMo/kCKwiu", 123, false, 'R');
      try { 
        Utility.typeOfSignature("5J'z/8/c6h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5J'z/8/c6h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("qln!WcFr8^[R)[r", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[R)[r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "void";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "istore";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "istore");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"v:Q&%O,");
      Utility.compactClassName("void", "void", true);
      String string2 = "G^KRsp%gm]\"_m";
      try { 
        Utility.typeOfSignature("G^KRsp%gm]\"_m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G^KRsp%gm]\"_m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.compactClassName("blEGV5cg");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "blEGV5cg";
      stringArray0[1] = "Lorg/apache/bcel/classfile/RuntimeVisibleAnnotations;V";
      Utility.methodTypeToSignature("Lorg/apache/bcel/classfile/RuntimeVisibleAnnotations;V", stringArray0);
      boolean boolean0 = false;
      char char0 = 'm';
      Utility.fillup("blEGV5cg", 70, false, 'm');
      // Undeclared exception!
      try { 
        Utility.signatureToString("X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-62);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, (int) (byte) (-62), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.isSet(63, 63);
      Utility.convertString("monitorenter");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)21;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)32, 179);
      constantArray0[0] = (Constant) constantNameAndType0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantNameAndType0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, 34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-124);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 929, (int) (byte) (-124), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.isSet(523, 523);
      String string0 = "N|4~]#LXDgcrRnU(";
      try { 
        Utility.typeOfSignature("N|4~]#LXDgcrRnU(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N|4~]#LXDgcrRnU(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PFQ4O%S76");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PFQ4O%S76", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PFQ4O%S76'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      Utility.compactClassName("2\"", false);
      String string0 = "X[Smy,@\"4 /tu";
      String string1 = "";
      boolean boolean0 = true;
      Utility.compactClassName("X[Smy,@\"4 /tu", "", true);
      String string2 = "\t\t#";
      int int0 = 1391;
      File file0 = MockFile.createTempFile("org.apache.bcel.classfile.Utility$JavaReader", "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "X[Smy,@\"4 /tu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"X[Smy,@\"4 /tu\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)39;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Constant[] constantArray1 = new Constant[5];
      constantArray1[0] = (Constant) constantMethodType0;
      constantArray1[1] = (Constant) constantMethodType1;
      constantArray1[2] = (Constant) constantMethodType0;
      constantArray1[3] = (Constant) constantMethodType0;
      constantArray1[4] = (Constant) constantMethodType0;
      constantPool0.setConstantPool(constantArray1);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1443, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byte byte0 = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = "s\\s/=Ra'|QFg";
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "void";
      stringArray0[1] = "{}";
      try { 
        Utility.methodTypeToSignature("ss/=Ra'|QFg", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-445);
      Utility.clearBit((-445), (-445));
      String string0 = "KB5y;gR";
      try { 
        Utility.methodSignatureReturnType("KB5y;gR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KB5y;gR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.replace("<$kp89_5~6y6J8", "<$kp89_5~6y6J8", "Si^!");
      assertEquals("Si^!", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)69;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), 89);
      assertEquals("0:    dup_x1\n1:    aastore\n2:    idiv\n3:    jsr_w\t\t#554124360\n", string1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.compactClassName("lreturn");
      assertEquals("lreturn", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fload_2", string1);
      
      int int0 = Utility.setBit((byte) (-108), 3664);
      assertEquals((-108), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JhB");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4711, (byte)1);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantString constantString0 = new ConstantString(2234);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("JhB");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)68, 3);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.replace(" arg", "oAjFK", " arg");
      Utility.format((-2452), (-2452), true, '-');
      MockFile mockFile0 = new MockFile("-2452", "-2452");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "oAjFK");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "oAjFK";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) " arg";
      objectArray0[3] = (Object) "oAjFK";
      Utility.printArray(printStream0, objectArray0);
      Utility.setBit((-388), (-388));
      String string0 = Utility.compactClassName(".", true);
      Utility.printArray(objectArray0, true);
      String string1 = Utility.signatureToString("Dd(1|{ tbqE#zy");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      assertEquals(33, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.bcel.classfile.RuntimeVisibleAnnotations";
      stringArray0[1] = "org.apache.bcel.classfile.RuntimeVisibleAnnotations";
      stringArray0[2] = "org.apache.bcel.classfile.RuntimeVisibleAnnotations";
      stringArray0[3] = "org.apache.bcel.classfile.RuntimeVisibleAnnotations";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.RuntimeVisibleAnnotations", stringArray0);
      Utility.typeOfMethodSignature("(Lorg/apache/bcel/classfile/RuntimeVisibleAnnotations;Lorg/apache/bcel/classfile/RuntimeVisibleAnnotations;Lorg/apache/bcel/classfile/RuntimeVisibleAnnotations;Lorg/apache/bcel/classfile/RuntimeVisibleAnnotations;)Lorg/apache/bcel/classfile/RuntimeVisibleAnnotations;");
      Utility.fillup("org.apache.bcel.classfile.RuntimeVisibleAnnotations", 125, false, '!');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      Constant[] constantArray0 = new Constant[9];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("u&>DWhn^i?a-\"", "org.apache.bcel.classfile.RuntimeVisibleAnnotations");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.classfile.RuntimeVisibleAnnotations\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-68);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 83, 2307, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "jsr_w";
      Utility.convertString("jsr_w");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)85;
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1644), (int) (byte)21);
      try { 
        Utility.typeOfSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)83);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("wide");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantInteger1.dump(dataOutputStream0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifle\t\t#18343", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "dreturn";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("dreturn", false);
      Utility.compactClassName("dreturn");
      Utility.isJavaIdentifierPart('\\');
      ConstantPool constantPool0 = null;
      int int0 = 86;
      int int1 = 2266;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, 2266);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("3}{qj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3}{qj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = Utility.isSet(223, 223);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(176, 28);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "LGU8>t0";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("LGU8>t0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LGU8>t0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-68);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_0
         // 1:    <illegal opcode>
         // 2:    irem
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    iconst_3
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      Utility.accessToString((-577));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1175, (int) (byte)122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "\".At";
      try { 
        Utility.typeOfSignature("\".At");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \".At
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)56);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 248, (int) (byte)56, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("{\"java.lang.Object@4ec6c356\", \"java.lang.Object@5e54a9f3\", \"java.lang.Object@3b22093b\", \"java.lang.Object@d47d70\", \"java.lang.Object@78f0c24f\", \"java.lang.Object@310e793\", \"java.lang.Object@28d04d1b\"}");
      constantArray0[0] = (Constant) constantUtf8_0;
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48008. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "if_acmpne";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_acmpne");
      String string1 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.convertString("$\";M2i");
      Utility.fillup("$\";M2i", (-1813), false, 'V');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(160, 172);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.methodSignatureReturnType("[iO`uJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iO`uJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegal type: ");
      Object[] objectArray0 = new Object[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = (Object) "Illegal type: ";
      objectArray0[1] = (Object) "int";
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "($/sqS({itr$dkZ%&cI";
      stringArray0[1] = "multianewarray";
      stringArray0[2] = "int";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = "class";
      stringArray0[4] = "Illegal type: ";
      stringArray0[5] = "int";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.fillup("T(JZL4j,}I$gtqk>:s", 201, false, 'z');
      Utility.replace("multianewarray", "java.lang.Float", "]fufx;w[3,RZ{");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)43;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)43, 255, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.skip((-1L));
      byteSequence0.readBoolean();
      byteSequence0.mark((byte)24);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload\t\t%8", string0);
      
      String string1 = Utility.fillup("3u)-qkr", 8, true, '`');
      assertEquals("3u)-qkr`", string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.compactClassName("java.lang.", "N2iQ.%S._", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N2iQ.%S._", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N2iQ.%S._'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.isSet(1230, 1230);
      try { 
        Utility.typeOfSignature("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte) (-115);
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(78, 76);
      constantArray0[0] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1413.4647173736));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((byte)47, 2911);
      constantArray0[4] = (Constant) constantNameAndType1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(91);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)51, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "jsr_w";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jsr_w");
      String string1 = "#|%wG";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#|%wG");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = "Lo)aj/|4>^A$d\">Us;V";
      // Undeclared exception!
      try { 
        Utility.decode("Lo)aj/|4>^A$d\">Us;V", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(1601);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "Y";
      try { 
        Utility.methodSignatureReturnType("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putfield");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(40, 183, true, 'i');
      assertEquals("40iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("arraylength", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.clearBit(122, 90);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)2;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(2206);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3320, 1291, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("J/n}Eo;p24]$#q(zp", false);
      String string0 = "tableswitch";
      Utility.replace("tableswitch", "J/n}Eo;p24]$#q(zp", "tableswitch");
      int int0 = 59;
      Utility.setBit(59, (-69));
      String string1 = "org.apache.bcel.classfile.ConstantDouble";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("tableswitch", "org.apache.bcel.classfile.ConstantDouble", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tableswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("0Rt.}d^>[U]7n", stringArray0);
      assertEquals("()[L0Rt/}d^>;", string0);
      
      String string1 = Utility.accessToString(1806);
      assertEquals("private protected static native interface abstract", string1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\".At";
      stringArray0[1] = "\".At";
      stringArray0[2] = "\".At";
      stringArray0[3] = "\".At";
      stringArray0[4] = "\".At";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\".At");
      stringArray0[5] = "\".At";
      Utility.methodTypeToSignature("\".At", stringArray0);
      Utility.compactClassName("(L\"/At;L\"/At;L\"/At;L\"/At;L\"/At;L\"/At;)L\"/At;", false);
      Utility.setBit((-8), (-1441859599));
      Utility.convertString("\".At");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.methodTypeToSignature(", ", stringArray0);
      Utility.compactClassName("=\".cfa.cGDO", true);
      Utility.replace("u@|h;3)ok U:.5O", "(L\"/At;L\"/At;L\"/At;L\"/At;L\"/At;L\"/At;)L,;", (String) null);
      Utility.compactClassName("=\".cfa.cGDO", "\".At", false);
      Utility.printArray((Object[]) stringArray0, true, true);
      try { 
        Utility.typeOfMethodSignature("\".At");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \".At
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = Utility.decode("CONSTANT_Methodref", false);
      assertEquals(18, byteArray0.length);
      
      String string0 = Utility.convertString("goto");
      assertEquals("goto", string0);
      
      byte byte0 = Utility.typeOfSignature("D%J+\"h]ee)6");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4WJ:CR+.4LD!pZ~+geQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4WJ:CR+.4LD!pZ~+geQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)63;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string1 = "#_\\rl**IM^";
      try { 
        Utility.typeOfSignature("#_\rl**IM^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #_\rl**IM^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wq>t*,$:v/uy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wq>t*,$:v/uy'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)44;
      byte byte0 = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readFloat();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)19;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte) (-61), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmple\t\t#-15566
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte) (-80);
      Utility.toHexString(byteArray0);
      Utility.accessToString(81, true);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(81);
      MockPrintStream mockPrintStream0 = new MockPrintStream("public final volatile");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantClass0.dump(dataOutputStream0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong((byte)91);
      constantArray0[1] = (Constant) constantLong0;
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantClass constantClass2 = new ConstantClass((-3243));
      constantArray0[3] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)67, 19, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15280. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = Utility.clearBit((-4062), (-4062));
      assertEquals((-4062), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.convertString("8N*v>:I");
      assertEquals("8N*v>:I", string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "8";
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.isSet(63, 63);
      Utility.convertString("monitorenter");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)32, 179);
      constantArray0[0] = (Constant) constantNameAndType0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.util.ClassPathRepository");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantNameAndType0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)14, 34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.convertString("dup");
      File file0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "dup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\t\t<";
      stringArray0[1] = "\t\t<";
      stringArray0[2] = "\t\t<";
      stringArray0[3] = "\t\t<";
      stringArray0[4] = "\t\t<";
      stringArray0[5] = "\t\t<";
      Utility.methodTypeToSignature("\t\t<", stringArray0);
      Utility.decode("iv_9j6c!l~", false);
      Utility.clearBit(97, 97);
      try { 
        Utility.methodSignatureArgumentTypes("(L<;L<;L<;L<;L<;L<;)L<;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;L<;L<;L<;L<;L<;)L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "Exception while looking for class ";
      try { 
        Utility.methodSignatureReturnType("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "(";
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte) (-67);
      byteArray1[6] = (byte) (-67);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-90);
      byte byte0 = (byte)26;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)26;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("Gr$V$a6$g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gr$V$a6$g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)105;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte)3, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) (byte)3;
      objectArray0[2] = (Object) "public private";
      objectArray0[3] = (Object) (byte)3;
      objectArray0[4] = (Object) (byte)3;
      objectArray0[5] = (Object) (byte)105;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) (byte)3;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("public private", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 149, 2048, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      byte byte0 = (byte)67;
      byteArray0[2] = (byte)67;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("07 3f 43");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 07 3f 43
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet(99, 187);
      try { 
        Utility.typeOfSignature(">-jH QuS=]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >-jH QuS=]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "o)aj.|4>^A$d\">Us";
      stringArray0[1] = "o)aj.|4>^A$d\">Us";
      stringArray0[2] = "o)aj.|4>^A$d\">Us";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid method signature: ");
      Utility.methodTypeToSignature("o)aj.|4>^A$d\">Us", stringArray0);
      Utility.methodSignatureToString("(Lo)aj/|4>^A$d\">Us;Lo)aj/|4>^A$d\">Us;Lo)aj/|4>^A$d\">Us;)Lo)aj/|4>^A$d\">Us;", "o)aj.|4>^A$d\">Us", "double");
      Utility.replace("o)aj.|4>^A$d\">Us", "double", "java.lang.");
      Utility.printArray((Object[]) stringArray0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-7), (int) (byte)112, false);
      assertEquals("0:    fsub\n1:    irem\n2:    <illegal opcode>\n3:    if_acmpne\t\t#23036\n6:    d2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.compactClassName("FULL", "FULL", false);
      Utility.setBit(1, 78);
      Utility.accessToString(1910);
      Utility.searchOpcode("FULL");
      Utility.decode("FULL", false);
      Utility.typeOfSignature("FULL");
      try { 
        Utility.typeOfMethodSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)82;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("48 05 07 05 04 a4 3e 52", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte)5);
      assertEquals("5:    if_icmple\t\t#15959\n", string1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-82);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      byteArray0[7] = (byte)2;
      byte byte0 = (byte)83;
      byteArray0[8] = (byte)83;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('e');
      try { 
        Utility.typeOfSignature("$n9$7d$d7$O$D$ae$CS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $n9$7d$d7$O$D$ae$CS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&tt?wswWb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &tt?wswWb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.convertString("1~^5;w?/0Yl-#ZA");
      try { 
        Utility.typeOfSignature("1~^5;w?/0Yl-#ZA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1~^5;w?/0Yl-#ZA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "FL$Wf";
      Utility.methodSignatureReturnType("FL$Wf");
      String string1 = "y0QBbvZ3";
      Utility.searchOpcode("y0QBbvZ3");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("monitorexit", "'");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // '
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Ptax]F");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("Xm.g'O", true);
      Utility.convertString("Xm.g'O");
      Utility.isSet(988, (byte)43);
      Utility.clearBit((-355), (byte)43);
      Utility.classOrInterface((byte)85);
      try { 
        Utility.typeOfSignature("java.lang.Ptax]F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Ptax]F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 216;
      Utility.format(216, 221, true, '#');
      try { 
        Utility.typeOfSignature("216##########################################################################################################################################################################################################################");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 216##########################################################################################################################################################################################################################
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), (-677), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    fneg\n3:    aload_1\n", string0);
      
      Utility.searchOpcode(";*3y~i[!");
      String string1 = Utility.getSignature("<illegal opcode>");
      assertEquals("L<illegal;", string1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.decode("*[(LKE~_N", false);
      Utility.replace("$VALUES", "$VALUES", "D");
      try { 
        Utility.typeOfSignature("QDJZST4G@~[6cFlKm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QDJZST4G@~[6cFlKm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("swap", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      Utility.convertString("{java.lang.Object@10cef303, java.lang.Object@27039c4a, java.lang.Object@28b9dee2}");
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-1);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)93;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(45);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 4248, (int) (byte)47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("dload_1");
      Utility.codeToString(byteSequence0, constantPool0, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^}*D6e/[2U}E(H9";
      stringArray0[1] = "dload_1";
      stringArray0[2] = "Ldload_1;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("dadd", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[2U}E(H9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "BootstrapMethods";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BootstrapMethods");
      Utility.typeOfSignature("BootstrapMethods");
      try { 
        Utility.typeOfMethodSignature("BootstrapMethods");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BootstrapMethods
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(93, (byte) (-75));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Invalid StackMap frame_type: ", true);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.replace("Warning: Padding byte != 0 in ", "Warning: Padding byte != 0 in ", "if_icmpgt");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)125;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("Rf1AAV8+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rf1AAV8+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Constant[] constantArray1 = new Constant[5];
      constantArray1[0] = (Constant) constantMethodType0;
      constantArray1[1] = (Constant) constantMethodType1;
      constantArray1[2] = (Constant) constantMethodType0;
      constantArray1[3] = (Constant) constantMethodType0;
      constantArray1[4] = (Constant) constantMethodType0;
      constantPool0.setConstantPool(constantArray1);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1443, (int) (byte) (-93), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of prefixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of prefixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "PM";
      try { 
        Utility.typeOfSignature("PM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.accessToString(1996);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "$aa";
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("nn;pK'nW4a+y0&f", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 385, 1996, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.searchOpcode("constant pool\t\t");
      Utility.classOrInterface(115);
      Utility.fillup("^2toIw6k T]tb", 59, true, 'y');
      Utility.compactClassName("class", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-21);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (int) (byte)11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "O+U`";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O+U`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O+U`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R-CDwaK9D");
      try { 
        Utility.methodSignatureReturnType("R-CDwaK9D", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R-CDwaK9D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.isSet(63, 63);
      Utility.convertString("monitorenter");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)21;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)32, 179);
      constantArray0[0] = (Constant) constantNameAndType0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantNameAndType0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)14, 34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CodeException(start_pc = ");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.getSignature("CodeException(start_pc = ");
      assertEquals("LCodeException(start_pc;", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "LCodeException(start_pc;";
      objectArray0[1] = (Object) "LCodeException(start_pc;";
      objectArray0[2] = (Object) "LCodeException(start_pc;";
      objectArray0[3] = (Object) "LCodeException(start_pc;";
      objectArray0[4] = (Object) "LCodeException(start_pc;";
      objectArray0[5] = (Object) "LCodeException(start_pc;";
      objectArray0[6] = (Object) "CodeException(start_pc = ";
      objectArray0[7] = (Object) "CodeException(start_pc = ";
      objectArray0[8] = (Object) "LCodeException(start_pc;";
      String string1 = Utility.printArray(objectArray0, true);
      assertNotNull(string1);
      assertEquals("{LCodeException(start_pc;, LCodeException(start_pc;, LCodeException(start_pc;, LCodeException(start_pc;, LCodeException(start_pc;, LCodeException(start_pc;, CodeException(start_pc = , CodeException(start_pc = , LCodeException(start_pc;}", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.isSet(233, (-1911));
      String string0 = "VQk5";
      boolean boolean0 = false;
      Utility.signatureToString("VQk5", false);
      String string1 = "invokestatic";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("java.lang.Long");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(783);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((-1998), (-1998), byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = "0A]{^WvK t|";
      stringArray0[4] = "(";
      stringArray0[5] = "(";
      stringArray0[6] = "(";
      stringArray0[7] = "(";
      stringArray0[8] = "(";
      String string0 = Utility.methodTypeToSignature("(", stringArray0);
      assertEquals("(L(;L(;L(;L0A]{^WvK;L(;L(;L(;L(;L(;)L(;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lushr", string1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.isSet(80, 80);
      Utility.isJavaIdentifierPart('1');
      String string0 = "-}5$iE^oB kvlIKb";
      try { 
        Utility.typeOfSignature("-}5$iE^oB kvlIKb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -}5$iE^oB kvlIKb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.CanReadFileFilter";
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.CanReadFileFilter", false);
      Utility.clearBit(53, 128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName("ddiv", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l4yHWs%0");
      int int0 = 183;
      Utility.accessToString(183, false);
      Utility.signatureToString("CONSTANT_MethodHandle");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      Utility.compactClassName("CONSTANT_MethodHandle", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "char";
      objectArray0[1] = (Object) "l4yHWs%0";
      objectArray0[2] = (Object) "l4yHWs%0";
      objectArray0[3] = (Object) "char";
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "CONSTANT_MethodHandle";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) null;
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      Utility.convertString("java.lang.Object@52b92114, java.lang.Object@37f1711f, java.lang.Object@21eeefb3");
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)93;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$_$b4$ffW$5d", string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      stringArray0[3] = "boolean";
      stringArray0[4] = "line.separator";
      stringArray0[5] = "\t";
      stringArray0[6] = "\t";
      Utility.methodTypeToSignature("\t", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("Za= ,QmA", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byte byte1 = (byte)32;
      byteArray0[2] = (byte)32;
      byte byte2 = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byte byte3 = (byte)90;
      byteArray0[4] = (byte)90;
      byte byte4 = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-25);
      byte byte5 = (byte)59;
      byteArray0[7] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H^PE(d}'k+{");
      Utility.isSet(574, 1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H^PE(d}'k+{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H^PE(d}'k+{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.compactClassName("lreturn");
      assertEquals("lreturn", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = (-1345);
      Utility.isSet((-1345), (-784));
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "? extends ";
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((-143), (-143), false, 'q');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) fileSystemHandling0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-35);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) "-143";
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) fileSystemHandling0;
      objectArray0[7] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, false);
      Utility.getSignature("org.evosuite.runtime.testdata.FileSystemHandling@18fd1475, org.evosuite.runtime.testdata.FileSystemHandling@18fd1475, -143, org.evosuite.runtime.testdata.FileSystemHandling@18fd1475, org.evosuite.runtime.testdata.FileSystemHandling@18fd1475, org.evosuite.runtime.testdata.FileSystemHandling@18fd1475, org.evosuite.runtime.testdata.FileSystemHandling@18fd1475, org.evosuite.runtime.testdata.FileSystemHandling@18fd1475");
      Utility.isSet((-143), 2772);
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("-143");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-143'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e2ilLz");
      Utility.classOrInterface(21);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e2ilLz");
      byteArray0[0] = (byte) (-48);
      byte byte0 = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)0;
      String string0 = ",g^tZ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",g^tZ");
      byteArray0[6] = (byte) (-86);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("$d0$d8C$3e7$A$aa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $d0$d8C$3e7$A$aa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)71;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('^');
      String string0 = "/,al~TS";
      try { 
        Utility.typeOfSignature("/,al~TS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /,al~TS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";_g!e13a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;_g!e13a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "Q_wRfRa5jQZ7o&\"2Xu";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q_wRfRa5jQZ7o&\"2Xu");
      Utility.searchOpcode("Q_wRfRa5jQZ7o&\"2Xu");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q_wRfRa5jQZ7o&\"2Xu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q_wRfRa5jQZ7o&\"2Xu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "M*g|,x<Q6QQhtRe@o";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M*g|,x<Q6QQhtRe@o", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M*g|,x<Q6QQhtRe@o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.signatureToString("B0b_j");
      assertEquals("byte", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "B0b_j";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "byte";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string1);
      
      String string2 = Utility.format(1, 739, true, '`');
      assertEquals("1``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", string2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("U?WX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U?WX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Object@50e15842, java.lang.Object@26465101, java.lang.Object@4e0ccb2a");
      Utility.classOrInterface((-1410));
      try { 
        Utility.typeOfMethodSignature("java.lang.Object@50e15842, java.lang.Object@26465101, java.lang.Object@4e0ccb2a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@50e15842, java.lang.Object@26465101, java.lang.Object@4e0ccb2a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-76);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("I");
      assertEquals((byte)10, byte0);
      
      Utility.searchOpcode("abstract");
      boolean boolean0 = Utility.isSet(5, (-2504));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("\n     ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\n     ", "\n     ", "\n     ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //      
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-76);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.accessToString((-6593));
      Utility.replace("8Ne<4E/T)$wnSPdM17", "$d+", "iyveR+cu_vF4");
      Utility.getSignature("$d+");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(80);
      Utility.format(1477, 1477, true, 'd');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iyveR+cu_vF4", "^P /A!v2HZKXdU0", "public private protected static final synchronized interface abstract annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iyveR+cu_vF4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)10;
      Utility.toHexString(byteArray0);
      String string0 = "h";
      try { 
        MockURI.URI("69 26 44 d4 0a", "h", "h");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 69 26 44 d4 0a:h#h
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.setBit((-3136), (-1766));
      try { 
        Utility.typeOfSignature("=,um%762Q)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =,um%762Q)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit((-75), (-75));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.compactClassName(";");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ";";
      objectArray0[1] = (Object) ";";
      objectArray0[2] = (Object) ";";
      objectArray0[3] = (Object) ";";
      objectArray0[4] = (Object) ";";
      Object object0 = new Object();
      objectArray0[5] = object0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "fload";
      stringArray0[1] = "fload";
      stringArray0[2] = "fload";
      stringArray0[3] = "fload";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fload");
      stringArray0[4] = "fload";
      stringArray0[5] = "fload";
      String string0 = Utility.methodTypeToSignature("fload", stringArray0);
      assertEquals("(Lfload;Lfload;Lfload;Lfload;Lfload;Lfload;)Lfload;", string0);
      
      boolean boolean0 = Utility.isSet(7, 154);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "g";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("", "", true);
      Utility.setBit((-595), 633);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.printArray((Object[]) null, true, true);
      Utility.classOrInterface(13);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byte byte0 = (byte)44;
      byteArray0[1] = (byte)44;
      Utility.encode(byteArray0, true);
      Utility.compactClassName(")zFJ?-X8oXIsI~uQ");
      Utility.printArray((Object[]) null, false, false);
      Utility.accessToString((int) (byte) (-88), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.searchOpcode("monitorexit");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.compactClassName("6>6");
      try { 
        Utility.typeOfSignature("6>6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6>6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)12;
      Utility.toHexString(byteArray0);
      Utility.format((-1082), (byte)12, true, '3');
      try { 
        Utility.methodSignatureArgumentTypes("boolean", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("('~x-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'~x-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.convertString("T$UH`]c6#/mgIrb");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "T$UH`]c6#/mgIrb", "T$UH`]c6#/mgIrb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.searchOpcode("?SI&");
      // Undeclared exception!
      try { 
        Utility.signatureToString("?SI&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?SI&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Utility.format((-2610), (-2610), true, '}');
      assertEquals("-2610", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)97;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$a3$kNa", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(88, (-1615424334), false, '9');
      Utility.accessToString(1007);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 32
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-104);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)70, (int) (byte) (-104), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "SAME";
      Utility.methodSignatureReturnType("SAME");
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "plS>h";
      Utility.replace("plS>h", "plS>h", "plS>h");
      Utility.setBit((-2931), (-1092266936));
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("plS>h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `plS>h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = (-2102);
      Utility.accessToString((-2102));
      String string0 = ">y?;$qb!.7]4r6e";
      boolean boolean0 = true;
      try { 
        Utility.decode(">y?;$qb!.7]4r6e", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Object object1 = new Object();
      objectArray0[6] = object1;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<aT";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("z=4<$n[&Ybnsk~~I", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[&Ybnsk~~I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.methodSignatureReturnType("2'wJ;0>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2'wJ;0>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-60);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-14), (byte) (-60));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.typeOfSignature("JH^R");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "dreturn";
      Utility.convertString("dreturn");
      try { 
        Utility.methodSignatureReturnType("dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-73);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-27);
      byteArray0[2] = (byte)32;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantInteger constantInteger0 = new ConstantInteger(14);
      constantPool0.constantToString((Constant) constantInteger0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-68), 2051);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("3}cT621;c~oRP", "3}cT621;c~oRP", "3}cT621;c~oRP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3}cT621;c~oRP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hQvP\"PL\f1qR#p");
      try { 
        Utility.typeOfMethodSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = 95;
      boolean boolean0 = true;
      Utility.accessToString(95, true);
      Utility.compactClassName("monitorexit");
      Utility.convertString("monitorexit");
      try { 
        Utility.typeOfSignature("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j9fIGqc");
      Utility.accessToString(82);
      byte[] byteArray0 = Utility.decode("getstatic", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("getstatic");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4006), 82);
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((-4006));
      Utility.clearBit(4089, 15);
      String string0 = "3rQ?H%)RoT(=[yp";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j9fIGqc";
      stringArray0[1] = "^(ZW{L#";
      stringArray0[2] = "private final volatile";
      stringArray0[3] = "class";
      stringArray0[4] = "getstatic";
      stringArray0[5] = "0:    dsub\n1:    lsub\n2:    ineg\n3:    drem\n4:    ineg\n5:    ladd\n6:    ineg\n7:    lmul\n8:    dadd\n";
      stringArray0[6] = "wl|0If{44!V]Scp=Gj";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("3rQ?H%)RoT(=[yp", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[yp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(16384);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "enum");
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("VP", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(16384, (-572), true, '[');
      Utility.decode("Za", false);
      int int0 = 62;
      Utility.setBit(62, 62);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, 10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xr,");
      String string0 = Utility.methodTypeToSignature("G", (String[]) null);
      assertEquals("()LG;", string0);
      
      String string1 = Utility.methodSignatureToString("()LG;", "xr,", "()LG;", false);
      assertEquals("()LG; G xr,()", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-41);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }
}
