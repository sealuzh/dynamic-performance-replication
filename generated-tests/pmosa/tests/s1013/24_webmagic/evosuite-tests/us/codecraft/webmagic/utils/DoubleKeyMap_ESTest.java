/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:25:33 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(integer0, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0, class0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      doubleKeyMap1.remove(object0);
      doubleKeyMap1.remove(object0, "Bb|!9-J~H7?KD`6{");
      DoubleKeyMap<Map<String, Object>, Object, Map<String, Object>> doubleKeyMap2 = new DoubleKeyMap<Map<String, Object>, Object, Map<String, Object>>();
      HashMap<Object, Map<String, Object>> hashMap2 = new HashMap<Object, Map<String, Object>>();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Map<String, Object>) null, (Map<Object, Map<String, Object>>) hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.remove((Object) class0, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Map<String, Integer>> hashMap0 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap0.get("", "i8KU2wuBfneNm=)");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0);
      Integer integer0 = new Integer((-1289));
      doubleKeyMap0.remove(integer0);
      Integer integer1 = new Integer((-1289));
      doubleKeyMap0.get(integer1);
      DoubleKeyMap<String, Map<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, Map<String, Object>, Object>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      DoubleKeyMap<Integer, Object, Map<String, Object>> doubleKeyMap3 = new DoubleKeyMap<Integer, Object, Map<String, Object>>();
      Map<String, Object> map1 = doubleKeyMap3.newMap();
      doubleKeyMap2.remove((Object) map1, (Object) "s&UK0j/");
      HashMap<Map<String, Object>, Map<Integer, Object>> hashMap1 = new HashMap<Map<String, Object>, Map<Integer, Object>>();
      DoubleKeyMap<Map<String, Object>, Integer, Object> doubleKeyMap4 = new DoubleKeyMap<Map<String, Object>, Integer, Object>(hashMap1);
      Integer integer2 = new Integer((-1289));
      doubleKeyMap4.get(map1, integer2);
      HashMap<Integer, Map<Integer, Object>> hashMap2 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap5 = new DoubleKeyMap<Integer, Integer, Object>(hashMap2);
      Integer integer3 = new Integer((-1289));
      Integer integer4 = new Integer(15);
      doubleKeyMap5.get(integer3, integer4);
      DoubleKeyMap<Integer, String, Map<String, Object>> doubleKeyMap6 = null;
      try {
        doubleKeyMap6 = new DoubleKeyMap<Integer, String, Map<String, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Object>, Integer>();
      Integer integer0 = new Integer((-279));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(integer0, (Map<String, Object>) hashMap0, integer0);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      doubleKeyMap1.put((Integer) null, integer0, "");
      String string0 = doubleKeyMap1.get((Integer) null, integer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Object object0 = new Object();
      doubleKeyMap0.put((Object) "Y Z[S`<6N{$C{zH", "Y Z[S`<6N{$C{zH", "Y Z[S`<6N{$C{zH");
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      String string0 = doubleKeyMap0.put((Object) "Y Z[S`<6N{$C{zH", "Y Z[S`<6N{$C{zH", "Y Z[S`<6N{$C{zH");
      assertEquals("Y Z[S`<6N{$C{zH", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(class0, hashMap1);
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      doubleKeyMap0.remove((Object) class0, (Object) hashMap0);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap1.put(".L]~:WW92autzA", ".L]~:WW92autzA");
      hashMap0.put(class0, hashMap1);
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      doubleKeyMap0.remove((Object) class0, (Object) hashMap0);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
