/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 21:06:54 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][4];
      int[] intArray1 = new int[7];
      intArray1[0] = 66639;
      intArray1[1] = (-60);
      intArray1[2] = 1;
      intArray1[3] = 646;
      intArray1[4] = 6109;
      intArray1[5] = 93;
      intArray1[6] = 247;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 4;
      intArray2[1] = (-263);
      intArray2[2] = 247;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1377;
      intArray3[1] = (-263);
      intArray3[2] = 93;
      intArray3[3] = 6109;
      intArray3[4] = (-263);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 6109;
      intArray4[1] = 6109;
      intArray4[2] = 66639;
      intArray4[3] = 1377;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = (-2);
      intArray5[1] = 93;
      intArray5[2] = 93;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = (-60);
      intArray6[1] = (-263);
      intArray6[2] = 247;
      intArray6[3] = 93;
      intArray6[4] = 3294;
      intArray6[5] = (-2);
      intArray0[5] = intArray6;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 65536;
      intArray0[0] = 65536;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {65536}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 65536);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {65536}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 2026;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2026);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      int int1 = 4389;
      CharClass charClass1 = charClass0.appendLiteral(0, 4389);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int int2 = 0;
      CharClass charClass3 = charClass2.appendRange(0, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendRange(0, 4389);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      int[][] intArrayArray0 = null;
      int int3 = 4155;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign((int[][]) null, 4155);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1129;
      intArray0[0] = 1129;
      intArray0[1] = 1497;
      int int1 = 2123;
      intArray0[2] = 2123;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1129, 1497, 2123}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1129, 1497, 2123}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][0];
      int[] intArray1 = new int[9];
      intArray1[0] = (-384);
      intArray1[1] = 40981;
      intArray1[2] = 1547;
      intArray1[3] = 0;
      intArray1[4] = (-58);
      intArray1[5] = 0;
      intArray1[6] = (-1657);
      intArray1[7] = 2983;
      intArray1[8] = (-1410);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1657);
      intArray2[1] = (-58);
      intArray2[2] = 1547;
      intArray2[3] = 2983;
      intArray2[4] = (-692);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 40981;
      intArray4[1] = (-692);
      intArray4[2] = 40981;
      intArray4[3] = (-1657);
      intArray4[4] = (-384);
      intArray4[5] = (-1657);
      intArray4[6] = 2983;
      intArray4[7] = (-384);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = (-1657);
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray5[3] = 2983;
      intArray5[4] = (-1657);
      intArray5[5] = 2983;
      intArray5[6] = (-58);
      intArray5[7] = (-58);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 1547;
      intArray6[1] = 2983;
      intArray6[2] = 0;
      intArray6[3] = 40981;
      intArray6[4] = 1748;
      intArray6[5] = 0;
      intArray6[6] = 2602;
      intArray6[7] = (-692);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 0;
      intArray7[1] = 2602;
      intArray7[2] = 1547;
      intArray7[3] = (-1657);
      intArray7[4] = (-1410);
      intArray7[5] = 2983;
      intArray7[6] = (-1410);
      intArray7[7] = 1547;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[4];
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray3));
      
      intArray8[0] = (-1410);
      intArray8[1] = 0;
      intArray8[2] = 716;
      intArray8[3] = (-58);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray7));
      
      intArray9[0] = 2983;
      intArray9[1] = 2983;
      intArray9[2] = 716;
      intArray9[3] = 40981;
      intArray9[4] = 2602;
      intArray9[5] = 1748;
      intArray9[6] = 0;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, (-58));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1114111, 1114111);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[8][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1114111;
      intArray1[1] = 1114111;
      intArray1[2] = 1114111;
      intArray1[3] = 1114111;
      intArray1[4] = 1114111;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1114111;
      intArray2[1] = 1114111;
      intArray2[2] = 1114111;
      intArray2[3] = 1114111;
      intArray2[4] = 1114111;
      intArray2[5] = 1114111;
      intArray2[6] = 1114111;
      intArray2[7] = 1114111;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1114111;
      intArray3[1] = 1114111;
      intArray3[2] = 1114111;
      intArray3[3] = 1114111;
      intArray3[4] = 1114111;
      intArray3[5] = 1114111;
      intArray3[6] = 0;
      intArray3[7] = 1114111;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1114111;
      intArray4[1] = 1114111;
      intArray4[2] = 1114111;
      intArray4[3] = 0;
      intArray4[4] = 1114111;
      intArray4[5] = 192;
      intArray4[6] = 0;
      intArray4[7] = (-2651);
      intArray4[8] = 1114111;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 192;
      intArray5[1] = (-2651);
      intArray5[2] = 1114111;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = (-27);
      intArray6[1] = 1114111;
      intArray6[2] = 1114111;
      intArray6[3] = 1114111;
      intArray6[4] = 1177;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = 1095;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[7];
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = (-2651);
      intArray8[1] = 3308;
      intArray8[2] = 0;
      intArray8[3] = 0;
      intArray8[4] = 1114111;
      intArray8[5] = 1095;
      intArray8[6] = (-27);
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 886;
      intArray0[0] = 886;
      intArray0[1] = (-2344);
      intArray0[2] = 0;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {886, (-2344), 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int int1 = (-1826);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1826));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {886, (-2344), (-2343), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2343), 1114111, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[7][2];
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1826);
      intArray2[1] = 0;
      intArray2[2] = (-2344);
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(1114111, 1114111);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[7][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3096;
      intArray2[1] = 1114111;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 3096;
      intArray3[1] = 1114111;
      intArray3[2] = 3096;
      intArray3[3] = 1114111;
      intArray3[4] = 3096;
      intArray1[6] = intArray3;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 847;
      intArray0[3] = 0;
      intArray0[4] = 120746;
      intArray0[5] = 8507;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 4, 847, 0, 120746, 8507}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 686;
      intArray0[2] = (-771);
      intArray0[3] = 42787;
      intArray0[4] = 310;
      intArray0[5] = 66639;
      intArray0[6] = (-1731);
      intArray0[7] = (-2618);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 686, (-771), 42787, 310, 66639, (-1731), (-2618)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 686, (-771), 42787, 310, 66639, (-1731), (-2618)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange((-1731), 760);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 686, (-771), 42787, 310, 66639, (-1731), (-2618)}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(93, 93);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 93;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1633);
      intArray0[2] = 32;
      intArray0[3] = 7040;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1633), 32, 7040}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1633), (-1632), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1633), (-1632), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass3 = charClass0.appendLiteral((-1633), (-766));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1633), (-1633), (-1632), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-2009);
      intArray2[1] = (-1018);
      int int0 = 983;
      intArray2[2] = 983;
      intArray2[3] = (-1633);
      intArray2[4] = (-766);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = (-2164);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {32, (-2164)}, intArray0);
      assertNotNull(charClass0);
      
      int int0 = (-1621);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1621));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {32, (-2164)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-226), (-249));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {32, (-2164)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {32, (-2164)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[6][9];
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 32;
      intArray2[1] = 32;
      intArray2[2] = 32;
      intArray2[3] = 32;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-2164);
      intArray3[1] = (-249);
      intArray3[2] = 32;
      intArray3[3] = (-249);
      intArray3[4] = (-249);
      intArray3[5] = (-226);
      intArray3[6] = (-249);
      intArray1[3] = intArray3;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      int[][] intArray2 = new int[0][6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass5 = charClass0.appendTable(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, intArray2.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 67592;
      intArray3[4] = 0;
      // Undeclared exception!
      try { 
        charClass5.appendNegatedClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1227);
      String string0 = CharClass.charClassToString(intArray0, (-1227));
      assertEquals("[]", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1227), 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      
      intArray0[1] = (-625);
      intArray0[2] = 1128;
      intArray0[4] = 1840;
      intArray0[5] = 237;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1227), (-625), 1128, 0, 1840, 237}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-1567), (-1573));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1227), (-625), 1128, 0, 1840, 237}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1840;
      intArray1[1] = (-1567);
      intArray1[2] = (-625);
      intArray1[3] = (-1227);
      intArray1[4] = 1128;
      intArray1[5] = (-625);
      CharClass charClass3 = charClass0.appendFoldedClass(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1840, (-1567), (-625), (-1227), 1128, (-625)}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = new CharClass(intArray1);
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1840, (-1567), (-625), (-1227), 1128, (-625)}, intArray1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.cleanClass();
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass4));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1227), (-625), 1128, 0, 1840, 237}, intArray0);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.negateClass();
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass4));
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.appendNegatedClass(intArray1);
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1840, (-1567), (-625), (-1227), 1128, (-625)}, intArray1);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass5);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass3.appendClassWithSign(intArray0, 2433);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass3.equals((Object)charClass7));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-1227), (-625), 1128, 0, 1840, 237}, intArray0);
      assertArrayEquals(new int[] {1840, (-1567), (-625), (-1227), 1128, (-625)}, intArray1);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertNotSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertNotSame(intArray1, intArray0);
      assertNotNull(charClass8);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1310, 1310);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(8248, 8248);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendLiteral(1, 1271);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.appendFoldedRange(42182, 1310);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-3751);
      intArray0[2] = 66640;
      intArray0[3] = 120467;
      intArray0[4] = (-2385);
      intArray0[5] = 2220;
      String string0 = CharClass.charClassToString(intArray0, 4);
      assertEquals("[0x0-0xfffff159 0x10450-0x1d693]", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-3751), 66640, 120467, (-2385), 2220}, intArray0);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 120467);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-3751), 66640, 120467, (-2385), 2220}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(2, (-2385));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-3751), (-3751));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendClassWithSign(intArray0, (-3751));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-3751), 66640, 120467, (-2385), 2220}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.negateClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-3751), 66640, 120467, (-2385), 2220}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendRange(2, 0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      
      int[][] intArray1 = new int[8][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass7 = charClass6.appendNegatedTable(intArray1);
      assertEquals(8, intArray1.length);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass4.appendFoldedRange((-806), 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-3751), 66640, 120467, (-2385), 2220}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertNotNull(charClass8);
      
      int[][] intArray2 = new int[1][4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      CharClass charClass9 = charClass2.appendNegatedTable(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(1, intArray2.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass3);
      assertNotNull(charClass9);
      
      int[] intArray3 = charClass2.toArray();
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(2, intArray3.length);
      assertArrayEquals(new int[] {(-3750), 1114111}, intArray3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-179);
      intArray0[1] = 0;
      intArray0[2] = 91;
      intArray0[3] = (-3107);
      intArray0[4] = 1270;
      intArray0[5] = 3182;
      intArray0[6] = 1204;
      intArray0[7] = 66640;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = (-903);
      intArray0[2] = 2189;
      intArray0[3] = 69246;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, (-903), 2189, 69246}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, (-903), 2189, 69246}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 31, (-902), 2188}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 31, (-902), 2188}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 32);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 31, (-902), 2188}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 770;
      intArray0[1] = 1755;
      intArray0[2] = 32;
      int int0 = 4;
      intArray0[3] = 4;
      intArray0[4] = 93;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 65125;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {770, 1755, 32, 4, 93, 2, 0, 65125}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(2, 1755);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {770, 1755, 32, 4, 93, 2, 0, 65125}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[6];
      intArray1[0] = 2400;
      intArray1[1] = 3840;
      intArray1[2] = 3299;
      intArray1[3] = 178;
      intArray1[4] = 168;
      intArray1[5] = 9;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 9;
      intArray2[1] = 3299;
      intArray2[2] = 2400;
      intArray2[3] = 3299;
      intArray2[4] = 178;
      intArray2[5] = 178;
      intArray2[6] = 3299;
      intArray2[7] = (-60);
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray3 = new int[0][9];
      assertFalse(intArray3.equals((Object)intArray0));
      
      CharClass charClass2 = charClass0.appendNegatedTable(intArray3);
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(0, intArray3.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1310, 1310);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1310;
      intArray0[1] = 1310;
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      intArray0[2] = 1310;
      intArray0[3] = 1310;
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1310, 1310, 1310, 1310}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = new CharClass(intArray0);
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1310, 1310, 1310, 1310}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = new CharClass(intArray0);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass4));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1310, 1310, 1310, 1310}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass3.cleanClass();
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass5));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1310, 1310, 1310, 1310}, intArray0);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass5.negateClass();
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass4));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1309, 1311, 1114111}, intArray0);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass0);
      assertNotSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass4);
      assertNotNull(charClass7);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1310;
      intArray1[1] = 1310;
      intArray1[2] = 1310;
      intArray1[3] = 1310;
      intArray1[4] = 4587;
      intArray0[1] = 1310;
      intArray1[6] = 4;
      intArray1[7] = 1310;
      CharClass charClass8 = charClass7.appendNegatedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 1310, 1311, 1114111}, intArray0);
      assertArrayEquals(new int[] {1310, 1310, 1310, 1310, 4587, 0, 4, 1310}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass0);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertNotSame(charClass7, charClass4);
      assertNotSame(intArray1, intArray0);
      assertNotNull(charClass8);
      
      int[][] intArray2 = new int[3][5];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      CharClass charClass9 = charClass8.appendTable(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray2.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 1310, 1310, 1114111}, intArray0);
      assertArrayEquals(new int[] {1310, 1310, 1310, 1310, 4587, 0, 4, 1310}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass9);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass1);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass9);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertNotSame(charClass7, charClass4);
      assertNotSame(intArray1, intArray0);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass9.appendClassWithSign(intArray1, 1114111);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass3));
      assertFalse(charClass10.equals((Object)charClass0));
      assertFalse(charClass10.equals((Object)charClass1));
      assertFalse(charClass10.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray2.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 1310, 1310, 1114111}, intArray0);
      assertArrayEquals(new int[] {1310, 1310, 1310, 1310, 4587, 0, 4, 1310}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass10);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass10);
      assertNotSame(charClass9, charClass1);
      assertNotSame(charClass10, charClass2);
      assertNotSame(charClass10, charClass6);
      assertSame(charClass10, charClass9);
      assertNotSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertNotSame(charClass10, charClass0);
      assertSame(charClass10, charClass8);
      assertNotSame(charClass10, charClass1);
      assertNotSame(charClass10, charClass4);
      assertSame(charClass10, charClass7);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass6);
      assertSame(charClass7, charClass10);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass9);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertNotSame(charClass7, charClass4);
      assertNotSame(intArray1, intArray0);
      assertNotNull(charClass10);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      
      // Undeclared exception!
      charClass1.appendFoldedRange(3708, 66639);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(65, 60);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 886;
      intArray0[1] = (-2344);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {886, (-2344), 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-200));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass2.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass3.cleanClass();
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertNotNull(charClass7);
      
      int[][] intArray2 = new int[2][8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      CharClass charClass8 = charClass7.appendNegatedTable(intArray2);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray2, intArray1);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.appendClassWithSign(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray2, intArray1);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass8.appendTable(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass10);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass7);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertNotSame(intArray2, intArray1);
      assertNotNull(charClass10);
      
      int[] intArray3 = charClass4.toArray();
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray3.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 886, (-2344)}, intArray0);
      assertArrayEquals(new int[] {(-2343), 1114111}, intArray3);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass10);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertNotNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[][] intArray0 = new int[7][8];
      int int0 = 871;
      int[] intArray1 = new int[5];
      intArray1[0] = 871;
      intArray1[1] = 871;
      intArray1[2] = 871;
      intArray1[3] = 871;
      intArray1[4] = 871;
      CharClass charClass0 = new CharClass(intArray1);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {871, 871, 871, 871, 871}, intArray1);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 66640;
      intArray0[3] = 120467;
      intArray0[4] = (-2385);
      intArray0[5] = 2220;
      String string0 = CharClass.charClassToString(intArray0, 4);
      assertEquals("[0x0 0x10450-0x1d693]", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640, 120467, (-2385), 2220}, intArray0);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 120467);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640, 120467, (-2385), 2220}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(2, (-2385));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-3751), (-3751));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendClassWithSign(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640, 120467, (-2385), 2220}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.negateClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640, 120467, (-2385), 2220}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendRange(2, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass6);
      
      int[][] intArray1 = new int[8][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass7 = charClass6.appendNegatedTable(intArray1);
      assertEquals(8, intArray1.length);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertNotNull(charClass7);
      
      // Undeclared exception!
      charClass7.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1310;
      CharClass charClass1 = charClass0.appendLiteral(1310, 1310);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int int1 = 859;
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendFoldedRange(859, 237);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      int[] intArray0 = null;
      CharClass charClass5 = charClass0.appendFoldedRange(42743, 42743);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      int int1 = 66640;
      int[] intArray0 = new int[3];
      intArray0[0] = 66640;
      intArray0[1] = 66640;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-2);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(6313, 6313);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertEquals("[0x18a9]", string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      
      CharClass charClass3 = charClass1.appendRange((-1738), (-1954));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      String string1 = charClass1.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x18a9 0xfffff936-0xfffff85e]", string1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotNull(string1);
      
      CharClass charClass4 = charClass0.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[][] intArray0 = new int[6][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 497;
      intArray1[1] = 842;
      intArray1[2] = 266;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 266;
      intArray2[1] = 266;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 842;
      intArray3[1] = 266;
      intArray3[2] = 0;
      intArray3[3] = 497;
      intArray3[4] = 266;
      intArray3[5] = 497;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 842;
      intArray4[1] = 497;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 0;
      intArray5[1] = 266;
      intArray5[2] = 463;
      intArray5[3] = 0;
      intArray5[4] = 266;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = 0;
      intArray6[1] = 266;
      intArray6[2] = 497;
      intArray6[3] = 0;
      intArray6[4] = 0;
      intArray6[5] = 266;
      intArray6[6] = 463;
      intArray6[7] = 842;
      intArray6[8] = 0;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 698;
      intArray1[2] = (-203);
      intArray1[3] = 4682;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 698;
      intArray2[2] = 698;
      intArray2[3] = 4682;
      intArray2[4] = (-203);
      intArray2[5] = (-203);
      intArray2[6] = (-203);
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-203);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 0;
      intArray4[1] = 4682;
      intArray4[2] = 4682;
      intArray4[3] = 4682;
      intArray4[4] = (-203);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 698;
      intArray5[1] = 698;
      intArray5[2] = 4682;
      intArray5[3] = (-3378);
      intArray5[4] = 698;
      intArray5[5] = 1908;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 4682;
      intArray6[1] = 1908;
      intArray6[2] = 0;
      intArray6[3] = (-203);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = (-3378);
      intArray7[1] = 1908;
      intArray7[2] = 4682;
      intArray7[3] = 4682;
      intArray7[4] = 1908;
      intArray7[5] = 0;
      intArray7[6] = 1908;
      intArray0[6] = intArray7;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-203));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(37, 37);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 37;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 2433;
      intArray3[1] = 37;
      intArray3[2] = 1920;
      intArray1[5] = intArray3;
      intArray1[6] = intArray0;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-1285);
      intArray4[1] = 1920;
      intArray4[2] = 37;
      intArray4[3] = 37;
      intArray4[4] = 1920;
      intArray1[7] = intArray4;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1310;
      CharClass charClass1 = charClass0.appendLiteral(1310, 1310);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int int1 = 237;
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      int[] intArray0 = null;
      int int2 = 42743;
      int int3 = 1114111;
      // Undeclared exception!
      charClass0.appendFoldedRange(859, 1114111);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1001);
      intArray0[1] = 1509;
      intArray0[2] = (-600);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1001), 1509, (-600)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-600), 0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1001), 1509, (-600)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, (-1001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 2916;
      intArray1[1] = (-3772);
      intArray1[2] = 6263;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-3772);
      intArray2[1] = (-3772);
      intArray2[2] = (-3772);
      intArray2[3] = 2916;
      intArray2[4] = (-3772);
      intArray2[5] = (-4396);
      intArray2[6] = 2916;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 2916;
      intArray3[1] = (-3772);
      intArray3[2] = 2916;
      intArray3[3] = (-3772);
      intArray3[4] = (-4396);
      intArray3[5] = 6263;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-3772);
      intArray4[1] = (-1416);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 6263;
      intArray5[1] = 6263;
      intArray0[4] = intArray5;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 1310;
      CharClass charClass1 = charClass0.appendLiteral(1310, 1310);
      charClass0.negateClass();
      int int1 = 859;
      charClass1.appendFoldedRange(859, 237);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 4234;
      intArray0[2] = 0;
      CharClass charClass1 = charClass0.appendLiteral((-2788), 1790);
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 4234;
      intArray2[3] = 1790;
      intArray2[4] = (-2788);
      intArray2[5] = (-2788);
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[0][7];
      int int0 = 65;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[3];
      int int0 = (-1389);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
      charClass0.cleanClass();
      charClass1.appendClass(intArray0);
      CharClass charClass2 = charClass0.appendFoldedRange(66639, 1123);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toArray();
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendLiteral(37, 37);
      charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[1];
      intArray2[0] = 37;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray3 = new int[3];
      intArray3[0] = 2433;
      intArray3[1] = 37;
      charClass1.appendClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-3113));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toArray();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1213;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.negateClass();
      charClass1.toString();
      CharClass charClass3 = charClass2.cleanClass();
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass4, charClass2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-734);
      intArray0[1] = (-2883);
      intArray0[2] = 4710;
      intArray0[3] = 786;
      intArray0[4] = 8496;
      intArray0[5] = (-2);
      intArray0[6] = (-2551);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-2551));
      CharClass charClass2 = charClass1.appendLiteral((-1036), 0);
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      intArray2[0] = 4710;
      intArray2[1] = (-734);
      intArray2[2] = (-2);
      intArray2[3] = (-1036);
      intArray2[4] = 4710;
      intArray2[5] = 4710;
      intArray2[6] = 786;
      intArray2[7] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, (-2));
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      charClass4.appendTableWithSign(intArray1, 4710);
      assertArrayEquals(new int[] {(-734), (-2883), 4710, 786, 8496, (-2), (-2551)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[2];
      intArray0[5] = intArray1;
      CharClass charClass0 = new CharClass(intArray0[3]);
      CharClass charClass1 = charClass0.appendFoldedRange((-1274), 3074);
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      CharClass charClass1 = charClass0.appendLiteral(1114111, 1114111);
      int[][] intArray1 = new int[7][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[2];
      intArray2[0] = 3096;
      intArray2[1] = 1114111;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      charClass0.cleanClass();
      charClass0.negateClass();
      charClass1.appendNegatedClass(intArray2);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray2, 3096);
      assertSame(charClass1, charClass2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][5];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray1 = new int[9];
      intArray1[0] = 1114111;
      intArray1[1] = 0;
      intArray1[2] = (-536);
      intArray1[3] = 0;
      intArray1[4] = (-1102);
      intArray1[5] = 2633;
      intArray1[6] = 0;
      intArray1[7] = 8000;
      intArray1[8] = (-1113);
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray1, (-1903));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2089;
      intArray1[1] = 21651;
      intArray1[2] = 592;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[12];
      intArray2[0] = 2089;
      intArray2[1] = (-578);
      intArray2[2] = 592;
      intArray2[11] = 2089;
      intArray2[4] = 592;
      intArray0[1] = intArray2;
      charClass0.appendNegatedTable(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      int int1 = 66640;
      int[] intArray0 = new int[7];
      intArray0[0] = 66640;
      intArray0[1] = 66640;
      intArray0[2] = 0;
      intArray0[3] = 66640;
      intArray0[4] = 0;
      intArray0[5] = 66640;
      int int2 = 871;
      intArray0[6] = 871;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      CharClass charClass3 = charClass2.appendClass(intArray1);
      CharClass charClass4 = charClass3.negateClass();
      charClass4.appendLiteral(1, 0);
      int int0 = 2423;
      charClass2.appendClassWithSign(intArray1, 2423);
      CharClass charClass5 = charClass4.appendRange(0, 2423);
      charClass5.appendNegatedClass(intArray1);
      charClass4.appendClassWithSign(intArray0, 0);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass5.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
