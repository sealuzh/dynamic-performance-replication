/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:50:53 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = 1944;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1944, 1944);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(1944);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4aHp", 14);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 4, info : pos 0, json : 4aHp
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("!j4C>>qqs[|Dv}1r", 69);
      char char0 = ':';
      jSONScanner0.scanInt(':');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1944, 1944);
      jSONReaderScanner0.features = 1944;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithFieldName");
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDecimal('Z');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error", 1148);
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      jSONReaderScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(1148);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1319));
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'C';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.np = (-993);
      jSONReaderScanner0.matchField(charArray0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 56, 56);
      jSONReaderScanner0.resetStringPosition();
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. T
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.putChar('k');
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanString('5');
      jSONScanner0.isEOF();
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 1551, 1551);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray1);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanDecimal('|');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23, 2308);
      jSONReaderScanner0.putChar('M');
      jSONReaderScanner0.matchField(charArray0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {'\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.info();
      assertNotNull(string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("pos 0, json :  - ", string0);
      
      String string1 = jSONScanner0.scanString('`');
      assertNull(string1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      assertNotNull(jSONScanner0);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.info();
      assertNotNull(string0);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json :  - ", string0);
      
      jSONScanner0.skipWhitespace();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'r'}, charArray0);
      
      jSONScanner0.scanString();
      int int1 = jSONScanner0.scanInt(charArray0[0]);
      jSONScanner0.copyTo(int0, int0, charArray0);
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, int1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8}cjX=i");
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '|';
      charArray0[2] = '4';
      charArray0[3] = '@';
      charArray0[4] = 'l';
      charArray0[5] = 'Y';
      charArray0[6] = 's';
      charArray0[7] = 'H';
      charArray0[8] = 'o';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'b', '|', '4', '@', 'l', 'Y', 's', 'H', 'o'}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      String string0 = ", ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = (-1670);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'r'}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'r';
      charArray1[1] = 'r';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-1670), 0, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment", 512);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(4096, 4096);
      assertNotNull(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(512);
      assertNotNull(symbolTable0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      String string0 = symbolTable0.addSymbol(charArray0, 98, 1255);
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 512, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'k';
      charArray0[2] = '8';
      charArray0[3] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner("v:.$zA3k");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('v', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('v', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      assertNotNull(jSONScanner1);
      assertEquals(989, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'.', 'k', '8', 'k', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONScanner1.isBlankInput();
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(989, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(20, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONScanner1.matchStat);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'.', 'k', '8', 'k', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Feature feature0 = Feature.SupportNonPublicField;
      jSONScanner1.config(feature0, true);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(132061, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(20, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'.', 'k', '8', 'k', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("v:.$zA3k");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Date date0 = jSONScanner1.scanDate('.');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(date0);
      assertEquals(132061, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'.', 'k', '8', 'k', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      
      char char0 = jSONReaderScanner0.charAt(9967);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'v');
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'v', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'v', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '\'');
      assertNotNull(bigDecimal0);
      assertEquals((byte)39, bigDecimal0.byteValue());
      assertEquals((short)39, bigDecimal0.shortValue());
      
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable('v');
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, '\'');
      assertNull(enum0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'v', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.config(feature0, true);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(263133, jSONReaderScanner0.getFeatures());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'v', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', 'P', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('P');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\'', 'P', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-11));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner("a(H/~V");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('a', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('Z');
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('a', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",BM9");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('K');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1619);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('v');
      assertNull(bigDecimal0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-629), 3265);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("r{K@yX[AR~'i9Edq");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanIdent();
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1305), (-1305));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86, 86);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.resetStringPosition();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanLong('s');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(16384);
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO", 97);
      assertNotNull(jSONReaderScanner0);
      assertEquals(97, jSONReaderScanner0.getFeatures());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('\'');
      assertEquals(97, jSONReaderScanner0.getFeatures());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      Date date0 = jSONReaderScanner0.scanDate('0');
      assertNull(date0);
      assertEquals(97, jSONReaderScanner0.getFeatures());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('}');
      assertNull(bigDecimal0);
      assertEquals(97, jSONReaderScanner0.getFeatures());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1025), 97);
      assertEquals(97, jSONReaderScanner0.getFeatures());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.isRef();
      assertEquals(97, jSONReaderScanner0.getFeatures());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8}cjX=i");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('{');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(8L, long0);
      
      int int0 = 1141;
      SymbolTable symbolTable0 = new SymbolTable(1141);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[5] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken((-1943));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(2569, (-1943));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1943
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = "pos ";
      JSONScanner jSONScanner0 = new JSONScanner("pos ");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanType("XAJNt; (");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 59, 2389);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 256);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(floatArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(bigDecimal0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray1);
      
      char char0 = jSONReaderScanner0.getCurrent();
      assertNotSame(charArray1, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray1 = jSONReaderScanner0.scanFieldFloatArray(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(floatArray1);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 126);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'.', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'.', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'.', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S3=M[+Mq_Of", 10);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      jSONReaderScanner0.scanNumber();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8}cjX=i");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('x');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(8.0F, float0, 0.01F);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      jSONReaderScanner0.nextToken(307);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("L@5N:");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('L', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int1 = Calendar.NARROW_FORMAT;
      assertTrue(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Period");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('j', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      UUID uUID0 = jSONScanner0.scanUUID('y');
      assertNull(uUID0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {'.', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.info();
      assertNotNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("pos 0, json :  - ", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      jSONScanner0.lexError("unclosed str", (Object[]) null);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.matchStat();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '\'';
      SymbolTable symbolTable0 = new SymbolTable(587);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java", 2024);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2024, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertNotNull(string0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("Unknown", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = '3';
      charArray0[3] = 'Z';
      charArray0[4] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreAutoType");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      float float0 = jSONScanner0.scanFloat('W');
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanString('5');
      assertNull(string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("java.util.OptionalDouble", 59);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('j', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(59, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      
      String string1 = jSONScanner1.scanSymbolUnQuoted((SymbolTable) null);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotNull(string1);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(18, jSONScanner1.token());
      assertEquals(59, jSONScanner1.getFeatures());
      assertEquals('.', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals("java", string1);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("r{K@yX[AR~'i9Edq");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('r', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.scanIdent();
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1305), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Date date0 = jSONReaderScanner0.scanDate('P');
      assertNull(date0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.putChar('k');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONScanner0.scanString('5');
      assertNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("java.util.OptionalDouble", 59);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('j', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(59, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('j', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(59, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONScanner1.scanFieldInt(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('j', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(59, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      int int1 = jSONScanner0.pos();
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(int1 == int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      SymbolTable symbolTable0 = new SymbolTable('\'');
      assertNotNull(symbolTable0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("bC0<'=#99-J3");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('b', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('b', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanStringArray((Collection<String>) null, 'C');
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('b', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('b', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertNotNull(string0);
      assertEquals('<', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("bC0", string0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\'');
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONScanner jSONScanner0 = new JSONScanner("cW:HC");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '>');
      assertNotNull(jSONReaderScanner0);
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("cW:HC");
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('c', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      
      int int1 = jSONScanner1.scanInt('>');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('c', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(int1 == int0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BS@jQ7DJRX", (-3082));
      assertNotNull(jSONScanner0);
      assertEquals((-3082), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals((-3082), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      String string0 = jSONScanner0.info();
      assertNotNull(string0);
      assertEquals((-3082), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : BS@jQ7DJRX", string0);
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals((-3082), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      
      SymbolTable symbolTable0 = new SymbolTable('k');
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 51);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      pushbackReader0.close();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51, 45);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('\u0000');
      assertNull(date0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertNull(intArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = (-3868);
      int int1 = jSONReaderScanner0.intValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertFalse(int1 == int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-3868));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 256);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray1);
      
      SymbolTable symbolTable0 = new SymbolTable(1);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 958);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(958, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("null", 780);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(780, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 958);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(958, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("null", 780);
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(780, jSONScanner1.getFeatures());
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      
      UUID uUID0 = jSONScanner1.scanUUID('?');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(uUID0);
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(780, jSONScanner1.getFeatures());
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      
      String string0 = jSONScanner1.scanSymbolUnQuoted((SymbolTable) null);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(string0);
      assertEquals(18, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(780, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '%';
      charArray0[6] = '^';
      charArray0[7] = 'h';
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(18, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(780, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'?', '%', '%', '^', '^', '%', '^', 'h'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'?', '%', '%', '^', '^', '%', '^', 'h'}, charArray0);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",BM9/j%0AhNtx=Ut", 3045);
      assertNotNull(jSONReaderScanner0);
      assertEquals(3045, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(3045);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertNull(string0);
      assertEquals(3045, jSONReaderScanner0.getFeatures());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("exepct '[',n but ");
      assertNotNull(jSONReaderScanner1);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '%';
      boolean boolean0 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', '%'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(3045, jSONReaderScanner0.getFeatures());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'t', '%'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.isEnabled(3045);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(3045, jSONReaderScanner0.getFeatures());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('%');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match % - B, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(1011);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, ';');
      assertNull(string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string1 = jSONReaderScanner0.info();
      assertNotNull(string1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      
      jSONReaderScanner0.scanIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string2 = jSONReaderScanner0.stringVal();
      assertNotNull(string2);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("Feature", string2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("@-", (-11));
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('@', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-11), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      
      char char0 = '^';
      jSONScanner1.eofPos = (-11);
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('@', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-11), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      UUID uUID0 = jSONScanner1.scanUUID('^');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(uUID0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('@', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-11), jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      
      char[] charArray0 = new char[0];
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('@', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-11), jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        stringReader0.mark((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithFieldName");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = 'Z';
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertNull(intArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('Z');
      assertNull(bigDecimal0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unterminated json string, ");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      long long0 = pushbackReader0.skip(8L);
      assertEquals(8L, long0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(pushbackReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = '%';
      double double0 = jSONReaderScanner0.scanDouble('%');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithFieldName");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('?');
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ZP{:a", 1558);
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(1558, jSONReaderScanner1.getFeatures());
      assertEquals('Z', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.setToken(726);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(726, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(1558, jSONReaderScanner1.getFeatures());
      assertEquals('Z', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithFieldName");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4fm\"3n{gyWgL75-9_7C", (-1396));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1396), jSONReaderScanner1.getFeatures());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.setToken(52);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1396), jSONReaderScanner1.getFeatures());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(52, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanString();
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1396), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(4, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner1.arrayCopy(115, charArray0, (-827), 24180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.Feature", 1676);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1676, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("com.alibaba.fastjson.parser.Feature");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1676, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 2122;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2122);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = TimeZone.getAvailableIDs();
      assertNotNull(stringArray0);
      
      int int1 = (-976);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 693, 463);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[5] = 'e';
      charArray0[1] = '?';
      charArray0[2] = 'j';
      charArray0[3] = '%';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanString('E');
      assertNull(string0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("CuWerWn>`*w=K;my]", (-2478));
      assertNotNull(jSONScanner1);
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2478), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('C', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      
      int int0 = jSONScanner1.scanInt(':');
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2478), jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('C', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(0, int0);
      
      String string1 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(string1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2478), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('C', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '?', 'j', '%', '\u0000', 'e', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(2);
      assertNotNull(symbolTable0);
      
      String string2 = jSONScanner1.scanSymbolUnQuoted(symbolTable0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotNull(string2);
      assertEquals('>', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-2478), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(18, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals("CuWerWn", string2);
      
      long long1 = jSONScanner0.scanFieldSymbol(charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(long1 == long0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long1);
      assertArrayEquals(new char[] {'\u0000', '?', 'j', '%', '\u0000', 'e', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '?', 'j', '%', '\u0000', 'e', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '?', 'j', '%', '\u0000', 'e', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[1] = 't';
      charArray0[2] = '$';
      charArray0[3] = 'A';
      charArray0[4] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      assertNotNull(jSONReaderScanner0);
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'3', 't', '$', 'A', 'F'}, charArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) "c";
      objectArray0[3] = (Object) charArray0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) jSONReaderScanner0;
      objectArray0[6] = (Object) "c";
      objectArray0[7] = (Object) jSONReaderScanner0;
      objectArray0[8] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("c", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'3', 't', '$', 'A', 'F'}, charArray0);
      
      int int0 = jSONReaderScanner0.token();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'3', 't', '$', 'A', 'F'}, charArray0);
      
      int int1 = jSONReaderScanner0.getFeatures();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(int1 == int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, int1);
      assertArrayEquals(new char[] {'3', 't', '$', 'A', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 48);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(48, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextIdent();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(22, jSONScanner0.token());
      assertEquals(48, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      int int0 = 70;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken(0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertNotNull(jSONReaderScanner1);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(41);
      assertNotNull(symbolTable0);
      
      String string0 = symbolTable0.addSymbol(charArray0, 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string1 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertNotNull(string1);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("TreeSet", string1);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'h';
      charArray1[1] = 'h';
      charArray1[2] = 'h';
      charArray1[3] = 'N';
      charArray1[4] = 'h';
      long long0 = jSONScanner0.scanFieldSymbol(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'N', 'h'}, charArray1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 665);
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner1.newCollectionByType(class0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(collection0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java(util.OptionalDouble");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      jSONReaderScanner0.nextToken(4);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int1 = Calendar.NARROW_FORMAT;
      assertTrue(int1 == int0);
      assertEquals(4, int1);
      
      boolean boolean2 = jSONReaderScanner0.isEnabled(20, 4);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean2);
      
      boolean boolean3 = jSONReaderScanner0.isEnabled(20);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean3);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = Calendar.NARROW_FORMAT;
      JSONScanner jSONScanner0 = new JSONScanner("type not match. ", (-324));
      ZoneId.getAvailableZoneIds();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "EOF";
      jSONScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.info();
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      jSONScanner0.pos = 69;
      JSONScanner jSONScanner1 = new JSONScanner(" - ");
      int int0 = Calendar.FEBRUARY;
      jSONScanner0.scanFloat('.');
      int int1 = Calendar.NARROW_FORMAT;
      jSONScanner1.nextToken((-261));
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner1.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      char[] charArray1 = new char[1];
      jSONReaderScanner0.scanFieldUUID(charArray1);
      jSONReaderScanner0.scanDouble('N');
      int int0 = 1404;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.isEnabled((-1), (-1));
      jSONReaderScanner0.scanInt('^');
      jSONReaderScanner0.close();
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanDecimal('^');
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = "new";
      JSONScanner jSONScanner0 = new JSONScanner("new");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.scanIdent();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = '6';
      charArray0[3] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 694);
      jSONReaderScanner0.eofPos = 694;
      jSONReaderScanner0.lexError("|", (Object[]) null);
      jSONReaderScanner0.eofPos = 463;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('x');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'V';
      charArray0[2] = '6';
      charArray0[3] = '.';
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qm4K'8Uj6LW");
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-59);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, (byte)116);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isEnabled((int) (byte)116);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-630));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IgnoreNonFieldGetter", (-3080));
      SymbolTable symbolTable0 = new SymbolTable(77);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("e8s#");
      Locale locale0 = Locale.KOREAN;
      jSONScanner0.longValue();
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(2690, 2690);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      String string0 = " - ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      char[] charArray1 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanFieldUUID(charArray1);
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-1));
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state.  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'P');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 45;
      JSONScanner jSONScanner0 = new JSONScanner("jva.util.OptionalDouble", 45);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      char char0 = '7';
      jSONReaderScanner0.scanBoolean('7');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("WriteNullNumberAsZero");
      char char0 = '7';
      jSONScanner0.scanFloat('7');
      jSONScanner0.scanDouble('5');
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon((int) '5');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - W, info : pos 0, json : WriteNullNumberAsZero
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "M";
      JSONScanner jSONScanner0 = new JSONScanner("M");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanString('5');
      jSONScanner0.scanFieldDouble(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compakible}ithFieldName");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 192, 192);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("fastjson.compakible}ithFieldName");
      jSONReaderScanner2.scanFieldLong(charArray0);
      jSONReaderScanner2.scanFieldString(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("VYPa>O|B=m2<");
      jSONScanner0.intValue();
      JSONScanner jSONScanner1 = new JSONScanner("g{PTUe~YKVvE]%*o_{");
      jSONScanner1.scanFloat('.');
      jSONScanner1.scanFieldSymbol(charArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      JSONScanner jSONScanner0 = new JSONScanner("new", 299);
      jSONScanner0.scanFloat('.');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.intValue();
      System.setCurrentTimeMillis(84);
      JSONScanner jSONScanner1 = new JSONScanner("new");
      JSONScanner jSONScanner2 = new JSONScanner("new");
      JSONScanner jSONScanner3 = new JSONScanner("A(|0b{}BM'D8cxwxu9");
      jSONScanner3.matchField(charArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '.';
      charArray0[0] = '.';
      charArray0[5] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0;rq].k4", '.');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('A');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BAYY7");
      SymbolTable symbolTable0 = new SymbolTable(2302);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.intValue();
      int int0 = Calendar.SHORT;
      jSONScanner0.nextToken();
      jSONScanner0.isRef();
      JSONScanner jSONScanner1 = new JSONScanner("BAYY7");
      jSONScanner1.info();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i#A(y$}J+=?", (-774));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "KV?";
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) charArray0;
      jSONReaderScanner0.lexError("wl5DXJzb`ek|8><", objectArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanInt('K');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str", 1325);
      jSONScanner0.nextToken();
      jSONScanner0.scanBoolean('-');
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('-', 'K', 'K', 'K', 'K', 'K');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8}cjX=i");
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.matchField(charArray0);
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.subString(67, 1143);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("CxvM+gb.C!iWGU){#", (-774));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner("false", 1390);
      jSONScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '\'';
      charArray0[1] = 'P';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SymbolTable symbolTable0 = new SymbolTable(587);
      String string0 = "j";
      JSONScanner jSONScanner0 = new JSONScanner("j", 200);
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : j
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[2] = 'j';
      charArray0[3] = '%';
      charArray0[5] = 'j';
      charArray0[6] = 't';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[7] = 'D';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONScanner jSONScanner0 = new JSONScanner("error are new", (-70));
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("error are new");
      jSONScanner1.scanFloat('t');
      jSONScanner1.scanDouble('*');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - a, info : pos 6, json : error are new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[0];
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1877));
      BigDecimal bigDecimal0 = new BigDecimal(84);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1);
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 84);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.longValue();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[7];
      SymbolTable symbolTable0 = new SymbolTable(587);
      String string0 = "}";
      JSONScanner jSONScanner0 = new JSONScanner("}");
      jSONScanner0.nextToken();
      jSONScanner0.features = 200;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("neP", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unterminated json string, ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ", 23);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d1zmb{uSsR");
      jSONReaderScanner0.nextToken(20);
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanUUID('t');
      jSONScanner0.scanBoolean('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(20, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference", (-1127));
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      JSONScanner jSONScanner1 = new JSONScanner("true");
      jSONScanner0.scanBoolean('\u0015');
      jSONScanner1.intValue();
      int int0 = Calendar.NARROW_FORMAT;
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      JSONScanner jSONScanner0 = new JSONScanner("@)3#&7C{fAgUj\"");
      jSONScanner0.info();
      jSONScanner0.skipWhitespace();
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("treeset");
      jSONScanner1.intValue();
      jSONScanner1.scanFloat('}');
      int int0 = Calendar.NARROW_FORMAT;
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '\'';
      charArray0[6] = '\'';
      char char1 = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 733);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      int int0 = Calendar.NARROW_FORMAT;
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      int int1 = Calendar.NARROW_FORMAT;
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SortFeidFastMatch");
      JSONScanner jSONScanner0 = new JSONScanner("}");
      jSONScanner0.nextToken();
      jSONScanner0.features = 200;
      JSONScanner jSONScanner1 = new JSONScanner("}");
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanIdent();
      jSONScanner0.scanBoolean('\'');
      jSONScanner0.intValue();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = (-1987);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1987));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8}cjX=i");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      jSONScanner0.info();
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.nextToken((-734));
      jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("undefined");
      jSONScanner0.intValue();
      jSONScanner0.scanFloat('\'');
      int int0 = Calendar.NARROW_FORMAT;
      jSONScanner1.nextToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner1.scanFieldInt(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f", 101);
      jSONReaderScanner0.pos();
      jSONReaderScanner0.np = 101;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f");
      jSONReaderScanner0.scanInt('<');
      jSONReaderScanner0.longValue();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "Set";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      char[] charArray0 = new char[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = 'r';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 192, 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("J", 1596);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner(" 5*:iyE./JBvlg9DQ");
      jSONScanner0.info();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      jSONScanner0.scanFloat('M');
      int int0 = Calendar.NARROW_FORMAT;
      JSONScanner jSONScanner1 = new JSONScanner(" 5*:iyE./JBvlg9DQ", 357);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, 'P');
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F");
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", (-2));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SymbolTable symbolTable0 = new SymbolTable(2302);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      JSONScanner jSONScanner1 = new JSONScanner("F", (-2));
      jSONScanner1.scanBoolean('k');
      jSONScanner1.intValue();
      JSONScanner jSONScanner2 = new JSONScanner("scan true error");
      jSONScanner2.np = 2302;
      jSONReaderScanner0.scanNumber();
      jSONScanner0.nextToken();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner2.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithFieldName");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 192, 192);
      jSONReaderScanner1.resetStringPosition();
      char char0 = 'z';
      jSONReaderScanner0.scanLong('z');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null", 0);
      jSONReaderScanner0.scanDecimal('V');
      char[] charArray1 = new char[5];
      charArray1[1] = 'z';
      charArray1[4] = 'V';
      jSONReaderScanner1.scanFieldFloatArray(charArray1);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner2.nextToken((-1527));
      JSONScanner jSONScanner0 = new JSONScanner("null", 20);
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner(charArray1, (-1527), (-1838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner(" 5*:iyE./JBvlg9DQ");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner1 = new JSONScanner("'&iG'u]jN%", 0);
      jSONScanner0.scanFieldSymbol(charArray0);
      JSONScanner jSONScanner2 = new JSONScanner("Vf)Fr?Me;c?zf");
      jSONScanner2.intValue();
      jSONScanner0.scanBoolean('*');
      jSONScanner0.longValue();
      jSONReaderScanner0.next();
      jSONReaderScanner0.longValue();
      int int0 = 2369;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '.';
      charArray0[0] = '.';
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference", (-1127));
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.nextToken((-1127));
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      jSONScanner0.scanBoolean('N');
      jSONScanner0.intValue();
      int int0 = Calendar.NARROW_FORMAT;
      int int1 = (-550);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-682));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference", (-1127));
      SymbolTable symbolTable0 = null;
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.scanBoolean('.');
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, (byte)116);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Feature feature0 = Feature.DisableASM;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d[{^P6xv0LF5+^");
      jSONScanner0.putChar('k');
      JSONScanner jSONScanner1 = new JSONScanner("d[{^P6xv0LF5+^", 'k');
      jSONScanner0.longValue();
      JSONScanner jSONScanner2 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d[{^P6xv0LF5+^", 0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = Calendar.NARROW_FORMAT;
      jSONReaderScanner0.close();
      jSONReaderScanner0.tokenName();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray1 = new char[0];
      int int0 = 188;
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      jSONScanner0.scanFieldBigInteger(charArray1);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2, 2);
      jSONReaderScanner0.nextToken(2);
      int int0 = Calendar.NARROW_FORMAT;
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldDate(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.sub_chars(1782, 66);
      jSONReaderScanner0.scanDate('M');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'V';
      charArray0[2] = '6';
      charArray0[3] = '.';
      charArray0[4] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 693);
      jSONReaderScanner0.eofPos = 463;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextTokenWithChar('V');
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONReaderScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'V';
      charArray0[2] = 'e';
      charArray0[3] = '.';
      charArray0[3] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 693);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.eofPos = 463;
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match P - e, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner(",BM9");
      int int0 = Calendar.NARROW_FORMAT;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^g%|08V^dp' GWnh*>");
      jSONReaderScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = '#';
      charArray1[1] = '#';
      charArray1[2] = '#';
      jSONScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("illegal setter");
      jSONScanner0.nextIdent();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q[#.YRRivT&7N#");
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.close();
      jSONScanner0.bytesValue();
      jSONScanner0.integerValue();
      jSONScanner0.scanLong('#');
      char[] charArray1 = new char[4];
      charArray1[1] = '';
      charArray1[3] = 'i';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray1, 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      SymbolTable symbolTable0 = new SymbolTable(1);
      JSONScanner jSONScanner0 = new JSONScanner("NotWriteRootClassName");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('#', '#', 'X');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'V';
      charArray0[2] = '6';
      charArray0[3] = '.';
      charArray0[4] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 693);
      jSONReaderScanner0.eofPos = 463;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextTokenWithChar('V');
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.calendar = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray1 = new char[9];
      charArray1[0] = '6';
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[12];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ZI(wQj+iy'/7~{X?6#", 40);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " is not a primitive type");
      JSONScanner jSONScanner0 = new JSONScanner("H4-^L!G.q%");
      jSONScanner0.scanFloat('$');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner1 = new JSONScanner("S");
      jSONReaderScanner0.nextToken();
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'V';
      charArray0[2] = '6';
      charArray0[3] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 693);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.eofPos = 463;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextTokenWithChar('V');
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      Class<InputStream> class0 = InputStream.class;
      SymbolTable symbolTable0 = new SymbolTable(463);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'e');
      jSONReaderScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = 1619;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1619);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      String string0 = "false";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string1 = "%";
      JSONScanner jSONScanner0 = new JSONScanner("false", 99);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '#';
      charArray0[2] = '\u0080';
      charArray0[3] = '`';
      charArray0[4] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, (-612));
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      JSONScanner jSONScanner0 = new JSONScanner("pvfR)ZVa6E`?3QZy");
      jSONScanner0.scanFieldBigInteger(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("pvfR)ZVa6E`?3QZy", 19);
      jSONReaderScanner1.isEnabled((-2153), (-1536));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "fastjson.compatibleWithFieldName";
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 681);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-2));
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Feature feature0 = Feature.DisableASM;
      int int0 = 1315;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 681, 1315);
      Feature feature1 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature1, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'P';
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      char[] charArray1 = new char[1];
      charArray1[0] = 'P';
      jSONReaderScanner0.scanFieldLong(charArray1);
      int int0 = 463;
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ' - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(2389);
      StringReader stringReader0 = new StringReader("!DDFZ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!DDFZ", 1023);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.indexOf('c', 'c');
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithFieldName");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 192, 192);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner0.scanLong('z');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null", 0);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanIdent();
      JSONScanner jSONScanner1 = new JSONScanner("&<vx0!ny%=?~$PW");
      char char0 = '9';
      jSONScanner1.scanBoolean('9');
      jSONScanner0.intValue();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 118);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\u001B';
      char[] charArray1 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(1);
      JSONScanner jSONScanner0 = new JSONScanner("[", 200);
      jSONScanner0.scanFieldSymbol(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6);
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.nextToken(200);
      int int0 = Calendar.NARROW_FORMAT;
      JSONScanner jSONScanner1 = new JSONScanner("NkYgQd&P&yd1<T");
      jSONScanner0.nextToken();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      int int1 = Calendar.NARROW_FORMAT;
      jSONScanner1.nextToken();
      jSONScanner1.integerValue();
      SymbolTable symbolTable1 = new SymbolTable(200);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 1, json : [
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8}cjX=i");
      jSONReaderScanner0.scanFloat('x');
      char[] charArray0 = new char[9];
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("eKv%n${f0/P'y8Bu{\"");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanUUID('|');
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      StringReader stringReader0 = new StringReader("S8D*Q");
      jSONReaderScanner0.isEnabled(106, (-2));
      jSONReaderScanner0.scanInt('x');
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '\'';
      SymbolTable symbolTable0 = new SymbolTable(587);
      JSONScanner jSONScanner0 = new JSONScanner("8'");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8'");
      jSONReaderScanner0.scanInt('\'');
      StringReader stringReader0 = new StringReader("8'");
      stringReader0.close();
      stringReader0.markSupported();
      Locale locale0 = new Locale("8'");
      jSONReaderScanner0.locale = locale0;
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 70);
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner1.config(feature0, false);
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable1 = new SymbolTable(102);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldStringArray(charArray0, 8, symbolTable1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.isBlankInput();
      jSONScanner0.info();
      jSONScanner0.skipWhitespace();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      SymbolTable symbolTable0 = new SymbolTable(120);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" - ", (-400));
      jSONReaderScanner1.scanLong('7');
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-1064));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner1 = new JSONScanner(" - ", 1080);
      jSONScanner0.matchField(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Calendar.JANUARY;
      jSONReaderScanner0.next();
      JSONScanner jSONScanner2 = new JSONScanner("syntax error, position at ");
      jSONScanner1.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner3 = new JSONScanner("unterminated");
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      jSONReaderScanner0.config(feature0, false);
      JSONScanner jSONScanner4 = new JSONScanner("unterminated", 120);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error", (-1167));
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.config(feature0, false);
      JSONScanner jSONScanner0 = new JSONScanner("Z~!Leqs(FPp$");
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      jSONScanner0.charArrayCompare(charArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      char[] charArray1 = new char[2];
      charArray1[0] = '\'';
      charArray1[1] = 'Y';
      JSONScanner jSONScanner0 = new JSONScanner("'*BXgqR=P`");
      jSONScanner0.scanFloat(';');
      int int0 = Calendar.NARROW_FORMAT;
      jSONScanner0.skipComment();
      jSONScanner0.scanFieldSymbol(charArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature");
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 31);
      jSONReaderScanner0.scanDecimal('B');
      jSONReaderScanner1.matchField(charArray0);
      jSONReaderScanner1.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanNumber();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.nextToken(31);
      JSONScanner jSONScanner0 = new JSONScanner("#+oG;8$UCGj9HFeb", (-2));
      long long1 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.charArrayCompare(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      char[] charArray1 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(1);
      int int0 = 188;
      JSONScanner jSONScanner0 = new JSONScanner("", 188);
      jSONScanner0.scanFieldSymbol(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6);
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "encodeUTF8 error");
      byteArray0[0] = (byte)15;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)15;
      JSONScanner jSONScanner0 = new JSONScanner("encodeUTF8 error", (-1324));
      jSONScanner0.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner("encodeUTF8 error");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1619);
      jSONReaderScanner0.scanFloat('x');
      JSONScanner jSONScanner0 = new JSONScanner("IncUy\"K", 45);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      JSONScanner jSONScanner1 = new JSONScanner("error");
      jSONScanner1.intValue();
      int int0 = Calendar.NARROW_FORMAT;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unterminated json string, ");
      char char0 = 't';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")");
      jSONReaderScanner0.nextToken(41);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'P';
      int int0 = 116;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '\'';
      charArray0[0] = '\'';
      char char1 = 'b';
      StringReader stringReader0 = new StringReader("W#v");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      int int0 = 6;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(pushbackReader0, 6);
      jSONReaderScanner0.nextToken(2);
      Class<Integer> class0 = Integer.class;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = 67;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(1527, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[0];
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      BigDecimal bigDecimal0 = new BigDecimal((-1877));
      JSONScanner jSONScanner0 = new JSONScanner(":E?c9mVA", 15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.matchField(charArray0);
      jSONScanner0.intValue();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1254));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nkygqd");
      char[] charArray0 = new char[0];
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      JSONScanner jSONScanner1 = new JSONScanner("mKWW@6k@D@");
      jSONScanner0.scanUUID('m');
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      StringReader stringReader0 = new StringReader("com.google.common.collect.ArrayListMultimap");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ih{s7bfIujCZ");
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.stringDefaultValue = "Ih{s7bfIujCZ";
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanLong('9');
      jSONReaderScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8}cjX=i");
      char[] charArray0 = new char[9];
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8}cjX=i", 102);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8}cjX=i");
      jSONReaderScanner1.scanDate('7');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 102);
      jSONReaderScanner2.scanDouble('7');
      jSONReaderScanner1.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nkygqd");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      JSONScanner jSONScanner1 = new JSONScanner("!DDFZ", (-1));
      SymbolTable symbolTable0 = new SymbolTable(2389);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '1');
      jSONScanner1.scanFieldSymbol(charArray0);
      StringReader stringReader0 = new StringReader("!DDFZ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$ref", 2389);
      jSONScanner0.scanFloat('c');
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gNX07{kcq24", 83);
      jSONReaderScanner0.scanLong('o');
      JSONScanner jSONScanner0 = new JSONScanner("gNX07{kcq24", (-1));
      JSONScanner jSONScanner1 = new JSONScanner("(z@B)5,5X0<mg");
      SymbolTable symbolTable0 = new SymbolTable('`');
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.intValue();
      jSONReaderScanner0.scanNumber();
      jSONScanner0.nextToken();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      jSONScanner1.scanUUID('\u0000');
      jSONReaderScanner0.addSymbol(40, 0, 1254, symbolTable0);
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = '#';
      charArray0[2] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1404);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanLong(']');
      String string0 = "c/iNrR7N NGb\\08";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(2389);
      String string0 = "\\5:6X$";
      StringReader stringReader0 = new StringReader("\u0005:6X$");
      int int0 = Calendar.NARROW_FORMAT;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 249);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("\u0005:6X$", (-3044));
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.scanBoolean('s');
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nkygqd");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nkygqd", 0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nkygqd", (-1877));
      int int0 = 84;
      BigDecimal bigDecimal0 = new BigDecimal(84);
      jSONScanner0.scanFloat('{');
      int int1 = Calendar.PM;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8}cjX=i");
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("]");
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int0 = Calendar.NARROW_FORMAT;
      jSONReaderScanner1.nextToken(0);
      JSONScanner jSONScanner0 = new JSONScanner("Z_R2KPjQh]Xd");
      jSONScanner0.scanFloat('Z');
      int int1 = Calendar.NARROW_FORMAT;
      jSONReaderScanner0.isEnabled(4, 99);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("GW%T6>&~\"$C>b", 143);
      jSONReaderScanner2.isEnabled((-1509));
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 2);
      jSONScanner0.scanFloat('{');
      int int2 = Calendar.NARROW_FORMAT;
      jSONScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nkygqd");
      char[] charArray0 = new char[0];
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      jSONScanner0.skipWhitespace();
      JSONScanner jSONScanner1 = new JSONScanner("mKWW@6k@D@");
      jSONScanner0.scanUUID('m');
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      StringReader stringReader0 = new StringReader("com.google.common.collect.ArrayListMultimap");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nkygqd", (-1));
      jSONReaderScanner0.isEnabled((-1), 19);
      jSONReaderScanner0.scanFieldLong(charArray0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("b@lega4");
      char[] charArray0 = new char[0];
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      StringReader stringReader0 = new StringReader("b@lega4");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b@lega4", 44);
      jSONReaderScanner0.scanFieldDate(charArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1639), (-1), 1608, 44, (-750));
      char char1 = 'q';
      SymbolTable symbolTable0 = new SymbolTable(3185);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'P';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48);
      jSONReaderScanner0.scanBoolean('J');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 48);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('v');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match v - 1, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      String string0 = "new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1877));
      BigDecimal bigDecimal0 = new BigDecimal((-1877));
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getLocale();
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = '?';
      charArray0[2] = 'B';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1877), 57344);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SymbolTable symbolTable0 = new SymbolTable(1);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[5] = '|';
      Class<InputStream> class0 = InputStream.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'p');
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("vmH/c2\"3g-HNW87n'", (-1877));
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("lPWF-@8g'2");
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("vmH/c2\"3g-HNW87n'", 106);
      jSONScanner0.scanFieldSymbol(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("new");
      jSONScanner0.intValue();
      jSONScanner0.scanBoolean('*');
      jSONScanner0.longValue();
      jSONReaderScanner1.next();
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(106);
      jSONReaderScanner2.longValue();
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("5_1{7[joz0", (-1877));
      jSONReaderScanner2.scanFieldFloat(charArray0);
      jSONReaderScanner3.scanDouble('>');
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner3.scanFieldDate(charArray0);
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.Locale
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = '\u0000';
      charArray0[3] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 980);
      int int0 = 4940;
      SymbolTable symbolTable0 = new SymbolTable(4940);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ZD&Y)6");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("5B1]", 36);
      jSONReaderScanner2.nextToken();
      jSONReaderScanner2.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("NlY", 512);
      jSONReaderScanner2.getTimeZone();
      jSONReaderScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pdE]|@S,eXNirECZW");
      jSONScanner0.intValue();
      jSONScanner0.matchStat = 2103;
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      jSONScanner0.charArrayCompare(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("illegal setter");
      jSONScanner0.bytesValue();
      jSONScanner1.scanFloat('U');
      int int0 = 2144;
      SymbolTable symbolTable0 = new SymbolTable(2144);
      jSONScanner1.scanSymbolUnQuoted(symbolTable0);
      jSONScanner1.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2103, 2659);
      jSONReaderScanner0.next();
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 2144, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("11+OdbP(&8 ;");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("11+OdbP(&8 ;", 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("11+OdbP(&8 ;", 748);
      int int0 = 1992;
      char char0 = '&';
      char char1 = 't';
      jSONReaderScanner0.scanDouble('t');
      JSONScanner jSONScanner1 = new JSONScanner("11+OdbP(&8 ;", (byte)68);
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'f';
      char[] charArray1 = new char[2];
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 48);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 48, 0);
      jSONReaderScanner1.scanBoolean('\'');
      String string0 = "x";
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray1, (-3431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256);
      BigDecimal bigDecimal0 = new BigDecimal(256);
      jSONReaderScanner0.scanDecimal('O');
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner(":E?c9mVA", (-1));
      jSONScanner0.scanFloat('O');
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.nextTokenWithColon(26);
      SymbolTable symbolTable0 = new SymbolTable(26);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ?pos 2, json : :E?c9mVA
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 945);
      JSONScanner jSONScanner1 = new JSONScanner("null");
      char[] charArray0 = null;
      jSONScanner1.intValue();
      jSONScanner0.scanFloat('^');
      int int0 = Calendar.PM;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '7');
      jSONReaderScanner0.setToken(0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("exepct '[',n but ");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(":1$]k");
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("exepct '[',n but ", '7');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('d');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("b@lega4");
      char[] charArray0 = new char[0];
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      jSONScanner0.scanType("pos ");
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b@lega4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      int int0 = Calendar.NARROW_FORMAT;
      jSONReaderScanner0.nextToken(4);
      JSONScanner jSONScanner1 = new JSONScanner("3:9y<ZQd[%");
      jSONScanner1.scanFloat('A');
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner1.isEnabled(36, (-1));
      jSONScanner1.scanDecimal('v');
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 36, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '_';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ", (-5064));
      jSONScanner0.info();
      jSONScanner0.scanISO8601DateIfMatch(false);
      SymbolTable symbolTable0 = new SymbolTable(97);
      jSONScanner0.scanSymbol(symbolTable0, 'e');
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\'');
      jSONReaderScanner0.scanBoolean('\'');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nkygqd");
      JSONScanner jSONScanner0 = new JSONScanner("nkygqd");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("illegal setter");
      jSONScanner0.nextIdent();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q[#.YRRivT&7N#");
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner1.close();
      JSONScanner jSONScanner2 = new JSONScanner("q[#.YRRivT&7N#");
      jSONScanner2.intValue();
      jSONScanner2.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner2.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '$';
      charArray0[0] = '$';
      int int0 = 1;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F", '$');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int1 = Calendar.SECOND;
      jSONReaderScanner0.nextToken(13);
      JSONScanner jSONScanner0 = new JSONScanner("j");
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      char[] charArray0 = new char[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = 'u';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("DO%]", 1591);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 7);
      jSONReaderScanner1.scanLong('-');
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-1));
      JSONScanner jSONScanner1 = new JSONScanner("Set", 'u');
      SymbolTable symbolTable0 = new SymbolTable(173);
      jSONScanner1.scanSymbolUnQuoted(symbolTable0);
      JSONScanner jSONScanner2 = new JSONScanner("FT1", 962);
      jSONScanner1.scanBoolean('f');
      jSONScanner0.intValue();
      JSONScanner jSONScanner3 = new JSONScanner("DO%]");
      jSONReaderScanner1.scanNumber();
      jSONScanner2.nextToken();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      jSONScanner2.scanUUID('y');
      jSONScanner1.nextToken();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      char[] charArray1 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(22);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6);
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.nextToken(200);
      int int0 = Calendar.NARROW_FORMAT;
      JSONScanner jSONScanner0 = new JSONScanner("NkYgQd&P&yd1<T");
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      JSONScanner.charArrayCompare("todo", 22, charArray0);
      jSONReaderScanner0.scanString('v');
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal(256);
      JSONScanner jSONScanner0 = new JSONScanner(":E?YmA", (-1));
      int int0 = 115;
      SymbolTable symbolTable0 = new SymbolTable(115);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'F');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '\'';
      JSONScanner jSONScanner0 = new JSONScanner("11+OUbP(&8 ;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("11+OUbP(&8 ;", 0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '\u0000');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.scanBoolean('\u0000');
      Locale locale0 = Locale.CANADA;
      JSONScanner jSONScanner0 = new JSONScanner("<]QD\"xoB'", 32);
      jSONScanner0.scanISO8601DateIfMatch(false);
      int int0 = 10;
      SymbolTable symbolTable0 = new SymbolTable(10);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '.');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256);
      BigDecimal bigDecimal0 = new BigDecimal(256);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner(":E?c9mVA", 0);
      jSONScanner0.scanFloat('O');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "unterminated";
      JSONScanner jSONScanner1 = new JSONScanner("unterminated", 56);
      jSONScanner1.matchField(charArray0);
      jSONScanner1.scanBoolean('?');
      // Undeclared exception!
      try { 
        jSONScanner1.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // unterminated
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[0];
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 104);
      jSONReaderScanner0.scanBoolean('F');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Locale locale0 = Locale.ENGLISH;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 48);
      jSONReaderScanner0.scanDouble(',');
      jSONReaderScanner0.charArrayCompare(charArray0);
      String string0 = "}{gx,iMq?}%@4\\Y1SK";
      JSONScanner jSONScanner0 = new JSONScanner("}{gx,iMq?}%@4Y1SK");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '#';
      charArray0[2] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2, 2);
      jSONReaderScanner0.nextToken(2);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 39);
      jSONReaderScanner1.scanFieldLong(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("9f'33JVN6;NnV");
      JSONScanner jSONScanner1 = new JSONScanner("9f'33JVN6;NnV", (-1));
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("9f'33JVN6;NnV");
      String string0 = "set";
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("set", 122);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("11+OdbP(&8 ;");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("11+OdbP(&8 ;", 0);
      jSONScanner0.bytesValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError((String) null, objectArray0);
      int int0 = 81;
      char[] charArray0 = jSONReaderScanner0.sub_chars(81, 5172);
      jSONReaderScanner0.scanNumber();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      BigDecimal bigDecimal0 = new BigDecimal(125);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      jSONReaderScanner0.matchField(charArray0);
      int int0 = 8192;
      JSONScanner jSONScanner0 = new JSONScanner("-vT<]h", 8192);
      jSONScanner0.scanFloat(';');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = 56;
      jSONReaderScanner0.lexError("-vT<]h", (Object[]) null);
      JSONScanner jSONScanner1 = new JSONScanner(":E?c9mVA", 8192);
      jSONScanner1.matchField(charArray0);
      jSONScanner1.scanBoolean('x');
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = '6';
      charArray0[3] = '.';
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      String string0 = "encodeUTF8 error";
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)32;
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int0 = Calendar.NARROW_FORMAT;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96);
      jSONReaderScanner0.nextToken((int) (byte)15);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (byte)15);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal(256);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(":E?c9mVA", (-1));
      jSONScanner0.scanISO8601DateIfMatch(true);
      int int0 = 115;
      SymbolTable symbolTable0 = new SymbolTable(115);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'F');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = '.';
      charArray0[0] = '.';
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48);
      jSONReaderScanner0.scanBoolean('\u0000');
      jSONReaderScanner0.scanFieldFloat(charArray1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1992);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 26);
      jSONScanner0.scanFieldIntArray(charArray1);
      String string0 = "BAYY7";
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("BAYY7");
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int0 = Calendar.NARROW_FORMAT;
      jSONReaderScanner2.nextToken(11);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      char[] charArray1 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(2);
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONObject");
      jSONScanner0.scanFieldIntArray(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F");
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int0 = Calendar.MINUTE;
      jSONReaderScanner0.nextToken(12);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner(" =WPb-H gq (A!r");
      jSONScanner0.scanFieldInt(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" =WPb-H gq (A!r");
      JSONScanner jSONScanner1 = new JSONScanner("+", 0);
      jSONScanner1.intValue();
      JSONScanner jSONScanner2 = new JSONScanner("java.time.Period");
      jSONReaderScanner0.scanNumber();
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner(" =WPb-H gq (A!r");
      jSONScanner0.scanFieldInt(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" =WPb-H gq (A!r");
      JSONScanner jSONScanner1 = new JSONScanner("+", 0);
      jSONScanner1.intValue();
      JSONScanner jSONScanner2 = new JSONScanner("java.time.Period");
      jSONReaderScanner0.scanNumber();
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      int int0 = 70;
      JSONScanner jSONScanner0 = new JSONScanner("PNG#PV6a$R", 70);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T");
      jSONReaderScanner0.nextToken(14);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "nkygqd";
      JSONScanner jSONScanner0 = new JSONScanner("nkygqd");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 83;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LA$+-n![3f", 0);
      jSONReaderScanner0.scanLong('d');
      JSONScanner jSONScanner1 = new JSONScanner("nkygqd", 200);
      jSONScanner0.scanISO8601DateIfMatch(false);
      JSONScanner jSONScanner2 = new JSONScanner("gNX07{kcq24");
      SymbolTable symbolTable0 = new SymbolTable(200);
      jSONScanner1.scanSymbolUnQuoted((SymbolTable) null);
      JSONScanner jSONScanner3 = new JSONScanner("(z@B)5,5X0<mg");
      jSONScanner3.intValue();
      jSONReaderScanner0.scanNumber();
      jSONScanner1.nextToken();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      jSONScanner3.scanUUID('d');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(0, 0, 200, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 229);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal(229);
      Locale locale0 = Locale.CANADA_FRENCH;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(":E?c9mVA");
      jSONScanner0.scanFloat('O');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner1 = new JSONScanner(":E?c9mVA", 56);
      jSONScanner1.scanBoolean('?');
      jSONScanner1.intValue();
      JSONScanner jSONScanner2 = new JSONScanner("9l/[O_6n'|T\"*");
      jSONScanner2.scanFieldDecimal(charArray0);
      String string0 = "java.time.LocalTime";
      JSONScanner jSONScanner3 = new JSONScanner("unclosed.str");
      jSONReaderScanner0.scanString('W');
      Feature feature0 = Feature.SortFeidFastMatch;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }
}
