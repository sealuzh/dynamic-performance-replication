/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 02:25:26 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      try { 
        Parser.parse("+r_", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("*aLtgp7f)Ul6>}QC", 869);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("[", 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("G[D-<KA_MTh9=xZ[,q", 2181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `D-<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1456;
      try { 
        Parser.parse("(?(?", 1456);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-417);
      Regexp regexp0 = Parser.parse("Cherokee", (-417));
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      int int1 = 0;
      regexp0.cap = 1815;
      Regexp regexp1 = Parser.parse("Cherokee", 0);
      regexpArray0[4] = regexp1;
      int int2 = (-594);
      Parser.subarray(regexpArray0, (-594), (-594));
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-594), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -594
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("|+szQ'JNxKnKs?dx ", (-2315));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p^word:]", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^", 824);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("`(?P<", 2508);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Parser.parse("(y", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 3272);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "|2 !gx]Hx<w*2";
      int int0 = 741;
      Regexp regexp0 = Parser.parse("|2 !gx]Hx<w*2", 741);
      Regexp[] regexpArray0 = new Regexp[1];
      int int1 = 0;
      regexp0.min = 0;
      regexpArray0[0] = regexp0;
      regexp0.name = "|2 !gx]Hx<w*2";
      regexp0.min = 0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 741, (-1455));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 124;
      String string0 = "z(";
      try { 
        Parser.parse("z(", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `z(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("I(?P<(7P$", (-2315));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(7P$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Parser.parse("(", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Parser.parse("|.1u)#aTPxJ", (-3564));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp regexp0 = Parser.parse("I|", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      String string0 = "Devanagari";
      int int0 = 1932;
      Regexp regexp0 = Parser.parse("Devanagari", 1932);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.toString();
      regexpArray0[1] = regexp2;
      int int1 = 0;
      Regexp regexp3 = Parser.parse("E", 0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[3] = regexp4;
      String string1 = "\"";
      Regexp regexp5 = Parser.parse(string1, int0);
      regexpArray0[4] = regexp5;
      int int2 = 0;
      int int3 = (-2900);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", (-36));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = new Parser("=~\"C8k,.o6", 8242);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("=~\"C8k,.o6", 0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("Vp", 0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8242, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Lisu";
      int int0 = (-2859);
      Parser parser0 = new Parser("Lisu", (-2859));
      String string1 = "EPJ})~3r]a";
      try { 
        Parser.parse("EPJ})~3r]a", (-2859));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      try { 
        Parser.parse(")Z8", (-152));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Parser.parse("com.google.re2j.PatternSyntaxException", 0);
      Parser parser0 = new Parser("", 0);
      Regexp regexp0 = Parser.parse("", 0);
      Regexp regexp1 = Parser.parse("X{Bcwx=", (-2877));
      Regexp regexp2 = Parser.parse("X{Bcwx=", 0);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp3 = Parser.parse("", (-2877));
      regexpArray0[0] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp4;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 46, 1526);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{t", 4140);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = new Parser("", 0);
      int int0 = 0;
      Parser.parse("", 0);
      Parser.parse("", 0);
      String string0 = "[?(#/I-#,AC";
      try { 
        Parser.parse("[?(#/I-#,AC", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `I-#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Z$IL(Z^:^2\\qfB*N<9{";
      int int0 = (-768);
      try { 
        Parser.parse("Z$IL(Z^:^2qfB*N<9{", (-768));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Z$IL(Z^:^2qfB*N<9{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 73);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("D", 73);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Parser.parse("[", (-1659));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 115);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("[:^word:]", 2545);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      regexp0.cap = 115;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      regexp2.op = regexp_Op0;
      int int0 = 3268;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 3268);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w[:]", 12);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("|olgN90!XUl@4du!P'", 0);
      regexpArray0[1] = regexp0;
      Regexp regexp1 = Parser.parse("II", 0);
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexpArray0[0];
      Regexp regexp2 = Parser.parse("II", 0);
      regexpArray0[5] = regexp2;
      Regexp regexp3 = Parser.parse("brq/Su*EE}nGJWN~H", (-775));
      regexpArray0[6] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[7] = regexp4;
      regexpArray0[8] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-775), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -775
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = new Parser("rpX@t[xj8}|>R5$", 3);
      Parser.parse("rpX@t[xj8}|>R5$", 3);
      Regexp regexp0 = Parser.parse("rpX@t[xj8}|>R5$", 3);
      Regexp regexp1 = Parser.parse("rpX@t[xj8}|>R5$", 3);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexp1.subs = regexpArray0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      Parser.subarray(regexpArray0, 3, 3);
      regexp0.min = 3;
      int int0 = (-35);
      Regexp regexp2 = Parser.parse("C|lI,-<0rk*", (-35));
      Regexp[] regexpArray1 = new Regexp[1];
      regexpArray1[0] = regexp2;
      Object object0 = new Object();
      regexp2.equals(object0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-35), 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -35
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z|l9", 2736);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-2319);
      Parser parser0 = new Parser("P", (-2319));
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("P", 64);
      regexpArray0[1] = regexp1;
      int int1 = 36;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Parser.parse("th&R(h-/$tD/Ml|F|?", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|3", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = new Parser("stack underflow", (-431));
      Parser.parse(">:T", 42);
      Regexp regexp0 = Parser.parse("stack underflow", (-431));
      Parser.parse("K'&-Bw[qCWP", 114);
      Regexp regexp1 = Parser.parse("W|", 0);
      Regexp regexp2 = Parser.parse("W|", (-431));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 68184;
      Regexp regexp0 = Parser.parse("pd:]", 68184);
      Regexp[] regexpArray0 = new Regexp[7];
      regexp0.flags = int0;
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      String string0 = "h~\"}(Z#5y-'(y#WY@R";
      regexp0.name = string0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("13dJ{$R{g>Mj", 11391);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("13dJ{$R{g>Mj", 5905);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("Ht", 11391);
      regexpArray0[6] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 340, 3975);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 340
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = new Parser("//[u$vDasLPBOc/", (-15));
      Regexp regexp0 = Parser.parse("XJztB1}7^`8", (-15));
      Regexp regexp1 = Parser.parse("pord:]", 2);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = new Parser("//[u$vDasLPBOc/", 119081);
      Regexp regexp0 = Parser.parse("Y t2!jYz'ylyZ}KAJ{", 2049);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      try { 
        Parser.parse("th&R(h-/$tD/Ml|F|?", 376);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "O}h,?W.Zp=hT";
      Parser parser0 = new Parser("O}h,?W.Zp=hT", 7);
      int int0 = 91;
      Parser.parse("p^word:]", 91);
      try { 
        Parser.parse("4%[|.B-s2_O.F\"k*W", (-735));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[|.B-s2_O.F\"k*W`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "\\p^word:]";
      Parser parser0 = new Parser("p^word:]", 1769);
      Parser.parse("", 49);
      Parser.parse("p^word:]", 1769);
      int int0 = (-904);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = new Parser("//[u$vDasLPBOc/", (-15));
      try { 
        Parser.parse("(?", (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-15);
      try { 
        Parser.parse("(?", (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = new Parser("//[u$vDasLPBOc/", (-15));
      Regexp regexp0 = Parser.parse("=_2\rXU`tvm*2Tg", (-15));
      Regexp regexp1 = Parser.parse("=_2\rXU`tvm*2Tg", 2);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 113);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "\\P";
      int int0 = (-2319);
      Parser parser0 = new Parser("P", (-2319));
      Parser.parse("\"fL,1E(J1^)^;9", (-2319));
      Parser.parse("PBOc/", (-2319));
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser.parse("wtvzMYsY&=Xv", 93);
      Parser parser0 = new Parser("C", 55);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-15);
      Parser parser0 = new Parser("//[u$vDasLPBOc/", (-15));
      try { 
        Parser.parse("oB[", (-3500));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "Fbv<>\"f)KT[_!cr\\";
      int int0 = (-1731);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("1", (-2646));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op1);
      Regexp regexp5 = new Regexp(regexp4);
      regexpArray0[3] = regexp5;
      Regexp.Op regexp_Op2 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp6 = new Regexp(regexp_Op2);
      regexpArray0[4] = regexp6;
      Regexp regexp7 = new Regexp(regexp6);
      regexpArray0[5] = regexp7;
      Regexp regexp8 = Parser.parse("W", 124);
      regexpArray0[6] = regexp8;
      Regexp regexp9 = Parser.parse("Fbv<>\"f)KT[_!cr", 363);
      regexpArray0[7] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 363, 125);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Parser.parse("C(f{1Qht*VmDie", 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `C(f{1Qht*VmDie`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X{2J", 117);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      int int0 = 333;
      Regexp regexp0 = Parser.parse("\n", 333);
      regexpArray0[0] = regexp0;
      String string0 = "(?PJ";
      try { 
        Parser.parse("(?PJ", 333);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::t:]", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w|`", (-396));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Parser.parse("[:\u0000Rv", 1592);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:\u0000Rv`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 13);
      Parser.parse("ni%/e6`36z\u0000K", 13);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "\\3";
      int int0 = 28;
      Parser.parse("\u0003", 28);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-@c{8r#@O+s4:4\u0007EK", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0004n/h", (-595));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w'<fQ7rJaM5", (-5807));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^", (-1955));
      Regexp regexp1 = Parser.parse("[::]", (-236));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "(:!7/%m?r\\1Hdz\":Qhw";
      int int0 = 120466;
      Regexp regexp1 = Parser.parse("(:!7/%m?r\u0001Hdz\":Qhw", 120466);
      regexpArray0[1] = regexp1;
      int int1 = 3684;
      try { 
        Parser.parse("(:!7/%m?r\u0001Hdz\":Qhw", 3684);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(:!7/%m?r\u0001Hdz\":Qhw`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 13;
      try { 
        Parser.parse("[ vdXH<]U2c7(/w<d", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `[ vdXH<]U2c7(/w<d`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-15);
      Regexp regexp0 = Parser.parse("XJztB1}7^`8", (-15));
      Regexp regexp1 = Parser.parse("\u0001", (-735));
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp1;
      regexpArray0[8] = regexp0;
      int int1 = 6824;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -15
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "(:!7/%m?r\\1Hdz\":Qhw";
      int int0 = 12;
      int int1 = 3677;
      Parser.parse("Z_D+wKX", 3677);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\1`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      try { 
        Parser.parse("utDo0rh[^MW0nErz-&", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `z-&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("uH`DWq/q|\u0002B", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 1173;
      String string0 = "7\\3F&XSn+=7jh,";
      Regexp regexp0 = Parser.parse("7\u0003F&XSn+=7jh,", 1173);
      int int1 = 2353;
      Parser parser0 = new Parser(string0, int1);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s\"=@%", 937);
      Regexp regexp1 = Parser.parse("\u0000", 81);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("7\u0003F&XSn+=7jh,", 66);
      Regexp regexp1 = Parser.parse("D|S", 2345);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "\\4n/h\\";
      int int0 = 3765;
      Parser parser0 = new Parser("\u0004n/h", 3765);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("\u0004n/h", 3765);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 2620);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = (-3623);
      int int1 = 101;
      Parser parser0 = new Parser("x{", 101);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("x{", (-3623));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      String string0 = "\\P3k*W";
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser.parse("LEFT_PAREN", 3749);
      Parser parser0 = new Parser("vN", 3749);
      try { 
        Parser.parse("`|8/c[1G_67p\u0018_R g", 3749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[1G_67p\u0018_R g`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("TA-J*>.ck^{27S;=YqS", 81);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "h@h&hPO5+zNQl{67";
      Regexp regexp0 = Parser.parse("h@h&hPO5+zNQl{67", 108);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      int int0 = 65113;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 108, 65113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("LEFT_PAREN", 3749);
      Parser parser0 = new Parser("vN", 3749);
      Regexp regexp1 = Parser.parse("5T\u0006SwHxlAHx${E?b", 3749);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("xp:", 9);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "[-+";
      int int0 = 65;
      try { 
        Parser.parse("[-+", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Parser parser0 = new Parser("LEFT_PAREN", 3749);
      try { 
        Parser.parse("h+sL'[->", 3749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[->`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = new Parser("x{", 3801);
      int int0 = 8039;
      Parser.parse("x{", 8039);
      try { 
        Parser.parse("h+sL'[->", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[->`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z", 1661);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x9{", 1048);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("@j=IV\u0006#LK;j-", 77);
      regexpArray0[1] = regexp1;
      int int0 = (-1739);
      int int1 = 2679;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1739
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4 n", 45);
      Regexp regexp1 = Parser.parse("_XjLa.Ugg", 105);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexp0.runes = null;
      regexp1.reinit();
      String string0 = "\\PPhl=#A:_96OPtV&Zx\"";
      regexp0.flags = 2220;
      Regexp regexp2 = Parser.parse("PPhl=#A:_96OPtV&Zx\"", 1744);
      regexpArray0[2] = regexp2;
      int[] intArray0 = new int[7];
      int int0 = 8;
      intArray0[0] = 8;
      intArray0[1] = 1744;
      intArray0[2] = 1744;
      intArray0[3] = 1744;
      intArray0[4] = 554;
      intArray0[5] = 1744;
      intArray0[6] = 1744;
      regexp2.runes = intArray0;
      int int1 = 6148;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2225, 6148);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2225
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pC", (-1583));
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 120);
      Parser parser0 = new Parser((String) null, 48);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 48, 120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser.parse("f'Ou>GAKulu\u000B&B", (-1955));
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 115, 115);
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("t!L%{\f|", 328);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("t!L%{\f|", 1788);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp4);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("YbH^cQb#QhU?GL]?,", 1788);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp0);
      regexpArray0[7] = regexp8;
      Parser.subarray(regexpArray0, 1788, 1788);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1788);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("h|YpyYNd}/X6[M]4x", 101);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[4] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp7;
      Regexp regexp8 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp8;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp9 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp9;
      Regexp regexp10 = Parser.parse("W}6{|%bR", 2548);
      regexpArray0[8] = regexp10;
      Parser.subarray(regexpArray0, 2839, 2839);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-3019), (-1162));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3019
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Parser.parse("UD[g]M;[N|{", 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[N|{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Parser.parse("G[-<KA_Mh=xZ[,q", (-424));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-<KA_Mh=xZ[,q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Parser.parse("[:yrz-", (-1631));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:yrz-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 332);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Parser.parse("(?-:=4", 66368);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Parser.parse("(?-Z:(=4", 232);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-Z`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("SHfk3C.tA", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      int int0 = 2029;
      Regexp regexp0 = Parser.parse("J+sc'S\bQ@*pqfB", 2029);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("", 1784);
      regexpArray0[1] = regexp1;
      try { 
        Parser.parse("PZ[,q", 1784);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[,q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", (-2195));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FF@FF}]", 45);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = (-253);
      Parser parser0 = new Parser("6?V&<Y:vKEHH8B", (-253));
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("6?V&<Y:vKEHH8B", 95);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("^x00-x{10FFFF}", 72);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("Kayah_Li", 72);
      regexpArray0[4] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 7468, (-253));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-1248);
      Parser.parse("LtMU72]]qY\u0005L,]y|3", (-1248));
      String string0 = ":(";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      int int0 = (-998);
      Regexp regexp0 = Parser.parse("[:", (-998));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("[:", (-998));
      regexpArray0[1] = regexp2;
      int int1 = 42;
      Regexp regexp3 = Parser.parse("[:", 42);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("p[,q", 42);
      regexpArray0[3] = regexp4;
      try { 
        Parser.parse("(?i:", 2661);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 45);
      assertNotNull(regexp0);
  }
}
