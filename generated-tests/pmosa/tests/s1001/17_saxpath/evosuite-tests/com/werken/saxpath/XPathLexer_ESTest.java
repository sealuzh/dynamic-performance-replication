/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:10:07 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p%sh/IY6tAuk");
      Token token0 = new Token((-1318), "p%sh/IY6tAuk", (-1318), (-1696));
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierStartChar('{');
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      xPathLexer0.endPosition();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.getPreviousToken();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("");
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.minus();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
      
      xPathLexer0.endPosition();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-316));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.consume((-1889));
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{>#Z{");
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(">eW*>N^597");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      char char0 = xPathLexer0.LA(121);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      xPathLexer0.rightParen();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken(token5);
      assertEquals(6, token5.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals("", token7.getTokenText());
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer0.setXPath("|(q#&Z*2*c]6Ej9f}d");
      Token token8 = xPathLexer0.nextToken();
      assertEquals(17, token8.getTokenType());
      assertEquals("|", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("#&Z*2*c]6Ej9f}d", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.setXPath("h<J:7aD+kC");
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(0);
      xPathLexer0.consume(1);
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.consume(1);
      assertEquals("h<J:7aD+kC", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.setXPath("h<J:7aD+kC");
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.and();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      xPathLexer0.isIdentifierChar('B');
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.getPreviousToken();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.minus();
      assertEquals("8", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.slashes();
      assertEquals("1", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(5, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("I}", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("r", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("Y", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("@", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.minus();
      assertEquals("8", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(5, token3.getTokenType());
      assertEquals("g", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("871gI}rYY@z");
      xPathLexer1.not();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("}r", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("$Xi>M}CY");
      Token token7 = xPathLexer2.nextToken();
      assertEquals("$", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer1.not();
      assertEquals("7", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals("1g", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer2.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("X", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.at();
      assertEquals("8", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("871gI}rYY@z");
      Token token1 = xPathLexer1.dollar();
      assertEquals("8", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("71", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("871gI}rYY@z");
      Token token4 = xPathLexer2.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("8", token4.getTokenText());
      
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("7", token5.getTokenText());
      
      xPathLexer2.mod();
      xPathLexer2.operatorName();
      Token token6 = xPathLexer2.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer2.comma();
      assertEquals("1", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(511);
      XPathLexer xPathLexer1 = new XPathLexer("20L)/?(|>g?Dk2x");
      xPathLexer1.star();
      xPathLexer0.dollar();
      xPathLexer1.nextToken();
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifier();
      xPathLexer0.rightParen();
      xPathLexer1.not();
      xPathLexer3.isIdentifierChar('@');
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.comma();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer3.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.slashes();
      assertEquals("8", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("7", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("1g", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("}", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("@", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n4lqVK'<");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("n", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("l", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("q", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("VK", token5.getTokenText());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.colon();
      assertEquals("'", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("<", token7.getTokenText());
      
      xPathLexer0.number();
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.number();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.minus();
      assertEquals("[", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yd~dAJNM8c`HC*l");
      xPathLexer0.consume();
      xPathLexer0.isIdentifierChar(']');
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierChar('<');
      xPathLexer0.isIdentifierStartChar('j');
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dkynyL*aUbp[d?v");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bq=jCU");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Bq", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("8Yns02>U");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("8", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yd~dAJNM8c`HC*l");
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('j');
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.colon();
      assertEquals("8", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("p%Dh/Iq6tAuk");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("p", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("65Tzr :Y|+ZXS$X");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("65", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("8Yns02>U");
      Token token0 = xPathLexer1.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer1.slashes();
      assertEquals("Y", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("ns02", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.colon();
      assertEquals("8", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("p%Dh/Iq6tAuk");
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals("p", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("%Dh/Iq6tAuk", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yd~dAJNM8c`HC*l");
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('j');
      XPathLexer xPathLexer1 = new XPathLexer("Sa05fX,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<5C_:\"XXL");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("5C_", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.isIdentifierChar(']');
      XPathLexer xPathLexer1 = new XPathLexer("Hozt0(Vg[|");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("Hozt0", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.equals();
      assertEquals("(", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("eXU0 s_4EG0V_");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("eXU0", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("0GwM]4f@h-C?okR");
      Token token0 = xPathLexer1.pipe();
      assertEquals("0", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("GwM", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("0G", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{>#Z{");
      Token token0 = xPathLexer0.star();
      assertEquals("C", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("C{>#Z{");
      Token token1 = xPathLexer0.colon();
      assertEquals("{", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("C{>#Z{");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("C", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lc~!U\">$2_jW`?O@vF");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("lc", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("5|g.al V");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("|", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath(".By)(31^vEl80");
      Token token3 = xPathLexer1.number();
      assertEquals(".", token3.getTokenText());
      assertEquals(31, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.minus();
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token1 = xPathLexer2.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JD");
      XPathLexer xPathLexer1 = new XPathLexer("JD");
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("F");
      Token token0 = xPathLexer0.pipe();
      assertEquals("J", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer2.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("g/v\"O");
      Token token2 = xPathLexer3.doubleColon();
      assertEquals("g/", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("[", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      char char0 = xPathLexer0.LA(121);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer0.setXPath("|(q#&Z*2*c]6Ej9f}d");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("|", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals("(", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath(") (");
      Token token10 = xPathLexer0.nextToken();
      assertEquals(")", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      assertEquals(" ", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VRtNA^Z");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.at();
      assertEquals("t", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("A", token3.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.endPosition();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("VRtNA^Z");
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("V", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("RtNA", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!9VB#4Ne!_<~P`|Na");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{'G!");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("'", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.LA(0);
      Token token4 = xPathLexer0.at();
      assertEquals("G", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.minus();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.getXPath();
      Token token6 = xPathLexer1.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer1.setXPath("!3DiSOvqn&YD:I0$kT");
      Token token7 = xPathLexer0.nextToken();
      assertEquals("!", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer1.setXPath("");
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JD");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("J", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("JD");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Vu<+^#j)Q)");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{^-Z{");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("C", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("^-Z{", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("^", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("-", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.isIdentifierChar('<');
      xPathLexer1.isIdentifierStartChar('<');
      xPathLexer1.div();
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VRtNA^Z");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.pipe();
      assertEquals("V", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("t", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("N", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(7, int0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("Z", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("VRtNA^Z");
      Token token5 = xPathLexer1.minus();
      assertEquals("V", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer1.setPreviousToken(token3);
      assertEquals("A", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.nextToken();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{>#Z{");
      Token token0 = xPathLexer0.star();
      assertEquals("C", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("{", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(">", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("#Z{", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("C{>#Z{");
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("C", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("{>#Z{", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("g/v\"O");
      Token token7 = xPathLexer2.doubleColon();
      assertEquals("g/", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b}7/L<LswE");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("}", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("7/", token2.getTokenText());
      assertEquals(12, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3R.");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("R.", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*I3Bb4zi`(n^Rze#gzk");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("I", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Bb4zi", token3.getTokenText());
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("`(n^Rze#gzk", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("`", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("(", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Q");
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("n^", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.minus();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      Token token2 = xPathLexer0.slashes();
      assertEquals("1", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("g", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(6, token1.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("I}", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("r", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("Y", token6.getTokenText());
      
      xPathLexer0.identifier();
      Token token7 = xPathLexer0.rightParen();
      assertEquals("@", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("z", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{^-Z{");
      Token token0 = xPathLexer0.star();
      assertEquals("C", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("{", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("^-Z{", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.at();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("-", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.isIdentifierChar('<');
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals("Z", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("{", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.minus();
      assertEquals("8", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("1", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("g", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierChar('|');
      Token token5 = xPathLexer0.nextToken();
      assertEquals("}rYY@z", token5.getTokenText());
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C{^-Z{");
      Token token0 = xPathLexer0.star();
      assertEquals("C", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("^-Z{", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.at();
      assertEquals("^", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("-", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      XPathLexer xPathLexer1 = new XPathLexer("92w");
      Token token7 = xPathLexer0.pipe();
      assertEquals("Z", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("92", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("$'\"]xHfN.A%zs0^3'4");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-frIu;$w?xZTv`");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer("lSg+YD\"nx~B");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(6, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]U64)?");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("]U", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (18) (6)", string0);
      
      Token token2 = xPathLexer0.number();
      assertEquals("4", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(")", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.setXPath("[ (18) (6)");
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.dollar();
      assertEquals("(", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      char char0 = xPathLexer0.LA(65535);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("18", token6.getTokenText());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("(6", token8.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.setXPath("");
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("6", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*I3Bb4zi`(n^Rze#gzk");
      xPathLexer0.star();
      Token token0 = xPathLexer0.dollar();
      assertEquals("I", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("Bb4zi", token2.getTokenText());
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("`(n^Rze#gzk", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer1.setXPath("\"AtI~:");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("*I3Bb4zi`(n^Rze#gzk");
      xPathLexer1.setXPath("*I3Bb4zi`(n^Rze#gzk");
      Token token5 = xPathLexer1.nextToken();
      assertEquals(20, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer4.plus();
      assertEquals(5, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*I3Bb4zi`(n^Rze#gzk");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("I", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("`(n^Rze#gzk", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("(", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("n", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JD");
      Token token0 = xPathLexer0.minus();
      assertEquals("J", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.setXPath("pOa?a(]vTB?8b:#5q");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("?", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("8");
      xPathLexer0.setXPath("8");
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ad*}PsZj~jRi:MG2");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      XPathLexer xPathLexer1 = new XPathLexer("6PU,w(KXC5?kSe4\"~");
      Token token0 = xPathLexer1.notEquals();
      assertEquals("6P", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer1.star();
      xPathLexer1.setPreviousToken(token1);
      assertEquals("U", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(32, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VRtNA^Z");
      XPathLexer xPathLexer1 = new XPathLexer("VRtNA^Z");
      Token token0 = xPathLexer1.minus();
      assertEquals("V", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("VRtNA^Z");
      Token token1 = xPathLexer2.nextToken();
      assertEquals("VRtNA", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-fru;$w?xTv`");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("fru", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals(";", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("6PU,w(KXC5?kSe4\"~");
      Token token0 = xPathLexer1.notEquals();
      assertEquals("6P", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      xPathLexer1.setPreviousToken(token1);
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("U", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("PV}84oc^l``hN=/vckR");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("871gI}rYY@z");
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath("PV}84oc^l``hN=/vckR");
      assertEquals("PV}84oc^l``hN=/vckR", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p%Dh/Iq6tAuk");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("veoqx!x#Jr('&$ ");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("veoqx", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("%", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bq=jCU");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      assertEquals("Bq", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]U64)?");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("]U", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (18) (6)", string0);
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(")", token3.getTokenText());
      
      xPathLexer0.setXPath("[ (18) (6)");
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      char char0 = xPathLexer0.LA(65535);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.slashes();
      Token token5 = xPathLexer0.slashes();
      assertEquals("8", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(";KpA");
      xPathLexer1.operatorName();
      Token token6 = xPathLexer1.minus();
      assertEquals(";", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("K", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      xPathLexer2.setXPath("q6");
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer3.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer2.operatorName();
      Token token10 = xPathLexer1.identifier();
      assertEquals("pA", token10.getTokenText());
      
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer("~dv5{Hx3#Vh|kt");
      Token token11 = xPathLexer4.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("~", token11.getTokenText());
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OJBG:yDkC&'c");
      xPathLexer0.operatorName();
      xPathLexer0.consume(25);
      xPathLexer0.consume(25);
      xPathLexer0.setXPath("A6SiJlh,Bb-rW;/");
      xPathLexer0.or();
      Token token0 = xPathLexer0.colon();
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.identifier();
      assertEquals("SiJlh", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("B", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("6(<TdS$3#Pt`");
      xPathLexer1.div();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer1.getXPath();
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("6(", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setXPath("OJBG:yDkC&'c");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.setXPath("");
      Token token9 = xPathLexer1.rightParen();
      assertEquals("<", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer3.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("OJBG", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-frIu;$w?xZTv`");
      Token token0 = xPathLexer0.notEquals();
      String string0 = token0.toString();
      assertEquals("[ (22) (-f)", string0);
      
      Token token1 = xPathLexer0.star();
      assertEquals("r", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Iu", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("6PU,w(KXC5?kSe4\"~");
      XPathLexer xPathLexer2 = new XPathLexer("6PU,w(KXC5?kSe4\"~");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer2.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-frIu;$w?xZTv`");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("-frIu", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";$w?xZTv`", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VRtNA^Z");
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.consume(0);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bq=jCU");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("B", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("q", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("=", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("jCU", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      Token token0 = xPathLexer0.not();
      assertEquals("0", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("G", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("wM", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bq=jCU");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("B", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("jCU", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n4lqVK'<");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("n", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("4", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("6PU,w(KXC5?kSe4\"~");
      xPathLexer1.div();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("qV", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("6", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("K'<", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("K", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lc~!U\">$2_jW`?O@vF");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("lc", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("5|g.al V");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("5", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("|", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(1265);
      xPathLexer1.setXPath(".By)(31^vEl80");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(".", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.minus();
      assertEquals("8", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("7", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("1", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("871gI}rYY@z");
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("8", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("gI", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertEquals("0GwM", token0.getTokenText());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("]", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":61U[P");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-fru;$w?xTv`");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("fru", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume(104);
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer(":n_-T6@[@(Jlr-%");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(":", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JD");
      Token token0 = xPathLexer0.minus();
      assertEquals("J", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.setXPath("pOa?a(]vTB?8b:#5q");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("pOa", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("?", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("a(]vTB?8b:#5q", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-fru;$w?xTv`");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("ru", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals(";", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("$", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n4lqVK'<");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("n4lqVK'<");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("n4lqVK'<");
      xPathLexer2.minus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifier();
      xPathLexer3.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      Token token1 = xPathLexer3.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bq=jCU");
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("?kL;_#Lb7A _E,D[\"");
      xPathLexer1.nextToken();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer0.hasMoreChars();
      xPathLexer0.nextToken();
      String string0 = xPathLexer0.getXPath();
      assertEquals("Bq=jCU", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".By)(31^vElB^80");
      XPathLexer xPathLexer1 = new XPathLexer("lc~!U\">$2_jW`?O@vF");
      Token token0 = xPathLexer1.star();
      assertEquals("l", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d/R#^UYz7|kqdr");
      Token token0 = xPathLexer0.star();
      assertEquals("d", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("R", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("#", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertNotNull(token4);
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("^UYz7|kqdr", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("d/R#^UYz7|kqdr");
      xPathLexer1.consume();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("/", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WX-mzX|6YeR,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("WX-mzX", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n4lqVK'<");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("n4lqVK'<");
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("4l", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("'", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.div();
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d/R#^UYz7|kqdr");
      XPathLexer xPathLexer1 = new XPathLexer("aTn-DLx*\"12?`/<");
      Token token0 = xPathLexer0.pipe();
      assertEquals("d", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals("aTn-DLx", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n4lqVK'<");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("n4lqVK", token1.getTokenText());
      
      xPathLexer0.setXPath("33");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("33", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("33");
      Token token3 = xPathLexer1.dollar();
      assertEquals("3", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.consume(1265);
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      xPathLexer0.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("6g(^oR~21f");
      Token token4 = xPathLexer1.rightParen();
      assertEquals("6", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("=&SazIg!%,E$XIV");
      Token token5 = xPathLexer2.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.identifier();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer1.setPreviousToken(token3);
      assertEquals(2, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer6.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JD");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("J", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("kk:U%p<0gW");
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.doubleColon();
      xPathLexer2.setPreviousToken(token3);
      assertEquals("kk", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<0I$uy6;_");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(":", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals("<", token6.getTokenText());
      assertEquals(7, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("0GwM]4f@h-C?okR");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("G", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(2293);
      xPathLexer1.setXPath("0GwM]4f@h-C?okR");
      XPathLexer xPathLexer2 = new XPathLexer("zPYBYe3.}K@u'@=|gY");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("zPYBYe3.", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      XPathLexer xPathLexer1 = new XPathLexer("6PU,w(KXC5?kSe4\"~");
      Token token0 = xPathLexer1.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer1.setPreviousToken(token1);
      assertEquals(19, token1.getTokenType());
      assertEquals("0G", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("PU", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      Token token0 = xPathLexer0.notEquals();
      String string0 = token0.toString();
      assertEquals("[ (22) (0G)", string0);
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("0", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("wM", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("]", token3.getTokenText());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("h-C", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("?", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("o", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      Token token0 = xPathLexer0.minus();
      assertEquals("8", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("7", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("1", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.slashes();
      assertEquals("g", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aaTg+v");
      xPathLexer0.equals();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.consume(25);
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar(']');
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.isIdentifierStartChar('n');
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.LA(25);
      xPathLexer0.and();
      xPathLexer0.rightParen();
      xPathLexer0.literal();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      String string0 = xPathLexer0.getXPath();
      assertEquals("aaTg+v", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?kL;_#Lb7A _E,D[\"");
      XPathLexer xPathLexer1 = new XPathLexer("?kL;_#Lb7A _E,D[\"");
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("?k", token0.getTokenText());
      
      xPathLexer1.nextToken();
      Token token1 = xPathLexer1.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer1.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("L", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".By)(31^vElB^80");
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("B", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(".By)(31^vElB^80");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".4~E3m{PYUJ");
      Token token0 = xPathLexer0.not();
      assertEquals(".", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.dots();
      assertEquals("4", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("~", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("{P", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<5C_:\"XXL");
      XPathLexer xPathLexer1 = new XPathLexer("XT!!%&");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("XT", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DtY1u>b:nczxvx]emf_");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.consume(109);
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.setXPath("DtY1u>b:nczxvx]emf_");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("DtY1u", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(">", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("b:nczxvx]emf_", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<5C_:\"XXL");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Wsx?$`m");
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("sx", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`,m5#1x>HO");
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mqfH<h}scZ!}w> U");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`,m5#1x>HO");
      Token token0 = xPathLexer0.not();
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.slashes();
      assertEquals("m", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("5", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?kL;_#Lb7A _E,D[\"");
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("?kL;_#Lb7A _E,D[\"");
      xPathLexer1.notEquals();
      xPathLexer1.leftBracket();
      xPathLexer1.star();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`,m5#1x>HO");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("`", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(",", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m5#1x>HO", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.setXPath("YDbWsQ");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("YDbWsQ", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("rZ\"ALv");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("rZ", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`,m5#1x>HO");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(4, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(32, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("m5", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("#", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0GwM]4f@h-C?okR");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("0", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("GwM]4f@h-C?okR", token1.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("@bs8L!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("@", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("871gI}rYY@z");
      xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer0.isIdentifierChar('B');
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.getPreviousToken();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("871gI}rYY@z");
      assertEquals("871gI}rYY@z", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath(".By)(31^vElB^80");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("By)(31^vElB^80", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xN?db");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("x", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("o?I(Tp%``s[%{~4N");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("o", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#:+E/z");
      Token token0 = xPathLexer0.not();
      assertEquals("#", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(":", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<W85A^$h9'");
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Q+%ksYsV");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Q", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.setXPath("xRDms-*Tun9dkjt");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("xRDms-", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("2smZ8z{.//rUh-Qw");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("ZPm%W^cS");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("ZPm", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SLRuNZh,n)h`Q");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("SLRuNZh", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".By)(31^vElB^80");
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ci'&`Z&~h");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".B)(31^vlBP");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p%s/It)Auk");
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.or();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = new Token(10, "aTn-DLx*\"12?`/<", 8, 47);
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("oo]5");
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.consume(15);
      xPathLexer0.consume(15);
      xPathLexer0.setXPath(" 5={s_ v30hf+");
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.isIdentifierChar('{');
      xPathLexer0.getPreviousToken();
      xPathLexer0.setXPath("-qP4ys*D:MmO");
      assertEquals("-qP4ys*D:MmO", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("oo]5");
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("./,)(vB");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("./", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = new Token(14, "", 14, 14);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("orx");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = new Token(24, "l}u6Fr.Vp5D+bc;xz", 1174, 1174);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("..B");
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" ");
      xPathLexer0.and();
      Token token0 = new Token(29, "f3F~", 29, 354);
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mq]\"fBfH<h}scZ!}5> U");
      Token token0 = new Token(28, "mq]\"fBfH<h}scZ!}5> U", 7, 28);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("mq", token1.getTokenText());
  }
}
