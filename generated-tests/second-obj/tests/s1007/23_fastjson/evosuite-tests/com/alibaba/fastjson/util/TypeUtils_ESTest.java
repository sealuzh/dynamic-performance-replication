/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:27:20 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntUnaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      String string0 = ".s<";
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      Class<Timestamp> class2 = Timestamp.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("}qu", linkedHashMap0);
      Class<MockMinguoDate> class3 = MockMinguoDate.class;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      TypeUtils.getSuperMethodAnnotation(class4, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("Ljava.lang.AutoCloseable", (Method) null, (Field) null, class3, class2, 0, 0, 2987, (JSONField) null, (JSONField) null, "Ljava.lang.AutoCloseable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.keySet();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      TypeUtils.getRawClass(class0);
      InternalError internalError0 = new InternalError("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sVc);>3iuZ)|z? -", "sVc);>3iuZ)|z? -", 26);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class1 = TypeUtils.loadClass("sVc);>3iuZ)|z? -", classLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("F", classLoader0, true);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToSqlDate((Object) null);
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = true;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) concurrentHashMap0, (PropertyNamingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedHashMap0.put("java.awt.Rectangle", "java.awt.Rectangle");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class1 = TypeUtils.loadClass("GenericExceptionTypes", classLoader0, true);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToBigInteger((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      weakHashMap0.entrySet();
      weakHashMap0.put((String) null, "not support awt class : ");
      weakHashMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(".s<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : .s<
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      TypeUtils.loadClass("@^@ =HvM,S ", (ClassLoader) null);
      TypeUtils.decapitalize("AXO");
      typeArray0[1] = (Type) null;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate(99999, 99999);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      hashMap0.getOrDefault(numberDeserializer0, "m9c?]@B>J'92bXYqup|");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Point point0 = new Point();
      Class<Short> class0 = Short.TYPE;
      Class<Double> class1 = Double.TYPE;
      TypeUtils.getCollectionItemClass(class1);
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      ConcurrentHashMap<MockSimpleDateFormat, DecimalFormat> concurrentHashMap0 = new ConcurrentHashMap<MockSimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(concurrentHashMap0);
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<EnumDeserializer> class2 = EnumDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, jSONType0, map0, (Map<String, Field>) identityHashMap1, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("classame");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "classame", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Point point0 = new Point();
      point0.clone();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point0.setLocation((Point2D) point2D_Double0);
      point0.setLocation(14, 14);
      MockThread mockThread0 = new MockThread((Runnable) null, "jshOqmqM");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException> weakHashMap0 = new WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException>();
      Class<Byte> class0 = Byte.TYPE;
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      TypeUtils.getCollectionItemClass(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      TypeUtils.loadClass("BI9)_", classLoader0, false);
      Class<Boolean> class2 = Boolean.TYPE;
      TypeUtils.isGenericParamType(class1);
      TypeUtils.toLocale("G;|.j?>&S#WzN");
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      InternalError internalError0 = new InternalError("");
      Class<IllegalStateException> class1 = IllegalStateException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("sVc);>3iuZ)|z? -", "sVc);>3iuZ)|z? -", 26);
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) internalError0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.unwrapOptional((Type) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("float", "gettoString", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException1.getSuppressed();
      sQLInvalidAuthorizationSpecException1.spliterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashSet<IllegalArgumentException> linkedHashSet0 = new LinkedHashSet<IllegalArgumentException>();
      NumberFormatException numberFormatException0 = new NumberFormatException();
      linkedHashSet0.add(numberFormatException0);
      TypeUtils.castToFloat((Object) null);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      FieldInfo fieldInfo0 = new FieldInfo("[J", class1, class0, (Type) null, (Field) null, 18, 813, (-1457455297));
      Class<DecimalFormat> class2 = DecimalFormat.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
      
      Class<DateFormatSymbols> class3 = DateFormatSymbols.class;
      TypeUtils.isPath(class3);
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      TypeUtils.getKoltinConstructorParameters(class4);
      boolean boolean2 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("Ljava.lang.AutoCloseable", classLoader0, false);
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, (Map<String, String>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.isNumber("/Date(B");
      BreakIterator.getLineInstance();
      TypeUtils.getClassFromMapping("/Date(B");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("/Date(B", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      Class<Float> class1 = Float.TYPE;
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getCollectionItemType(class2);
      Class<Byte> class3 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      LinkedHashMap<BufferCapabilities, EnumDeserializer> linkedHashMap0 = new LinkedHashMap<BufferCapabilities, EnumDeserializer>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.time.LocalDateTime", "java.time.LocalDateTime");
      Class<PageAttributes> class0 = PageAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig();
      HttpCookie httpCookie0 = new HttpCookie("java.time.LocalDateTime", "fastjson.parser.autoTypeAccept");
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) httpCookie0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("F", classLoader0, true);
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToSqlDate((Object) null);
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.isNumber("/Date(B");
      BreakIterator.getLineInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, parserConfig0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      String string0 = TypeUtils.castToString(stringIndexOutOfBoundsException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.isProxy(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger();
      atomicInteger0.getAndDecrement();
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.updateAndGet(intUnaryOperator0);
      atomicInteger0.lazySet((-715));
      TypeUtils.castToByte(atomicInteger0);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<ClassLoader> class1 = ClassLoader.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      String string0 = "className";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("className");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.isProxy(class0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Map<String, String> map0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = new Stack<FieldInfo>();
      TypeUtils.isProxy(class0);
      Class<BigInteger> class1 = BigInteger.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "Ljava.awt.Color", fieldArray0);
      TypeUtils.getClass((Type) class1);
      Class<NoSuchFieldException> class2 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      boolean boolean1 = TypeUtils.isNumber("'5$Te=Y'R+(D=z9V");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate(99999, 99999);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setClassAssertionStatus("CVQ:<sE!6)cm%7", true);
      aSMClassLoader0.setClassAssertionStatus("CVQ:<sE!6)cm%7", true);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      boolean boolean1 = TypeUtils.isNumber("CVQ:<sE!6)cm%7");
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      java.util.IdentityHashMap<MockThaiBuddhistDate, PropertyProcessableDeserializer> identityHashMap0 = new java.util.IdentityHashMap<MockThaiBuddhistDate, PropertyProcessableDeserializer>();
      String string0 = TypeUtils.castToString(identityHashMap0);
      assertNotNull(string0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.", weakHashMap0);
      ChronoLocalDate chronoLocalDate0 = TypeUtils.cast((Object) identityHashMap0, class0, parserConfig0);
      assertNotNull(chronoLocalDate0);
      
      Class<DecimalFormat> class1 = DecimalFormat.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class1, class1, class0, (Field) null, (-1260), (-1260), 51);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getgetLocation");
      Point point0 = new Point();
      Point point1 = new Point(point0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Float> class0 = Float.TYPE;
      TypeUtils.unwrapOptional(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.getRawClass(class1);
      InternalError internalError0 = new InternalError("true");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = new Locale("getgetLocation");
      TypeUtils.isGenericParamType(type0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("className");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("className");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"className\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.awt.Point@0000000001", "java.awt.Point@0000000001", 1053);
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      decimalFormatSymbols0.setZeroDigit(',');
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      JSONObject jSONObject0 = new JSONObject(14, false);
      JSONObject jSONObject1 = new JSONObject(',');
      Boolean boolean0 = Boolean.FALSE;
      NumberFormat.getNumberInstance();
      jSONObject0.replace("|P+L-6Ql(AHY", (Object) decimalFormatSymbols0, (Object) "|P+L-6Ql(AHY");
      jSONObject1.fluentPutAll(jSONObject0);
      TypeUtils.castToInt("");
      TypeUtils.fnv1a_64_lower("1.2.46");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("hashCode");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short short0 = new Short((short)28);
      Date date0 = TypeUtils.castToDate(short0);
      LinkedHashMap<String, SQLNonTransientException> linkedHashMap0 = new LinkedHashMap<String, SQLNonTransientException>();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>(linkedHashMap0);
      JSONObject jSONObject0 = new JSONObject((short)28, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : Thu Jan 01 00:00:00 GMT 1970
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.loadClass("o");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("o", "set", 0);
      Class<Double> class1 = Double.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientConnectionException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLTransientConnectionException: o
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("g", "g");
      hashMap0.put((String) null, "location");
      hashMap0.put("F_X2G5g HYW)", (String) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      String string0 = "v";
      ChoiceFormat choiceFormat0 = new ChoiceFormat("v");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(choiceFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.ChoiceFormat@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = "org.springframework.security.web.savedrequest.DefaultSavedRequest";
      concurrentHashMap0.put("org.springframework.security.web.savedrequest.DefaultSavedRequest", "org.springframework.security.web.savedrequest.DefaultSavedRequest");
      boolean boolean0 = false;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      Constructor<Integer>[] constructorArray0 = (Constructor<Integer>[]) Array.newInstance(Constructor.class, 6);
      constructorArray0[0] = (Constructor<Integer>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.getClassFromMapping("30MW@F|z6Z|{~");
      System.setCurrentTimeMillis(482L);
      Locale locale0 = TypeUtils.toLocale("30MW@F|z6Z|{~");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Point point0 = new Point();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy1);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<Float> class2 = Float.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getObjectWriter");
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], class2);
      parameterizedTypeImpl0.getTypeName();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "country", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stackOverflowError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "getgetLocation";
      Boolean boolean0 = new Boolean("getgetLocation");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getgetLocation");
      Point point0 = new Point();
      Point point1 = new Point(point0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getCollectionItemType(type0);
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.getRawClass(type0);
      InternalError internalError0 = new InternalError("Q");
      Locale locale0 = Locale.FRANCE;
      TypeUtils.toLocale("Q");
      JavaBeanInfo.getBuilderClass((JSONType) null);
      TypeUtils.isGenericParamType(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      hashMap0.values();
      Class<IllegalStateException> class2 = IllegalStateException.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null);
      TreeSet<StringCharacterIterator> treeSet0 = new TreeSet<StringCharacterIterator>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("istoString");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.IllegalAccessError: istoString
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong((-1034L), toLongFunction0, 2731L, longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.aliba\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      weakHashMap0.entrySet();
      weakHashMap0.put("not support awt class : ", "not support awt class : ");
      weakHashMap0.clear();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-42);
      byteArray0[5] = (byte)29;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)93;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      Class<Short> class1 = Short.TYPE;
      typeArray0[3] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[2]);
      parameterizedTypeImpl0.getTypeName();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaObjectDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 0;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      TypeUtils.castToJavaBean((Object) "java.awt.Point@0000000001", class0);
      InternalError internalError0 = new InternalError("java.awt.Point@0000000001");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "java.awt.Point@0000000001", (-32));
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setZeroDigit('U');
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("istoInstant");
      TypeUtils.isNumber("!5n8lw1SDu$-");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      Class<String> class0 = String.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("rOHHz.wW7id,^#&I");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "rOHHz.wW7id,^#&I", (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      LinkedHashMap<BufferCapabilities, EnumDeserializer> linkedHashMap0 = new LinkedHashMap<BufferCapabilities, EnumDeserializer>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.GridBagConstraints@5c91004a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(140758963191807L, consumer0);
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      HttpCookie httpCookie0 = new HttpCookie("{zjo#NFCMU", "{zjo#NFCMU");
      httpCookie0.setPath((String) null);
      httpCookie0.setMaxAge(662L);
      httpCookie0.setValue("B");
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.getClassFromMapping("{zjo#NFCMU");
      LinkedHashMap<BufferCapabilities, EnumDeserializer> linkedHashMap0 = new LinkedHashMap<BufferCapabilities, EnumDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("]0jyO+", "(3tlpU");
      BiFunction<Object, Throwable, SQLDataException> biFunction0 = (BiFunction<Object, Throwable, SQLDataException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(140758963191807L, consumer0);
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      HttpCookie httpCookie0 = new HttpCookie("{zjo#NFCMU", "{zjo#NFCMU");
      httpCookie0.setPath((String) null);
      httpCookie0.setValue("B");
      TypeUtils.castToBoolean((Object) null);
      ClassLoader.getSystemClassLoader();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      stringIndexOutOfBoundsException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-9Fh>nlU^", "S", (-7), stringIndexOutOfBoundsException0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("8U'");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchFieldError: 8U'
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.isNumber("/Date(B");
      TypeUtils.getClassFromMapping("/Date(B");
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [checksum=0x10d0d814]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Short.toUnsignedInt((short)28);
      LinkedHashMap<String, SQLNonTransientException> linkedHashMap0 = new LinkedHashMap<String, SQLNonTransientException>();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>(linkedHashMap0);
      JSONObject jSONObject0 = new JSONObject((short)28, true);
      HttpCookie httpCookie0 = new HttpCookie("1.2.46", "6Q[??/x");
      httpCookie0.setMaxAge(1099511628211L);
      httpCookie0.setHttpOnly(false);
      httpCookie0.setValue("getgetSQLState");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.clear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      TypeUtils.isProxy(class1);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "2P8", noSuchMethodError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLTransactionRollbackException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(treeMap0);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Point point0 = new Point();
      point0.setLocation(14, 974);
      point0.translate(2340, 11);
      Point point1 = new Point();
      point1.x = (-3007);
      point1.translate(112, 14);
      TypeUtils.castToTimestamp((Object) null);
      Class<Byte> class0 = Byte.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      VerifyError verifyError0 = new VerifyError((String) null);
      TypeUtils.castToSqlDate((Object) null);
      Integer integer0 = new Integer(2354);
      assertEquals(2354, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>();
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      identityHashMap0.putAll(treeMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("fillInStackTrace", classLoader0, true);
      boolean boolean0 = TypeUtils.isNumber("java.java.lang.Object");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.clearClassMapping();
      ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) null, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      Class<String> class0 = String.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("rOHHz.wW7id,^#&I");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "rOHHz.wW7id,^#&I", (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("");
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("net.sf.cglib.proxy.Factory");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.lang.MockThrowable: net.sf.cglib.proxy.Factory
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ThreadGroup threadGroup0 = new ThreadGroup("org.springframework.security.core.context.SecurityContextImpl");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "java.awt.Point@0000000001");
      MockThread mockThread0 = new MockThread("@@'");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "java.awt.Point@0000000001", 19);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1);
      MockThread mockThread3 = new MockThread(mockThread2);
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<Float> class1 = Float.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5bw9");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      String string0 = ParserConfig.DENY_PROPERTY;
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.deny", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Point> class0 = Point.class;
      TypeUtils.isProxy(class0);
      String string0 = "java.sql.SQLFeatureNotSupportedException";
      TypeUtils.loadClass("java.sql.SQLFeatureNotSupportedException", (ClassLoader) null, false);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("java.sql.SQLFeatureNotSupportedException", "java.sql.SQLFeatureNotSupportedException");
      ConcurrentHashMap.newKeySet();
      concurrentHashMap0.toString();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(140758963191807L, consumer0);
      concurrentHashMap0.put("njmot%}K!^.J", "[U+y.uY(w:=7XMMf&nl");
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      HttpCookie httpCookie0 = new HttpCookie("{zjo#NFCMU", "{zjo#NFCMU");
      httpCookie0.setPath((String) null);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      weakHashMap0.put("{z~}_,{", (Object) null);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.setAutoTypeSupport(true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(140758963191807L, consumer0);
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getGenericParamType(type0);
      InternalError internalError0 = new InternalError("lineNumber");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[U+y.uY(w:=7XMMf&nl", classLoader0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(140758963191807L, consumer0);
      String string0 = "[U+y.uY(w:=7XMMf&nl";
      concurrentHashMap0.put("njmot%}K!^.J", "[U+y.uY(w:=7XMMf&nl");
      Class<Float> class0 = Float.TYPE;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      TypeUtils.getGenericParamType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Point point0 = new Point();
      point0.setLocation(14, 974);
      point0.translate(2340, 11);
      Point point1 = new Point();
      point1.translate(112, 14);
      TypeUtils.castToTimestamp((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.PropertyNamingStrategy", "[");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "javax.persistence.ManyToMany", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("_");
      sQLRecoverableException2.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException1);
      TypeUtils.castToByte((Object) null);
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertEquals(17, class0.getModifiers());
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("javax.persistence.ManyToMany");
      assertEquals("javax.persistence.manytomany", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.fnv1a_64("Ljava.util.concurrent.ConcurrentSkipListSet");
      Point point0 = new Point(56, 1443168282);
      Point point1 = new Point(point0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(hashtable0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("Ljava.lang.AutoCloseable", classLoader1);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("F", classLoader0, false);
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.castToSqlDate((Object) null);
      ClassLoader.getSystemClassLoader();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/(SWOJWM;aavhg", "^*<e", 3286, stringIndexOutOfBoundsException0);
      Double double0 = new Double((-7));
      Short short0 = TypeUtils.castToShort(double0);
      assertEquals((short) (-7), (short)short0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("classame");
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point1.translate(0, 0);
      point1.setLocation(point0);
      point1.translate(1170, 0);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.getClass((Type) class0);
      Hashtable<Rectangle, MockCalendar> hashtable0 = new Hashtable<Rectangle, MockCalendar>();
      JSONObject jSONObject0 = new JSONObject(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "[B";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[B");
      Float float0 = new Float((-909.4238F));
      Float.sum((-909.4238F), 873.67523F);
      TypeUtils.isHibernateInitialized(float0);
      Type[] typeArray0 = new Type[2];
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      parserConfig0.checkAutoType("N=JZi&H", class0, 1171);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      typeArray0[0] = type0;
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 2);
      constructorArray0[0] = (Constructor<Method>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "scanLong", fieldArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("scanLong");
      TypeUtils.castToChar((Object) null);
      TypeUtils.loadClass("scanLong", (ClassLoader) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      InternalError internalError0 = new InternalError("Kx22{");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = null;
      try {
        concurrentHashMap0 = new ConcurrentHashMap<String, String>(16, (-3462.5F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockException mockException0 = new MockException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("float", "A)#|~+Az#w.1;j", mockException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("float", sQLDataException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("float", "float", sQLInvalidAuthorizationSpecException1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLInvalidAuthorizationSpecException2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Point point0 = new Point();
      point0.setLocation(14, 974);
      point0.move(105, 2340);
      Point point1 = new Point(105, (-3512));
      point0.setLocation((Point2D) point1);
      point0.translate(2340, 11);
      Point point2 = new Point();
      point2.x = (-3007);
      point2.translate(112, 14);
      TypeUtils.castToTimestamp((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.alibaba.fastjson.PropertyNamingStrategy", "[");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "javax.persistence.ManyToMany", sQLRecoverableException0);
      sQLRecoverableException0.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("javax.persistence.ManyToMany");
      sQLRecoverableException0.fillInStackTrace();
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = true;
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("jR");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "6wN(^|1-");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "u2");
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "cjL?GSSWZEH}AzjMI");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("&\"", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToBigInteger((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("CQ.'oj}]_.", "u");
      identityHashMap0.put("L", "zM2ux]7)p5");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      Locale.forLanguageTag("EIE<*C2D[f3A|");
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("(S?]GD[s=j26i", "(S?]GD[s=j26i");
      Class<SQLTransientException> class3 = SQLTransientException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class3, (Map<String, String>) null, false, propertyNamingStrategy0);
      java.util.IdentityHashMap<String, Object> identityHashMap1 = new java.util.IdentityHashMap<String, Object>();
      ParserConfig parserConfig1 = new ParserConfig();
      Class<Timestamp> class4 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap1, class4, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "5bw9", 19);
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      decimalFormatSymbols0.setZeroDigit('U');
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols(locale0);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      TypeUtils.isNumber("fastjson.parser.deny");
      Integer integer0 = new Integer(19);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      Class<String> class0 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      TypeUtils.loadClass("EMi7dCX", (ClassLoader) aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      java.util.IdentityHashMap<Date, NoSuchFieldException> identityHashMap0 = new java.util.IdentityHashMap<Date, NoSuchFieldException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      HttpCookie httpCookie0 = new HttpCookie("get@zgetSQLState", "{zjo#NFCMU");
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      weakHashMap0.put(":9e0SL.1?\u0001K", (Object) null);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      Properties properties0 = new Properties();
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : get@zgetSQLState=\"{zjo#NFCMU\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      Class<InstantiationError> class0 = InstantiationError.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("classame");
      ClassLoader.getSystemClassLoader();
      ThreadGroup threadGroup0 = new ThreadGroup("classame");
      MockThread mockThread0 = new MockThread(threadGroup0, "classame");
      MockThread mockThread1 = new MockThread(mockThread0, "J[P");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException> weakHashMap0 = new WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException>();
      Type[] typeArray0 = new Type[7];
      typeArray0[1] = (Type) genericArrayType0;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) genericArrayType0;
      Class<Byte> class1 = Byte.TYPE;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) genericArrayType0;
      typeArray0[6] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      TypeUtils.cast((Object) weakHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.castToSqlDate((Object) null);
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("{6~nu`JPko");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.{6~nu`JPko
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(0, 0);
      String string0 = "5.rQVgtmeu6\\h";
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "5.rQVgtmeu6h");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("5.rQVgtmeu6h", classLoader0, false);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.castToSqlDate((Object) null);
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@14675239
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong(1L, toLongFunction0, (-2072L), longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      ClassLoader.getSystemClassLoader();
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      PageAttributes.ColorType pageAttributes_ColorType1 = PageAttributes.ColorType.COLOR;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      HashMap<SimpleDateFormat, InternalError> hashMap0 = new HashMap<SimpleDateFormat, InternalError>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
      String string0 = "getgetY";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("getgetY", sQLTransientConnectionException0);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(renderingHints_Key0).toString();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, timeUnit0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {null=MINUTES}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "5bw9", 19);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("5bw9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 5bw9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(".s<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : .s<
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      Class<String> class0 = String.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TreeMap<SimpleDateFormat, DecimalFormat> treeMap0 = new TreeMap<SimpleDateFormat, DecimalFormat>();
      java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<SimpleDateFormat, DecimalFormat>(treeMap0);
      identityHashMap0.putAll(treeMap0);
      MockThread mockThread0 = new MockThread("B");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = classLoader0.getParent();
      aSMClassLoader0.clearAssertionStatus();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      classLoader0.getParent();
      ASMClassLoader aSMClassLoader2 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("[D", (ClassLoader) null);
      Class<?> class1 = TypeUtils.loadClass("[D", (ClassLoader) aSMClassLoader2, false);
      assertNotNull(class1);
      
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Point point0 = new Point();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = "can not cast to float, value : ";
      concurrentHashMap0.put("can not cast to float, value : ", "can not cast to float, value : ");
      SQLDataException sQLDataException0 = new SQLDataException("GJ");
      Function<String, SQLDataException> function0 = (Function<String, SQLDataException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(sQLDataException0).when(function0).apply(anyString());
      BiFunction<SQLDataException, SQLDataException, SQLDataException> biFunction0 = (BiFunction<SQLDataException, SQLDataException, SQLDataException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues((long) 0, (Function<? super String, ? extends SQLDataException>) function0, (BiFunction<? super SQLDataException, ? super SQLDataException, ? extends SQLDataException>) biFunction0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((-731L), consumer0);
      HttpCookie httpCookie0 = new HttpCookie("month", "getParameters");
      TypeUtils.decapitalize((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("getParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getParameters
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Point");
      Class<InstantiationError> class0 = InstantiationError.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("classame");
      ClassLoader.getSystemClassLoader();
      ThreadGroup threadGroup0 = new ThreadGroup("classame");
      MockThread mockThread0 = new MockThread(threadGroup0, "classame");
      MockThread mockThread1 = new MockThread(mockThread0, "J[P");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException> weakHashMap0 = new WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException>();
      Type[] typeArray0 = new Type[7];
      typeArray0[1] = (Type) genericArrayType0;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) genericArrayType0;
      Class<Byte> class1 = Byte.TYPE;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) genericArrayType0;
      typeArray0[6] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      TypeUtils.cast((Object) weakHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      String string0 = "Ljava.lang.AutoCloseable";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      point0.translate(63, 11);
      Point point1 = new Point();
      point0.translate(0, 3470);
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.isProxy(class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      InternalError internalError0 = new InternalError("com.alibaba.fastjson.serializer.BigDecimalCodec");
      HttpCookie httpCookie0 = new HttpCookie("java.lang.StackTraceElement", "Nyt(I['-M");
      httpCookie0.setDomain("(C)Ljava/lang/String;");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.serializer.BigDecimalCodec");
      httpCookie0.setMaxAge(0L);
      httpCookie0.setValue("java.lang.StackTraceElement");
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("getSuppressed", internalError0);
      Boolean boolean0 = new Boolean(false);
      TypeUtils.getClassFromMapping("(I)Ljava/lang/Object;");
      LinkedHashMap<BufferCapabilities, EnumDeserializer> linkedHashMap0 = new LinkedHashMap<BufferCapabilities, EnumDeserializer>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TypeUtils.castToDate(mockGregorianCalendar0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.getRawClass(class0);
      TypeUtils.unwrapOptional(class1);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<InstantiationException> class2 = InstantiationException.class;
      TypeUtils.isHibernateInitialized("getSuppressed");
      Class<InstantiationError> class3 = InstantiationError.class;
      TypeUtils.isKotlin(class3);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getgetLocation");
      Point point0 = new Point();
      Point point1 = new Point(point0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Float> class0 = Float.TYPE;
      TypeUtils.unwrapOptional(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.getRawClass(class1);
      InternalError internalError0 = new InternalError("processKey");
      Locale locale0 = Locale.GERMAN;
      TypeUtils.toLocale("processKey");
      TypeUtils.isGenericParamType(type0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      Collection collection0 = new TreeSet<StringCharacterIterator>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "processKey", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Point point0 = new Point(19, (-20));
      Point point1 = new Point(point0);
      point1.setLocation((-3023), (-20));
      point1.translate(120, (-3023));
      point1.translate(19, (-20));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Date> class0 = Date.class;
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.setClassAssertionStatus("CVQ:<sE!6)cm%7", false);
      aSMDeserializerFactory0.classLoader.setClassAssertionStatus("CVQ:<sE!6)cm%7", true);
      classLoader0.clearAssertionStatus();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      TypeUtils.isNumber("CVQ:<sE!6)cm%7");
      VerifyError verifyError0 = new VerifyError();
      AtomicInteger atomicInteger0 = new AtomicInteger(99999);
      TypeUtils.castToInt(atomicInteger0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      LinkedHashSet<IllegalArgumentException> linkedHashSet0 = new LinkedHashSet<IllegalArgumentException>();
      NumberFormatException numberFormatException0 = new NumberFormatException();
      linkedHashSet0.add(numberFormatException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [java.lang.NumberFormatException]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Point point0 = new Point();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("can not cast to float, value : ", "can not cast to float, value : ");
      SQLDataException sQLDataException0 = new SQLDataException("GJ");
      Function<String, SQLDataException> function0 = (Function<String, SQLDataException>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(sQLDataException0).when(function0).apply(anyString());
      BiFunction<SQLDataException, SQLDataException, SQLDataException> biFunction0 = (BiFunction<SQLDataException, SQLDataException, SQLDataException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues((long) 0, (Function<? super String, ? extends SQLDataException>) function0, (BiFunction<? super SQLDataException, ? super SQLDataException, ? extends SQLDataException>) biFunction0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("can not cast to float, value : ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("can not cast to float, value : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : can not cast to float, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      TypeUtils.getClassFromMapping("*|~AF,gc");
      Point point0 = new Point(482, 482);
      Point point1 = new Point(point0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      SQLDataException sQLDataException0 = new SQLDataException();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      TypeUtils.computeGettersWithFieldBase(class1, weakHashMap0, true, propertyNamingStrategy1);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("org.apache.ibatis.javassist.util.proxy.ProxyObject", noClassDefFoundError0);
      TypeUtils.castToLong((Object) null);
      Class<NegativeArraySizeException> class2 = NegativeArraySizeException.class;
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy2, true);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("null", "null");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((long) 38, (Consumer<? super String>) consumer0);
      HttpCookie httpCookie0 = new HttpCookie("timeZone", "null");
      String string0 = null;
      httpCookie0.setPath("{zjo#NFCMU");
      httpCookie0.setMaxAge((-2074L));
      String string1 = "B";
      httpCookie0.setValue("null");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("{zjo#NFCMU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {zjo#NFCMU
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate(99999, 99999);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setClassAssertionStatus("CVQ:<sE!6)cm%7", true);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      ThreadGroup threadGroup0 = new ThreadGroup("4P*4O");
      TypeUtils.decapitalize("");
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      Locale locale0 = Locale.US;
      TypeUtils.castToSqlDate((Object) null);
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("4P*4O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.4P*4O
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "5bw9", 19);
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setZeroDigit('U');
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      TypeUtils.isNumber("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("5bw9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5bw9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      weakHashMap0.clear();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.getCollectionItemType(class1);
      Class<Byte> class2 = Byte.TYPE;
      Class<?> class3 = TypeUtils.getRawClass(class0);
      InternalError internalError0 = new InternalError("fastjson.parser.deny");
      Locale locale0 = Locale.FRANCE;
      TypeUtils.toLocale(")_yaWuR");
      TypeUtils.isGenericParamType(class3);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Time> class4 = Time.class;
      TypeUtils.computeGetters((Class<?>) class4, (Map<String, String>) hashMap0);
      TreeSet<StringCharacterIterator> treeSet0 = new TreeSet<StringCharacterIterator>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, (Type) class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<String> toLongFunction0 = (ToLongFunction<String>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValuesToLong((-1L), toLongFunction0, (-542L), longBinaryOperator0);
      HttpCookie httpCookie0 = new HttpCookie("7", (String) null);
      httpCookie0.setPath((String) null);
      HttpCookie httpCookie1 = new HttpCookie("getgetSQLState", "{zjo#NFCMU");
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      weakHashMap0.put(":9e0SL.1?\u0001K", "G>H`S#YA&j`ucs:,b/F");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("G>H`S#YA&j`ucs:,b/F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : G>H`S#YA&j`ucs:,b/F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Point point0 = new Point();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type type1 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getRawClass(type1);
      InternalError internalError0 = new InternalError("true");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = new Locale("Io i/o");
      TypeUtils.isGenericParamType(type0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Double> class1 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate(99999, 99999);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setClassAssertionStatus("CVQ:<sE!6)cm%7", true);
      aSMClassLoader0.setClassAssertionStatus("CVQ:<sE!6)cm%7", true);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      TypeUtils.isNumber("CVQ:<sE!6)cm%7");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "5bw9", 19);
      Locale locale0 = Locale.CANADA;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      decimalFormatSymbols0.setZeroDigit('U');
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("5bw9", "getshortValue", 19, internalError0);
      TypeUtils.castToString((Object) null);
      Class<JobAttributes> class1 = JobAttributes.class;
      TypeUtils.getParserFeatures(class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "5bw9", 19);
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      decimalFormatSymbols0.setZeroDigit('U');
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("");
      TypeUtils.isNumber("Tg=4uKt>K@+_2g[E");
      TypeUtils.castToSqlTime((Object) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isKotlin(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getClassFromMapping("can not cast to Date, value : ");
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      MockThread mockThread0 = new MockThread((Runnable) null, "%@P<BjjM;=M");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      Class<Float> class2 = Float.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "can not cast to Date, value : ");
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) null;
      typeArray0[7] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[6]);
      parameterizedTypeImpl0.getTypeName();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("country");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@75bf8d7f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isKotlin(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-2663L));
      TypeUtils.getClassFromMapping("can not cast to Date, value : ");
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      MockThread mockThread0 = new MockThread((Runnable) null, "%@P<BjjM;=M");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException> weakHashMap0 = new WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException>();
      Class<Byte> class2 = Byte.TYPE;
      Class<JSONPDeserializer> class3 = JSONPDeserializer.class;
      Class<?> class4 = TypeUtils.getCollectionItemClass(class3);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class3, (Type) class4, propertyNamingStrategy0, true, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class2;
      TypeUtils.loadClass("", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      Class<Boolean> class5 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class5).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class2);
      Class<Calendar> class6 = Calendar.class;
      Class<Annotation> class7 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class6, class7);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 14;
      point0.setLocation(19, 19);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) point0, class0);
      InternalError internalError0 = new InternalError("5bw9");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "5bw9", 19);
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setZeroDigit('U');
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("", (ClassLoader) aSMClassLoader0, true);
      Class<Boolean> class1 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, (Type) null);
      Class<Calendar> class2 = Calendar.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(timeDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.clearClassMapping();
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      InternalError internalError0 = new InternalError();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("getContext", (String) null, 30);
      Locale locale0 = Locale.ITALY;
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      WeakHashMap<String, Object> weakHashMap1 = new WeakHashMap<String, Object>();
      weakHashMap1.put((String) null, internalError0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig1 = new ParserConfig(true);
      parserConfig1.setAutoTypeSupport(true);
      TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap1, class1, parserConfig0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      TypeUtils.computeGettersWithFieldBase(class2, linkedHashMap0, false, (PropertyNamingStrategy) null);
      SQLWarning sQLWarning0 = new SQLWarning();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(30, 1596, 1596);
      TypeUtils.castToSqlTime(mockGregorianCalendar0);
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Point point0 = new Point();
      Point point1 = new Point(14, 1030);
      point1.setLocation(0, 2361);
      point1.translate(2361, 2952);
      Point point2 = new Point();
      point0.translate(11, 11);
      TypeUtils.castToTimestamp((Object) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "DisableASM");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("DisableASM", "com.alibaba.fastjson.PropertyNamingStrategy", sQLRecoverableException0);
      JSONObject jSONObject0 = new JSONObject(0, true);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols> weakHashMap0 = new WeakHashMap<SQLIntegrityConstraintViolationException, DecimalFormatSymbols>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      weakHashMap0.put(sQLIntegrityConstraintViolationException0, decimalFormatSymbols0);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("getClass");
      TypeUtils.isNumber("@type");
      TypeUtils.castToInt((Object) null);
      TypeUtils.createCollection(parameterizedTypeImpl0);
      DataTruncation dataTruncation0 = new DataTruncation(989, true, true, 7, (-3011), sQLRecoverableException1);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isKotlin(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.getClassFromMapping("isgetLocalizedMessage");
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      MockThread mockThread0 = new MockThread((Runnable) null, "can not cast to Date, value : ");
      MockThread mockThread1 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException> weakHashMap0 = new WeakHashMap<SQLNonTransientException, SQLIntegrityConstraintViolationException>();
      Class<Byte> class3 = Byte.TYPE;
      Class<?> class4 = TypeUtils.getCollectionItemClass((Type) null);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) null, (PropertyNamingStrategy) null, true, true);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig1, javaBeanInfo0);
      TypeUtils.loadClass("A*9\"Pktj2jLI", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      Class<Boolean> class5 = Boolean.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class3, class4);
      boolean boolean0 = new Boolean(false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "g<";
      TypeUtils.fnv1a_64("g<");
      TypeUtils.castToBytes("g<");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, true);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      TypeUtils.getClassFromMapping("*|~AF,gc");
      Point point0 = new Point(482, 482);
      Point point1 = new Point(point0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      point0.move(482, 482);
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      Integer integer0 = new Integer((-470));
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("suppressedExceptions");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.replaceAll(biFunction0);
      TypeUtils.castToString(integer0);
      TypeUtils.isNumber("T9~i.i9Y|$A");
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@ec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("hashCode", "gettoString");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(biFunction0).apply(any() , any());
      hashMap0.put("getSuppressed", "getSuppressed");
      hashMap0.put((String) null, "ha");
      hashMap0.replaceAll(biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      Class<Calendar> class1 = Calendar.class;
      TypeUtils.isPath(class1);
      TypeUtils.fnv1a_64_lower("x#*(LOjmwBu!");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("V?&p", true);
      classLoader0.setPackageAssertionStatus("Q>3_WP%cimliP*5^O", true);
      TypeUtils.loadClass("|>&cPCw7:djZ", classLoader0, false);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("|>&cPCw7:djZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : |>&cPCw7:djZ
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "getgetLocation";
      Boolean boolean0 = new Boolean("getgetLocation");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getgetLocation");
      Point point0 = new Point();
      Point point1 = new Point(point0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Float> class0 = Float.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getCollectionItemType(type0);
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.getRawClass(type0);
      InternalError internalError0 = new InternalError("Q");
      Locale locale0 = Locale.FRANCE;
      TypeUtils.toLocale("Q");
      JavaBeanInfo.getBuilderClass((JSONType) null);
      TypeUtils.isGenericParamType(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      hashMap0.values();
      Class<IllegalStateException> class2 = IllegalStateException.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null);
      TreeSet<StringCharacterIterator> treeSet0 = new TreeSet<StringCharacterIterator>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("istoString");
      InternalError internalError1 = new InternalError("getgetLocation");
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      Class<SqlDateDeserializer> class4 = SqlDateDeserializer.class;
      Class<MockDateFormat> class5 = MockDateFormat.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("o", class4, class5, class2, (Field) null, 0, 0, (-2296));
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      SecurityException securityException0 = new SecurityException();
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Point point0 = new Point();
      point0.setLocation(19, 19);
      point0.translate(19, 19);
      point0.translate(99999, 99999);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setClassAssertionStatus("CVQ:<sE!6)cm%7", true);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      ThreadGroup threadGroup0 = new ThreadGroup("4P*4O");
      MockThread mockThread0 = new MockThread(threadGroup0, "4P*4O");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "fi");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "org.springframework.security.web.savedrequest.DefaultSavedRequest", 100037);
      mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      Class<Short> class1 = Short.TYPE;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      Class<java.sql.Date> class2 = java.sql.Date.class;
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fi", class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : fi
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
