/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 08:49:26 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.getDate(70);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<JSONArray> class0 = JSONArray.class;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      int int0 = 1;
      JSONArray jSONArray2 = jSONArray1.fluentSet(1, jSONArray0);
      jSONArray0.getBooleanValue(70);
      jSONArray2.getBooleanValue(137);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.getDate(2888);
      jSONArray1.isEmpty();
      Class<String> class0 = String.class;
      Class<JSONArray> class1 = JSONArray.class;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.setAsmEnable(false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      Type[] typeArray0 = new Type[3];
      typeArray0[1] = (Type) class1;
      jSONArray1.getObject(989, (Type) class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = jSONArray0.clone();
      Class<Field> class2 = Field.class;
      jSONArray0.toJavaList(class2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3382, 2888);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentSet((byte)44, sequenceInputStream0);
      jSONArray1.set((byte)44, jSONArray2);
      assertFalse(jSONArray0.equals((Object)object0));
      assertEquals(3385, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3216, (Object) null);
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.getIntValue(1141);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(3216);
      jSONArray0.getJSONObject(3216);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3, (Object) null);
      Integer integer1 = new Integer(3204);
      jSONArray2.getJSONObject(989);
      Integer integer2 = new Integer(3204);
      jSONArray2.getJSONObject(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      jSONArray0.getTimestamp(256);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      JSONArray jSONArray1 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(1033, sequenceInputStream0);
      jSONArray2.getDate(0);
      int int0 = 349;
      jSONArray2.getIntValue(0);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(63);
      jSONArray2.getJSONObject(1033);
      JSONArray jSONArray3 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd((-1), (Object) mockFileInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      linkedList0.add((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.getJSONArray(0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.add(0, (Object) jSONArray1);
      int int0 = (-2873);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray2.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.subList(118, 717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 717
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[3] = serializerFeature3;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray2.toJavaList(class0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(70, (Object) serializerFeature0);
      jSONArray0.clone();
      jSONArray1.containsAll(jSONArray2);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray2.containsAll(list0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jSONArray0.getByte(989);
      Class<String> class1 = String.class;
      List<String> list1 = jSONArray3.toJavaList(class1);
      jSONArray1.fluentAddAll((Collection<?>) list1);
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.getDate(2888);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<String> class0 = String.class;
      Class<JSONArray> class1 = JSONArray.class;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      Type[] typeArray0 = new Type[3];
      JSON.DEFAULT_TYPE_KEY = "";
      typeArray0[1] = (Type) class1;
      jSONArray1.getObject(989, (Type) class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, typeArray0[1]);
      // Undeclared exception!
      try { 
        jSONArray2.getByte(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      linkedList0.add((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray2.add(0, (Object) jSONArray1);
      int int0 = (-2873);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray2.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.subList(118, 717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 717
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray0.containsAll(jSONArray0);
      jSONArray0.remove((Object) concurrentSkipListMap0);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature1;
      jSONArray0.set(161, feature0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : AllowUnQuotedFieldNames
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("utf-8", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(69, (Object) null);
      jSONArray0.isEmpty();
      jSONArray1.getBooleanValue(69);
      jSONArray1.getIntValue(69);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.contains(jSONObject0);
      jSONArray1.fluentRetainAll(jSONArray0);
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature feature1 = Feature.SupportArrayToBean;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature0;
      featureArray0[1] = feature1;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      jSONArray1.fluentRetainAll(jSONArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.fluentRemoveAll(jSONArray1);
      linkedList0.add((Integer) 989);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("utf-8", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(69, (Object) null);
      jSONArray0.isEmpty();
      jSONArray1.getBooleanValue(69);
      jSONArray1.getIntValue(69);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.contains(jSONObject0);
      Feature feature0 = Feature.NonStringKeyAsString;
      Feature feature1 = Feature.SupportArrayToBean;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature0;
      featureArray0[1] = feature1;
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      javaBeanSerializer1.getType();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(121, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Size: 70
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray0.containsAll(jSONArray0);
      jSONArray0.remove((Object) concurrentSkipListMap0);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      int int0 = 3339;
      jSONArray0.set(161, feature1);
      Class<InputStream> class0 = InputStream.class;
      Class<InputStream> class1 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(161, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.InputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getDate(2886);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = (JSONArray)jSONArray1.clone();
      jSONArray1.containsAll(list0);
      Integer integer0 = new Integer(70);
      jSONArray2.set(1, (Object) null);
      Class<InputStream> class1 = InputStream.class;
      jSONArray1.getObject(3201, class1);
      double double0 = jSONArray2.getDoubleValue(1);
      assertEquals(3385, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|");
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("utf-8", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(69, (Object) null);
      jSONArray0.isEmpty();
      jSONArray1.getBooleanValue(69);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getIntValue(69);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.setComponentType(type0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(2880, class0);
      jSONArray2.lastIndexOf((Object) null);
      jSONArray2.remove(2879);
      assertEquals(2880, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<Annotation> class0 = Annotation.class;
      FieldInfo.getFieldType(class0, class0, (Type) null);
      jSONArray0.setComponentType((Type) null);
      jSONArray0.lastIndexOf(class0);
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.listIterator(0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(1981);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1981, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("utf-8", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(69, (Object) null);
      jSONArray0.isEmpty();
      jSONArray1.containsAll(jSONArray0);
      jSONArray1.getIntValue(69);
      Feature[] featureArray0 = new Feature[6];
      JSON.parseObject("");
      jSONArray0.contains((Object) null);
      // Undeclared exception!
      try { 
        JSON.parse("", featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.Feature", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.toString();
      jSONArray0.contains("[]");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3216, (Object) null);
      jSONArray1.relatedArray = (Object) jSONArray0;
      jSONArray1.isEmpty();
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.getIntValue(1141);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1141);
      // Undeclared exception!
      try { 
        uTF8Decoder0.decode(byteBuffer0, charBuffer0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = null;
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) null);
      jSONArray0.getShort(0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      jSONArray1.set(0, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(441);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 441, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.isEmpty();
      jSONArray1.getShortValue(3384);
      jSONArray0.getLong(989);
      MockDate mockDate0 = new MockDate((short)0, 70, 70, 989, 70);
      String[] stringArray0 = new String[5];
      jSONArray0.getFloatValue(989);
      JSON.toJSON((Object) null);
      stringArray0[0] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Feature feature0 = Feature.CustomMapDeserializer;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.IgnoreAutoType;
      featureArray0[2] = feature1;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      JSON.parseObject((String) null, featureArray0);
      JSONObject jSONObject0 = new JSONObject(55);
      jSONArray0.fluentAdd(3384, (Object) jSONObject0);
      jSONArray1.getJSONObject(2254);
      jSONObject0.getJSONArray("");
      // Undeclared exception!
      try { 
        jSONArray1.toArray((JSONObject[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.isEmpty();
      jSONArray1.getShortValue(3384);
      jSONArray0.getLong(989);
      MockDate mockDate0 = new MockDate((short)0, 70, 70, 989, 70);
      String[] stringArray0 = new String[5];
      jSONArray0.getFloatValue(989);
      JSON.toJSON((Object) null);
      stringArray0[0] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "";
      jSONArray1.getBigDecimal(55);
      stringArray0[3] = "";
      jSONArray0.isEmpty();
      jSONArray0.setRelatedArray((Object) null);
      JSONArray jSONArray2 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray4 = (JSONArray)jSONArray2.clone();
      Class<InputStream> class0 = InputStream.class;
      jSONArray3.getObject(55, class0);
      jSONArray3.listIterator(70);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray4.getObject(1044, class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1044, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3388, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.getDate(2886);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jSONArray1.isEmpty();
      jSONArray1.getShortValue(70);
      jSONArray0.getLong(0);
      MockDate mockDate0 = new MockDate(3355, 989, (-1), 0, 0);
      JSON.toJSON((Object) null);
      jSONArray0.getBigDecimal(642);
      jSONArray1.isEmpty();
      jSONArray0.setRelatedArray((Object) null);
      JSONArray jSONArray2 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) null);
      jSONArray3.clone();
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject((-1), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.isEmpty();
      jSONArray1.getShortValue(3384);
      jSONArray0.getLong(989);
      MockDate mockDate0 = new MockDate((short)0, 70, 70, 989, 70);
      String[] stringArray0 = new String[5];
      JSON.toJSON((Object) null);
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "";
      jSONArray1.getBigDecimal(55);
      stringArray0[3] = "";
      jSONArray0.isEmpty();
      jSONArray0.setRelatedArray((Object) null);
      JSONArray jSONArray2 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray4 = (JSONArray)jSONArray2.clone();
      Class<InputStream> class0 = InputStream.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jSONArray3.getObject(55, class0);
      jSONArray3.listIterator(70);
      boolean boolean0 = jSONArray1.retainAll(jSONArray4);
      assertEquals(0, jSONArray1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("utf-8", concurrentSkipListMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(69, (Object) null);
      jSONArray0.isEmpty();
      jSONArray1.containsAll(jSONArray0);
      jSONArray1.getIntValue(69);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1849));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.isEmpty();
      jSONArray1.getShortValue(3384);
      jSONArray0.getLong(989);
      jSONArray1.getDate(55);
      String[] stringArray0 = new String[5];
      JSON.toJSON((Object) null);
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "";
      jSONArray1.getBigDecimal(55);
      stringArray0[3] = "";
      jSONArray0.isEmpty();
      jSONArray0.setRelatedArray((Object) null);
      JSONArray jSONArray2 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray1.fluentAdd((Object) null);
      jSONArray0.fluentRemove(0);
      jSONArray1.getBigDecimal(70);
      assertEquals(3385, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      JSONArray jSONArray2 = jSONArray0.fluentSet(4353, jSONObject0);
      jSONArray0.getSqlDate(3078);
      jSONArray0.getFloatValue(3078);
      Integer integer0 = new Integer(989);
      jSONArray2.getJSONObject(0);
      jSONArray0.fluentSet(70, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      jSONArray2.getObject(56, (Type) class1);
      jSONArray1.getObject(70, (Class<InputStream>) null);
      assertEquals(4354, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(comparator0).toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(4353);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      JSONArray jSONArray2 = jSONArray0.fluentSet(4353, jSONObject0);
      jSONArray0.getSqlDate(3078);
      jSONArray0.getFloatValue(3078);
      jSONArray1.containsAll(jSONArray0);
      JSONArray jSONArray3 = new JSONArray(3370);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(4353);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, jSONObject0);
      jSONArray0.getByteValue(50);
      jSONObject0.getJSONArray("");
      jSONArray1.getJSONObject(50);
      assertEquals(4354, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3370);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3370, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getDate(2886);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<String> class0 = String.class;
      Class<JSONArray> class1 = JSONArray.class;
      Class<JSONArray> class2 = JSONArray.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      Class<Annotation> class3 = Annotation.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class3, stringArray0);
      javaBeanSerializer0.getType();
      jSONArray1.getObject(989, (Type) class0);
      jSONArray0.fluentRetainAll(jSONArray1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray2.getByte(989);
      jSONArray2.getByteValue(70);
      JSONArray jSONArray3 = new JSONArray(120);
      jSONArray1.getString(120);
      float float0 = jSONArray0.getFloatValue(611);
      assertEquals(3371, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      jSONArray0.fluentSet(4353, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(4353);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.isEmpty();
      jSONArray1.getShortValue(3384);
      jSONArray0.getLong(989);
      jSONArray1.getDate(55);
      int int0 = 51;
      int int1 = 0;
      int int2 = 81;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 128;
      int int1 = 3078;
      JSONObject jSONObject0 = new JSONObject(3078);
      JSONArray jSONArray1 = jSONArray0.fluentSet(70, jSONObject0);
      jSONArray1.fluentRemove((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3062);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3062, Size: 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.fluentSet(989, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      jSONArray0.fluentSet(70, jSONObject0);
      int int0 = 3078;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3078);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3078, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      jSONArray0.fluentSet(4353, jSONObject0);
      jSONArray0.getSqlDate(3078);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Class<InputStream> class0 = InputStream.class;
      jSONArray0.getObject(184, class0);
      assertEquals(4354, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(0, false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(3392903);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3392903, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 6;
      JSONObject jSONObject0 = new JSONObject(6);
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      JSONObject jSONObject2 = new JSONObject(70);
      jSONObject2.put("", (Object) jSONArray0);
      jSONObject1.getBytes("boolean");
      JSONArray jSONArray1 = jSONArray0.fluentSet(6, jSONObject2);
      jSONObject1.getBoolean("");
      jSONArray1.remove((Object) null);
      StringWriter stringWriter0 = new StringWriter();
      int int1 = (-314);
      jSONObject2.getInteger("1.2.46");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1146, "");
      jSONArray1.isEmpty();
      jSONArray0.getDate(1146);
      JSONObject jSONObject0 = new JSONObject(false);
      Object object0 = new Object();
      jSONArray1.fluentAdd(object0);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      TypeReference<JSONArray> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<JSONArray>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      jSONArray1.remove(70);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONArray jSONArray2 = jSONArray0.fluentSet(4353, jSONObject0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".(");
      int int0 = 3672;
      jSONArray1.getJSONArray(3672);
      jSONArray2.getLong(4308);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      jSONArray1.getBigDecimal(989);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 989);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONObject jSONObject0 = new JSONObject(128);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<String> class0 = String.class;
      Class<JSONArray> class1 = JSONArray.class;
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "1.2.46";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), (Type) class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.toString();
      jSONArray0.contains("[]");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.fluentSet(128, "[]");
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      Integer integer0 = new Integer(70);
      linkedHashSet0.add(integer0);
      jSONArray0.isEmpty();
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-245), (Object) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -245, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.getDate(2886);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<String> class0 = String.class;
      Class<JSONArray> class1 = JSONArray.class;
      Class<JSONArray> class2 = JSONArray.class;
      Type[] typeArray0 = new Type[3];
      JSON.DEFAULT_TYPE_KEY = "";
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      Class<Annotation> class3 = Annotation.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class3, stringArray0);
      javaBeanSerializer0.getType();
      jSONArray1.getObject(989, (Type) class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray2.getByte(989);
      jSONArray2.clone();
      assertEquals(3385, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      jSONArray0.fluentSet(4382, comparator0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(4382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getDate(2886);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<String> class0 = String.class;
      Class<JSONArray> class1 = JSONArray.class;
      Class<JSONArray> class2 = JSONArray.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      Class<Annotation> class3 = Annotation.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class3, stringArray0);
      javaBeanSerializer0.getType();
      jSONArray1.getObject(989, (Type) class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray2.getByte(989);
      assertEquals(3385, jSONArray0.size());
      
      jSONArray0.getByteValue(70);
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '*';
      charArray0[2] = '0';
      charArray0[3] = 'a';
      charArray0[4] = ',';
      charArray0[5] = 'n';
      charArray0[6] = '>';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1146, "");
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      JSONArray jSONArray3 = jSONArray2.fluentSet(70, (Object) null);
      jSONArray1.getSqlDate(70);
      jSONArray3.spliterator();
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(1944);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1944, Size: 1147
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(70);
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), (Object) null);
      jSONArray1.fluentSet((-1), jSONArray0);
      int int0 = (-1323);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      JSONArray jSONArray2 = jSONArray0.fluentSet(4353, jSONObject0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".(");
      jSONArray1.getJSONArray(3672);
      jSONArray2.getLong(4308);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      jSONArray1.getBigDecimal(989);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("java.vm.name", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : java.vm.name
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<e[m'{OaMU{dc_F;*N");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.getDate(3436);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.getByte(70);
      jSONArray0.remove(70);
      assertEquals(4353, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray1.fluentRetainAll(jSONArray2);
      jSONArray0.getByte(3384);
      jSONArray3.toArray();
      assertEquals(3385, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray0.getByte(4340);
      jSONArray0.get(989);
      assertEquals(4354, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      jSONArray0.fluentAdd(0, (Object) defaultJSONParser0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.DefaultJSONParser@98
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 4353;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3514, jSONArray1);
      jSONArray2.isEmpty();
      jSONArray1.getShortValue(989);
      // Undeclared exception!
      try { 
        JSON.parseArray("fX@brKm&u!qgVW+V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove(jSONArray0);
      jSONArray0.fluentSet(70, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(128);
      JSONArray jSONArray2 = jSONArray0.fluentSet(4353, jSONObject0);
      jSONArray0.getSqlDate(3078);
      jSONArray0.getFloatValue(1);
      JSONArray[] jSONArrayArray0 = new JSONArray[9];
      jSONArrayArray0[0] = jSONArray0;
      jSONArrayArray0[1] = jSONArray1;
      jSONArrayArray0[2] = jSONArray0;
      jSONArrayArray0[3] = jSONArray1;
      jSONArrayArray0[4] = jSONArray0;
      jSONArrayArray0[5] = jSONArray2;
      jSONArrayArray0[6] = jSONArray2;
      jSONArrayArray0[7] = jSONArray2;
      jSONArray0.getJSONArray(70);
      jSONArrayArray0[8] = null;
      // Undeclared exception!
      try { 
        jSONArray2.toArray(jSONArrayArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      jSONArray0.getBooleanValue(989);
      jSONArray1.isEmpty();
      jSONArray1.getShortValue(3384);
      jSONArray0.getLong(989);
      jSONArray1.getDate(55);
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(210, (Object) null);
      jSONArray1.getSqlDate(3078);
      jSONArray1.getFloatValue(3384);
      Integer integer0 = new Integer(1);
      jSONArray2.fluentSet(989, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray2.getInteger(70);
      Class<InputStream> class0 = InputStream.class;
      jSONArray2.getObject(154, class0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3385, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      jSONArray0.fluentSet(70, jSONObject1);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      jSONArray0.fluentSet(70, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3384);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3384, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getDate(2886);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.indexOf((Object) null);
      jSONArray0.getByte(1);
      System.setCurrentTimeMillis(989);
      boolean boolean1 = jSONArray1.removeAll(jSONArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 1132;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4353, comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray1.getDate(989);
      jSONArray2.fluentRemoveAll(jSONArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove((Object) null);
      JSONObject jSONObject1 = new JSONObject(70);
      jSONArray0.fluentSet(70, jSONObject1);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONObject jSONObject0 = new JSONObject(70);
      JSONObject jSONObject1 = new JSONObject(1136);
      Integer integer0 = new Integer(1146);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentSet(192, object0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2540);
      jSONArray2.fluentAdd((Object) bufferedInputStream0);
      assertEquals(194, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<BigInteger> list0 = new LinkedList<BigInteger>();
      jSONArray0.addAll((Collection<?>) list0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean0 = jSONArray0.contains(parameterizedTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentRemove((Object) null);
      JSONObject jSONObject1 = new JSONObject(70);
      jSONArray0.fluentSet(70, jSONObject1);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1));
      JSONArray jSONArray1 = jSONArray0.fluentSet(70, integer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getString(70);
      // Undeclared exception!
      try { 
        JSON.parseArray("}Skz\"(tPM:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual }, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf(object0);
      int int0 = (-420);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-420));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1146, "");
      SerializeConfig serializeConfig0 = new SerializeConfig(70);
      jSONArray1.getLong(1146);
      Class<InputStream> class0 = InputStream.class;
      FieldInfo.getFieldType(class0, class0, class0);
      serializeConfig0.getObjectWriter(class0);
      jSONArray0.getDate(70);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-420));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      jSONArray0.fluentSet(70, integer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1146, "");
      SerializeConfig serializeConfig0 = new SerializeConfig(70);
      Class<InputStream> class0 = InputStream.class;
      FieldInfo.getFieldType(class0, class0, class0);
      serializeConfig0.getObjectWriter(class0);
      jSONArray1.isEmpty();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1146, "");
      SerializeConfig serializeConfig0 = new SerializeConfig(70);
      Class<InputStream> class0 = InputStream.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      ObjectSerializer objectSerializer0 = serializeConfig0.getObjectWriter(class0);
      serializeConfig0.put(type0, objectSerializer0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(989, "");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1146, "");
      jSONArray0.getJSONArray(989);
      double double0 = jSONArray0.getDoubleValue(950);
      assertEquals(1147, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRetainAll(list0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 666;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        jSONArray0.add(323, (Object) javaBeanSerializer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 323, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Integer integer0 = new Integer(2991);
      jSONArray1.fluentSet(70, integer0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(70, (Object) jSONArray0);
      jSONArray2.getJSONArray(70);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1146, "");
      jSONArray0.getJSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-657));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray0.set((-1), jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger((-888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray0 = new JSONArray(3678077);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(set0);
      jSONArray0.clear();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray1.set(989, "1.2.46");
      jSONArray1.getBigInteger(282);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.toString();
      ParserConfig.getGlobalInstance();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      boolean boolean0 = jSONArray0.isEmpty();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.toString();
      boolean boolean1 = jSONArray0.contains((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.removeAll(linkedList0);
      boolean boolean0 = jSONArray0.equals(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1522));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray1.set(122, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(122);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.al\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(70);
      jSONArray0.set(2226, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-198));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.clone();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2250;
      int int1 = (-1);
      Integer integer0 = new Integer((-1));
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentSkipListMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      boolean boolean0 = jSONArray0.contains("[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1221), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(846);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 846, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(880, "");
      Integer integer0 = new Integer((-1712));
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) integer0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(880, (Collection<?>) jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentClear();
      JSONArray jSONArray5 = jSONArray4.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray5.remove(831);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 831, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(1489, 1489);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1489
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray(2207);
      Class<Field> class0 = Field.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2195;
      int int1 = (-1491);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1491));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) null);
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(4899);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4899, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultLocale = jSONArray0.defaultLocale;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-102));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1539);
      Integer integer0 = new Integer(70);
      // Undeclared exception!
      try { 
        jSONArray0.set((-1539), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.add((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(323, (Type) class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 323, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.parallelStream();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), stream0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getDate((-3678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-561), (-561));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -561
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-92), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONArray0;
      Object[] objectArray1 = jSONArray1.toArray(objectArray0);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<String> class0 = String.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues("com.alibaba.fastjson.serializer.DoubleSerializer");
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) javaBeanSerializer0);
      String string0 = "";
      Class<JSONArray> class1 = JSONArray.class;
      JSON.parseArray("", class1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      linkedHashSet0.add(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 38, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2384);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-2856));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.size();
      assertTrue(jSONArray0.isEmpty());
      
      jSONArray0.add((Object) jSONArray0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1360));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-620), (Collection<?>) set0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -620, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSON((Object) jSONArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2569, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2569, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get((-1300));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(2227, (-2160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2227) > toIndex(-2160)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2250;
      Integer integer0 = new Integer((-1));
      JSONArray jSONArray1 = jSONArray0.fluentSet(2250, integer0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Locale$LanguageRange
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1118);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1118
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(146);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 146, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray1);
      jSONArray3.fluentClear();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray3);
      JSON.parseArray("");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("name", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        jSONArray1.getDouble((-803));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      int int0 = (-2440);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2440), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2440, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.lastIndexOf(object0);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1072), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1146, "");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(2991, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2991, Size: 1147
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONBytes((Object) null, serializerFeatureArray0);
      JSONArray jSONArray1 = new JSONArray(1);
      jSONArray1.getRelatedArray();
      int int0 = jSONArray1.indexOf(jSONArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.lastIndexOf(object0);
      jSONArray0.iterator();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1772);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1772));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(101, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.size();
      boolean boolean1 = jSONArray0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(70);
      ListIterator<Object> listIterator0 = jSONArray1.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      Object object0 = jSONArray1.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2476);
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) class0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONArray jSONArray0 = new JSONArray();
      List<Object> list0 = javaBeanSerializer0.getFieldValues(jSONArray0);
      JSONArray jSONArray1 = new JSONArray(list0);
      jSONArray1.setComponentType(class0);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 9956;
      JSONArray jSONArray0 = new JSONArray(9956);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      Class<Annotation> class0 = Annotation.class;
      FieldInfo.getFieldType(class0, class0, (Type) null);
      jSONArray0.setComponentType((Type) null);
      int int0 = jSONArray0.lastIndexOf(class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      boolean boolean0 = jSONArray0.remove((Object) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      linkedHashSet0.add((Annotation) null);
      jSONArray0.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(9977);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(282, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 282, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2476);
      Integer integer0 = new Integer(70);
      jSONArray0.setRelatedArray(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(140);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 140, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      jSONArray0.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2476);
      int int0 = 9990;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(9990);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9990, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JSON.parseArray("", class0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(3636);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3636, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.add((-93), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -93, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-2380));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      jSONArray0.isEmpty();
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-245), (Object) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -245, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      jSONArray0.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1226);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(267);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 267, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray4.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(70);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray1.addAll((Collection<?>) linkedList0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(70);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getDouble((-1232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JSON.parseArray("", class0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(989);
      int int0 = jSONArray0.lastIndexOf("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-3301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      linkedList0.add((Object) jSONArray0);
      linkedList0.add((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray2.add(0, (Object) jSONArray1);
      int int0 = (-2873);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-2873));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2873, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1229));
      JSONArray jSONArray0 = new JSONArray(2389);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(9991);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9991, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      jSONArray0.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList1);
      // Undeclared exception!
      try { 
        jSONArray0.remove(60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.clone();
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(4250);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4250, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.fluentSet(3678080, "");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      int int0 = (-650);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-650));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.relatedArray = (Object) linkedList0;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      jSONArray1.fluentRemove((Object) linkedHashSet0);
      JSONArray jSONArray2 = new JSONArray(70);
      jSONArray0.fluentClear();
      jSONArray2.fluentRetainAll(linkedHashSet0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-3024));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.retainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(1981);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1981, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3013;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3013);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3013, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      jSONArray0.fluentRetainAll(linkedHashSet0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.remove((-3251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray2 = new JSONArray(70);
      boolean boolean0 = jSONArray0.removeAll(jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3551);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3551, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-705));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(178);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3556);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3556, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      linkedHashSet0.add((Integer) 70);
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.add(3392903, (Object) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3392903, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(860);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-832));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(2476);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2476, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1024);
      JSONObject jSONObject0 = new JSONObject(1024);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = 85;
      JSONObject jSONObject0 = new JSONObject(85, false);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AutoCloseSource;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowSingleQuotes;
      featureArray0[5] = feature5;
      JSON.parseObject("", (Type) null, 989, featureArray0);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(70, (Object) jSONObject0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-786));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      boolean boolean0 = jSONArray0.containsAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 859;
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(2107);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2107, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1024);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3678060);
      Integer integer0 = new Integer((-976));
      Integer integer1 = new Integer((-976));
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer1);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSON.toJSON((Object) jSONArray3);
      JSONArray jSONArray4 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray4.addAll(0, (Collection<?>) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray4.getBooleanValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3678080);
      Integer integer0 = new Integer(928);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      JSON.toJSON((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(2346);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2346, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(2077);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2077, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      pascalNameFilter0.process(serializerFeature0, (String) null, jSONArray2);
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserSecure;
      pascalNameFilter0.process((Object) null, "", (Object) null);
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray2, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      Class<JSONArray> class0 = JSONArray.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(70, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1, (Object) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      linkedList0.add((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray2.add(0, (Object) jSONArray1);
      int int0 = (-2873);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-2873));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2873, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-481), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-3724));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(70);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(1239);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1239, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = null;
      jSONArray0.fluentAdd(0, (Object) null);
      int int0 = 0;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 880;
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet(880, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(989);
      Object object0 = JSON.toJSON((Object) integer0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        JSON.parse("U:||nQg", 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : U:||nQg
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-784);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) jSONArray0, 989, serializerFeatureArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 989);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-76);
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      JSON.parseObject(byteArray0, 0, 70, charset0, (Type) null, featureArray0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1024);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1024, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1024, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(80);
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1296;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3678080);
      Integer integer0 = new Integer(70);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSON.toJSON((Object) null);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.addAll((-2535), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2535, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(860);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(860);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 860, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
