/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:09:06 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "W0\"T@=deL{(3io_dX3r";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("W0\"T@=deL{(3io_dX3r");
      Spider spider0 = new Spider(simplePageProcessor0);
      Selector[] selectorArray0 = new Selector[6];
      String string1 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "charsets*=s*['\"]*([^s;'\"]*)");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Selector> list0 = spider1.getAll((Collection<String>) synchronousQueue0);
      OrSelector orSelector0 = new OrSelector(list0);
      selectorArray0[0] = (Selector) orSelector0;
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      selectorArray0[1] = (Selector) smartContentSelector0;
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("W0\"T@=deL{(3io_dX3r", (-2570));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ir;Uhfw<_cB 3-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ir;Uhfw<_cB 3-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline(filePipeline0);
      spider2.getUUID();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      filePipeline0.checkAndMakeParentDirecotry("Running");
      Spider spider3 = spider0.setPipelines(linkedList0);
      Spider spider4 = spider0.setUUID((String) null);
      spider3.getStartTime();
      Logger logger0 = (Logger)spider4.logger;
      filePipeline0.checkAndMakeParentDirecotry("Running");
      spider3.logger = (org.slf4j.Logger) logger0;
      spider3.setEmptySleepTime(2634);
      spider2.setEmptySleepTime(30000);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AT@U");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 3);
      Spider spider2 = spider1.setExitWhenComplete(true);
      FilePipeline filePipeline0 = new FilePipeline("B$Z/G");
      Spider spider3 = spider2.pipeline(filePipeline0);
      Spider spider4 = spider3.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/", "us.codecraft.webmagic.selector.PlainText");
      Spider spider5 = spider4.downloader(phantomJSDownloader0);
      spider5.setEmptySleepTime(2209);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "AT@U";
      stringArray0[1] = "us.codecraft.webmagic.selector.PlainText";
      stringArray0[2] = "B$Z/G";
      stringArray0[3] = "/";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Spider is already running!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      spider0.runAsync();
      Json json0 = new Json("");
      Class<SpiderListener> class0 = SpiderListener.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3`4aTY{jM*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      page0.setSkip(false);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3`4aTY{jM*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      page0.setRawText("us.codecraft.webmagic.Page");
      spider0.extractAndAddRequests(page0, false);
      Spider spider1 = Spider.create(simplePageProcessor0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`4hBk>>NA_j/");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("`4hBk>>NA_j/");
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      Spider spider3 = spider2.setSpawnUrl(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`4hBk>>NA_j/";
      stringArray0[1] = "/";
      stringArray0[2] = "`4hBk>>NA_j/";
      stringArray0[3] = "/";
      stringArray0[4] = "/";
      stringArray0[5] = "/";
      stringArray0[6] = "/";
      stringArray0[7] = "`4hBk>>NA_j/";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("SGPrW{");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader(".cursor.txt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Request{url='");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request1.setCharset("_cycle_tried_times");
      requestArray0[0] = request2;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider0.getScheduler();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = Spider.create(simplePageProcessor0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "rty/K8M&~0f.%";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rty/K8M&~0f.%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      int int0 = 3187;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3187, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.scheduler(queueScheduler0);
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider5 = spider4.addPipeline(filePipeline0);
      spider5.getThreadAlive();
      CountableThreadPool countableThreadPool0 = spider5.threadPool;
      spider0.threadPool = null;
      spider5.getCollectorPipeline();
      Spider spider6 = spider5.addPipeline(filePipeline0);
      spider6.site = null;
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(spider4, scheduledThreadPoolExecutor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("G![Jj7u78Ty8q");
      fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      fileCacheQueueScheduler0.poll(spider5);
      // Undeclared exception!
      try { 
        spider5.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pvHt3LW@T.B&");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("B4xwxtIvQZa");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("pvHt3LW@T.B&");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      queueScheduler0.setDuplicateRemover(duplicateRemover0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      spider0.isSpawnUrl();
      System.setCurrentTimeMillis(1L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider.Status spider_Status0 = Spider.Status.Running;
      spider_Status0.getValue();
      spider1.getUUID();
      spider0.start();
      spider1.setSpawnUrl(false);
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider0.runAsync();
      spider0.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("$$Ic(${}D^S*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.$$Ic(${}D^S*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("q6o");
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setSpawnUrl(true);
      String string1 = "LEQQ0]q2iG]R";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LEQQ0]q2iG]R");
      Spider spider4 = spider3.scheduler((Scheduler) null);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2118);
      Spider spider5 = spider4.thread((ExecutorService) forkJoinPool0, 8);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider5.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("YbWc/D[f\".{-8");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = "N/9c,e}==W{Z!{";
      // Undeclared exception!
      try { 
        spider0.get("N/9c,e}==W{Z!{");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">cV_B$^y6");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.pipeline((Pipeline) null);
      Spider spider4 = spider3.addPipeline((Pipeline) null);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request("us.codecraft.webmagic.scheduler.PriorityScheduler$2");
      requestArray0[0] = request0;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider.Status.fromValue((-777));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I<=");
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      Spider.Status.fromValue(1);
      String string0 = null;
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("{Rm<%~JEvEB-?");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.setUUID("");
      int int0 = spider3.getThreadAlive();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, int0);
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "eg&Qzif4#:8";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("eg&Qzif4#:8");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&}A");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("&}A");
      Spider spider1 = spider0.startUrls(list0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.thread((ExecutorService) forkJoinPool0, 7);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList1);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("&}A");
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      Spider spider5 = spider4.setUUID("&}A");
      spider5.sleep(7);
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("J#?unZ9 /");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("J#?unZ9 /");
      List<Request> list0 = page1.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "J#?unZ9 /";
      stringArray0[1] = "J#?unZ9 /";
      stringArray0[2] = "us.codecraft.webmagic.utils.DoubleKeyMap";
      stringArray0[3] = "";
      stringArray0[4] = "J#?unZ9 /";
      stringArray0[5] = "J#?unZ9 /";
      stringArray0[6] = "J#?unZ9 /";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1348);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        spider0.thread((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$Nuh)HD|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Logger logger0 = (Logger)spider0.logger;
      spider0.logger = (org.slf4j.Logger) logger0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 803);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$Nuh)HD|");
      spider1.setEmptySleepTime((-4810));
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider2.setSpawnUrl(false);
      spider3.clearPipeline();
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|E>jAboQ", "cX1?5^qS1I|MLCS'LS:");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      phantomJSDownloader0.setRetryNum((-474));
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.run();
      spider1.getUUID();
      spider1.setDownloader((Downloader) null);
      // Undeclared exception!
      try { 
        spider1.thread((-474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Spider.Status.values();
      PageProcessor pageProcessor0 = null;
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Mw*SgllTw:5{;R^fUoH");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.scheduler(queueScheduler0);
      spider2.pipeline((Pipeline) null);
      Spider spider3 = spider0.pipeline((Pipeline) null);
      Spider spider4 = spider3.setExecutorService((ExecutorService) null);
      long long0 = spider4.getPageCount();
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.thread(7);
      spider3.threadNum = 7;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = "";
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("", 7);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'6/Svy");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("'6/Svy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler(queueScheduler0);
      boolean boolean0 = true;
      Page page0 = new Page();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]YzYSQPy4f8");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider1.addPipeline(multiPagePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.setUUID("");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider5 = spider4.addPipeline(jsonFilePipeline0);
      Spider.Status spider_Status0 = spider5.getStatus();
      assertEquals(1, linkedList0.size());
      assertEquals(Spider.Status.Init, spider_Status0);
  }
}
