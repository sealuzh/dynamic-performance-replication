/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:08:28 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Checkbox;
import java.awt.HeadlessException;
import java.awt.event.InputMethodListener;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.C45Loader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appender appender0 = new Appender();
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      Appender appender0 = new Appender();
      filter0.addTestSetListener(appender0);
      filter0.removeTestSetListener(appender0);
      filter0.removeTrainingSetListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      filter0.setFocusCycleRoot(true);
      filter0.setCustomName("ERROR: Can't process streamed instances; can't continue.");
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      BeanVisual beanVisual0 = substringReplacer0.getVisual();
      filter0.setVisual(beanVisual0);
      assertEquals("SubstringReplacer", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      filter0.setToolTipText("dI*fie=5L2");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeDataSourceListener(flowByExpression0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      ImageSaver imageSaver0 = new ImageSaver();
      BeanVisual beanVisual0 = imageSaver0.m_visual;
      filter0.setVisual(beanVisual0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("ImageSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Logger logger0 = saver0.m_logger;
      filter0.setLog((Logger) null);
      filter0.addDataSourceListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.firePropertyChange("q~YnKy@y}O", (byte)16, (byte)16);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      basicPanelUI0.getPreferredSize(filter0);
      filter0.revalidate();
      filter0.putClientProperty((Object) null, (Object) null);
      filter0.connectionNotification(" fold ", " fold ");
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("HiTxbjn");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestSetEvent testSetEvent0 = new TestSetEvent("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", instances0, (-2), (-1), (-1), 77);
      filter0.acceptTestSet(testSetEvent0);
      filter0.removeInstanceListener((InstanceListener) null);
      Discretize discretize0 = new Discretize();
      filter0.connectionNotification(" ", discretize0);
      filter0.acceptTestSet(testSetEvent0);
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.removeInstanceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.disconnectionNotification("$", attributeSelection0);
      filter0.useDefaultVisual();
      ImageSaver imageSaver0 = new ImageSaver();
      BeanVisual beanVisual0 = imageSaver0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("ImageSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      Discretize discretize0 = new Discretize();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeDataSourceListener(flowByExpression0);
      filter0.setWrappedAlgorithm(discretize0);
      Discretize discretize1 = new Discretize();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.globalInfo();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      TestSetEvent testSetEvent0 = new TestSetEvent("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", (Instances) null, (-2), (-1), (-1), (-2));
      filter0.removeInstanceListener((InstanceListener) null);
      Discretize discretize0 = new Discretize();
      filter0.connectionNotification(" ", discretize0);
      filter0.setWrappedAlgorithm(discretize0);
      Instances.test(testInstances0.DEFAULT_WORDS);
      filter0.eventGeneratable("configuration");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(discretize0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("<html><font color=blue>An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes</font><br><br> Discretization is by Fayyad & Irani's MDL method (the default).<br><br>For more information, see:<br><br>Usama M.<br>Fayyad, Keki B.<br>Irani: Multi-interval discretization of continuousvalued attributes for classification learning.<br>In: Thirteenth International Joint Conference on Articial Intelligence, 1022-1027, 1993.<br><br>Igor Kononenko: On Biases in Estimating Multi-Valued Attributes.<br>In: 14th International Joint Conference on Articial Intelligence, 1034-1040, 1995.<br></html>", filter0.globalInfo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      String string0 = C45Loader.FILE_EXTENSION;
      TestInstances testInstances0 = new TestInstances();
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.filters.unsupervised.attribute.Remove");
      Discretize discretize0 = new Discretize();
      filter0.connectionNotification(".names", sorter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.disconnectionNotification("4%u", testInstances0);
      String string1 = filter0.getCustomName();
      assertEquals("AllFilter", string1);
      
      filter0.performRequest("Stop");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      filter0.connectionNotification("duwU}#b", integer0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeTrainingSetListener(flowByExpression0);
      filter0.eventGeneratable("duwU}#b");
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      filter0.isBusy();
      ClassAssigner classAssigner0 = new ClassAssigner();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Saver saver0 = new Saver();
      filter0.addDataSourceListener(saver0);
      Saver saver1 = new Saver();
      MetaBean metaBean0 = new MetaBean();
      metaBean0.getBeansInOutputs();
      String string0 = "*nhvh]7n <";
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.globalInfo();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Saver saver0 = new Saver();
      filter0.removeTestSetListener(saver0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      Enumeration enumeration0 = filter0.enumerateRequests();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.setFocusCycleRoot(true);
      Discretize discretize0 = new Discretize();
      filter0.connectionNotification("duwU}#b", enumeration0);
      Filter filter1 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      filter0.setCustomName("duwU}#b");
      Filter filter2 = new Filter();
      filter2.removeTrainingSetListener(filter0);
      filter0.eventGeneratable("duwU}#b");
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter1.disconnectionNotification("duwU}#b", classValuePicker0);
      filter1.isBusy();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(discretize0, (Instances) null);
      filter2.acceptTrainingSet(trainingSetEvent0);
      filter0.connectionNotification("duwU}#b", discretize0);
      Classifier classifier0 = new Classifier();
      classifier0.grabFocus();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.addTrainingSetListener(attributeSummarizer0);
      filter1.removeTestSetListener(filter0);
      // Undeclared exception!
      try { 
        filter1.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      Enumeration enumeration0 = filter0.enumerateRequests();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      filter0.connectionNotification("duwU}#b", enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      filter0.connectionNotification("duwU}#b", (Object) null);
      FlowByExpression flowByExpression1 = new FlowByExpression();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("duwU}#b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.globalInfo();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(classifier0, instances0, 10000, (-1969179069), 10000, (-861));
      filter0.removeInstanceListener((InstanceListener) null);
      filter0.acceptTestSet(testSetEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Instances.test(testInstances0.DEFAULT_WORDS);
      FlowByExpression flowByExpression1 = new FlowByExpression();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.connectionNotification("M1Mh", "<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      Classifier classifier1 = new Classifier();
      classifier0.grabFocus();
      Instances.test(testInstances0.DEFAULT_WORDS);
      filter0.addTrainingSetListener(classifier0);
      filter0.removeTestSetListener(flowByExpression1);
      filter0.acceptTestSet(testSetEvent0);
      KnowledgeFlowApp knowledgeFlowApp0 = null;
      try {
        knowledgeFlowApp0 = new KnowledgeFlowApp(false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.globalInfo();
      TestInstances testInstances0 = new TestInstances();
      filter0.getKeyListeners();
      Instances instances0 = testInstances0.generate();
      TestSetEvent testSetEvent0 = new TestSetEvent("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", instances0, (-2), (-1), (-1), 92);
      filter0.removeInstanceListener((InstanceListener) null);
      Discretize discretize0 = new Discretize();
      filter0.connectionNotification(" ", discretize0);
      filter0.acceptTestSet(testSetEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.setWrappedAlgorithm(discretize0);
      instances0.delete();
      testInstances0.setSeed(92);
      filter0.eventGeneratable("configuration");
      FlowByExpression flowByExpression1 = new FlowByExpression();
      filter0.removeTrainingSetListener(flowByExpression1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(pipedInputStream0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.connectionNotification("@relation", trainingSetEvent0);
      Classifier classifier0 = new Classifier();
      classifier0.grabFocus();
      filter0.addTrainingSetListener(classifier0);
      filter0.removeTestSetListener(classifier0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      JFrame jFrame0 = modelPerformanceChart0.m_popupFrame;
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      Discretize discretize0 = new Discretize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      Saver saver0 = new Saver();
      filter0.addDataSourceListener(saver0);
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.notifyInstanceListeners(instanceEvent0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.globalInfo();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringReplacer0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      Discretize discretize0 = new Discretize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      substringReplacer0.getAlignmentY();
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.notifyInstanceListeners(instanceEvent0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.globalInfo();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringReplacer0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.getVisual();
      filter0.addTrainingSetListener((TrainingSetListener) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter1 = new Filter();
      filter0.connectionNotification(".arff", filter1);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeTrainingSetListener(filter1);
      filter0.eventGeneratable(".arff");
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      filter1.isBusy();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassAssigner classAssigner0 = new ClassAssigner();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      Saver saver0 = new Saver();
      filter1.addDataSourceListener(flowByExpression0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = null;
      try {
        dataSetEvent0 = new DataSetEvent((Object) null, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeTrainingSetListener(filter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      filter0.eventGeneratable(".arff");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassAssigner classAssigner0 = new ClassAssigner();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      filter0.disconnectionNotification("@relation", filter0);
      filter0.isBusy();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.setLog(logPanel0);
      boolean boolean0 = flowByExpression0.m_busy;
      PredictionAppender predictionAppender0 = new PredictionAppender();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      int[] intArray0 = new int[3];
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(50, (-1910703097), intArray0, 2, (-2));
      filter0.createImage((ImageProducer) memoryImageSource0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      filter0.getFilter();
      filter0.addTestSetListener(classAssigner0);
      filter0.globalInfo();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.globalInfo();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      filter0.removeInstanceListener((InstanceListener) null);
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)80;
      filter0.connectionNotification(" ", discretize0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.setWrappedAlgorithm(discretize0);
      Instances.test(testInstances0.DEFAULT_WORDS);
      filter0.eventGeneratable("configuration");
      FlowByExpression flowByExpression1 = new FlowByExpression();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(pipedInputStream0, instances0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.connectionNotification("@relation", trainingSetEvent0);
      Instances.test(testInstances0.DEFAULT_WORDS);
      filter0.setFocusTraversalPolicyProvider(false);
      FlowByExpression flowByExpression2 = new FlowByExpression();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      flowByExpression2.requestFocus();
      defaultCaret0.toString();
      filter0.acceptTrainingSet(trainingSetEvent0);
      defaultCaret0.getMagicCaretPosition();
      filter0.removeInstanceListener(flowByExpression1);
      filter0.addDataSourceListener(flowByExpression2);
      Filter filter1 = new Filter();
      BeanVisual beanVisual0 = flowByExpression2.m_visual;
      // Undeclared exception!
      try { 
        filter1.connectionNotification((String) null, flowByExpression1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      filter0.connectionNotification("duwU}#b", integer0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeTrainingSetListener(flowByExpression0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      filter0.isBusy();
      ClassAssigner classAssigner0 = new ClassAssigner();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Saver saver0 = new Saver();
      filter0.addDataSourceListener(saver0);
      Saver saver1 = new Saver();
      Filter filter1 = new Filter();
      filter1.addDataSourceListener(flowByExpression0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockThaiBuddhistDate0, instances0);
      filter1.acceptDataSet(dataSetEvent0);
      filter0.addDataSourceListener(flowByExpression0);
      filter1.hasFocus();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter1.addTestSetListener(flowByExpression0);
      textDirectoryLoader0.listOptions();
      TestSetEvent testSetEvent0 = new TestSetEvent(integer0, instances0, 2, (-59));
      filter0.acceptTestSet(testSetEvent0);
      filter0.removeTestSetListener(substringLabeler0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      System.setCurrentTimeMillis(9L);
      Filter filter1 = new Filter();
      filter1.connectionNotification("instance", "instance");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "instance");
      filter1.getLocale();
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemInUtil.addInputLine("instance");
      filter0.addDataSourceListener(filter1);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter1.notifyInstanceListeners(instanceEvent0);
      filter0.addTestSetListener(substringLabeler0);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Filter filter1 = new Filter();
      filter1.addDataSourceListener(filter0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.setIgnoreRepaint(true);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockThaiBuddhistDate0, instances0);
      DataSetEvent dataSetEvent1 = new DataSetEvent(filter1, instances0);
      filter1.acceptDataSet(dataSetEvent1);
      filter0.addDataSourceListener(filter1);
      filter1.hasFocus();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(1);
      filter0.notifyInstanceListeners(instanceEvent0);
      Filter filter2 = new Filter();
      filter2.addTestSetListener(substringLabeler0);
      textDirectoryLoader0.listOptions();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      TestSetEvent testSetEvent0 = new TestSetEvent(modelPerformanceChart0, instances0, (-538), 0);
      filter2.acceptTestSet(testSetEvent0);
      filter0.removeTestSetListener(filter2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.globalInfo();
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Uh&>w{v");
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      filter0.acceptInstance((InstanceEvent) null);
      filter0.addInstanceListener(filter0);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      Add add0 = new Add();
      weka.filters.Filter filter1 = weka.filters.Filter.makeCopy(add0);
      filter0.setFilter(filter1);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeInstanceListener(substringReplacer0);
  }
}
