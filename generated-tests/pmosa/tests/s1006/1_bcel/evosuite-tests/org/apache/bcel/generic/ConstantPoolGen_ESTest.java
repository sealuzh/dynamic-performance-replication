/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:51:58 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = (-805);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-805));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -805
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(251);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addNameAndType("Bqc6u.7l.sfn", "Bqc6u.7l.sfn");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.constants = constantArray0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("F({", "Wds1%{psR+:*?TzO,", "Wds1%{psR+:*?TzO,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = constantPoolGen0.addInterfaceMethodref("", "", "");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("ulIV:,", (String) null, ";4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3663, 3663);
      constantInvokeDynamic0.copy();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant constant0 = constantNameAndType1.copy();
      constantArray0[1] = constant0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(3663, 0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantPoolGen0.constants = constantArray0;
      constantPoolGen0.addLong(0L);
      constantPoolGen0.lookupUtf8("x");
      int int0 = 0;
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC();
      ConstantPool constantPool0 = new ConstantPool(constantPoolGen0.constants);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInvokeDynamic cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1), (-1));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(13, 64);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFieldref("Mu<f([5M'k@Cxi(+aH", "Mu<f([5M'k@Cxi(+aH", "Mu<f([5M'k@Cxi(+aH");
      int int0 = constantPoolGen0.addLong(13);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupLong(4616189618054758400L);
      assertEquals((-1), int0);
      
      ConstantPool constantPool1 = constantPoolGen0.getFinalConstantPool();
      assertEquals(2, constantPool1.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.adjustSize();
      String[] stringArray0 = new String[8];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "&";
      stringArray0[2] = "K!v";
      constantPoolGen0.addDouble(2);
      stringArray0[3] = "#";
      stringArray0[4] = "istore_0";
      stringArray0[5] = "";
      stringArray0[6] = "~,uqFTt!W}";
      stringArray0[7] = "[TXA^";
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL();
      InstructionList instructionList0 = new InstructionList(iNVOKEVIRTUAL0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(46, objectType0, objectType0.NO_ARGS, stringArray0, "K!v", (String) null, instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 8
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-276), 13);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(13);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      int int0 = (-1899);
      ConstantClass constantClass0 = new ConstantClass((-1899));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantClass0.clone();
      constantPoolGen0.toString();
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "|;=ux7PD2+o\"?^\"J";
      constantPoolGen0.addNameAndType("=1~s6udm`|E%V*7<", "|;=ux7PD2+o\"?^\"J");
      constantPoolGen0.lookupInteger(530);
      int int0 = 1215;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1215, 1215);
      constantMethodref0.clone();
      constantMethodref0.setNameAndTypeIndex(3);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(1215, constantMethodref0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1215
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger(248);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("EOK,", "EOK,", "EOK,");
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-4327), (-4327));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass((-4327));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      constantPoolGen0.lookupFieldref("|", "|", "]>");
      constantPoolGen0.addDouble(4);
      constantPoolGen0.addString("|");
      constantPoolGen0.lookupFloat(4);
      constantPoolGen0.lookupMethodref("", ")", ")");
      constantInterfaceMethodref0.setClassIndex((-4327));
      constantPoolGen0.addString(" (jBR?r71!y9?dz");
      constantClass0.copy();
      constantPoolGen0.lookupMethodref("f2i", "", "^jCL");
      constantPoolGen0.addDouble(1025.9162592);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupLong(0L);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble((-1344.2844996));
      constantDouble0.setBytes((-1344.2844996));
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupDouble(0.0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(39);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addFloat(39);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
      
      int int0 = constantPoolGen0.lookupString("");
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-1834.66F));
      constantPoolGen0.toString();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(54, 54);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.commons.io.filefilter.TrueFileFilter");
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-4327), (-4327));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      int int0 = 1924;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-4327), (-4327));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4327
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(270);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      int int0 = constantPoolGen0.addInteger(270);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1924, (-2141));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addInteger((-2141));
      constantPoolGen1.addInteger(0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1924
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(558, 230);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(230);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("=]:S!X");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addUtf8("=]:S!X");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      ObjectType objectType1 = Type.OBJECT;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.lookupClass("Invalid number of dimensions: ");
      int int0 = constantPoolGen0.getSize();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addFieldref("Unknown constant type ", "Unknown constant type ", "QDKYM-VC*YN>Jc");
      constantPoolGen0.toString();
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = Type.STRINGBUFFER;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("t@0cU7GVIRB^if");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[4] = (Constant) constantUtf8_1;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantMethodType0;
      constantArray0[7] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.addUtf8("t@0cU7GVIRB^if");
      assertEquals(8, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupUtf8("hp l<]C");
      Character.getName(1069);
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-26));
      Type type0 = bIPUSH0.getType(constantPoolGen1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CYRILLIC CAPITAL LETTER E";
      stringArray0[1] = "CYRILLIC CAPITAL LETTER E";
      stringArray0[2] = "CYRILLIC CAPITAL LETTER E";
      stringArray0[3] = "CYRILLIC CAPITAL LETTER E";
      String string0 = null;
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((-2141), type0, type0.NO_ARGS, stringArray0, "QDKYM-VC*YN>Jc", (String) null, (InstructionList) null, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 4
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      String string0 = "Unknown constant type ";
      constantPoolGen0.addMethodref("~Ohin", "~Ohin", "~Ohin");
      String string1 = "PW98upcl,aX@h";
      constantPoolGen0.lookupNameAndType("Unknown constant type ", "PW98upcl,aX@h");
      ConstantDouble constantDouble0 = new ConstantDouble(376.5627562);
      constantPoolGen0.addString("<B{Q*RA5v#+GO");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPoolGen1.addConstant(constantDouble0, constantPoolGen0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((Method) null, "~Ohin", constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-4326), (-4326));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      int int0 = 2961;
      ConstantClass constantClass0 = new ConstantClass(2961);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-4326), (-4326));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -4326, name_and_type_index = -4326)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(242, 242);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(242, 242);
      constantInvokeDynamic0.copy();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType0.copy();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-286), 5);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType1, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1L));
      constantPoolGen0.addLong((-1L));
      int int0 = constantPoolGen0.lookupNameAndType("\n", "\"2xu=!|t=");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-10L));
      constantPoolGen0.addLong((-1L));
      int int0 = constantPoolGen0.lookupNameAndType("\n", "\"2xu=!|t=");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(16);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(233, 233);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(233);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("8+nc9Mxe6`=");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addUtf8("YNG7,Xj-4:_96M$d!9");
      int int0 = constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen0);
      assertEquals(5, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ArrayType arrayType0 = new ArrayType("&& (jBR?r71!y9?dz", 196);
      constantPoolGen0.addArrayClass(arrayType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.constants = constantArray0;
      double double0 = (-1.0);
      try { 
        constantPool0.constantToString(2, (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(4);
      ConstantDouble constantDouble0 = new ConstantDouble((-483.704374));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantLong constantLong0 = new ConstantLong(1818L);
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1554, 1554);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2533, (-1228));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2013265918), 2533);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString((-2013265918));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2533, 58);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(256);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[4] = (Constant) constantClass1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1228), 256);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(58, 343);
      constantArray0[6] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2013265918
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(110, 110);
      constantFieldref0.clone();
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(15);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(1661);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1661
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LZtl:98'R");
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.lookupClass("<unknown object>");
      constantPoolGen0.lookupDouble(0.0);
      int int0 = constantPoolGen0.lookupFloat(1453.9225F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LZtl:98'R");
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.lookupClass("<unknown object>");
      constantPoolGen0.lookupDouble(0.0);
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat((-1571.84F));
      int int0 = constantPoolGen1.addConstant(constantFloat0, constantPoolGen0);
      assertEquals(2, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      double double0 = 1.0;
      constantPoolGen0.addClass("bX+MO@G%WYTYJd8'`MM%cpPPo@]*\"l");
      constantPool0.getConstant(25);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-379), (-3802));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -379, reference_index = -3802)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      double double0 = 1.0;
      String string0 = "bX+MO@G%WYTYJd8'`MM%cpPPo@]*\"l";
      constantPoolGen0.addClass("bX+MO@G%WYTYJd8'`MM%cpPPo@]*\"l");
      constantPool0.getConstant(25);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-379), (-3802));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -379, reference_index = -3802)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("<n@+", "", "<n@+");
      constantPoolGen0.addString("iconst_0");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      Constant constant0 = constantPool0.getConstant(5);
      int int0 = constantPoolGen2.addConstant(constant0, constantPoolGen1);
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("](", "](", "](");
      int int0 = Pattern.UNICODE_CASE;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      Constant constant0 = constantPool0.getConstant(4);
      int int1 = constantPoolGen0.addConstant(constant0, constantPoolGen0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int1);
  }
}
