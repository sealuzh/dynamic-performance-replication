/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 22:18:41 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1449);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1449, "-p])z", "-p])z", "Deprecated", "-p])z");
      Attribute attribute0 = new Attribute("tg2:GTY");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2282));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2282), "HCdYmKu#fEjonK!V", "", "f", "HCdYmKu#fEjonK!V");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.visitAnnotation(".Qwm/s\"qq2", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2282));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2282), "HCdYmKu#fEjonK!V", "", "f", "HCdYmKu#fEjonK!V");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.visitAnnotation("7R.R3}", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2282));
      classWriter0.version = (-2282);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2282), "HCdYmKu#fEjonK!V", "", "f", "HCdYmKu#fEjonK!V");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1873));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "\"0t", "org.apache.commons.io.filefilter.SizeFileFilter", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(1680);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1561);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "ConstantValue", "ConstantValue", (Object) null);
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(908);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 908, "T6nJ7P", "", "", "T6nJ7P");
      fieldWriter0.visitAnnotation("T6nJ7P", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2282));
      classWriter0.version = (-2282);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2282), "HCdYmKu#fEjonK!V", "", "f", "HCdYmKu#fEjonK!V");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2282));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-2282), "HCdYmKu#fEjonK!V", "", "f", "HCdYmKu#fEjonK!V");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1873));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "\"0t", "org.apache.commons.io.filefilter.SizeFileFilter", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2282));
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-2282), "HCdYmKu#fEjonK!V", "", "f", "HCdYmKu#fEjonK!V");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "wheel.asm.FieldWriter", "RuntimeInvisibleAnnotations", "", ".Qwm/s\"qq2");
      assertFalse(fieldWriter0.equals((Object)fieldVisitor0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1449);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1449, "-p])z", "-p])z", "Deprecated", "-p])z");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2340));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2340), "", "0N'UD$)Ehg~no-I3<V_", "", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
