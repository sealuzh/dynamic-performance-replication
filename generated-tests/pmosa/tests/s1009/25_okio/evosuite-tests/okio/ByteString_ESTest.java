/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:09:40 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.lastIndexOf(byteArray0, 56);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertSame(byteString1, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-128);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.EMPTY.endsWith(byteArray0);
      String string0 = "EVMIBx8exZCJpw";
      // Undeclared exception!
      try { 
        Charset.forName("EVMIBx8exZCJpw");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // EVMIBx8exZCJpw
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)97;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.hashCode();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Pipe pipe0 = new Pipe(1483L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W]oo(W\"/A)]W/M?~-");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byteString0.write(filterOutputStream0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)9;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byte byte3 = (byte)10;
      byteArray0[4] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("A!PxIu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: !
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode = 65;
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.size();
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      byteString2.sha1();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream0);
      try { 
        ByteString.read(sequenceInputStream1, (byte)79);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)5);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.hmacSha256(source0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("out == null", 0, 0);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byteString0.write(buffer1);
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("N\"u/+Q", charset0);
      assertEquals(6, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)77;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.close();
      ByteString byteString1 = hashingSource0.hash();
      byteString0.EMPTY.indexOf(byteString1, 49);
      HashingSource hashingSource1 = HashingSource.sha256(buffer0);
      Source source0 = hashingSource1.delegate();
      HashingSource hashingSource2 = HashingSource.hmacSha1(source0, byteString0);
      HashingSource.sha256(source0);
      ByteString byteString2 = hashingSource2.hash();
      int int0 = byteString0.indexOf(byteString2);
      assertEquals((-1), int0);
      
      byteString2.utf8();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int1);
      
      boolean boolean0 = byteString2.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("huO");
      String string0 = byteString0.utf8();
      String string1 = byteString0.base64();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      int int0 = byteString1.indexOf(byteArray0, 72);
      assertSame(byteString1, byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)59;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      byteString0.EMPTY.lastIndexOf(byteArray0);
      boolean boolean0 = byteString1.EMPTY.rangeEquals((-171), byteArray0, 43, (-171));
      byteString0.EMPTY.base64();
      byteString0.startsWith(byteArray0);
      ByteString byteString3 = byteString0.sha1();
      ByteString byteString4 = byteString3.toAsciiUppercase();
      assertNotSame(byteString4, byteString3);
      assertFalse(byteString4.equals((Object)byteString3));
      
      ByteString.decodeBase64("");
      ByteString.decodeBase64("");
      int int0 = byteString2.lastIndexOf(byteArray0, (int) (byte)9);
      assertEquals((-1), int0);
      
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      byteString0.substring(0);
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)8;
      byteArray0[1] = (byte)8;
      byte byte2 = (byte)7;
      byteArray0[2] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString0.EMPTY.sha1();
      byteString1.md5();
      byteString0.EMPTY.toAsciiLowercase();
      byteString1.lastIndexOf(byteString2);
      byteString1.EMPTY.hashCode = 114;
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#}\"HP#~>&h");
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[2];
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)52;
      byteString1.EMPTY.substring(0);
      byteArray0[1] = (byte)36;
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)36);
      assertEquals((-1), int0);
      
      ByteString byteString2 = byteString0.sha1();
      byteString1.rangeEquals(1410, byteString0, 18, (int) (byte)36);
      int int1 = byteString2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString.decodeBase64("lh");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 2050, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2050 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString0.EMPTY.sha1();
      byteString1.md5();
      byteString1.lastIndexOf(byteString2);
      int int0 = 114;
      byteString1.EMPTY.hashCode = 114;
      ByteString.codePointIndexToCharIndex("", (byte)8);
      byteString1.base64();
      byteString1.indexOf(byteString0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 1710, (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=1710 byteCount=8
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("}\"{BY@H&rR=Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: }
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[2];
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      byteArray0[0] = (byte)52;
      byteString1.EMPTY.substring(0);
      byteArray0[1] = (byte)36;
      byteString1.lastIndexOf(byteArray0, 0);
      boolean boolean1 = byteString1.endsWith(byteArray0);
      assertTrue(boolean1 == boolean0);
      
      byteString1.sha256();
      ByteString byteString2 = hashingSink0.hash();
      byteString2.internalArray();
      int int0 = byteString1.indexOf(byteString2);
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)117;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertArrayEquals(new byte[] {(byte)81, (byte) (-113), (byte)95, (byte)117}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.sha1();
      ByteString byteString3 = byteString2.md5();
      byteString1.toAsciiLowercase();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString.encodeUtf8("source == null");
      ByteString.codePointIndexToCharIndex("", (-1125));
      byteString3.base64();
      byteString0.indexOf(byteString2);
      int int1 = 1710;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 117, (int) (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=117 byteCount=7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)111;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("source == null", 69);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.substring(14);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteString0.lastIndexOf(byteArray0, 69);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString0.EMPTY.sha1();
      ByteString byteString3 = byteString1.md5();
      int int0 = byteString1.lastIndexOf(byteString2);
      assertEquals((-1), int0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      hashingSource1.hash();
      HashingSink.hmacSha256(buffer0, byteString0);
      hashingSource1.hash();
      String string0 = byteString3.toString();
      assertEquals("[hex=3c0a825894aee207d93e49fb432b0890]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)99;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString0.sha1();
      ByteString byteString3 = byteString0.md5();
      byteString3.lastIndexOf(byteString1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString2);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource.hmacSha1(gzipSource0, byteString3);
      hashingSource1.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString2);
      ByteString byteString4 = hashingSink0.hash();
      byteString4.toString();
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      assertTrue(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(0L);
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.toString();
      ByteString byteString2 = byteString0.sha1();
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString.decodeBase64("xN|['#zRsr");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString.of(byteBuffer0);
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals((-1), int0);
      
      int int1 = byteString1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 15);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("source == null", 69);
      ByteString byteString0 = ByteString.decodeBase64("ID1ID2");
      byteString0.hex();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.size();
      byteString0.toString();
      ByteString byteString1 = ByteString.decodeBase64("]_<32W>");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      ByteString byteString2 = ByteString.of(byteArray0);
      byteString2.indexOf(byteArray0);
      byteString1.EMPTY.base64Url();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("8I+B`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 8I+B`
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.readUtf8();
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha1(gzipSource0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-27);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte) (-112);
      byteArray1[3] = (byte) (-27);
      byteArray1[4] = (byte) (-31);
      byteArray1[5] = (byte) (-27);
      byteArray1[6] = (byte) (-112);
      byteArray1[7] = (byte)103;
      byteArray1[8] = (byte) (-31);
      byteString1.rangeEquals((int) (byte) (-112), byteArray1, (int) (byte) (-31), (-235));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t29[ ");
      HashingSource.sha1(buffer0);
      byteArray0[5] = (byte)4;
      int int0 = byteString1.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      byteString0.sha256();
      boolean boolean1 = byteString1.equals(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      BufferedSink bufferedSink0 = buffer0.write((Source) gzipSource0, (-104L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeLongLe(0L);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.substring(0);
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      ByteString byteString1 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString1);
      ByteString byteString2 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      String string0 = byteString2.toString();
      assertEquals("[hex=0b030bdd0df0bb0f0ff0db0db000b0f00b0dbd00fbf0d00b0dbfddd3bf0d000f]", string0);
      
      ByteString byteString3 = hashingSink0.hash();
      byteString3.sha256();
      byteString1.equals(byteString0);
      assertFalse(byteString0.equals((Object)byteString2));
      
      ByteString byteString4 = byteString3.toAsciiLowercase();
      assertFalse(byteString4.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString.decodeBase64("p-wZ2N!&Ye");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)48;
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.getByte(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Pipe pipe0 = new Pipe(575L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.write((Source) gzipSource0, (-104L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString2 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteString1.toString();
      ByteString byteString4 = hashingSink0.hash();
      byteString4.sha256();
      byteString2.equals(byteString0);
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString4));
      assertSame(byteString0, byteString1);
      
      ByteString byteString5 = byteString2.toAsciiLowercase();
      int int0 = byteString2.compareTo(byteString4);
      assertNotSame(byteString2, byteString5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.equals(byteString0);
      byteString0.toAsciiLowercase();
      byteString0.compareTo(byteString1);
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = (Buffer)buffer0.write((Source) gzipSource0, (-104L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString2 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.readByteString();
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      hashingSink0.hash();
      ByteString byteString3 = byteString0.sha256();
      byteString2.equals(byteString3);
      byteString0.toAsciiLowercase();
      assertSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString2));
      
      ByteString byteString4 = hashingSource0.hash();
      int int0 = byteString4.compareTo(byteString2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Pipe pipe0 = new Pipe(1317L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(1229);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.readByteString();
      byteString0.toString();
      hashingSink0.hash();
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.sha1();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1229, 255);
      byteString0.lastIndexOf(byteString1, 54);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-1783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1783
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString2 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.readByteString();
      String string0 = byteString2.toString();
      assertEquals("[hex=000b00ffbf0d3dd000bbd0f0bb0ddbbd000bd0db]", string0);
      
      ByteString byteString3 = hashingSink0.hash();
      hashingSource0.read(realBufferedSource1.buffer, 0);
      byteString1.sha256();
      Object object0 = new Object();
      boolean boolean0 = byteString3.equals(object0);
      assertFalse(boolean0);
      
      byteString1.toAsciiLowercase();
      hashingSource0.hash();
      int int0 = byteString1.compareTo(byteString3);
      assertEquals((-1), int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, 118);
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, (byte)3);
      ByteString byteString1 = ByteString.decodeHex("");
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      assertSame(byteString1, byteString0);
      
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString2 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha1(buffer2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString3 = hashingSink0.hash();
      String string0 = byteString2.toString();
      assertEquals("[hex=000b00ffbf0d3dd000bbd0f0bb0ddbbd000bd0db]", string0);
      
      ByteString byteString4 = hashingSink0.hash();
      hashingSource0.read(realBufferedSource0.buffer, 0);
      ByteString byteString5 = hashingSink0.hash();
      ByteString byteString6 = new ByteString(byteArray0);
      byteString6.sha256();
      Object object0 = new Object();
      byteString2.equals(buffer0);
      ByteString byteString7 = byteString3.toAsciiLowercase();
      HashingSource.hmacSha256(hashingSource0, byteString3);
      HashingSource hashingSource1 = HashingSource.md5(buffer0);
      hashingSource1.hash();
      byteString5.toAsciiLowercase();
      int int0 = byteString7.compareTo(byteString6);
      assertEquals(1, int0);
      
      int int1 = byteString3.lastIndexOf(byteString4, (-1130));
      assertEquals((-1), int1);
      assertNotSame(byteString3, byteString7);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource1);
      gzipSource0.timeout();
      byteString1.equals(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      hashingSink0.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=03d0bf0bb0ddd0d3fbbddbbbff0b300f]", string0);
      
      ByteString byteString2 = byteString0.substring(0, 0);
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(0, byteString2.size());
  }
}
