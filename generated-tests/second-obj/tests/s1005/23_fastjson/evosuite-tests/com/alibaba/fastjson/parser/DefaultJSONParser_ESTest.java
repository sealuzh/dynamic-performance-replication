/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:58:49 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.ReferenceCodec;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.io.File;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.time.DateTimeException;
import java.time.LocalTime;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[5];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, '\u0000');
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertNotNull(list0);
      
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONLexer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m>[r=O_Sv}gv2*D*bpo", parserConfig0);
      Class<JSONReaderScanner> class0 = JSONReaderScanner.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : m>[r=O_Sv}gv2*D*bpo
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0001-01-01T00:00:00+08:00");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getExtraProcessors();
      assertEquals('-', jSONScanner0.getCurrent());
      
      defaultJSONParser0.parse();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayDeque<JobAttributes> arrayDeque0 = new ArrayDeque<JobAttributes>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("J9A}148_L\"", parserConfig0, 11);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : J9A}148_L\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayDeque<JobAttributes> arrayDeque0 = new ArrayDeque<JobAttributes>();
      Hashtable<Dimension, Object> hashtable0 = new Hashtable<Dimension, Object>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-2665));
      defaultJSONParser0.parseKey();
      defaultJSONParser0.resolveReference("Ljava/lang/Object;Ljava/lang/Object;I)V");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NaN");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.close();
      defaultJSONParser0.checkListResolve((Collection) null);
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dJ\")iKN2|_sS)?b");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      defaultJSONParser0.checkListResolve(stack0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0001-01-01T00:00:00+08:00");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '\\';
      charArray0[2] = 'V';
      charArray0[3] = 'G';
      charArray0[4] = 'z';
      charArray0[5] = 'x';
      charArray0[6] = 'U';
      charArray0[7] = '^';
      charArray0[8] = '5';
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-2661));
      String string0 = defaultJSONParser0.getInput();
      assertEquals(" \\VGzxU^5", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Timestamp, Method> hashMap0 = new HashMap<Timestamp, Method>();
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unzip bytes error.", parserConfig0);
      defaultJSONParser0.setConfig(ParserConfig.global);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{=<18QyN>q eML0lT");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      Object object0 = new Object();
      JobAttributes jobAttributes0 = new JobAttributes();
      parserConfig0.setAutoTypeSupport(false);
      JobAttributes jobAttributes1 = new JobAttributes(jobAttributes0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(4418, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";jva/lang/Object;C)C", parserConfig0, (-406));
      Class<Long> class0 = Long.TYPE;
      defaultJSONParser0.getFieldTypeResolver();
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = '*';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, '\u0000');
      ArrayDeque<Rectangle> arrayDeque0 = new ArrayDeque<Rectangle>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0, (Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = new Boolean("SX\"W!3z*~2Yx7-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("FqO7ZlEM<zavN");
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "SX\"W!3z*~2Yx7-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName SX\"W!3z*~2Yx7-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Dimension dimension0 = new Dimension();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName org.evosuite.runtime.testdata.FileSystemHandling@1865e4f8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("applyLabel");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "{", (Object) "{");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) parseContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("appyL$el");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.resolveReference((String) null);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      String string0 = ParserConfig.DENY_PROPERTY;
      Feature feature0 = Feature.SupportAutoType;
      defaultJSONParser0.config(feature0, true);
      HashMap<ImageCapabilities, MessageFormat> hashMap0 = new HashMap<ImageCapabilities, MessageFormat>();
      defaultJSONParser0.checkMapResolve(hashMap0, "appyL$el");
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("b/LHRE-L");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.handleResovleTask("");
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("c5D0'2qYx3lE", parserConfig0);
      defaultJSONParser0.setDateFormat("><i_KiH");
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.isEnabled(feature0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'1'xwV+0%");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      LinkedHashMap<MockDate, Method> linkedHashMap0 = new LinkedHashMap<MockDate, Method>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 3, json : '1'xwV+0%
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..", parserConfig0, (-3101));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ., pos 1, json : ..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<MockDate, Method> linkedHashMap0 = new LinkedHashMap<MockDate, Method>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[D");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-3626));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) mapDeserializer0);
      Properties properties0 = new Properties();
      defaultJSONParser0.setContext(parseContext0, (Object) null, (Object) properties0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      StringReader stringReader0 = new StringReader("BP.>qnrzqG");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 12);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(numberFormat0, jSONReaderScanner0, parserConfig0);
      ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig1.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", parserConfig0);
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = '*';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, '\u0000');
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u1G(SNs9(A");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("H;OS9rAim");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Sd%'?1rcKZ:7", parserConfig0, (-1280));
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : Sd%'?1rcKZ:7
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5fr/OmhRFC");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Timestamp, Method> hashMap0 = new HashMap<Timestamp, Method>();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.global = parserConfig0;
      parserConfig0.clearDeserializers();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unzip bdtes e[ror.", parserConfig0);
      defaultJSONParser0.setContext((Object) ParserConfig.global, (Object) parserConfig0);
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashtable0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R,&.#`:NVY", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.checkListResolve(list0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "[-#9n0%}r74");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("KnOm");
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.global = parserConfig0;
      defaultJSONParser0.getResolveTaskList();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) defaultJSONParser_ResolveTask0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayDeque<JobAttributes> arrayDeque0 = new ArrayDeque<JobAttributes>();
      Hashtable<Dimension, Object> hashtable0 = new Hashtable<Dimension, Object>();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("jngX^<R#=`JxuS>P", parserConfig0);
      defaultJSONParser0.checkListResolve(arrayDeque0);
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<MockDate, Method> linkedHashMap0 = new LinkedHashMap<MockDate, Method>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("18Dt,~WT/*RuC_*#Q");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : float
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{K");
      Hashtable<Dimension, Object> hashtable0 = new Hashtable<Dimension, Object>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{K", parserConfig0, 989);
      Vector<SimpleTimeZone> vector0 = new Vector<SimpleTimeZone>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual {, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.{}.$.{}.{}", parserConfig0, (-688));
      Feature feature0 = Feature.NonStringKeyAsString;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("c;h(^-O7d!l|");
      Class<MessageFormat> class0 = MessageFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{K");
      Hashtable<Dimension, Object> hashtable0 = new Hashtable<Dimension, Object>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{K", parserConfig0, 989);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tu");
      JSON.DEFAULT_PARSER_FEATURE = (-1083);
      ArrayDeque<JobAttributes> arrayDeque0 = new ArrayDeque<JobAttributes>();
      Hashtable<Dimension, Object> hashtable0 = new Hashtable<Dimension, Object>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{K", parserConfig0, (-1083));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{RCr6PL:g[I`3", parserConfig0, (-2538));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, json : {RCr6PL:g[I`3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{K", parserConfig0, (-1280));
      defaultJSONParser0.resolveReference("{K");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava/ang/Object;", parserConfig0);
      String string0 = "Mo\\uLQ:3Oe'/)vi$b7";
      defaultJSONParser0.getObject(string0);
      defaultJSONParser0.accept(1, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(string0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - a, info : pos 2, json : Ljava/ang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unzip", parserConfig0);
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.config(feature0, false);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("applyLa$el");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(|Pke:sc?7MD\"A");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[I", parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig();
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ([C)[I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{}K", parserConfig0, (-1252));
      JSON.DEFAULT_PARSER_FEATURE = (-1075);
      defaultJSONParser0.resolveReference("{}K");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"com.al\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, ", (-253));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      mockDateFormat0.getMockedClassName();
      defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) "syntax error, ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("expect ':' at ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - y, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:>", parserConfig0, (-313));
      ArrayList<ExtraTypeProvider> arrayList0 = new ArrayList<ExtraTypeProvider>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      String string0 = "^rGN%MkA,sa~1";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fieldName ", parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.handleResovleTask("{");
      defaultJSONParser0.setContext((Object) "{", (Object) "{");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<MockCalendar, DecimalFormat> linkedHashMap0 = new LinkedHashMap<MockCalendar, DecimalFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus(";jva/lang/Object;C)C", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";jva/lang/Object;C)C", parserConfig0, (-406));
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) classLoader0);
      defaultJSONParser0.setContext((ParseContext) null);
      Class<Long> class0 = Long.TYPE;
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;jva/lang/Object;C)C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u1G(S~A");
      defaultJSONParser0.setResolveStatus((-2078345023));
      assertEquals((-2078345023), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HukjOUjXI");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'1'xwV+0`");
      Object object0 = new Object();
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 26);
      Type[] typeArray0 = new Type[1];
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
      parserConfig0.setAutoTypeSupport(true);
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("[^short", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "{";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", 24);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0, 24);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) jSONReaderScanner0);
      defaultJSONParser0.resolveReference("$");
      defaultJSONParser0.getDateFormat();
      LinkedHashMap<MockGregorianCalendar, JSONObject> linkedHashMap0 = new LinkedHashMap<MockGregorianCalendar, JSONObject>();
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      defaultJSONParser0.config(feature0, false);
      Hashtable<MockGregorianCalendar, JSONObject> hashtable0 = new Hashtable<MockGregorianCalendar, JSONObject>(linkedHashMap0);
      LinkedHashMap<Double, Long> linkedHashMap1 = new LinkedHashMap<Double, Long>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/math/BigDecimal;", parserConfig0);
      LinkedList<DateFormatSymbols> linkedList0 = new LinkedList<DateFormatSymbols>();
      linkedList0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.checkListResolve(linkedList0);
      LinkedHashMap<JobAttributes, Rectangle> linkedHashMap0 = new LinkedHashMap<JobAttributes, Rectangle>();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte) (-57));
      defaultJSONParser0.setContext(object0, (Object) byte0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Hashtable<MockThaiBuddhistDate, BigInteger> hashtable0 = new Hashtable<MockThaiBuddhistDate, BigInteger>();
      defaultJSONParser0.resolveReference("b/LHRE-L");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 1, json : (C)Ljava/math/BigDecimal;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TODO : ");
      classLoader0.getParent();
      classLoader0.setDefaultAssertionStatus(true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeSupport");
      Integer integer0 = new Integer(0);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.CHINESE;
      Locale locale2 = Locale.KOREAN;
      locale2.stripExtensions();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale2);
      DecimalFormatSymbols.getInstance();
      defaultJSONParser0.handleResovleTask(list0);
      Object object0 = new Object();
      Object object1 = new Object();
      defaultJSONParser0.parse();
      HashMap<BitSet, Integer> hashMap0 = new HashMap<BitSet, Integer>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:>", parserConfig0, 1030);
      defaultJSONParser0.getFieldTypeResolver();
      Boolean boolean0 = new Boolean("fastjson.parser.deny");
      Class<Long> class0 = Long.TYPE;
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.getDeserializer((Type) class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader0.getParent();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Object object0 = new Object();
      LinkedHashMap<JobAttributes, Rectangle> linkedHashMap0 = new LinkedHashMap<JobAttributes, Rectangle>();
      Object object1 = new Object();
      defaultJSONParser0.getContext();
      LocalTime localTime0 = MockLocalTime.now();
      Time.valueOf(localTime0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [:>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.setClassAssertionStatus("fastjson.parser.autoTypeSupport", false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{RCrPL:[I`3", parserConfig0, (-2523));
      defaultJSONParser0.getFieldTypeResolver();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      Class<Long> class0 = Long.TYPE;
      ReferenceCodec referenceCodec0 = new ReferenceCodec();
      Class<Locale> class1 = Locale.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(propertyProcessable0).getType(anyString());
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TimeZone timeZone0 = mockGregorianCalendar0.getTimeZone();
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockGregorianCalendar1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, json : {RCrPL:[I`3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = "{RCrPL:[I`3";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{RCrPL:[I`3", parserConfig0, (-2523));
      defaultJSONParser0.getFieldTypeResolver();
      Class<Long> class0 = Long.TYPE;
      Hashtable<MessageFormat, Annotation> hashtable0 = new Hashtable<MessageFormat, Annotation>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, json : {RCrPL:[I`3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<BigInteger> class0 = BigInteger.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljva/lag/tYri0g;)eI");
      // Undeclared exception!
      defaultJSONParser0.parseObject((Type) class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("W^y71$FWCgG!CrQ&N");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getObject("W^y71$FWCgG!CrQ&N");
      Object object0 = new Object();
      defaultJSONParser0.getResolveTaskList();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ParseContext parseContext0 = defaultJSONParser0.context;
      Integer integer0 = new Integer(1);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[OOV~a;IJ9yug", parserConfig0, 616);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "EcJP>jx@j{p4B+&I");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      ArrayList<ExtraProcessor> arrayList1 = new ArrayList<ExtraProcessor>();
      Object object1 = new Object();
      Dimension dimension0 = new Dimension(0, 1);
      Dimension dimension1 = new Dimension(dimension0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Collection) arrayList1, (Object) dimension1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [OOV~a;IJ9yug
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setAsmEnable(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("FTekA:hMQ0H", parserConfig0, 2674);
      defaultJSONParser0.popContext();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.of((-1767), 2, 2674);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 2674
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("/**/", parserConfig0, (-14));
      defaultJSONParser0.getExtraTypeProviders();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "java.util.Collections$EmptyMap");
      ParseContext parseContext0 = defaultJSONParser0.context;
      Feature feature0 = Feature.AllowArbitraryCommas;
      defaultJSONParser0.config(feature0, true);
      Locale locale0 = Locale.forLanguageTag("/**/");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : /**_/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:>", parserConfig0, 1677);
      classLoader1.setClassAssertionStatus("I@P)", false);
      MockThaiBuddhistDate.now();
      TreeSet<TimeZone> treeSet0 = new TreeSet<TimeZone>();
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : 0
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      Properties properties0 = new Properties();
      Dimension dimension0 = new Dimension();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      String string0 = ".Q^o%nc2p.O,unQSj !S";
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".Q^o%nc2p.O,unQSj !S", parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .Q^o%nc2p.O,unQSj !S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Sd", parserConfig0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getExtraProcessors();
      ArrayDeque<TimeZone> arrayDeque0 = new ArrayDeque<TimeZone>();
      defaultJSONParser0.getDateFormat();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{K", parserConfig0, (-1280));
      defaultJSONParser0.getExtraTypeProviders();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "java.util.Collections$EmptyMap");
      defaultJSONParser0.getContext();
      Feature feature0 = Feature.AllowISO8601DateFormat;
      defaultJSONParser0.config(feature0, true);
      Locale locale0 = Locale.forLanguageTag("fastjson.parser.deny");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      Vector<Method> vector0 = new Vector<Method>();
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ArrayDeque<JobAttributes> arrayDeque0 = new ArrayDeque<JobAttributes>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'@+>T+|'`oy{n+", parserConfig0, 106);
      JSON.DEFAULT_GENERATE_FEATURE = 2;
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("@+>T+|", object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Sd");
      defaultJSONParser0.parseKey();
      Object object1 = defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{X:5FZL", parserConfig0);
      IdentityHashMap<Method, Point> identityHashMap0 = new IdentityHashMap<Method, Point>();
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = new Object();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockJapaneseDate.now();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name X
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}", parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"com.al\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{X:5FZL", parserConfig0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      parserConfig0.asmFactory = aSMDeserializerFactory0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 7, json : {X:5FZL
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", 24);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0, 24);
      defaultJSONParser0.getExtraProcessors();
      Dimension dimension0 = new Dimension(1, 16);
      dimension0.setSize((double) 1, 0.0);
      Dimension dimension1 = new Dimension(dimension0);
      ParserConfig.getGlobalInstance();
      defaultJSONParser0.getExtraProcessors();
      short short0 = (short)3979;
      Short short1 = new Short((short)3979);
      NumberFormat.getPercentInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.String, property null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:>", parserConfig0, (-308));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("[:>", "[:>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [:>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("", parserConfig0);
      parserConfig0.addDeny("e%|");
      defaultJSONParser1.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 26);
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.parseObject((Type) class0, (Object) class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("W^y71$FWCgG!CrQ&N");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("W^y71$FWCgG!CrQ&N", parserConfig0);
      defaultJSONParser0.getObject("W^y71$FWCgG!CrQ&N");
      defaultJSONParser0.getResolveTaskList();
      Integer integer0 = new Integer(0);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayVariant(locale1);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      DecimalFormatSymbols.getInstance();
      defaultJSONParser0.handleResovleTask((Object) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", 24);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0, 24);
      defaultJSONParser0.getExtraProcessors();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      defaultJSONParser0.getContext();
      defaultJSONParser0.close();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(0, 0);
      Dimension dimension2 = new Dimension(dimension1);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'@+>T+|'`oy{n+");
      ParserConfig.global = parserConfig0;
      JSON.DEFAULT_GENERATE_FEATURE = (-1275);
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("@+>T+|", object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 19);
      Type[] typeArray0 = new Type[1];
      Class<Long> class0 = Long.TYPE;
      defaultJSONParser0.parseObject((Type) class0, (Object) class0);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(jSONType0);
      typeArray0[0] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class2);
      String string0 = File.pathSeparator;
      parameterizedTypeImpl0.getTypeName();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.defaultClassLoader = classLoader0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "''xwV#0";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("''xwV#0");
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedHashMap<MockDate, Method> linkedHashMap0 = new LinkedHashMap<MockDate, Method>();
      LinkedHashMap<MockDate, Method> linkedHashMap1 = new LinkedHashMap<MockDate, Method>();
      linkedHashMap1.entrySet();
      ParseContext parseContext0 = defaultJSONParser0.context;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. w
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Properties properties0 = new Properties();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TODO : ", 0);
      defaultJSONParser0.setResolveStatus(1);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateInstance();
      String string0 = ParserConfig.DENY_PROPERTY;
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.checkMapResolve(jSONObject0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.getParent();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      parameterizedTypeImpl1.getTypeName();
      parameterizedTypeImpl1.getTypeName();
      parameterizedTypeImpl1.getTypeName();
      parameterizedTypeImpl1.getTypeName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?$0&wP", parserConfig0, 39);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support type com.alibaba.fastjson.util.ParameterizedTypeImpl@441
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("applyLa$el");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.setResolveStatus(2302);
      Feature feature0 = Feature.SupportAutoType;
      defaultJSONParser0.config(feature0, true);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "illegal state, textLength is zero");
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) rectangle0);
      defaultJSONParser_ResolveTask0.ownerContext = parseContext0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.getContext();
      defaultJSONParser0.getObject("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      assertEquals(2302, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:>", parserConfig0, 1003);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Boolean boolean0 = new Boolean("fastjson.parser.deny");
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader0.getParent();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      Object object0 = new Object();
      LinkedHashMap<JobAttributes, Rectangle> linkedHashMap0 = new LinkedHashMap<JobAttributes, Rectangle>();
      Object object1 = new Object();
      defaultJSONParser0.setContext((Object) mockThaiBuddhistDate0, (Object) thaiBuddhistDate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[:>");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("([C)[I", parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"$ref\":\"$\"}", parserConfig0);
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, "([C)[I", defaultJSONParser0);
      defaultJSONParser1.setContext(parseContext0, (Object) "([C)[I", (Object) defaultJSONParser0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/math/BigDecimal;", parserConfig0);
      LinkedList<DateFormatSymbols> linkedList0 = new LinkedList<DateFormatSymbols>();
      linkedList0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.checkListResolve(linkedList0);
      LinkedHashMap<JobAttributes, Rectangle> linkedHashMap0 = new LinkedHashMap<JobAttributes, Rectangle>();
      Object object0 = new Object();
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getSymbolTable();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser0.accept(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0, (Object) fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ), pos 2, fieldName org.evosuite.runtime.testdata.FileSystemHandling@3be9ea6a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[:>", parserConfig0, (-308));
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra("[:>", "[:>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [:>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$refz\"\"$\"}", parserConfig0);
      Hashtable<MockSimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<MockSimpleDateFormat, MockCalendar>(0, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, name $refz
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ClassLoader classLoader2 = aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ClassLoader.getSystemClassLoader();
      classLoader1.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{X:5FZL", parserConfig0);
      IdentityHashMap<Method, Point> identityHashMap0 = new IdentityHashMap<Method, Point>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Object object0 = new Object();
      Class<Point> class0 = Point.class;
      Class<BigInteger> class1 = BigInteger.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(propertyProcessable0).getType(anyString());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 5, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = classLoader0.getParent();
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{X:5FZL", parserConfig0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      LinkedList<DateFormatSymbols> linkedList0 = new LinkedList<DateFormatSymbols>();
      ClassLoader.getSystemClassLoader();
      LinkedList<Insets> linkedList1 = new LinkedList<Insets>();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      linkedList0.add(dateFormatSymbols0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashMap<JobAttributes, Rectangle> linkedHashMap0 = new LinkedHashMap<JobAttributes, Rectangle>();
      Object object0 = new Object();
      Float.sum(0, (-1949.5802F));
      Double double0 = new Double((-1170.7988413380303));
      parserConfig0.setDefaultClassLoader(classLoader1);
      ArrayList<DefaultJSONParser.ResolveTask> arrayList0 = new ArrayList<DefaultJSONParser.ResolveTask>();
      Collator collator0 = Collator.getInstance();
      Comparator.naturalOrder();
      defaultJSONParser0.setContext((Object) null, (Object) collator0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name X
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 26);
      parserConfig0.addAccept("com.alibaba.fastjson.parser.DefaultJSONParser");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("null", parserConfig0);
      ClassLoader.getSystemClassLoader();
      IdentityHashMap<Method, Point> identityHashMap0 = new IdentityHashMap<Method, Point>();
      Object object0 = new Object();
      defaultJSONParser0.parse();
      defaultJSONParser1.getResolveStatus();
      HashMap<PageAttributes, JobAttributes> hashMap0 = new HashMap<PageAttributes, JobAttributes>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 26);
      Type[] typeArray0 = new Type[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParserConfig.global = parserConfig0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.defaultClassLoader = classLoader0;
      defaultJSONParser0.getDateFomartPattern();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      defaultJSONParser0.getLexer();
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getExtraTypeProviders();
      Type[] typeArray1 = new Type[1];
      defaultJSONParser0.parseArray(typeArray1);
      Byte byte0 = new Byte((byte)123);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) choiceFormat0, (Object) null);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 26);
      Type[] typeArray0 = new Type[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\fs;H`/u(<M4)H");
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.parseObject((Type) class0, (Object) class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO : com.alibaba.fastjson.util.ParameterizedTypeImpl@74a0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Timestamp, Method> hashMap0 = new HashMap<Timestamp, Method>();
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]E", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      int int0 = 53;
      FieldTypeResolver fieldTypeResolver0 = null;
      defaultJSONParser0.fieldTypeResolver = null;
      Object object0 = new Object();
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]E
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")null", parserConfig0, 36);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      LinkedList<DateFormatSymbols> linkedList0 = new LinkedList<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(linkedList0);
      LinkedHashMap<JobAttributes, Rectangle> linkedHashMap0 = new LinkedHashMap<JobAttributes, Rectangle>();
      Byte byte0 = new Byte((byte) (-57));
      Float float0 = new Float(1.0F);
      Collator.getInstance();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{X:5FZL", parserConfig0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.setDefaultAssertionStatus(false);
      IdentityHashMap<Method, Point> identityHashMap0 = new IdentityHashMap<Method, Point>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Object object0 = new Object();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(102, "fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class1, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 7, json : {X:5FZL
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"$ref\":\"$\"}", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Dimension dimension0 = new Dimension();
      defaultJSONParser1.parse(propertyProcessable0, (Object) dimension0);
      defaultJSONParser1.setConfig(parserConfig0);
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.setClassAssertionStatus("fastjson.parser.autoTypeSupport", false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{RCrPL:[I`3", parserConfig0, (-2523));
      defaultJSONParser0.getFieldTypeResolver();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      Class<Long> class0 = Long.TYPE;
      ReferenceCodec referenceCodec0 = new ReferenceCodec();
      ArrayList<DefaultJSONParser.ResolveTask> arrayList0 = new ArrayList<DefaultJSONParser.ResolveTask>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.setContext((Object) class0, (Object) null);
      TreeMap<MockDateFormat, Byte> treeMap0 = new TreeMap<MockDateFormat, Byte>();
      HashMap<PageAttributes, Method> hashMap0 = new HashMap<PageAttributes, Method>();
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      Class<HttpCookie> class1 = HttpCookie.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class0, class1, class0, (Field) null, 0, 0, (-66));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      hashMap0.put(pageAttributes1, (Method) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, json : {RCrPL:[I`3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      ParserConfig parserConfig1 = new ParserConfig();
      String string0 = "{\"$ref\":\"$\"}";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}", parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      defaultJSONParser0.parseObject((Object) parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : {\"$ref\":\"$\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.setClassAssertionStatus("fastjson.parser.autoTypeSupport", false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{RCrPL:[I`3", parserConfig0, (-2523));
      defaultJSONParser0.getFieldTypeResolver();
      PageAttributes pageAttributes0 = new PageAttributes();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setDigit('8');
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, json : {RCrPL:[I`3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 26);
      Type[] typeArray0 = new Type[1];
      defaultJSONParser0.parseObject();
      String string0 = "\\fs;\\H`/u(<M4)H";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\fs;H`/u(<M4)H");
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : long
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }
}
