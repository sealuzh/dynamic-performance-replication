/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 22:19:34 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap0);
      Integer integer0 = new Integer(0);
      doubleKeyMap1.put("wrong proto type map ", integer0, map0);
      doubleKeyMap1.remove("wrong proto type map ", integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      HashMap<Integer, Map<Object, Integer>> hashMap1 = new HashMap<Integer, Map<Object, Integer>>();
      hashMap0.put("wrong proto type map ", hashMap1);
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap0);
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap0.remove("wrong proto type map ");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Integer integer0 = new Integer((-788));
      doubleKeyMap0.put(integer0, (Object) integer0, integer0);
      Integer integer1 = new Integer((-788));
      Map<Object, Integer> map0 = doubleKeyMap0.remove(integer1);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap1.remove("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      DoubleKeyMap<HashMap<Object, String>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Integer, Object>();
      Map<Integer, Map<Object, Map<Object, Integer>>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Map<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Map<Object, Integer>>(map0, class0);
      Integer integer0 = new Integer(1);
      Map<Object, Integer> map1 = doubleKeyMap2.remove(integer0, (Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.remove((String) null, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove(object0, "9RxTx=aB:Y4");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<Integer, Map<Integer, Object>> hashMap1 = new HashMap<Integer, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>(hashMap1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(integer0, integer0, (Object) doubleKeyMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Integer integer1 = doubleKeyMap0.put("", object0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Object>, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, Map<Object, Integer>>((Map<Integer, Map<HashMap<Object, Object>, Map<Object, Integer>>>) null);
      HashMap<Object, Map<HashMap<Object, Object>, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Object, Object>>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap2 = doubleKeyMap1.put((Object) doubleKeyMap0, hashMap1, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Integer>, Integer>();
      Map<String, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>(map0, class0);
      Integer integer0 = doubleKeyMap1.get("J|O", "J|O");
      HashMap<Integer, Map<Integer, HashMap<String, String>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, String>>>();
      DoubleKeyMap<Integer, Integer, HashMap<String, String>> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, HashMap<String, String>>(hashMap0);
      HashMap<String, String> hashMap1 = doubleKeyMap2.get(integer0, (Integer) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap1.get("", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap0);
      DoubleKeyMap<Object, Map<Object, Integer>, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Map<Object, Integer>, Integer>();
      Integer integer0 = doubleKeyMap2.get((Object) doubleKeyMap1, map0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Object, Integer, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Object, Integer>>();
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Integer integer0 = new Integer(1225);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Object) hashMap0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((String) null, ",[Y+dc[?AyH?p?3", (Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Object, Integer>, Map<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, Map<Object, Integer>>((Map<String, Map<Map<Object, Integer>, Map<Object, Integer>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Integer>, Object, Map<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Object, Map<Object, Integer>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Map<HashMap<Object, Object>, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Object, Object>>(hashMap0);
      Map<HashMap<Object, Object>, HashMap<Object, Object>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Object>, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, Map<Object, Integer>>((Map<Integer, Map<HashMap<Object, Object>, Map<Object, Integer>>>) null);
      Map<HashMap<Object, Object>, Map<Object, Integer>> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      HashMap<Integer, Map<Object, Integer>> hashMap1 = new HashMap<Integer, Map<Object, Integer>>();
      Integer integer0 = new Integer(1);
      hashMap1.put(integer0, map0);
      hashMap0.put("wrong proto type map ", hashMap1);
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap0);
      Integer integer1 = new Integer(0);
      doubleKeyMap1.remove("wrong proto type map ", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Integer>, String, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, String, String>();
      String string0 = doubleKeyMap1.put(map0, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<Integer, Map<Object, Integer>>>();
      HashMap<Integer, Map<Object, Integer>> hashMap1 = new HashMap<Integer, Map<Object, Integer>>();
      hashMap0.put("wrong proto type map ", hashMap1);
      DoubleKeyMap<String, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Map<Object, Integer>>(hashMap0);
      Integer integer0 = new Integer(0);
      Map<Object, Integer> map1 = doubleKeyMap1.put("wrong proto type map ", integer0, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("wrong proto type map ", hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.get("wrong proto type map ", "XPT+P");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
