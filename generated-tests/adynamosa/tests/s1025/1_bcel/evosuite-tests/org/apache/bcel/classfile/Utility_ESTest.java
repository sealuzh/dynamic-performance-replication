/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 15:07:21 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byte byte0 = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("ishl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ishl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.signatureToString("Constant pool at index ");
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-76));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.getSignature("char");
      assertEquals("C", string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = (byte) (-86);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.markSupported();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.replace("(=axc/1k>iOI", "dstore_3", "sq;f!#s'l;hp%DzM3J=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("sq;f!#s'l;hp%DzM3J=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sq;f!#s'l;hp%DzM3J='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.setBit(0, 0);
      String string0 = "TU3Bv";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.getSignature("\"n*8_");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1345), (-11));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1903), (-1903));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1903. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("1^", "1^", "1^");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(93, (-2535));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " xO/)]J08 <");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-64);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)101, 725);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55141. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("&:!R$r[rma5]gn+<H");
      assertEquals("[L&:!R$r;", string0);
      
      byte byte0 = Utility.typeOfSignature("[L&:!R$r;");
      assertEquals((byte)13, byte0);
      
      String string1 = Utility.getSignature("S2");
      assertEquals("LS2;", string1);
      
      String string2 = Utility.accessToString(1092);
      assertEquals("protected volatile abstract", string2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("getstatic", "getstatic", "getstatic");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(42);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        MockFile.createTempFile("goto_w\t\t#15724730", "zjxCX!?PtyDeW8!OP*");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-71);
      Object object0 = new Object();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((-2037.21F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[0] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)126;
      byteArray0[1] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.mark((byte)126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      Utility.printArray((Object[]) null);
      String string0 = Utility.format(65, (byte)0, true, 'Y');
      assertEquals("65", string0);
      
      String string1 = Utility.classOrInterface(90);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte) (-26);
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.readFloat();
      byte[] byteArray1 = Utility.decode("ClgQS|$", false);
      assertArrayEquals(new byte[] {(byte)67, (byte)108, (byte)103, (byte)81, (byte)83, (byte)124}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-91));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((-661));
      ConstantPool constantPool1 = null;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Method method0 = null;
      try {
        method0 = new Method(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)95;
      byteSequence0.mark((byte)95);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "5";
      byte[] byteArray0 = Utility.decode("5", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence0.readUnsignedByte();
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[18];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, false);
      Utility.replace("int", "newarray\t\t<<illegal type>>", "newarray\t\t<<illegal type>>");
      Utility.fillup("PU'xpmou:='.)}", 154, true, 'R');
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmplt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmplt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ifge\t\t#-27236", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.compactClassName("fcmpl", "ifge\t\t#-27236", true);
      assertEquals("fcmpl", string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.convertString("multianewarray");
      Utility.isJavaIdentifierPart('\u0081');
      Utility.format(41, (-789), false, '5');
      Integer integer0 = new Integer(194);
      byte byte0 = (byte)83;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)46;
      byteArray0[1] = (byte)83;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("#0'=&Tv6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #0'=&Tv6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)32;
      byteArray0[4] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "?>...";
      File file0 = MockFile.createTempFile("?>...", "checkcast");
      Utility.clearBit((byte) (-10), (byte)105);
      MockPrintStream mockPrintStream0 = new MockPrintStream("jsr_w");
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("-q$G[T~@KNqK<J>kVF$a", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readBoolean();
      byteSequence2.available();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("3 |.9 8l[(Re<.D*p`z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[(Re<.D*p`z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("multianewarray", "ldiv", "multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.replace("ifne\t\t#-26986", "ifne\t\t#-26986", ". -ko'B4UP$|D7N3");
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence1);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -106
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.replace("o7", "o7", "o7");
      Utility.getSignature("o7");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fstore_2");
      Utility.getSignature(";");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-149), 712);
      constantInterfaceMethodref0.clone();
      constantInterfaceMethodref0.setClassIndex(712);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      MockFile.createTempFile(", high = ", "fstore_2");
      Utility.clearBit((-3460), (-3460));
      MockPrintStream mockPrintStream0 = new MockPrintStream("+");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)73;
      Object object0 = new Object();
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      ConstantFloat constantFloat0 = new ConstantFloat(304.00815F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("\t(wide)");
      byte byte0 = (byte) (-97);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.classOrInterface((byte) (-11));
      boolean boolean1 = false;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -97
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byte byte0 = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.replace("fload\t\t%0", "fload\t\t%0", "fload\t\t%0");
      boolean boolean0 = false;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, 918, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "MB<";
      Utility.replace("MB<", "MB<", "MB<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)114;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        MockFile.createTempFile("7\rXYg%/a", "double");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("#l@~sc<_%=%84]q.@z]", false);
      Utility.replace("#l@~sc<_%=%84]q.@z]", "Dgh0G:i3DAJ", "#l@~sc<_%=%84]q.@z]");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+]_", "#l@~sc<_%=%84]q.@z]", "fload_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +]_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.getSignature("&:!R$r[rma5]gn+<lH");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteSequence2.readByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.mark((byte)71);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dstore_0");
      constantPool0.constantToString((Constant) constantUtf8_0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.classOrInterface(192);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, constantPool0, (-1754), (int) (byte)95, false);
      Utility.compactClassName("b](u.biM7:A+R8", false);
      try { 
        Utility.methodSignatureReturnType("b](u.biM7:A+R8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b](u.biM7:A+R8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.getSignature("&:!R$r[rma5]gn+<lH");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byte byte0 = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.signatureToString("[L&:!R$r;", true);
      Utility.replace("fcmpl", "&:!R$r[rma5]gn+<lH", "");
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = true;
      Utility.compactClassName("org.apache.bcel.classfile.ConstantString", true);
      Utility.compactClassName("&:!R$r[rma5]gn+<lH");
      Utility.accessToString(65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, (-3558));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      Utility.convertString("\n\t\tthrows ");
      Utility.fillup("F,5H/T_~,V%f51", (byte)87, false, '^');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "F,5H/T_~,V%f51";
      stringArray0[1] = "F,5H/T_~,V%f51";
      stringArray0[2] = "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^F,5H/T_~,V%f51";
      stringArray0[3] = "\n\t\tthrows ";
      stringArray0[4] = "\n\t\tthrows ";
      stringArray0[5] = "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^F,5H/T_~,V%f51";
      stringArray0[6] = "\n\t\tthrows ";
      stringArray0[7] = "F,5H/T_~,V%f51";
      Utility.methodTypeToSignature("\n\t\tthrows ", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("java.lang.char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("#l@~sc<_%=%84]q.@z]", false);
      Utility.replace("#l@~sc<_%=%84]q.@z]", "Dgh0G:i3DAJ", "#l@~sc<_%=%84]q.@z]");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 442, 442, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("-q$G[T~@KNqK<J>kVF$a", false);
      byte byte0 = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("t`]mu8l}+cu])%gp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t`]mu8l}+cu])%gp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      boolean boolean0 = true;
      boolean boolean1 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-2043.2997F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool2, true);
      constantPool0.setConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.readFloat();
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      String string0 = "Nr:#fu%\\#`\\o";
      try { 
        Utility.decode("dstore_2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.format((-224), 46, true, '$');
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-118);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString(">");
      Integer integer0 = new Integer(239);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("-224$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-88);
      byteArray0[6] = (byte)80;
      Utility.codeToString(byteArray0, constantPool0, (-1425), (-1425), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-1911198374));
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("15[bda(D:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `15[bda(D:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("PU'xpmou:='/)}", "PU'xpmou:='/)}", true);
      assertEquals("PU'xpmou:='.)}", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte) (-127);
      byteArray1[3] = (byte)118;
      byteArray1[4] = (byte)118;
      byteArray1[5] = (byte)118;
      byteArray1[6] = (byte) (-38);
      byteArray1[7] = (byte) (-38);
      Utility.equals(byteArray1, byteArray1);
      short short0 = Utility.searchOpcode("if_icmple");
      assertEquals((short)164, short0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence1, constantPool1, true);
      try { 
        Utility.typeOfMethodSignature("AJ*qy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AJ*qy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("#l@~sc<_%=%84]q.@z]", false);
      Utility.replace("#l@~sc<_%=%84]q.@z]", "Dgh0G:i3DAJ", "#l@~sc<_%=%84]q.@z]");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Method method0 = new Method();
      Utility.isJavaIdentifierPart('h');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte)88;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "lstore_3", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)121;
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.replace("ret\t\t%9", "checkcast", "org.apache.bcel.classfile.ConstantString");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.fillup("org.apache.bcel.classfile.ConstantString", (byte)57, true, '_');
      assertEquals("org.apache.bcel.classfile.ConstantString_________________", string2);
      
      String string3 = Utility.replace("checkcast", "*^]i0s", "*^]i0s");
      assertEquals("checkcast", string3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "JavaClass.debug";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JavaClass.debug");
      String string1 = ", Z.high = ";
      String string2 = null;
      try { 
        Utility.methodSignatureToString("JavaClass.debug", (String) null, "tETz\"iaAVpE13Q*gR", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JavaClass.debug
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      Utility.signatureToString("SXy=g Vk.Qzr%02-DV");
      Utility.methodTypeToSignature("SXy=g Vk.Qzr%02-DV", (String[]) null);
      boolean boolean0 = false;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "lload_0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"lload_0\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(89, 194);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.convertString("");
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-2043.2997F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("org.apache.bcel.classfile.ConstantInteger", true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-61);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.convertString("monitorexit");
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte) (-61), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)103;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("caload");
      int int0 = new Integer(6);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.decode("dsub", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorenter", "dsub", "caload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((int) 'm');
      String string0 = "Signature: ";
      Utility.searchOpcode("Signature: ");
      String string1 = ", Z.high = ";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString(" ConstantUtf8 objects created", "&:!R$r", "public protected static synchronized volatile", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  ConstantUtf8 objects created
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("float", false);
      String string0 = Utility.replace("Dgh0G:i3DAJ", "$rc", "$rc");
      assertEquals("Dgh0G:i3DAJ", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence1.readChar();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ineg", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.methodSignatureReturnType("SE&RUCd&{=6?}/M:Z");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "BSE{";
      Utility.methodSignatureReturnType("BSE{");
      Utility.isSet(1763, 39);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("ldc2_w", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, 192, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("float", false);
      Utility.replace("Dgh0G:i3DAJ", "$rc", "$rc");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(1, byteSequence1.getIndex());
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "u=+Cz}6uQIiw'jU";
      stringArray0[1] = "u=+Cz}6uQIiw'jU";
      stringArray0[2] = "goto_w";
      stringArray0[3] = "u=+Cz}6uQIiw'jU";
      stringArray0[4] = "freturn";
      Utility.methodTypeToSignature("freturn", stringArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.markSupported();
      byteSequence3.close();
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("5fLcB|j!fG n2VXL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5fLcB|j!fG n2VXL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[18];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      ConstantUtf8.getCachedInstance("d1P|Od4 aErS]4Pr");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-83), (int) (byte) (-83), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.getSignature("&:!R$r[rma5]gn+<lH");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.methodSignatureReturnType("Constant pool at index ");
      byte[] byteArray0 = Utility.decode("Constant pool at index ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteSequence0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "fstore_0";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "char";
      objectArray0[5] = (Object) null;
      Utility.printArray(objectArray0, false, true);
      Utility.convertString("ddiv");
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 131, 131, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("nF", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nF");
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence1.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.methodSignatureReturnType("Constant pool at index ");
      byte[] byteArray0 = Utility.decode("Constant pool at index ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.skip((-1816L));
      String string0 = "";
      // Undeclared exception!
      Utility.replace("H@h=2x;X,o?eVXO", "", "Constant pool at index ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$82$A$82$82$82$82$82$A", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.convertString("lS1hM/+G6U;n'");
      assertEquals("lS1hM/+G6U;n\\'", string1);
      
      byte[] byteArray1 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte) (-126);
      byteArray1[5] = (byte) (-126);
      byteArray1[6] = (byte) (-126);
      byteArray1[7] = (byte) (-126);
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, 1, 43, false);
      assertEquals("1:    ixor\n2:    ixor\n3:    ixor\n4:    ixor\n5:    ixor\n6:    ixor\n7:    ixor\n", string2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte)112;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)112;
      byteArray2[1] = (byte) (-82);
      byteArray2[2] = (byte)112;
      Utility.equals(byteArray1, byteArray2);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "mT\"HR";
      Utility.replace("invokeinterface", "invokeinterface", "Cv-XZM(h7b8\"|d");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.methodSignatureReturnType("SE&RUCd&{=6?}/M:Z");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte) (-19);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)0;
      Utility.printArray(objectArray0, true, false);
      String string0 = Utility.convertString("B0mY&%6=(OKL?");
      assertEquals("B0mY&%6=(OKL?", string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{0}", string1);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-19);
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-19), (int) (byte) (-19), true);
      assertEquals("0:    <illegal opcode>\n", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte)23, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)103;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("caload");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.methodTypeToSignature("SXy=g Vk.Q{zr%602-DV", (String[]) null);
      assertEquals("()LSXy=g;", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-32);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-32);
      byteArray1[4] = (byte) (-92);
      byteArray1[5] = (byte) (-86);
      byteArray1[6] = (byte) (-86);
      byteArray1[7] = (byte) (-32);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readFloat();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("if_icmple\t\t#-21842", string1);
      
      byte[] byteArray2 = Utility.decode("Nr:#fu%#`o", false);
      assertArrayEquals(new byte[] {(byte)78, (byte)114, (byte)58, (byte)35, (byte)102, (byte)117, (byte)37, (byte)35, (byte)96, (byte)111}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)9;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)72;
      String string0 = "(NZ:z`[jh}";
      try { 
        Utility.methodSignatureArgumentTypes("(NZ:z`[jh}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NZ:z`[jh}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("F", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.skip((-1816L));
      Utility.replace("J", "fstore_3", "J");
      try { 
        Utility.methodSignatureReturnType("wb7Zh|ekYFg\"zO3%j", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wb7Zh|ekYFg\"zO3%j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.methodSignatureReturnType("SE&RUCd&{=6?}/M:Z");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)74;
      Utility.printArray(objectArray0, true, false);
      String string0 = Utility.convertString("B0mY&%6=(OKL?");
      assertEquals("B0mY&%6=(OKL?", string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{74}", string1);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-19);
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-19), (int) (byte) (-19), true);
      assertEquals("0:    <illegal opcode>\n", string2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, 170);
      try { 
        Utility.methodSignatureArgumentTypes(", class=<unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , class=<unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodTypeToSignature("SXy=g Vk.Q{zr%602-DV", (String[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-13);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-13);
      byteArray1[4] = (byte) (-79);
      byteArray1[5] = (byte) (-86);
      byteArray1[6] = (byte) (-86);
      byteArray1[7] = (byte) (-13);
      byteArray1[8] = (byte) (-86);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals(20, byteSequence1.getIndex());
      assertEquals("tableswitch\tdefault = 0, low = 0, high = 0(0)", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte)122;
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2260, 103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.methodSignatureReturnType("BSE{");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = 46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "&:!R$r[rma5]gn+<lH";
      int int0 = 194;
      Utility.isSet(0, (byte) (-1));
      Utility.searchOpcode("&:!R$r[rma5]gn+<lH");
      int int1 = 1656;
      Utility.isSet((byte)23, 1656);
      byte[] byteArray0 = Utility.decode("&:!R$r[rma5]gn+<lH", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-87);
      Utility.clearBit((-1378), (byte)49);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1378), (int) (byte) (-87), true);
      String string0 = "|tm";
      int int0 = 67;
      int int1 = 602;
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      LocalVariable localVariable0 = new LocalVariable((byte) (-87), (-301), 122, (byte) (-87), 63, (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(230, 67, localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariableTable0.getLocalVariable((-301), 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[18];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), 2803, false);
      Utility.convertString(", npairs = ");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(171, (-3372));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(171, 103);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      constantArray0[7] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, npairs = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodSignatureReturnType("Wovm-OQO)DW");
      assertEquals("double", string0);
      
      String string1 = Utility.fillup("LxTfxm^ SmdVz{J", (-1098), false, '0');
      assertEquals("LxTfxm^ SmdVz{J", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("OTJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OTJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      Utility.clearBit((byte) (-93), (-1378));
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1378), (-1073741917), true);
      String string0 = "tfpDoj-m>b3#gQkC~";
      String string1 = "|tm";
      boolean boolean0 = true;
      int int0 = (-1478);
      int int1 = (-301);
      LocalVariable[] localVariableArray0 = new LocalVariable[8];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable((-301), 67, localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariableTypeTable0.getLocalVariable(2657);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTypeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.format((-224), 46, true, '$');
      Utility.compactClassName("double");
      Utility.convertString("(=axc/1k>iOI");
      Utility.isJavaIdentifierPart('v');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(=axc/1k>iOI", "GO1`HCsS}&oWZ|.^", "r8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=axc/1k>iOI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.replace("o7", "o7", "o7");
      Utility.clearBit((-975), (-975));
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence2, constantPool0, false);
      ConstantPool constantPool2 = constantPool0.copy();
      constantPool2.setConstantPool(constantArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      float float0 = new Integer((-132047));
      Utility.searchOpcode("nop");
      Utility.codeToString(byteArray0, constantPool2, (int) (short)0, (-3998));
      Utility.classOrInterface(181);
      try { 
        Utility.methodSignatureReturnType("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      Utility.signatureToString("SXy=g Vk.Qzr%602-DV");
      String string0 = Utility.methodTypeToSignature("SXy=g Vk.Qzr%602-DV", (String[]) null);
      assertEquals("()LSXy=g;", string0);
      
      Utility.methodTypeToSignature("", (String[]) null);
      String string1 = Utility.methodSignatureReturnType("()L;", false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BSE{");
      assertEquals("byte", string0);
      
      byte[] byteArray0 = Utility.decode("BSE{", false);
      String string1 = Utility.replace("BSE{", "long", "Dgh0G:i3DAJ");
      assertEquals("BSE{", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aastore", string2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-77));
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)85);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"ry! f8vf");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantPool0.dump(dataOutputStream0);
      byteSequence0.readShort();
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.setBit(94, 94);
      String string0 = "G2(v>yR|[$";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G2(v>yR|[$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G2(v>yR|[$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.methodSignatureReturnType("BSr");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('T');
      Utility.fillup("byte", (byte)69, false, 'T');
      String string0 = "\n     Method Arguments:";
      try { 
        Utility.methodSignatureReturnType("\n     Method Arguments:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //      Method Arguments:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("breakpoint");
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.methodSignatureReturnType("SE&RUCd&{=6?}/M:Z");
      byte[] byteArray0 = Utility.decode("short", false);
      Utility.replace("wb7Zh|ekYFg\"zO3%j", "short", "short");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.skip((-1816L));
      Utility.replace("the", "drem", (String) null);
      try { 
        Utility.methodSignatureReturnType("\t<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "isub";
      stringArray0[1] = "isub";
      stringArray0[2] = "isub";
      stringArray0[3] = "isub";
      stringArray0[4] = "isub";
      stringArray0[5] = "isub";
      String string0 = Utility.methodTypeToSignature("isub", stringArray0);
      assertEquals("(Lisub;Lisub;Lisub;Lisub;Lisub;Lisub;)Lisub;", string0);
      
      String string1 = Utility.getSignature("isub");
      assertEquals("Lisub;", string1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(219);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.compactClassName("u=+Cz}6uQIiw'jU");
      Utility.classOrInterface(72);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(\"&(?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"&(?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      Utility.typeOfSignature("Sensitive");
      String string0 = ", ";
      String string1 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("ly~`t^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ly~`t^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodTypeToSignature("SXy=g Vk.Qzr%602-DV", (String[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.methodSignatureArgumentTypes("()LSXy=g;");
      Utility.decode("SXy=g Vk.Qzr%602-DV", false);
      try { 
        Utility.typeOfMethodSignature("SXy=g Vk.Qzr%602-DV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SXy=g Vk.Qzr%602-DV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.mark((byte)10);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      String string0 = Utility.classOrInterface(171);
      String string1 = Utility.compactClassName("class");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)9;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)121;
      byteArray1[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.replace("lstore_3", "invokedynamic", "dstore_1");
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("", 171, false, '&');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)73;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3015, 171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[31];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("sdQmL%$!g@kL@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sdQmL%$!g@kL@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[18];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.classOrInterface(169);
      ConstantPool constantPool1 = new ConstantPool(byteSequence1);
      assertEquals(0, constantPool1.getLength());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[18];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">=", "t~'S", "invokedynamic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      Utility.convertString("\n\t\tthrows ");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      byteSequence1.readByte();
      try { 
        Utility.typeOfMethodSignature("return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[18];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      try { 
        Utility.codeToString(byteSequence3, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "t.3*<uKH*~kzBr";
      try { 
        Utility.methodSignatureArgumentTypes("dup2_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureReturnType("BSr");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("byte", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "BSr";
      objectArray0[1] = (Object) constantPool0;
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.readFloat();
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence4, constantPool2, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("goto\t\t#0", string0);
      
      int int0 = Utility.setBit((byte) (-89), 1903);
      assertEquals((-89), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      String string0 = Utility.methodTypeToSignature("u=+Cz}6uQIiw'jU", (String[]) null);
      assertEquals("()Lu=+Cz}6uQIiw'jU;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodSignatureToString("()Lu=+Cz}6uQIiw'jU;", "u=+Cz}6uQIiw'jU", "u=+Cz}6uQIiw'jU");
      assertEquals("u=+Cz}6uQIiw'jU u=+Cz}6uQIiw'jU u=+Cz}6uQIiw'jU()", string1);
      
      Utility.methodSignatureToString("()Lu=+Cz}6uQIiw'jU;", "6*q~Kw9", "1vn4!]AS", true);
      try { 
        Utility.typeOfSignature("java.lang.'ts(s>B;.$U{'.1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.'ts(s>B;.$U{'.1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.convertString("V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-98);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifle\t\t#-16384", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte) (-85);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = "The offset cannot be negative";
      try { 
        Utility.typeOfSignature("KAE\u0004V72");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KAE\u0004V72
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.typeOfSignature("The offset cannot be negative");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-85);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte) (-69);
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("8vox1t#^z7pb(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8vox1t#^z7pb(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)77;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = "line.separator";
      Utility.searchOpcode("line.separator");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("line.separator", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `line.separator'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("b2~N");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)91);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readShort();
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "E?[|$)S_u~-=?0\"i";
      try { 
        Utility.decode("E?[|$)S_u~-=?0\"i", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((int) 'm');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-20);
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-104);
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte) (-104);
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{java.lang.Object@18181370, -104, java.lang.Object@7b848407, java.lang.Object@18181370, -104}";
      stringArray0[1] = "u=+Cz}6uQIiw'jU";
      stringArray0[2] = "freturn";
      stringArray0[3] = "u=+Cz}6uQIiw'jU";
      stringArray0[4] = "{java.lang.Object@18181370, -104, java.lang.Object@7b848407, java.lang.Object@18181370, -104}";
      stringArray0[5] = "{java.lang.Object@18181370, -104, java.lang.Object@7b848407, java.lang.Object@18181370, -104}";
      stringArray0[6] = "freturn";
      stringArray0[7] = "u=+Cz}6uQIiw'jU";
      Utility.methodTypeToSignature("goto_w", stringArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("98 00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("[a", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byte byte0 = (byte)91;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface(187);
      byteSequence0.readFloat();
      String string0 = "fpGUUCZNWA&wUE:R";
      MockFile mockFile0 = new MockFile("fpGUUCZNWA&wUE:R");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "[a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"[a\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.compactClassName(", ", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)68, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "-C$G[T~@KqK<J>kVF$a";
      boolean boolean0 = true;
      byte byte0 = (byte) (-100);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-100));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantPool0.constantToString((Constant) constantInteger1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (int) (byte) (-100), true);
      try { 
        Utility.methodSignatureArgumentTypes("-C$G[T~@KqK<J>kVF$a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -C$G[T~@KqK<J>kVF$a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 97, true);
      Utility.printArray((Object[]) null);
      String string1 = Utility.fillup("0:    areturn\n1:    areturn\n2:    areturn\n3:    nop\n4:    areturn\n", (byte) (-80), false, '/');
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-7);
      byteArray0[7] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.encode(byteArray0, false);
      Utility.decode("j$f9$93$fe$d5$fe$f9$d5$A", false);
      Utility.compactClassName("athrow");
      Utility.convertString("j$f9$93$fe$d5$fe$f9$d5$A");
      Utility.isJavaIdentifierPart('D');
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.methodTypeToSignature("Y||-", (String[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte) (-104);
      byteArray1[2] = (byte)94;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)11;
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Utility.decode("}shnKY=E,jD{X[+:", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 182, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JavaClass.debug");
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      File file0 = MockFile.createTempFile("?>...", "JavaClass.debug");
      int int0 = new Integer(183);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.WildcardFileFilter");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(locale0, "8rcG'R`YhRi~o~EX]_B", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)51;
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.setBit(27, 27);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (-467), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", high = ", ", high = ", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString(",ai<nk:D F<Li*[E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantLong0.toString();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      byteSequence0.skip(1L);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("CONSTANT_Long[5](bytes = 1)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockFile.createTempFile("\"#fCZoW@Wh8$", "J3i=<H=.#n");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence2.readChar();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, (int) (byte)66, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.setBit((-4437), (-4437));
      Utility.searchOpcode("-X%KCQ?H");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Lfreturn;V", ".6(`N>E+F", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-85);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.getSignature("@B{K#444^?[/[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[/[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 9969, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_1
         // 1:    nop
         // 2:    dneg
         // 3:    <illegal opcode>
         // 4:    i2f
         // 5:    iushr
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("44?8uK$|@a]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `44?8uK$|@a]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-2043.2997F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.ConstantInteger", true);
      assertEquals("org.apache.bcel.classfile.ConstantInteger", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)36;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("if_icmpge", false);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-124), (int) (byte)36, true);
      assertEquals("0:    lmul\n1:    fsub\n2:    swap\n3:    lmul\n4:    dadd\n5:    ldiv\n6:    irem\n7:    dsub\n8:    lsub\n", string1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "impdep2";
      Utility.searchOpcode("impdep2");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "impdep2";
      objectArray0[1] = (Object) "impdep2";
      objectArray0[2] = (Object) "impdep2";
      objectArray0[3] = (Object) "impdep2";
      objectArray0[4] = (Object) "impdep2";
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte) (-40);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, 1, 1, true);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("fload_3");
      constantUtf8_0.copy();
      ConstantFloat constantFloat0 = new ConstantFloat((byte)33);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)33);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (int) (byte) (-100), false);
      assertEquals("0:    ifge\t\t#-25444\n", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte) (-100);
      byteArray1[4] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifge\t\t#8481", string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1399, 998);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString(",ai<nk:D F<Li*[E");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byte byte1 = (byte)17;
      byteArray0[1] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantLong0.toString();
      constantLong0.copy();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1465, (byte)99);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte)20;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("Invalid signature: `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte byte0 = (byte) (-95);
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-95);
      byteArray1[2] = (byte) (-95);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-71);
      byteArray1[6] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) null);
      Utility.classOrInterface((byte) (-88));
      int int0 = (-586);
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(" xBl;`:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` xBl;`:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.toHexString(byteArray1);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("W5\"k@'9C&Mlg:ti", "java.lang.", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("ifnonnull\t\t#2313", true);
      assertTrue(string1.equals((Object)string0));
      
      Utility.compactClassName("j-Q_UD", "ifnonnull\t\t#2313", false);
      byte[] byteArray1 = Utility.decode("v", false);
      assertArrayEquals(new byte[] {(byte)118}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte) (-119);
      byteArray1[6] = (byte)77;
      byteArray1[7] = (byte)77;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.encode(byteArray0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("M$89MM$89", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "pve%h1wUU:T";
      Utility.searchOpcode("pve%h1wUU:T");
      try { 
        Utility.methodSignatureArgumentTypes("fsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer(27);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("f2i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f2i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte byte0 = (byte) (-95);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readUnsignedByte();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.skipBytes(200);
      try { 
        Utility.codeToString(byteSequence4, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.replace("o7", "o7", "o7");
      Utility.convertString(", hiehp= ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fstore_2");
      Utility.getSignature(";");
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-149), 712);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantInterfaceMethodref0.accept(emptyVisitor0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      String string0 = "org.apache.bcel.classfile.EmptyVisitor";
      byte[] byteArray1 = Utility.decode("org.apache.bcel.classfile.EmptyVisitor", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 182, (int) (byte) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.replace("o7", "o7", "o7");
      assertEquals("o7", string0);
      
      String string1 = Utility.convertString(", high = ");
      assertEquals(", high = ", string1);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fstore_2");
      String string2 = Utility.getSignature(";");
      assertEquals("L;;", string2);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-149), 712);
      constantInterfaceMethodref0.setClassIndex(712);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      MockFile.createTempFile(", high = ", "fstore_2");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.replace("Z@UO*i", "Z@UO*i", "Z@UO*i");
      Utility.getSignature("Z@UO*i");
      Utility.searchOpcode("LZ@UO*i;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-126);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-43), 70, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("fload_3");
      constantUtf8_0.copy();
      ConstantFloat constantFloat0 = new ConstantFloat((byte)33);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)33);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantUtf8_0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9990, (-1048), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[6] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null);
      Utility.classOrInterface((byte) (-88));
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-586), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a6$a6$a6$S$a6W$a6", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_acmpne\t\t#-22874", string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(27);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isSet(91, (byte)121);
      byte[] byteArray1 = Utility.decode("QAs\"1u36", false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 792, (-269), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)91, (byte)91);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence2, constantPool0, true);
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("Invalid method signature: ", true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        constantPool1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(1682, 177, false, '{');
      Utility.isSet(89, 194);
      Utility.searchOpcode("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1682");
      Utility.isSet(1682, 194);
      byte[] byteArray0 = Utility.decode("U&!aO%7MSAl(Pi*]pl", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, (-626), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JavaClass.debug");
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      File file0 = MockFile.createTempFile("?>...", "JavaClass.debug");
      int int0 = Utility.clearBit(183, 2048);
      assertEquals(182, int0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.WildcardFileFilter");
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)24;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1583), (-1583));
      assertEquals("0:    dload\t\t%24\n2:    dload\t\t%24\n", string0);
      
      String string1 = Utility.classOrInterface(183);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u=+Cz}6uQIiw'jU";
      stringArray0[1] = "u=+Cz}6uQIiw'jU";
      Utility.methodTypeToSignature("U'xpmou:=", stringArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-100);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = Utility.decode("-C$G[T~@KqK<J>kVF$a", false);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-91), 1285, true);
      assertEquals("0:    aload_3\n1:    fstore_0\n2:    iconst_3\n3:    dup_x2\n4:    bastore\n5:    iand\n6:    lstore_1\n7:    astore_0\n8:    lrem\n9:    astore_0\n10:   istore_1\n11:   dstore_3\n12:   istore_3\n13:   dmul\n14:   sastore\n15:   fstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName(" U'xpmou:='/)}", " U'xpmou:='/)}", true);
      Utility.compactClassName(" U'xpmou:='/)}");
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)59;
      byteArray0[1] = (byte) (-115);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)88;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)88, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Utility.replace("o7", "o7", "o7");
      assertEquals("o7", string0);
      
      String string1 = Utility.convertString(", high = ");
      assertEquals(", high = ", string1);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fstore_2");
      String string2 = Utility.getSignature(";");
      assertEquals("L;;", string2);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-149), 712);
      constantInterfaceMethodref0.setClassIndex(712);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      File file0 = MockFile.createTempFile(", high = ", "fstore_2");
      int int0 = Utility.clearBit((-3460), (-3460));
      assertEquals((-268438916), int0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("+");
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      mockPrintStream1.println(0.0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = false;
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((-2037.21F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)41;
      byteArray0[3] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 64. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.replace("o7", "o7", "o7");
      Utility.convertString("o7");
      Utility.getSignature(";");
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-149), 712);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byte byte1 = (byte)112;
      byteArray0[2] = (byte)76;
      byte byte2 = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      byte byte3 = (byte)118;
      byteArray0[4] = (byte)118;
      constantInterfaceMethodref1.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("o7", "o7", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 193, (-3482), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-3026), false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%95", string0);
      
      MockFile.createTempFile("\"#fCZoW@Wh8$", "J3i=<H=.#n");
      String string1 = Utility.classOrInterface(171);
      assertEquals("class", string1);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("A7_", string2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-4560), (-4560));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)42;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-123);
      byte byte0 = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifnonnull", "i2l", "aastore", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString(",ai<nk:D F<Li*[E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "d2W,yW/W_G[z";
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.convertString(",ai<nk:D F<Li*[E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong1.copy();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1465, (byte)99);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName(" U'xpmou:='/)}", " U'xpmou:='/)}", true);
      Utility.compactClassName(" U'xpmou:='/)}");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[8] = (byte)3;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-104);
      byte[] byteArray1 = new byte[0];
      Constant[] constantArray0 = new Constant[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("0D");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-76);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0D");
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-808), 1420);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 247, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-2037.21F));
      byte byte0 = (byte) (-114);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "aWsi&gG51/";
      try { 
        MockFile.createTempFile("aWsi&gG51/", "&Adm;Zv\"\"%iAhnQ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), 1461, true);
      assertEquals("0:    dup2\n1:    l2f\n2:    nop\n3:    nop\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.compactClassName("dstore_2", "dstore_2", false);
      Utility.signatureToString("D{PMGClass", true);
      String string0 = " ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("o v]ea", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `o v]ea'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.getSignature("The FilenameFilter must not be null");
      Utility.compactClassName("LThe;");
      Utility.compactClassName("LThe;");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ConstantClass constantClass0 = new ConstantClass((byte)37);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 16, 912);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-114));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), (int) (byte) (-114));
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    d2i\n2:    d2i\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    nop\n", false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(86, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("faload", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-43), false);
      assertEquals("public protected final volatile transient native interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-43), (int) (byte) (-43));
      assertEquals("0:    nop\n1:    d2i\n2:    d2i\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)49;
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.methodTypeToSignature("arraylength", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("n]2C1e+>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `n]2C1e+>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.getSignature("e");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.methodSignatureReturnType("FR8iwBrX~7bn1{L?");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-94);
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.signatureToString("FR8iwBrX~7bn1{L?", false);
      Utility.codeToString(byteSequence0, constantPool0);
      MockFile mockFile0 = new MockFile("%QK]x`pa_4Kd d");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "FR8iwBrX~7bn1{L?";
      objectArray0[2] = (Object) "lneg";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "FR8iwBrX~7bn1{L?";
      objectArray0[5] = (Object) "float";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(93L, mockFile0.length());
      
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockFile.createTempFile("float", "c");
      String string0 = Utility.compactClassName("}PQe", false);
      assertEquals("}PQe", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)92;
      byte byte0 = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "&Adm;Zv\"\"%iAhnQ";
      try { 
        MockFile.createTempFile("&Adm;Zv\"\"%iAhnQ", "&Adm;Zv\"\"%iAhnQ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte byte0 = (byte) (-43);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-114));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("lload_2");
      try { 
        Utility.methodSignatureArgumentTypes("newarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.replace("o7", "o7", "o7");
      Utility.convertString(", high = ");
      Utility.getSignature(";");
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-149), 712);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-96);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte) (-38);
      byteArray1[4] = (byte) (-38);
      byteArray1[5] = (byte)76;
      byteArray1[6] = (byte) (-96);
      byteArray1[7] = (byte) (-96);
      byteArray1[8] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = Utility.setBit(27, 27);
      assertEquals(134217755, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)85;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3217), (-147), true);
      assertEquals("0:    castore\n1:    f2l\n2:    return\n3:    castore\n4:    dstore_0\n5:    castore\n", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.searchOpcode("impdep2");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      try { 
        Utility.typeOfSignature("+*'FU,-%fLIGT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'FU,-%fLIGT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-66);
      MockFile mockFile0 = new MockFile("if_icmple", "if_icmple");
      MockPrintStream mockPrintStream0 = new MockPrintStream("(anonymous)");
      Locale locale0 = Locale.CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "(anonymous)", (Object[]) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) null);
      String string0 = "A.)3ZV:e@)M#";
      try { 
        Utility.methodSignatureArgumentTypes("A.)3ZV:e@)M#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A.)3ZV:e@)M#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (int) (byte) (-90), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)0, (byte)0, byteSequence0, constantPool0);
      boolean boolean0 = false;
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("", "monitorenter", "UW[N_-1J{9T9H1", false, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("arraylength", stringArray0);
      Utility.classOrInterface((-189));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)49;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, false);
      try { 
        Utility.typeOfSignature("O1\u0006Q$9/Mjz_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O1\u0006Q$9/Mjz_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.replace("o7", "o7", "o7");
      assertEquals("o7", string0);
      
      String string1 = Utility.convertString(", high = ");
      assertEquals(", high = ", string1);
      
      String string2 = Utility.getSignature(";");
      assertEquals("L;;", string2);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-149), 712);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("irem", string3);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-114));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), (int) (byte) (-114));
      Utility.decode("0:    nop\n1:    d2i\n2:    d2i\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    nop\n", false);
      try { 
        Utility.methodSignatureReturnType("?w]p{_wM1sZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?w]p{_wM1sZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)39;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 113, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-66);
      byteArray0[1] = (byte)59;
      byteArray0[1] = (byte)111;
      byteArray0[4] = (byte)59;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), (int) (byte)64, true);
      assertEquals("0:    lstore_1\n1:    ddiv\n2:    nop\n3:    nop\n4:    istore_0\n", string0);
      
      String string1 = Utility.convertString("+2ZW ~q19x$N 9EyK%");
      assertEquals("+2ZW ~q19x$N 9EyK%", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-100);
      byte byte0 = Utility.typeOfSignature("The strings must not be null");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.clearBit((-4156), (byte) (-1));
      assertEquals(2147479492, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)85;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2260, (int) (byte) (-116), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.methodSignatureReturnType("FR8iwBrX~7bn1{L?");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte) (-83);
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 573, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "FR8iwBrX~7bn1{L?";
      Utility.methodSignatureReturnType("FR8iwBrX~7bn1{L?");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte) (-94);
      byteArray0[0] = (byte)117;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, 187, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.replace("o7", "o7", "o7");
      Utility.clearBit((-975), (-975));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("_@s{=zj,K=&H-F", "l2d", false);
      Utility.signatureToString("SXy=g", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XI'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XI''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString(",ai<nk:D F<Li*[E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodTypeToSignature("", (String[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.clearBit((byte)88, (-1013));
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(",ai<nk:D F<Li*[E", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (-1556));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-57);
      Utility.methodTypeToSignature("+Y=G5UWTE&X", (String[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
      
      String string1 = Utility.methodTypeToSignature("+Y=G5UWTE&X", (String[]) null);
      assertEquals("()L+Y=G5UWTE&X;", string1);
      
      String string2 = Utility.compactClassName("+Y=G5UWTE&X", "HZ", true);
      assertEquals("+Y=G5UWTE&X", string2);
      
      String string3 = Utility.getSignature("ifge");
      assertEquals("Lifge;", string3);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.setBit(27, 27);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "freturn";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "freturn");
      Utility.typeOfSignature("!V7W(gEFy");
      try { 
        Utility.typeOfSignature("/(5eD5YE]_Dp%gYE+,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /(5eD5YE]_Dp%gYE+,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short short0 = Utility.searchOpcode("impdep2");
      assertEquals((short)255, short0);
      
      String string0 = Utility.format((short)255, (short)255, true, 'C');
      assertEquals("255CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("laload", string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.setBit(27, 27);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16384, (int) (byte) (-96), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)39;
      byte byte0 = (byte)2;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 85, 326);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = Utility.setBit((-12), (-12));
      assertEquals((-12), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      Constant constant0 = constantLong1.copy();
      constantArray0[1] = constant0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-52), 1240);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(dataInputStream0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("0D");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0D";
      stringArray0[1] = "0D";
      String string0 = Utility.methodTypeToSignature("u=+Cz}6uQIiw'jU", stringArray0);
      assertEquals("(L0D;L0D;)Lu=+Cz}6uQIiw'jU;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)65;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence1);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      String string0 = Utility.replace("SXy=g Vk.Qzr%602-DV", "@^d2m`,&Z-L&2MoVCpO", "[]");
      assertEquals("SXy=g Vk.Qzr%602-DV", string0);
      
      String string1 = Utility.methodTypeToSignature("SXy=g Vk.Qzr%602-DV", (String[]) null);
      assertEquals("()LSXy=g;", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_3", string2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FR8iwBrX~7bn1{L?");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte) (-94);
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.signatureToString("FR8iwBrX~7bn1{L?", false);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("0D");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-124);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0D");
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), 2839, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    aload_1
         // 2:    iinc\t\t%132\t36
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = Utility.setBit(27, 27);
      assertEquals(134217755, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      Utility.codeToString(byteSequence2, constantPool0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("b2~N");
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-128));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readShort();
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence1, constantPool2);
      Utility.toHexString(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("impdep2");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) constantArray0);
      try { 
        Utility.methodSignatureArgumentTypes(":r$0k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :r$0k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(1682, 177, false, '{');
      Utility.isSet(89, 194);
      Utility.searchOpcode("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{1682");
      Utility.isSet(1682, 194);
      byte[] byteArray0 = Utility.decode("invokeinterface", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, (-626), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.getSignature("e");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 872, (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.setBit((-12), (-12));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.clearBit((byte) (-52), (-12));
      MockFile mockFile0 = new MockFile("i2d", "i2d");
      String string0 = "static";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "i2d";
      stringArray0[1] = "static";
      stringArray0[2] = "i2d";
      stringArray0[3] = "t\"`CoP1}zB2p$W/d";
      stringArray0[4] = "java.lang.,Lm6-H8}r8z^O8k_2";
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte) (-35);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-52);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-2);
      byte byte0 = (byte)39;
      byteArray0[4] = (byte)39;
      byte byte1 = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-77);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte) (-2), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.compactClassName("char");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)112;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)15, (int) (byte)79, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.typeOfSignature("Zp]Gwk,Z~p");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-15);
      byteArray0[1] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      constantPool0.setConstantPool((Constant[]) null);
      byteSequence1.reset();
      Utility.codeToString(byteSequence1, constantPool0);
      byteSequence1.readShort();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-15);
      byteArray1[1] = (byte)46;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = ",Lm6-H8}r8z^O8k_2";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-92);
      Utility.methodTypeToSignature(",Lm6-H8}r8z^O8k_2", (String[]) null);
      Utility.typeOfMethodSignature("()L,Lm6-H8}r8z^O8k_2;");
      Utility.methodSignatureReturnType("()L,Lm6-H8}r8z^O8k_2;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: BD5AABA4
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-77);
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)78;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1504), (-789), false);
      assertEquals("0:    nop\n1:    nop\n2:    astore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.replace("o7", "o7", "o7");
      assertEquals("o7", string0);
      
      int int0 = Utility.clearBit((-975), (-975));
      assertEquals((-132047), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockFile.createTempFile("ddiv", "dreturn");
      String string1 = Utility.classOrInterface((byte)111);
      assertEquals("class", string1);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)111;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte)111;
      String string2 = Utility.encode(byteArray1, false);
      assertEquals("ooo", string2);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "$dqcG8V0+-3\".X^", "invokevirtual", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byte byte0 = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "&Adm;Zv\"\"%iAhnQ";
      String string1 = "[RzK-'RQVTbBtzz:WA";
      try { 
        MockFile.createTempFile("&Adm;Zv\"\"%iAhnQ", "&Adm;Zv\"\"%iAhnQ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, 187, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UR+Xm-DcZ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-24);
      Utility.convertString(",lwzLWkouzD]6");
      try { 
        Utility.typeOfSignature("UR+Xm-DcZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UR+Xm-DcZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)21;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 43, true);
      assertEquals("0:    nop\n1:    fcmpl\n2:    <illegal opcode>\n3:    jsr_w\t\t#-1609236477\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 52032. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString(",ai<nk:D F<Li*[E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 5:    dup2_x2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)94, (int) (byte)2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "Invalid signature: ";
      boolean boolean0 = true;
      Utility.compactClassName("5", true);
      try { 
        Utility.typeOfSignature("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("VV");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(5);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 5, (int) (byte) (-103), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, 187, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%94\t3", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "Eo?[|$9)S_u~-=?0\"i";
      // Undeclared exception!
      try { 
        Utility.decode("Eo?[|$9)S_u~-=?0\"i", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("org.apache.bcel.util.ClassPathRepository", true);
      Utility.setBit((-1094), (-1094));
      String string0 = "Q{";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48059. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.replace("o7", "o7", "o7");
      Utility.clearBit((-975), (-975));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FR8iwBrX~7bn1{L?");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte) (-94);
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lneg", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.convertString("JBe!,mi,sN$tvg");
      assertEquals("JBe!,mi,sN$tvg", string0);
      
      String string1 = Utility.methodSignatureReturnType("JBe!,mi,sN$tvg");
      assertEquals("long", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("JBe!,mi,sN$tvg", stringArray0);
      assertEquals("()LJBe!,mi,sN$tvg;", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-24);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-42), (int) (byte) (-42));
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    fconst_2\n3:    <illegal opcode>\n", string3);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("-C$G[T~@KqK<J>kVF$a", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-43);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 11);
      assertEquals("0:    lload_2\n1:    lload_2\n2:    lcmp\n3:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      Utility.getSignature("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature(" entries\n");
      Utility.compactClassName("");
      Utility.compactClassName(" arg", "LsX'l=bpMHm_X>", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" arg", "impdep2", "L;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = Utility.getSignature("Ljava/lang/T',5cR{89Wo}}SfN-?:;V");
      assertEquals("LLjava/lang/T',5cR{89Wo}}SfN-?:;V;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-82);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte)32);
      assertEquals("0:    freturn\n1:    lload_2\n2:    freturn\n", string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("Bav#in 0=V", true);
      try { 
        Utility.methodSignatureReturnType("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-94);
      Utility.encode(byteArray0, false);
      Utility.clearBit(6, (byte) (-70));
      // Undeclared exception!
      try { 
        Utility.signatureToString("%PgWjw0#*w'.T.sLB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%PgWjw0#*w'.T.sLB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(67);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2785, 2785);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(74, (byte)63);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "wide";
      try { 
        Utility.typeOfMethodSignature("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (start_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.compactClassName("\r");
      String string0 = Utility.signatureToString("Za,!Q)1@:G:7!KWW^", true);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-77);
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)58;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("astore_3", string0);
      
      MockFile.createTempFile("astore_3", "vp");
      String string1 = Utility.classOrInterface(84);
      assertEquals("class", string1);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "Nz?;)";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nz?;)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nz?;)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((-1826), 187, true, ':');
      Utility.convertString("_");
      try { 
        Utility.typeOfSignature("!:Y7J\f/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Y7J\f/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Utility.convertString("V");
      assertEquals("V", string0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureReturnType("V");
      Utility.signatureToString("CONSTANT_Double", true);
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, (int) (byte)12);
      assertEquals("12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Utility.searchOpcode("impdep2");
      Utility.compactClassName("\r");
      try { 
        Utility.typeOfSignature("\"hs:GG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"hs:GG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("byte");
      assertEquals("B", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("B");
      assertEquals((byte)8, byte0);
      
      String string1 = Utility.classOrInterface((byte)8);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_acmpne\t\t#-22874", string0);
      
      String string1 = Utility.compactClassName(",09D-ayo (v1", ",09D-ayo (v1", true);
      assertEquals("", string1);
      
      String string2 = Utility.convertString("byte");
      assertEquals("byte", string2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.compactClassName("FLRU=_x@?uxz %JEg", "-*^?H$sM'^.rWEG#p", false);
      assertEquals("FLRU=_x@?uxz %JEg", string0);
      
      byte byte0 = Utility.typeOfSignature("FLRU=_x@?uxz %JEg");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "==2pl]'i^";
      Utility.replace("==2pl]'i^", "==2pl]'i^", "==2pl]'i^");
      try { 
        Utility.typeOfSignature("==2pl]'i^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ==2pl]'i^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "@^2>:8-5+{c";
      try { 
        Utility.typeOfSignature("@^2>:8-5+{c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @^2>:8-5+{c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = Utility.format(95, 201, true, 'G');
      assertEquals("95GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", string0);
      
      String string1 = Utility.convertString(".JN:]um2");
      assertEquals(".JN:]um2", string1);
      
      byte byte0 = Utility.typeOfSignature("JTN9l");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.getSignature("L0Js/slyZ|63\"V7t");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L0Js/slyZ|63\"V7t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L0Js/slyZ|63\"V7t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((-2037.21F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "($LF3]92shM_jk4g=";
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-69);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = "&Adm;Zv\"\"%iAhnQ";
      String string2 = "[RzK-'RQVTbBtzz:WA";
      try { 
        MockFile.createTempFile("&Adm;Zv\"\"%iAhnQ", "[RzK-'RQVTbBtzz:WA");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("b2~N");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)91);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readShort();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.toHexString(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("vtp&zKk+V4!Y)A';");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) constantArray0);
      try { 
        Utility.methodSignatureArgumentTypes("A.)3ZV:e@)M#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A.)3ZV:e@)M#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Utility.format(150, 150, false, '2');
      try { 
        Utility.typeOfSignature("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222150");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222150
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = ":zY=oKZ&EN";
      try { 
        Utility.typeOfSignature(":zY=oKZ&EN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :zY=oKZ&EN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = Utility.compactClassName("pop2", "Yy<h&k\":k<&y`:FZ", false);
      assertEquals("pop2", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte) (-98);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.markSupported();
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("ifle\t\t#16286", string1);
      
      String string2 = Utility.getSignature("ifle\t\t#16286");
      assertEquals("Lifle;", string2);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.convertString("&vKGh'*v5YI:Ym~n");
      try { 
        Utility.typeOfSignature("&vKGh'*v5YI:Ym~n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &vKGh'*v5YI:Ym~n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      boolean boolean0 = Utility.isSet(0, (-781));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%$K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %$K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      String string0 = "HNVS+";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("HNVS+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HNVS+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-1354;V");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.getSignature("Yy<h&k\":k<&y :FZ");
      char char0 = 'u';
      // Undeclared exception!
      try { 
        Utility.signatureToString("LYy<h&k\":k<&y;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LYy<h&k\":k<&y;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.searchOpcode("impdep2");
      boolean boolean0 = false;
      Utility.format((short)255, (short)255, false, '5');
      Utility.compactClassName("74!/?c`P");
      String string0 = "CQ;5";
      Utility.typeOfSignature("CQ;5");
      try { 
        Utility.typeOfSignature("W\"=9gl8DX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W\"=9gl8DX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.getSignature("arraylength");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "arraylength";
      objectArray0[1] = (Object) "arraylength";
      objectArray0[2] = (Object) "Larraylength;";
      objectArray0[3] = (Object) "Larraylength;";
      objectArray0[4] = (Object) "Larraylength;";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "Larraylength;";
      objectArray0[7] = (Object) "arraylength";
      objectArray0[8] = (Object) "Larraylength;";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = ".JN:]2";
      Utility.replace(".JN:]2", ".JN:]2", ".JN:]2");
      try { 
        Utility.typeOfSignature(".JN:]2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .JN:]2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.compactClassName("java.lang.DM$zO5", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit(12, (-3273));
      Utility.typeOfSignature("DM$zO5");
      try { 
        Utility.methodSignatureToString("java.lang.DM$zO5", ":fN<G.UQ", "f>KwQ2xc]-_,XsG/Hw", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.DM$zO5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      try { 
        Utility.typeOfSignature("':zY=oKZ&EN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ':zY=oKZ&EN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('F');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("Yy<h&k\":k<&y`:FZ", "Yy<h&k\":k<&y`:FZ", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("castore", string1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = 256;
      Utility.isSet(256, (-1726));
      String string0 = "";
      Utility.compactClassName("", "", false);
      String string1 = "d2f";
      boolean boolean0 = true;
      int int1 = (-2797);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Et/v?@L}7R!3`C6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Et/v?@L}7R!3`C6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.isJavaIdentifierPart('F');
      Utility.format('F', 42, false, 'F');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "744!/?c`P");
      String string0 = "3YO:~ib@-!&Oin_IM";
      try { 
        Utility.typeOfSignature("3YO:~ib@-!&Oin_IM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3YO:~ib@-!&Oin_IM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.format(3512, 59, true, 'F');
      Utility.convertString("new");
      try { 
        Utility.typeOfSignature("*YErEVH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YErEVH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_2", string0);
      
      String string1 = Utility.compactClassName("fconst_1", "Yy<h&k\":k<&y`:FZ", false);
      assertEquals("fconst_1", string1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Utility.methodSignatureReturnType("Ljava/lang/T',5cR{89Wo}}SGN-?:;V");
      char char0 = 'a';
      Utility.format(186, 186, true, 'a');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "186aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "2N9wrf4*7j{u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[2] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('?');
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.isJavaIdentifierPart('F');
      Utility.convertString("8#7");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "8#7";
      objectArray0[1] = (Object) "8#7";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "8#7";
      objectArray0[4] = (Object) "8#7";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "8#7";
      objectArray0[8] = (Object) "8#7";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = Utility.classOrInterface(279);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte)77;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("a$A$$$3eB$7b$d4$cdM", string1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = Utility.getSignature("e");
      assertEquals("Le;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_0", string1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, false);
      String string1 = Utility.compactClassName("java.lang.Object@42dab7a6, java.lang.Object@a7b81");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.methodSignatureReturnType("ZJk$=^K0#");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ZJk$=^K0#", "ZJk$=^K0#", "invokevirtual", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ZJk$=^K0#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = ")omWZ+6*";
      try { 
        Utility.typeOfSignature(")omWZ+6*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )omWZ+6*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Utility.isSet((-289), (-289));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      Utility.accessToString((-289), true);
      Utility.accessToString((-289));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (-3661), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.format(4903, (-3102), true, '6');
      try { 
        Utility.typeOfSignature("4903");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4903
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.decode("+o?n[C.$fLB@~S4[ us", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lreturn");
      mockPrintWriter0.print("lreturn");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Utility.format(0, 51, false, 'e');
      try { 
        Utility.typeOfSignature("MihN;_AzhfeS-S5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MihN;_AzhfeS-S5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U+~wqY\"}L,8,0W", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U+~wqY\"}L,8,0W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = 78;
      Utility.format(78, (byte) (-77), true, 'e');
      try { 
        Utility.typeOfSignature("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.format(45, 45, true, '`');
      try { 
        Utility.typeOfSignature("744!/?c`P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 744!/?c`P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(descriptor_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (descriptor_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Invalid signature: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-96);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$W$a0$f3$fdr$xZ$a0", string0);
      
      String string1 = Utility.getSignature("tableswitch");
      assertEquals("Ltableswitch;", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P@:)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P@:)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte byte0 = (byte) (-77);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((byte) (-77), (byte) (-77), false, '2');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("($LF3]92shM_jk4g=", "impdep1", "wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$LF3]92shM_jk4g='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char char0 = '`';
      Utility.isJavaIdentifierPart('`');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.ext.dirs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.ext.dirs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("XwqtP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XwqtP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.decode("+l`IOvUwmz:8&?", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N5c*t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N5c*t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = "Y|\"94UH9>yyS6:F/";
      String string1 = "Invalid type: ";
      Utility.typeOfSignature("Invalid type: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y|\"94UH9>yyS6:F/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y|\"94UH9>yyS6:F/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "EZ[QV?=#!{K,b^";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(76, 1355);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)85, 3192);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantString constantString0 = new ConstantString(6);
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[5] = (Constant) constantClass1;
      Constant constant0 = constantArray0[3].copy();
      constantArray0[6] = constant0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(2374, (byte) (-38));
      constantArray0[7] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("EZ[QV?=#!{K,b^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EZ[QV?=#!{K,b^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "9E";
      try { 
        Utility.methodSignatureReturnType("Y|\"94UH9>yyS6:F/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y|\"94UH9>yyS6:F/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("Urd9xVMR9#,@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Urd9xVMR9#,@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid signature: ", true);
      assertEquals("Invalid signature: ", string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
      
      try { 
        Utility.typeOfSignature("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "Invalid signature: ";
      boolean boolean0 = true;
      Utility.compactClassName("5", true);
      try { 
        Utility.typeOfSignature("Q:ChhE Jj`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q:ChhE Jj`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.compactClassName("Invalid signature: ", true);
      try { 
        Utility.typeOfSignature(";q\"P{iojQ&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;q\"P{iojQ&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.compactClassName("Invalid signature: ", true);
      Utility.typeOfSignature("Invalid signature: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleParameterAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y|\"94UH9>yyS6:F/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y|\"94UH9>yyS6:F/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((byte) (-77), (byte) (-77), false, '2');
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)81, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = "\\n";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName("\n", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.methodSignatureReturnType("Vx");
      Utility.signatureToString("Vx", true);
      Utility.convertString("void");
      try { 
        Utility.typeOfSignature(">!U@%T\"Q\"iomW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >!U@%T\"Q\"iomW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KVZ!wC}Obg(g6uu.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KVZ!wC}Obg(g6uu.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("0D");
      try { 
        Utility.typeOfSignature("0D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "EZ[QV?=#!K,b^";
      try { 
        Utility.typeOfSignature("EZ[QV?=#!K,b^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EZ[QV?=#!K,b^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.signatureToString("Invalid signature: ", false);
      String string0 = Utility.methodSignatureReturnType("Invalid signature: ", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Utility.fillup("", (-1124), false, '=');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-47);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("50 ac a2 10 eb 50 ab 97 d1", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-49);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Utility.isSet(174, (-270));
      // Undeclared exception!
      try { 
        Utility.signatureToString("Types", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte byte0 = (byte) (-81);
      Utility.isSet(85, (byte) (-81));
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.replace("H2", "H2", "H2");
      Utility.fillup("H2", 2, true, '%');
      String string0 = "%CvmeV";
      // Undeclared exception!
      try { 
        Utility.signatureToString("%CvmeV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%CvmeV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9:?qlNew5.W2,\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9:?qlNew5.W2,\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Utility.isSet(174, (-270));
      String string0 = "-2332";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-17);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W ^}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W ^}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Utility.isSet(178, 200);
      int int0 = 222;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Utility.convertString("newarray");
      // Undeclared exception!
      try { 
        Utility.signatureToString("M^Ff]b?B_ps>NA'I}[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M^Ff]b?B_ps>NA'I}['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.isSet(174, (-270));
      String string0 = "-2332";
      try { 
        Utility.typeOfSignature("-2332");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -2332
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("astore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.readFloat();
      byteSequence0.reset();
      String string0 = Utility.signatureToString("StackMapTable", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.isSet(174, (-270));
      Utility.isSet((-270), (-1015));
      try { 
        Utility.typeOfSignature("HDq|#uK96t3iT&|b,r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HDq|#uK96t3iT&|b,r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      String string0 = Utility.format((-627), (-2654), true, '6');
      assertEquals("-627", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = "| 3Gb#-nK";
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 2394, 2394, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      String string0 = Utility.signatureToString("T`,O1;", true);
      assertEquals("`,O1", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)83;
      byteArray0[2] = (byte) (-119);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.replace("", "1wu>B.bJ|X}Z", "/4Yi7'{i");
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(1);
      constantArray0[0] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1, (byte)24);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence1);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload\t\t%24", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UR+Xm-DcZ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload_0", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("2a 57 e8 89 48 57 f5", string1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("VV");
      constantArray0[1] = (Constant) constantUtf8_0;
      int int0 = 5;
      ConstantString constantString0 = new ConstantString(5);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload\t\t%24", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)40, (-2507));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Glf!aVZ:15[");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic2;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)40);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.typeOfSignature("Glf!aVZ:15[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Glf!aVZ:15[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "Ljava/lang/T',5cR{89{o}ZSGN-?:;V";
      Utility.signatureToString("Ljava/lang/T',5cR{89{o}ZSGN-?:;V");
      Utility.compactClassName("TV.M=SSd`V\"$o(_(");
      String string1 = "i$\\:!+Lv/\\C";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("i$:!+Lv/C", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i$:!+Lv/C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokespecial");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "`+qrz_G8rCQ)#18E";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`+qrz_G8rCQ)#18E";
      stringArray0[1] = "`+qrz_G8rCQ)#18E";
      stringArray0[2] = "void";
      stringArray0[3] = ",b\"ocQd";
      stringArray0[4] = "`+qrz_G8rCQ)#18E";
      stringArray0[5] = "`+qrz_G8rCQ)#18E";
      String string1 = "java.lang.";
      stringArray0[6] = "java.lang.";
      try { 
        Utility.methodTypeToSignature("`+qrz_G8rCQ)#18E", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "MethodParameters", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = Utility.setBit(211, 211);
      assertEquals(524499, int0);
      
      String string0 = Utility.compactClassName("KBTi!=7Co", false);
      assertEquals("KBTi!=7Co", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "KBTi!=7Co";
      objectArray0[1] = (Object) "KBTi!=7Co";
      objectArray0[2] = (Object) "KBTi!=7Co";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "KBTi!=7Co";
      objectArray0[5] = (Object) "KBTi!=7Co";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "KBTi!=7Co";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)16;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c2 82 59 08 18 56 4e 32 10", string1);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("lreturn");
      Utility.signatureToString("J!'W", true);
      try { 
        Utility.methodSignatureReturnType("[*wzBQzP", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*wzBQzP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.isSet(57, 0);
      Utility.compactClassName("arraylength");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("arraylength", (String) null, "return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("H0#7i$mi/r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H0#7i$mi/r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      assertEquals(",Lm6-H8}r8z^O8k_2", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fmul", string1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FR8iwBrX~7bn1{L?");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_2", string1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = "Ljava/lang/T',5cR{89{o}ZSGN-?:;V";
      Utility.replace("Ljava/lang/T',5cR{89{o}ZSGN-?:;V", "Ljava/lang/T',5cR{89{o}ZSGN-?:;V", "Ljava/lang/T',5cR{89{o}ZSGN-?:;V");
      try { 
        Utility.methodSignatureReturnType("LEdzYw^'pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LEdzYw^'pa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Utility.convertString("0uV");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "0uV";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "0uV";
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("null, 0uV, null, 0uV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `null, 0uV, null, 0uV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Utility.convertString("V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)115;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)70;
      Utility.encode(byteArray0, false);
      Utility.convertString("$D$BsY$ffF");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)115;
      Utility.equals(byteArray0, byteArray1);
      String string0 = null;
      String string1 = "static";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "$D$BsY$ffF", "static", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Utility.convertString("Vx");
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      Utility.signatureToString("Vx", true);
      Utility.setBit(4711, 7);
      try { 
        Utility.methodSignatureArgumentTypes("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Utility.setBit(25, 25);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getfield", "lshl", "lshl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "0uV";
      Utility.convertString("0uV");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = "W";
      boolean boolean0 = false;
      int int0 = 105;
      int int1 = 243;
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Utility.replace("Ljava/lang/T',5cR{89{o}ZSGN-?:;V", "Ljava/lang/T',5cR{89{o}ZSGN-?:;V", "Ljava/lang/T',5cR{89{o}ZSGN-?:;V");
      try { 
        Utility.methodSignatureReturnType("TV.M=SSd`V\"$o(_(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TV.M=SSd`V\"$o(_(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      try { 
        Utility.methodSignatureReturnType("Qp {");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qp {'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int int0 = Utility.setBit(194, 194);
      assertEquals(198, int0);
      
      String string0 = Utility.methodSignatureReturnType("Ljava/lang/T',5cR{89Wo}}SGN-?:;V");
      assertEquals("T',5cR{89Wo}}SGN-?:", string0);
      
      String string1 = Utility.signatureToString("Invalid signature: `", true);
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = Utility.convertString("V");
      assertEquals("V", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string1);
      
      String string2 = Utility.signatureToString("CONSTANT_Double", true);
      assertEquals("char", string2);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("astore_3", "impdep1", "impdep1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("\"&:`QuOO");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.clearBit((byte) (-52), 1);
      MockFile mockFile0 = new MockFile("i2d", "i2d");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "static");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // static
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.getSignature("Ljava/lang/T',5cR{89Wo}}SfN-?:;V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.printArray((Object[]) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
      
      String string0 = Utility.methodTypeToSignature("", (String[]) null);
      assertEquals("()L;", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)40;
      byteArray0[1] = (byte)40;
      byte byte0 = Utility.typeOfSignature("L@uwm;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.methodSignatureReturnType("L@uwm;V");
      assertEquals("@uwm", string0);
      
      String string1 = Utility.accessToString((int) (byte)14, false);
      assertEquals("private protected static", string1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = "YW)s!|2pm?EE%h";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V", "V", "0D", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.convertString("\\");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byte byte1 = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("$N$f1$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.convertString("V");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = Utility.classOrInterface(62);
      assertEquals("class", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("bastore", string1);
      
      String string2 = Utility.getSignature("bastore");
      assertEquals("Lbastore;", string2);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("Wovm-OQO)DW");
      Utility.accessToString(82, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Wovm-OQO)DW";
      objectArray0[1] = (Object) "private final volatile";
      objectArray0[2] = (Object) "double";
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) "private final volatile";
      objectArray0[5] = (Object) "Wovm-OQO)DW";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      
      byte[] byteArray0 = Utility.decode("double", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)111, (byte)117, (byte)98, (byte)108, (byte)101}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("Wovm-OQO/DW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wovm-OQO/DW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.methodSignatureReturnType("SAME");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.accessToString(0, false);
      assertEquals("", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.methodSignatureReturnType("Wovm-OQO)DW");
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.decode("jsr_w", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.T',5cR{89Wo}}SGN-?:";
      stringArray0[1] = "breakpoint";
      stringArray0[2] = null;
      stringArray0[3] = "jsr_w";
      stringArray0[4] = null;
      stringArray0[5] = "jsr_w";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString(",ai<nk:D F<Li*[E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      assertEquals(",Lm6-H8}r8z^O8k_2", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ineg", string1);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable(1324, (byte)116, (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("58vrAIf,j`la9-(c", "ineg", "Clone Not Supported", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 58vrAIf,j`la9-(c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("iaload", string0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("<illegal opcode>", string1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.replace("nop", "nop", "\t\t<");
      try { 
        Utility.methodSignatureToString("xc4,4s?p;6nO'H{", "\t\t<", "nop", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xc4,4s?p;6nO'H{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = null;
      MockFile mockFile0 = new MockFile("Deprecated", "ow`(c");
      MockFile mockFile1 = new MockFile(mockFile0, "ow`(c");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "ow`(c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ow`(c\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "PuVi;; sJwoHt&7B";
      try { 
        Utility.typeOfSignature("PuVi;; sJwoHt&7B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PuVi;; sJwoHt&7B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Wovm-OQO)DW");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = ",Lm6-H8}r8z^O8k_2";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.compactClassName("S,L6-H8}r8^O8k_2");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "S,L6-H8}r8^O8k_2", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
      
      String string1 = Utility.replace("nop", "nop", "\t\t<");
      assertEquals("\t\t<", string1);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      String string2 = Utility.classOrInterface((-82));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = Utility.getSignature("\t(wide)");
      assertEquals("L(wide);", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = Utility.compactClassName("char");
      assertEquals("char", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)112;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$82$_$b6O$I$P$d5$94p", string1);
      
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('`');
      boolean boolean2 = Utility.equals(byteArray1, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1348, 1348);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      assertEquals(",Lm6-H8}r8z^O8k_2", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dreturn", string1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "f\\oa";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokespecial", (String) null, "foa", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokespecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("A9Z/R7bO|r-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A9Z/R7bO|r-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        Utility.typeOfMethodSignature("\t\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.skip((-1733L));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
      
      String string1 = Utility.compactClassName("class", "class", true);
      assertEquals("", string1);
      
      String string2 = Utility.compactClassName("int", true);
      assertEquals("int", string2);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";", "monitorenter", "uu@TX)`cO,K}uC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(22, false);
      assertEquals("private protected final", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.getSignature("");
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte)105;
      byteArray1[4] = (byte)111;
      byteArray1[5] = (byte) (-73);
      byteArray1[6] = (byte)80;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.isJavaIdentifierPart('t');
      try { 
        Utility.methodSignatureArgumentTypes("impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.getSignature("");
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      Utility.replace("L;", "", "L;");
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = "#pB56o0vOQae";
      Utility.replace(" arg", " arg", "#pB56o0vOQae");
      boolean boolean0 = false;
      boolean boolean1 = true;
      Utility.printArray((Object[]) null, false, true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("#pB56o0vOQae", stringArray0);
      try { 
        Utility.typeOfSignature(" ConstantUtf8 objects created");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  ConstantUtf8 objects created
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
      
      String string1 = Utility.compactClassName("class", "class", true);
      assertEquals("", string1);
      
      String string2 = Utility.compactClassName("int", true);
      assertEquals("int", string2);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("b2~N");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)91);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readShort();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.toHexString(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("vtp&zKk+V4!Y)A';");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) constantArray0);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.setBit((-478), 238);
      String string0 = "Deprecated";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'}H&C@3Y8\"ZZ", "Deprecated", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.setBit(236, 236);
      Utility.decode("", false);
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("bastore", string1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.classOrInterface(3);
      Utility.compactClassName("class", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("kU<A/5Ph@h~{", "class", false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.methodSignatureReturnType("I]?'g`~<GKS1EgZ");
      Utility.isJavaIdentifierPart('#');
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      assertEquals(",Lm6-H8}r8z^O8k_2", string0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('[');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, true);
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", (String) null);
      try { 
        MockFile.createTempFile("null", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.methodTypeToSignature(" not found: ", (String[]) null);
      Utility.format(3286, 3286, true, '\\');
      String string1 = Utility.fillup(" not found: ", 3286, true, 'B');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit((-1817), (-1817));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)95;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-74);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      Utility.decode("$e8$bc$e3$c4_$af$b6", false);
      Utility.compactClassName("$e8$bc$e3$c4_$af$b6");
      Utility.equals(byteArray1, byteArray0);
      Utility.decode("$e8$bc$e3$c4_$af$b6", false);
      String string0 = "hBpk=";
      try { 
        Utility.typeOfMethodSignature("hBpk=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hBpk=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)53;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)29, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      Utility.isJavaIdentifierPart('-');
      try { 
        Utility.methodSignatureArgumentTypes("'&.V5INCaAQ`;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '&.V5INCaAQ`;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Utility.getSignature("0D");
      Utility.signatureToString("L0D;", false);
      try { 
        Utility.methodSignatureReturnType("[*wzBQzP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*wzBQzP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = "Mpa6?V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mpa6?V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mpa6?V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Utility.printArray(objectArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('\u001F');
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("UAnijZ");
      constantArray0[0] = (Constant) constantUtf8_0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("'S4\"WbmV`O'>pn/dl5E", "'S4\"WbmV`O'>pn/dl5E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"'S4\"WbmV`O'>pn/dl5E\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      int int0 = new Integer(0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)48;
      byteArray0[17] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.methodTypeToSignature("~h>t}F", (String[]) null);
      assertEquals("()L~h>t}F;", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = Utility.replace(",Lm6-H8}r8z^O8k_2", ",Lm6-H8}r8z^O8k_2", ",Lm6-H8}r8z^O8k_2");
      assertEquals(",Lm6-H8}r8z^O8k_2", string0);
      
      int int0 = Utility.clearBit(1222, 1222);
      assertEquals(1158, int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",Lm6-H8}r8z^O8k_2";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{,Lm6-H8}r8z^O8k_2}", string1);
      
      String string2 = Utility.fillup(",Lm6-H8}r8z^O8k_2", 1222, true, '|');
      assertFalse(string2.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("The array of names must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      Utility.getSignature("RuntimeVisibleParameterAnnotations");
      Utility.getSignature("drem");
      Utility.getSignature("<nJ3[F$G`}@!N].");
      Utility.getSignature("j\\");
      boolean boolean0 = true;
      try { 
        Utility.decode("<nJ3[F$G`}@!N].", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = Utility.convertString("Themagic number must contain at least one byte");
      assertEquals("Themagic number must contain at least one byte", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.setBit(0, 0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.commons.io.filefilter.CanWriteFileFilter", "", "org.apache.commons.io.filefilter.CanWriteFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.CanWriteFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      int int0 = Utility.clearBit(553, 136);
      assertEquals(553, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CONSTANT_Class";
      stringArray0[1] = "CONSTANT_Class";
      stringArray0[2] = "CONSTANT_Class";
      stringArray0[3] = "CONSTANT_Class";
      stringArray0[4] = "CONSTANT_Class";
      stringArray0[5] = "CONSTANT_Class";
      stringArray0[6] = "CONSTANT_Class";
      stringArray0[7] = "CONSTANT_Class";
      String string0 = Utility.methodTypeToSignature("CONSTANT_Class", stringArray0);
      assertEquals("(LCONSTANT_Class;LCONSTANT_Class;LCONSTANT_Class;LCONSTANT_Class;LCONSTANT_Class;LCONSTANT_Class;LCONSTANT_Class;LCONSTANT_Class;)LCONSTANT_Class;", string0);
      
      String string1 = Utility.classOrInterface(2723);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = "ORA>l,cix&:t%";
      boolean boolean0 = false;
      Utility.decode("ORA>l,cix&:t%", false);
      try { 
        Utility.methodSignatureReturnType("ORA>l,cix&:t%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ORA>l,cix&:t%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("[kmY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [kmY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.setBit(0, 0);
      String string0 = "";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.getSignature("");
      String string0 = Utility.getSignature("byte");
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Utility.setBit((-3423), (-3423));
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Utility.compactClassName("UKEQNDY%ra\"_3S}*");
      // Undeclared exception!
      try { 
        Utility.replace("UKEQNDY%ra\"_3S}*", (String) null, "UKEQNDY%ra\"_3S}*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.clearBit((-2684), (-1887610585));
      Utility.printArray(objectArray0);
      Utility.convertString("coZ>f+6 {Nq(^\"[_X'H");
      Utility.classOrInterface((-1913351116));
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = Utility.getSignature(",Lm6-H8}r8z^O8k_2");
      assertEquals("L,Lm6-H8}r8z^O8k_2;", string0);
      
      String string1 = Utility.replace("H5xj@&:Wen", "L,Lm6-H8}r8z^O8k_2;", "H5xj@&:Wen");
      assertEquals("H5xj@&:Wen", string1);
      
      byte[] byteArray0 = Utility.decode("H5xj@&:Wen", false);
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("H5xj$40$s$3aW$7fen", string2);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      assertEquals(",Lm6-H8}r8z^O8k_2", string0);
      
      Utility.getSignature("");
      String string1 = Utility.getSignature(" entries\n");
      assertEquals("Lentries;", string1);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;", "L;", "L;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.classOrInterface(0);
      boolean boolean0 = true;
      Utility.compactClassName("class", true);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = "iand";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("iand");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-28);
      byteArray0[0] = (byte) (-28);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("a;U %Xa/$`", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("%|Q<M!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%|Q<M!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      int int0 = Utility.clearBit((-2684), 74);
      assertEquals((-3708), int0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)5;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("KZ$F", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.fillup(">SP#@(n\"y0m2EZ%M", 206, false, '0');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: ", "Invalid signature: ", "#hv'ypg-BY5[{NNf}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.classOrInterface((-1566));
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("G#wLVnX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G#wLVnX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      assertEquals(",Lm6-H8}r8z^O8k_2", string0);
      
      Utility.getSignature(",Lm6-H8}r8z^O8k_2");
      Utility.getSignature("L,Lm6-H8}r8z^O8k_2;");
      String string1 = Utility.getSignature("LL,Lm6-H8}r8z^O8k_2;;");
      assertEquals("LLL,Lm6-H8}r8z^O8k_2;;;", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)32;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-30);
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte) (-77);
      byteArray1[4] = (byte) (-77);
      byteArray1[5] = (byte) (-55);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-57);
      byteArray2[1] = (byte)1;
      String string2 = Utility.toHexString(byteArray2);
      assertEquals("c7 01", string2);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.accessToString(0);
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("'I+o`3J]MZ]cj[|q(", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals(17, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.setBit(0, 0);
      String string0 = "TU3Bv";
      Utility.fillup("TU3Bv", (-2005684283), false, '&');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("Dont call getValueFloat() on a non FLOAT ElementValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` on a non FLOAT ElementValue'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class", true);
      Utility.clearBit(0, 0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "class";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.setBit(185, (-254));
      boolean boolean0 = false;
      Utility.decode("", false);
      String string0 = "#A{AI5";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 197, false, ':');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int int0 = (-289);
      Utility.isSet((-289), (-289));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "saload", "org.apache.bcel.classfile.ConstantDouble", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.clearBit(84, 57);
      Utility.printArray(objectArray0);
      Utility.convertString("{java.lang.Object@12b75206, java.lang.Object@5ae23097, java.lang.Object@5a79bf9d, java.lang.Object@2481507b, java.lang.Object@c0e018f, java.lang.Object@4723ee11, java.lang.Object@50b1343f, java.lang.Object@7e1db4da, java.lang.Object@263d0ef, null}");
      try { 
        Utility.methodSignatureArgumentTypes("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      Utility.replace("H5xj@&:Wen", ",Lm6-H8}r8z^O8k_2", "H5xj@&:Wen");
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-119);
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class", false);
      try { 
        Utility.methodSignatureReturnType("EdR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EdR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.getSignature(">$@ S%FTQ?vz:u");
      boolean boolean0 = false;
      Utility.accessToString(66, false);
      Utility.format((-1355), 66, false, ',');
      int int0 = (-288);
      Utility.setBit(3349, (-288));
      try { 
        Utility.decode("YkgpCrU_2k`6@1.N[", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      int int0 = 146;
      Utility.isSet(16384, 146);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)29;
      File file0 = MockFile.createTempFile("Py2Be", "6Hcl0'+VuMu", (File) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.clearBit(57, (-2684));
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.setBit(0, 0);
      boolean boolean0 = false;
      Utility.decode("", false);
      Utility.fillup("#A{AI5", 0, false, ':');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, false, true);
      Utility.methodSignatureReturnType("F4>,&ULM}Hj^[");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("1|-,*Pe1NE2$)J/H~Bb", "XX=r", "\"java.lang.Object@4fdb6c69\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1|-,*Pe1NE2$)J/H~Bb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      int int0 = 0;
      Utility.setBit(0, 0);
      String string0 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      String string1 = "#A{AI5";
      Utility.fillup("#A{AI5", 0, false, ':');
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-127);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.compactClassName("TmL7MNb-jgVYj,");
      String string0 = Utility.compactClassName("TmL7MNb-jgVYj,", "Z", true);
      assertEquals("TmL7MNb-jgVYj,", string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = Utility.decode("", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("1d 1d 13 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1d 1d 13 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      Utility.clearBit(74, 74);
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.setBit(160, 160);
      Utility.decode("", false);
      Utility.fillup("checkcast", 512, false, '*');
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      Utility.printArray(objectArray0);
      Utility.accessToString(0);
      boolean boolean0 = true;
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Utility.isSet((-4058), 16384);
      String string0 = "}BNH?|KcQ#W B};1$A";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "}BNH?|KcQ#W B};1$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.decode("", false);
      Utility.fillup("#A{AI5", 0, false, ':');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "#A{AI5";
      objectArray0[1] = (Object) "#A{AI5";
      Utility.printArray(objectArray0, false, false);
      Utility.methodSignatureReturnType("Illegal type for StackMapType: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#A{AI5", "jky7n3?AP", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #A{AI5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Utility.accessToString(629);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.classOrInterface(7);
      Utility.classOrInterface(112);
      try { 
        Utility.methodSignatureToString("class", "c9", "c9", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Utility.searchOpcode("The list of prefixes must not be null");
      Utility.accessToString((int) (short) (-1), true);
      int int0 = 3927;
      Utility.isSet((short) (-1), 3927);
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private protected static final volatile transient native abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected static final volatile transient native abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = "Ed6c%{IPGZHS;D18";
      Utility.searchOpcode("Ed6c%{IPGZHS;D18");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Utility.getSignature(">$@ S%FTQ?vz:u");
      boolean boolean0 = false;
      Utility.accessToString(41, false);
      Utility.format((-1355), 41, false, ',');
      int int0 = (-288);
      Utility.setBit(3349, (-288));
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = "ayKcLO5^4U| %'xh+";
      // Undeclared exception!
      try { 
        Utility.signatureToString("ayKcLO5^4U| %'xh+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ayKcLO5^4U| %'xh+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("aload_2", 2548, true, 'h');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("1d cb e5 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1d cb e5 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      Utility.replace("H5xj@&:Wen", ",Lm6-H8}r8z^O8k_2", "H5xj@&:Wen");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = "^G";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("^G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("X#7:U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X#7:U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.clearBit(57, (-2684));
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      int int0 = 936;
      Utility.setBit(936, 936);
      try { 
        Utility.methodSignatureReturnType("if_icmpge", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpge'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = ",%~8\\|O'<<TcJE[/";
      // Undeclared exception!
      try { 
        Utility.getSignature(",%~8|O'<<TcJE[/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "{}";
      objectArray1[1] = (Object) "{}";
      objectArray1[2] = (Object) "{}";
      objectArray1[3] = (Object) "{}";
      Utility.printArray(objectArray1);
      int int0 = (-2425);
      Utility.accessToString((-2425));
      String string0 = "<";
      boolean boolean0 = true;
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      int int0 = Utility.setBit(53, 53);
      assertEquals(2097205, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) "int";
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{int, int}", string0);
      
      String string1 = Utility.classOrInterface(53);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-854), (-854), false, 'r');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)0;
      byte byte1 = (byte)106;
      byteArray0[6] = (byte)106;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, 'G');
      assertEquals("0", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)0;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.printArray((Object[]) null, true, true);
      String string0 = "java.lang.Float";
      try { 
        Utility.typeOfMethodSignature("java.lang.Float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Utility.setBit(1652, 96);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -122
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class", true);
      try { 
        Utility.methodSignatureReturnType("EdR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EdR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w");
      mockPrintWriter0.println();
      mockPrintWriter0.println(false);
      Locale locale0 = Locale.forLanguageTag("R*+JT51f");
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      Locale locale2 = Locale.forLanguageTag("h2c9^oqEJ{lQ $F");
      objectArray0[1] = object0;
      locale1.getDisplayCountry(locale2);
      objectArray0[2] = (Object) locale1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "w";
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale1, "/AgE`Y", objectArray0);
      mockPrintWriter0.append((CharSequence) "w", 0, 0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      String string0 = Utility.getSignature("87*W,9L0VdTF");
      assertEquals("L87*W,9L0VdTF;", string0);
      
      int int0 = Utility.clearBit((-1649), 0);
      assertEquals((-1650), int0);
      
      byte byte0 = Utility.typeOfSignature("Cp} ");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.fillup("lastore", 0, false, 'A');
      assertEquals("lastore", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = "B!!B";
      Utility.replace("B!!B", "tF)e", "B!!B");
      Utility.isSet((-1691), (-1691));
      Utility.accessToString((-1691));
      try { 
        Utility.methodSignatureArgumentTypes("public protected synchronized volatile native strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected synchronized volatile native strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, true);
      String string0 = null;
      String string1 = null;
      boolean boolean0 = false;
      int int0 = (-26);
      int int1 = (-967);
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[7];
      // Undeclared exception!
      try { 
        Constant.readConstant((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2^]*]^4");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ".`2.ek/\"l";
      objectArray0[1] = (Object) ".`2.ek/\"l";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "2^]*]^4";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) ".`2.ek/\"l";
      PrintWriter printWriter0 = mockPrintWriter0.printf(".`2.ek/\"l", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(7, objectArray0.length);
  }
}
