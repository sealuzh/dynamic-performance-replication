/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:35:53 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<Integer, Map<Object, String>>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<Integer, Map<Object, String>>>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<Object, Map<Object, Integer>> hashMap2 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap2);
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<HashMap<String, Integer>, Integer, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Integer>, Integer, Map<Object, String>>(hashMap0);
      Map<Integer, Map<Object, String>> map1 = doubleKeyMap1.remove(hashMap1);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Map<Integer, String>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Map<Integer, String>, HashMap<Object, Integer>>();
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, (Map<Integer, String>) hashMap1, hashMap2);
      Map<Map<Integer, String>, HashMap<Object, Integer>> map0 = doubleKeyMap0.remove(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>((Map<String, Map<Object, HashMap<Object, Object>>>) null);
      Integer integer0 = new Integer(3362);
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.remove((String) null, (Object) integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, Integer>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(class0);
      Map<Object, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Integer>, Object>();
      Object object0 = new Object();
      Map<HashMap<Object, Integer>, Object> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Object, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Map<Integer, String>>>();
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      HashMap<Object, Map<Integer, String>> hashMap1 = doubleKeyMap0.put((String) null, (Object) null, hashMap0);
      HashMap<Object, Map<Integer, String>> hashMap2 = doubleKeyMap0.put((String) null, (Object) null, hashMap1);
      assertSame(hashMap0, hashMap2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, Integer>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, Integer>();
      Integer integer0 = doubleKeyMap0.get((HashMap<Integer, String>) null, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      DoubleKeyMap<Object, HashMap<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, String>((Map<Object, Map<HashMap<Object, Object>, String>>) null);
      Map<HashMap<Object, Object>, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Integer integer0 = new Integer((-4058));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, integer0, "us.codecraft.webmagic.utils.DoubleKeyMap");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) "", object0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Map<Integer, String>, String>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Map<Integer, String>, String>, Integer>((Map<Integer, Map<HashMap<Map<Integer, String>, String>, Integer>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>((Map<Object, Map<Integer, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Integer, String>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, String>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put("{q", (Object) "{q", integer0);
      Object object0 = new Object();
      Integer integer1 = doubleKeyMap0.remove("{q", object0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<String, HashMap<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Integer>(class0);
      Integer integer0 = doubleKeyMap0.remove("", hashMap0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Integer, Map<Map<Integer, Integer>, HashMap<Object, String>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Map<Integer, Integer>, HashMap<Object, String>> doubleKeyMap2 = new DoubleKeyMap<Integer, Map<Integer, Integer>, HashMap<Object, String>>(map0, class0);
      Map<Map<Integer, Integer>, HashMap<Object, String>> map1 = doubleKeyMap2.get(integer0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, Integer>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<HashMap<Integer, Map<Integer, String>>, Map<Map<Integer, String>, HashMap<Object, Integer>>> hashMap0 = new HashMap<HashMap<Integer, Map<Integer, String>>, Map<Map<Integer, String>, HashMap<Object, Integer>>>();
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Map<Integer, String>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Map<Integer, String>, HashMap<Object, Integer>>(hashMap0, class0);
      HashMap<Integer, Map<Integer, String>> hashMap1 = new HashMap<Integer, Map<Integer, String>>();
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap1, (Map<Integer, String>) null, hashMap2);
      HashMap<Object, Integer> hashMap3 = doubleKeyMap0.get(hashMap1, (Map<Integer, String>) null);
      assertSame(hashMap3, hashMap2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put("{q", (Object) "{q", integer0);
      Integer integer1 = doubleKeyMap0.remove("{q", (Object) "{q");
      assertEquals((-1), (int)integer1);
  }
}
