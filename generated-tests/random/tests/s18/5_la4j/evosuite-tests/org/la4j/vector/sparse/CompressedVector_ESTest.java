/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 02:48:03 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[2];
      CompressedVector compressedVector0 = new CompressedVector(2386, (-134), doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-134), (-74));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(43);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(43, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(439, 1);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(439, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(626, 0.0, (Random) mockRandom0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(626, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2370);
      compressedVector0.iterator();
      assertEquals(2370, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) 541.4040074311706);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1390), 1038);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1390
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-1485), 0);
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.random(0, 0.0, (Random) mockRandom0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      boolean boolean0 = compressedVector0.nonZeroAt((-836));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2370);
      double double0 = compressedVector0.getOrElse(1, 179.02393);
      assertEquals(2370, compressedVector0.length());
      assertEquals(179.02393, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 3892);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.set(1383, 1882.3616705);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1383' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1452, 1452);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1809, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1809' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("w]@DGU%\"rB+H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 501);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("#mlH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-557));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -557
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1073741824
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.non(vectorPredicate0);
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(439, 1);
      compressedVector0.setAll(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(439, 1);
      compressedVector0.setAll(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8.0, 1217.17698228, Double.POSITIVE_INFINITY, (double)1, (-1262.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1362.40072);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("-1,362.401, 0, 0", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(48);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(928.2148, (-1080.942778369444), (double)48, 928.2148, (-1080.942778369444)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.subtract((Vector) compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(1, 1480);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1480.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(32, (-836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -836.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1467.44515917216;
      doubleArray0[1] = 3335.11245317;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1467.44515917216).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-1811), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(sparseVector0, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[9];
      intArray0[0] = 2070;
      CompressedVector compressedVector0 = new CompressedVector(2070, 1, doubleArray0, intArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1628.0589;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = 129.2258735825461;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(7, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(48);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(928.2148, (-1080.942778369444), (double)48, 928.2148, (-1080.942778369444)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(16, vectorFunction1);
      assertEquals(0.9791666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000, 640);
      compressedVector0.set(640, 1000);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2083, 434);
      compressedVector0.min();
      assertEquals(2083, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1178.109700126259);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.sum();
      assertEquals((-1178.109700126259), double0, 0.01);
      assertEquals(6, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1452, 1452);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(731);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(731, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1362.40072);
      doubleArray0[1] = 541.4040074311706;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-693), 1);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2370);
      compressedVector0.setAll(2370);
      compressedVector0.swapElements(18, 285);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(1907, (-121));
      assertEquals(0.2, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 541.4040074311706;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-693), 1);
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 164.11727048;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(4, 3665);
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000, 640);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(1000, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(2514.0017905);
      assertEquals(6, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      compressedVector0.setAll(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(45);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-147.0), 0.0, (-1.0), 2.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      Vector vector0 = compressedVector0.blankOfLength(45);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(0.06666666666666667, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = Integer.getInteger("", 27);
      Double double0 = new Double(27);
      hashMap0.put(integer0, double0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1181);
      compressedVector0.set(9, 1181);
      assertEquals(0.001693480101608806, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(2458);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(3032);
      Long long0 = new Long(3032);
      hashMap0.put(integer0, long0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1752);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = Integer.getInteger("", (-1006));
      Long long0 = new Long(0L);
      hashMap0.put(integer0, long0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 471);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(6);
      Double double0 = new Double(563.4265);
      hashMap0.put(integer0, double0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1000);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      byte[] byteArray0 = ((CompressedVector) sparseVector0).toBinary();
      CompressedVector compressedVector0 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(25, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(5, 5);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)5, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CompressedVector.random(763, (double) 763, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1515);
      CompressedVector compressedVector0 = CompressedVector.random(1515, 1.0, (Random) mockRandom0);
      assertEquals(1515, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(553);
      // Undeclared exception!
      try { 
        CompressedVector.random(553, (-1661.0597510533587), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("-1,362.401, 541.404, 74.095");
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(364, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 48);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(48, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(439, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8.0, 1217.17698228, Double.POSITIVE_INFINITY, (double)1, (-1262.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(439, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2370);
      compressedVector0.nonZeroIterator();
      assertEquals(2370, compressedVector0.length());
  }
}
