/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:56:51 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.7597054511497845E-4);
      String string0 = rationalNumber0.toString();
      assertEquals("1/5683 (0)", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.759634E-4F, float0, 0.01F);
      assertEquals(1.7596339961288053E-4, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1L), long0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483630);
      assertEquals(2.14748363E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483630, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836463905766E9));
      assertEquals((-2.147483646E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.2222222216660157E-4);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(3.2221685194135655E-4, double0, 0.01);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1575.24992551146);
      String string0 = rationalNumber0.toString();
      assertEquals("6301/4 (1,575.25)", string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = new RationalNumber((-6301), (-6301));
      double double0 = rationalNumber1.doubleValue();
      assertEquals((-1575.25), double0, 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(0L, 4);
      assertEquals(0L, rationalNumber3.longValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4429L, 4429L);
      assertEquals(1, rationalNumber0.divisor);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2447.6));
      assertEquals((-12238), rationalNumber1.numerator);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3250.8);
      assertEquals(16254, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1260), 322);
      long long0 = rationalNumber0.longValue();
      assertEquals((-3L), long0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-1260/322 (-3.913)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-970L), (-970L));
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(23L, 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2142914533, 2144557920);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0.999", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.99923366F, float0, 0.01F);
      assertEquals(0.9992336942804511, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber.valueOf(Integer.MAX_VALUE);
      RationalNumber rationalNumber0 = RationalNumber.valueOf(Integer.MAX_VALUE);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483653L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483653, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(964L, 964L);
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483656L, (-176L));
      rationalNumber0.intValue();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      rationalNumber2.negate();
      assertEquals(1.2201611681818182E7, rationalNumber2.doubleValue(), 0.01);
      
      rationalNumber0.doubleValue();
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      RationalNumber.factoryMethod((-22), 1);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(0L, 2147483656L);
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("0", string1);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-290L), (-929L));
      assertEquals(0.31216361679224974, rationalNumber4.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483688L));
      assertEquals(4.656612959813568E-10, rationalNumber1.doubleValue(), 0.01);
      assertEquals(2147483608, rationalNumber1.divisor);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1/100000000 (0)", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1);
      assertEquals(1, rationalNumber2.numerator);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-2147483688L));
      assertEquals((-2.147483647E9), rationalNumber3.doubleValue(), 0.01);
  }
}
