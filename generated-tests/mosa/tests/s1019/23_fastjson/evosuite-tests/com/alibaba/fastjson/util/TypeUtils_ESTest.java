/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:01:03 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.StringCodec;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.Point;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(object0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("IJbz~z%]2^|hB");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      TypeUtils.castToBigDecimal(bigInteger0);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<InstantiationError> class0 = InstantiationError.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      TypeUtils.toLocale("o");
      Locale locale0 = TypeUtils.toLocale("xl+O0");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(type0);
      TypeUtils.loadClass((String) null, (ClassLoader) null);
      Properties properties0 = new Properties();
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      boolean boolean0 = false;
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      String string0 = TypeUtils.decapitalize("j");
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.testdata.FileSystemHandling@5886caac
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      Class<Double> class0 = Double.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getType();
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      Locale locale0 = Locale.UK;
      boolean boolean1 = TypeUtils.isHibernateInitialized(locale0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Byte byte1 = new Byte((byte)42);
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      
      WeakHashMap<JavaBeanDeserializer, SimpleTimeZone> weakHashMap0 = new WeakHashMap<JavaBeanDeserializer, SimpleTimeZone>();
      boolean boolean1 = TypeUtils.isHibernateInitialized(weakHashMap0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.castToLong((Object) null);
      LinkedHashSet<BufferCapabilities> linkedHashSet0 = new LinkedHashSet<BufferCapabilities>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashSet0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<?> class0 = TypeUtils.getClassFromMapping("^9*x>dXW");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TreeMap<Integer, MockMinguoDate> treeMap0 = new TreeMap<Integer, MockMinguoDate>();
      TypeUtils.isHibernateInitialized(treeMap0);
      Integer integer0 = new Integer(120);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<?> class1 = TypeUtils.loadClass("L");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Random.setNextRandom((-543));
      TypeUtils.decapitalize("(I)C");
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.getClassFromMapping("L");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      TypeUtils.loadClass("/Date(", (ClassLoader) aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      boolean boolean0 = TypeUtils.isHibernateInitialized(")Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      TypeUtils.loadClass((String) null, classLoader1, false);
      Class<NumberFormatException> class0 = NumberFormatException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, " !%Wa0&3YmRJPc3w", fieldArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(" !%Wa0&3YmRJPc3w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value :  !%Wa0&3YmRJPc3w
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Double double0 = new Double((-1804.9998255003));
      Class<Double> class0 = Double.class;
      TypeUtils.castToJavaBean((Object) double0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      StackOverflowError stackOverflowError0 = new StackOverflowError("fastjson.parser.autoTypeAccept");
      PriorityQueue<IllegalAccessException> priorityQueue0 = new PriorityQueue<IllegalAccessException>();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>(weakHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, weakHashMap1, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<OptionalCodec> class0 = OptionalCodec.class;
      Class<MockCalendar> class1 = MockCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class0;
      Type type0 = TypeUtils.getGenericParamType(typeArray0[1]);
      assertNull(type0);
      
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.deny");
      assertEquals("fastjson.parser.deny", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = Byte.compare((byte)2, (byte) (-1));
      assertEquals(3, int0);
      
      Class<Point> class0 = Point.class;
      int int1 = Byte.compare((byte)2, (byte)2);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = DateFormat.SHORT;
      assertEquals(3, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      long long0 = Byte.toUnsignedLong((byte) (-1));
      assertEquals(255L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "/|(dk 1MgV$DC]4";
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("/|(dk 1MgV$DC]4");
      assertEquals("/|(dk 1MgV$DC]4", noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError: /|(dk 1MgV$DC]4", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      String string1 = noSuchFieldError0.getLocalizedMessage();
      assertEquals("/|(dk 1MgV$DC]4", noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError: /|(dk 1MgV$DC]4", noSuchFieldError0.toString());
      assertEquals("/|(dk 1MgV$DC]4", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(noSuchFieldError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("can not cast to char, value : ");
      assertFalse(boolean0);
      
      Class<InstantiationError> class0 = InstantiationError.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("can not cast to char, value : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Rectangle", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class0);
      assertSame(classLoader0, classLoader1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("7|b3~:FoF%H-ycmM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 7|b3~:FoF%H-ycmM
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("width");
      assertEquals((-2604543402434238017L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      InterruptedException interruptedException0 = new InterruptedException("width");
      assertEquals("width", interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException: width", interruptedException0.toString());
      assertNotNull(interruptedException0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Float float0 = new Float((float) (-2604543402434238017L));
      assertEquals((-2.60454348E18F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ConcurrentHashMap<MockMinguoDate, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<MockMinguoDate, NoSuchMethodException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Type[] typeArray0 = new Type[5];
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertNotNull(class0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("raq=vePLSIFp<ei>+");
      assertEquals(778739937266286466L, long0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = Byte.compare((byte)124, (byte)41);
      assertEquals(83, int0);
      
      int int1 = Byte.toUnsignedInt((byte) (-1));
      assertEquals(255, int1);
      assertFalse(int1 == int0);
      
      long long1 = Byte.toUnsignedLong((byte) (-59));
      assertEquals(197L, long1);
      assertFalse(long1 == long0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Point> class1 = Point.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) list0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("O");
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("6d[^3WqM", "O");
      assertNull(string0);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "O", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("TLjava.awt.Rectangle", classLoader0);
      assertNull(class0);
      assertSame(classLoader0, classLoader1);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("width");
      assertEquals((-2604543402434238017L), long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("width");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      InterruptedException interruptedException0 = new InterruptedException("iL3ytO]5");
      assertEquals("java.lang.InterruptedException: iL3ytO]5", interruptedException0.toString());
      assertEquals("iL3ytO]5", interruptedException0.getMessage());
      assertNotNull(interruptedException0);
      
      StackTraceElement[] stackTraceElementArray0 = interruptedException0.getStackTrace();
      assertEquals("java.lang.InterruptedException: iL3ytO]5", interruptedException0.toString());
      assertEquals("iL3ytO]5", interruptedException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("u, 5?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : u, 5?
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Double double0 = new Double((-1804.9998255003));
      assertEquals((-1804.9998255003), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[2];
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      typeArray0[0] = type0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<BitSet> class0 = BitSet.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, true);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("fP5:0-LH*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fP5:0-LH*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      assertEquals(0, treeMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertEquals(0, treeMap0.size());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.text.DecimalFormatSymbols", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertEquals(0, treeMap0.size());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.text.DecimalFormatSymbols", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(javaBeanSerializer0);
      assertEquals(0, treeMap0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = TypeUtils.castToLong(float0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      String string0 = "nextException";
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("r(riMz9*9rBx`", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(boolean0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      Timestamp timestamp0 = new Timestamp(4087L);
      assertEquals("1970-01-01 00:00:04.087", timestamp0.toString());
      assertEquals(87000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      numberFormatException0.printStackTrace();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertEquals(1, jobAttributes0.getCopies());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertNull(jobAttributes0.getFileName());
      assertNotNull(jobAttributes0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(jobAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=null,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(boolean0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t`j+0_0}Z)7|;@8eNw");
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      Throwable throwable0 = noSuchMethodError0.initCause(sQLTransientConnectionException0);
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.lang.NoSuchMethodError", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertNotNull(throwable0);
      assertSame(noSuchMethodError0, throwable0);
      assertSame(throwable0, noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("t`j+0_0}Z)7|;@8eNw", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getClassName());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals((-257), stackTraceElement0.getLineNumber());
      assertEquals("t`j+0_0}Z)7|;@8eNw.t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement0.toString());
      assertEquals("L", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("J*V/|E6wFyk(=g@ ", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("J*V/|E6wFyk(=g@ .t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement1.toString());
      assertEquals("J*V/|E6wFyk(=g@ ", stackTraceElement1.getClassName());
      assertEquals("L", stackTraceElement1.getFileName());
      assertEquals((-257), stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("$F1[&8NLGw/s!++h5", "L", "L", (-257));
      assertEquals("L", stackTraceElement2.getFileName());
      assertEquals((-257), stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("$F1[&8NLGw/s!++h5", stackTraceElement2.getClassName());
      assertEquals("L", stackTraceElement2.getMethodName());
      assertEquals("$F1[&8NLGw/s!++h5.L(L)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("iterator", "ZM[~MHOK iO]T", "LQb", 1934);
      assertEquals("iterator.ZM[~MHOK iO]T(LQb:1934)", stackTraceElement3.toString());
      assertEquals(1934, stackTraceElement3.getLineNumber());
      assertEquals("ZM[~MHOK iO]T", stackTraceElement3.getMethodName());
      assertEquals("iterator", stackTraceElement3.getClassName());
      assertEquals("LQb", stackTraceElement3.getFileName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("$F1[&8NLGw/s!++h5", "#z0m/})hkIGf", "[short", (-1795297870));
      assertEquals("$F1[&8NLGw/s!++h5.#z0m/})hkIGf([short)", stackTraceElement4.toString());
      assertEquals("$F1[&8NLGw/s!++h5", stackTraceElement4.getClassName());
      assertEquals("[short", stackTraceElement4.getFileName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals((-1795297870), stackTraceElement4.getLineNumber());
      assertEquals("#z0m/})hkIGf", stackTraceElement4.getMethodName());
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      noSuchMethodError0.setStackTrace(stackTraceElementArray0);
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertSame(noSuchMethodError0, throwable0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodError0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<Object> class0 = Object.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      InterruptedException interruptedException0 = new InterruptedException("=]l1XG4z}r;1");
      assertEquals("=]l1XG4z}r;1", interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException: =]l1XG4z}r;1", interruptedException0.toString());
      assertNotNull(interruptedException0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", (ClassLoader) aSMClassLoader0);
      assertNull(class1);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      MockDate mockDate0 = new MockDate(3730752432285826863L);
      assertEquals("Sat Apr 05 07:23:46 GMT 118224808", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockDate0);
      assertEquals("Sat Apr 05 07:23:46 GMT 118224808", mockDate0.toString());
      assertEquals("118224808-04-05 07:23:46.863", timestamp0.toString());
      assertEquals(863000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@fd64e825
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("o", "0", "0", (byte) (-103));
      assertEquals("0", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("o.0(0)", stackTraceElement0.toString());
      assertEquals((-103), stackTraceElement0.getLineNumber());
      assertEquals("o", stackTraceElement0.getClassName());
      assertEquals("0", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("J*V/|E6wFyk(=g@ ", "o", "}~=3oFcEe*]v", (byte)2);
      assertEquals(2, stackTraceElement1.getLineNumber());
      assertEquals("o", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("J*V/|E6wFyk(=g@ .o(}~=3oFcEe*]v:2)", stackTraceElement1.toString());
      assertEquals("J*V/|E6wFyk(=g@ ", stackTraceElement1.getClassName());
      assertEquals("}~=3oFcEe*]v", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "J*V/|E6wFyk(=g@ ", (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchMethodError0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("BH<7B", "eU");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("_/T%2_`)U7Gh{t28", "6d[^3WqM");
      assertNull(string1);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      String string2 = weakHashMap1.put("JZeQ?M`m4j", (String) null);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNull(string2);
      assertNotSame(weakHashMap1, weakHashMap0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      Throwable throwable0 = numberFormatException0.fillInStackTrace();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.NumberFormatException", throwable0.toString());
      assertNotNull(throwable0);
      assertSame(numberFormatException0, throwable0);
      assertSame(throwable0, numberFormatException0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      boolean boolean1 = weakHashMap0.containsKey("isfillInStackTrace");
      assertFalse(boolean1);
      assertFalse(weakHashMap0.equals((Object)weakHashMap1));
      assertNotSame(weakHashMap0, weakHashMap1);
      
      String string3 = weakHashMap1.put("mDh-NPraBKo", (String) null);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNull(string3);
      assertNotSame(weakHashMap1, weakHashMap0);
      
      Class<Properties> class0 = Properties.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap1, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(list0);
      assertNotSame(weakHashMap1, weakHashMap0);
      
      LinkageError linkageError0 = new LinkageError("Ao=v&yCa\" mv=hz\"mw", throwable0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.NumberFormatException", throwable0.toString());
      assertEquals("java.lang.LinkageError: Ao=v&yCa\" mv=hz\"mw", linkageError0.toString());
      assertEquals("Ao=v&yCa\" mv=hz\"mw", linkageError0.getMessage());
      assertNotNull(linkageError0);
      
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      JavaBeanSerializer javaBeanSerializer1 = null;
      try {
        javaBeanSerializer1 = new JavaBeanSerializer((SerializeBeanInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(boolean0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t`j+0_0}Z)7|;@8eNw");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      Throwable throwable0 = noSuchMethodError0.initCause(sQLTransientConnectionException0);
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertNotNull(throwable0);
      assertSame(noSuchMethodError0, throwable0);
      assertSame(throwable0, noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("t`j+0_0}Z)7|;@8eNw", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getClassName());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getMethodName());
      assertEquals((-257), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("t`j+0_0}Z)7|;@8eNw.t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement0.toString());
      assertEquals("L", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("J*V/|E6wFyk(=g@ ", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertEquals("L", stackTraceElement1.getFileName());
      assertEquals("J*V/|E6wFyk(=g@ .t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement1.toString());
      assertEquals("J*V/|E6wFyk(=g@ ", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals((-257), stackTraceElement1.getLineNumber());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class1);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum com.alibaba.fastjson.PropertyNamingStrategy error, value : {\"infinite\":{},\"NaN\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("getfillInStackTrace");
      assertEquals("getfillInStackTrace", numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException: getfillInStackTrace", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      boolean boolean0 = weakHashMap0.containsKey(".000000");
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      String string0 = weakHashMap1.put((String) null, "M$,nOg!|}");
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNull(string0);
      assertNotSame(weakHashMap1, weakHashMap0);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      Jdk8DateCodec jdk8DateCodec0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(jdk8DateCodec0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getfillInStackTrace", (String) null, 7);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(7, sQLTimeoutException0.getErrorCode());
      assertEquals("getfillInStackTrace", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: getfillInStackTrace", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      Throwable[] throwableArray0 = sQLTimeoutException0.getSuppressed();
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(7, sQLTimeoutException0.getErrorCode());
      assertEquals("getfillInStackTrace", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: getfillInStackTrace", sQLTimeoutException0.toString());
      assertNotNull(throwableArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTimeoutException: getfillInStackTrace
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(true);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      Byte byte0 = new Byte((byte)22);
      assertEquals((byte)22, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = TypeUtils.castToByte(byte0);
      assertEquals((byte)22, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      Class<Double> class1 = Double.TYPE;
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      typeArray0[8] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[5]);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@4ce578f6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(throwableDeserializer0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("getExtensionKeys", numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertEquals("java.lang.TypeNotPresentException: Type getExtensionKeys not present", typeNotPresentException0.toString());
      assertEquals("getExtensionKeys", typeNotPresentException0.typeName());
      assertEquals("Type getExtensionKeys not present", typeNotPresentException0.getMessage());
      assertNotNull(typeNotPresentException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.parser.deserializer.OptionalCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "/Date(";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("/Date(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[3] = (Type) class1;
      TreeMap<PropertyProcessableDeserializer, MockMinguoDate> treeMap0 = new TreeMap<PropertyProcessableDeserializer, MockMinguoDate>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class2.toString());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32)}, byteArray0);
      assertEquals((short) (-32), bigInteger0.shortValue());
      assertEquals((byte) (-32), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32)}, byteArray0);
      assertEquals((byte) (-32), bigInteger1.byteValue());
      assertEquals((short) (-32), bigInteger1.shortValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      assertArrayEquals(new byte[] {(byte) (-32)}, byteArray0);
      assertEquals((short) (-32), bigInteger0.shortValue());
      assertEquals((byte) (-32), bigInteger0.byteValue());
      assertEquals((byte) (-32), bigInteger1.byteValue());
      assertEquals((short) (-32), bigInteger1.shortValue());
      assertEquals((short)32, bigInteger2.shortValue());
      assertEquals((byte)32, bigInteger2.byteValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger1);
      assertArrayEquals(new byte[] {(byte) (-32)}, byteArray0);
      assertEquals((byte) (-32), bigInteger1.byteValue());
      assertEquals((short) (-32), bigInteger1.shortValue());
      assertEquals((byte) (-32), bigDecimal0.byteValue());
      assertEquals((short) (-32), bigDecimal0.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigDecimal0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      Class<Short> class2 = Short.TYPE;
      assertTrue(class2.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class2);
      assertTrue(class2.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Float float0 = new Float((float) (byte) (-32));
      assertEquals((-32.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ConcurrentHashMap<MockMinguoDate, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<MockMinguoDate, NoSuchMethodException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Type type0 = TypeUtils.unwrapOptional(typeArray0[0]);
      assertNull(type0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, (Type) null);
      assertTrue(class2.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<BitSet> class0 = BitSet.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertNotNull(javaBeanInfo0);
      
      MockGregorianCalendar mockGregorianCalendar0 = TypeUtils.cast((Object) null, (Type) javaBeanInfo0.clazz, (ParserConfig) null);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertNull(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((MockThaiBuddhistDate) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Short short0 = TypeUtils.castToShort(float0);
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("getExtensionKeys", numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertEquals("java.lang.TypeNotPresentException: Type getExtensionKeys not present", typeNotPresentException0.toString());
      assertEquals("getExtensionKeys", typeNotPresentException0.typeName());
      assertEquals("Type getExtensionKeys not present", typeNotPresentException0.getMessage());
      assertNotNull(typeNotPresentException0);
      
      java.util.IdentityHashMap<NoClassDefFoundError, Short> identityHashMap0 = new java.util.IdentityHashMap<NoClassDefFoundError, Short>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNull(noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(typeArray0[2]);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(typeArray0[5]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      ConcurrentHashMap<MockMinguoDate, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<MockMinguoDate, NoSuchMethodException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ParserConfig parserConfig2 = new ParserConfig();
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertNotNull(parserConfig2);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("e=If", "mDh-NPraBKo");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("sJLqST", "sJLqST");
      assertNull(string1);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      NumberFormatException numberFormatException1 = new NumberFormatException("fi");
      assertEquals("java.lang.NumberFormatException: fi", numberFormatException1.toString());
      assertEquals("fi", numberFormatException1.getMessage());
      assertFalse(numberFormatException1.equals((Object)numberFormatException0));
      assertNotNull(numberFormatException1);
      
      Throwable throwable0 = numberFormatException1.fillInStackTrace();
      assertEquals("java.lang.NumberFormatException: fi", numberFormatException1.toString());
      assertEquals("fi", numberFormatException1.getMessage());
      assertEquals("java.lang.NumberFormatException: fi", throwable0.toString());
      assertEquals("fi", throwable0.getMessage());
      assertFalse(numberFormatException1.equals((Object)numberFormatException0));
      assertFalse(throwable0.equals((Object)numberFormatException0));
      assertNotNull(throwable0);
      assertNotSame(numberFormatException1, numberFormatException0);
      assertSame(numberFormatException1, throwable0);
      assertNotSame(throwable0, numberFormatException0);
      assertSame(throwable0, numberFormatException1);
      
      String string2 = weakHashMap0.put("suppressedExceptions", "\"h]buVBq~mPW6Tx0DZ");
      assertNull(string2);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
      
      boolean boolean0 = weakHashMap0.containsKey(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertFalse(boolean0);
      
      String string3 = File.pathSeparator;
      assertEquals(":", string3);
      assertNotNull(string3);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.RBTableBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.OptionalCodec", class1.toString());
      assertNotNull(class1);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
      
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals("class java.sql.SQLClientInfoException", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.equals((Object)class1));
      assertNotNull(class3);
      assertNotSame(class3, class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("expect string");
      assertEquals((-3842580594467398639L), long0);
      
      Timestamp timestamp0 = new Timestamp((-3842580594467398639L));
      assertEquals(361000000, timestamp0.getNanos());
      assertEquals("121762063-08-28 00:50:01.361", timestamp0.toString());
      assertNotNull(timestamp0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      numberFormatException0.printStackTrace();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("expect string");
      assertArrayEquals(new byte[] {(byte)123, (byte)26, (byte)94, (byte) (-1), (byte) (-1), (byte) (-20), (byte) (-74), (byte) (-72), (byte) (-89)}, byteArray0);
      assertNotNull(byteArray0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("expect string");
      assertEquals((-3842580594467398639L), long0);
      
      Timestamp timestamp0 = new Timestamp((-3842580594467398639L));
      assertEquals("121762063-08-28 00:50:01.361", timestamp0.toString());
      assertEquals(361000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      numberFormatException0.printStackTrace();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)42;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)42}, byteArray0);
      assertEquals((byte)42, bigInteger0.byteValue());
      assertEquals((short)7210, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)42}, byteArray0);
      assertEquals((byte)42, bigInteger1.byteValue());
      assertEquals((short)7210, bigInteger1.shortValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      assertArrayEquals(new byte[] {(byte)28, (byte)42}, byteArray0);
      assertEquals((byte)42, bigInteger0.byteValue());
      assertEquals((short)7210, bigInteger0.shortValue());
      assertEquals((byte)42, bigInteger1.byteValue());
      assertEquals((short)7210, bigInteger1.shortValue());
      assertEquals((byte)42, bigInteger2.byteValue());
      assertEquals((short)7210, bigInteger2.shortValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      java.util.IdentityHashMap<MockMinguoDate, TimeDeserializer> identityHashMap0 = new java.util.IdentityHashMap<MockMinguoDate, TimeDeserializer>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNull(bigDecimal0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(1840);
      assertEquals(1840, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(integer0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.autoTypeSupport", "fP5:0-LH*", "<X4\"T2E#((:rxF", 1107297537);
      assertEquals(1107297537, stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.autoTypeSupport", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("fastjson.parser.autoTypeSupport.fP5:0-LH*(<X4\"T2E#((:rxF:1107297537)", stackTraceElement0.toString());
      assertEquals("fP5:0-LH*", stackTraceElement0.getMethodName());
      assertEquals("<X4\"T2E#((:rxF", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement(";Ljava/lang/Object;I)Z", "get", "A| !t?", 1107297537);
      assertEquals(";Ljava/lang/Object;I)Z", stackTraceElement1.getClassName());
      assertEquals(1107297537, stackTraceElement1.getLineNumber());
      assertEquals("get", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("A| !t?", stackTraceElement1.getFileName());
      assertEquals(";Ljava/lang/Object;I)Z.get(A| !t?:1107297537)", stackTraceElement1.toString());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ConcurrentHashMap<MockMinguoDate, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<MockMinguoDate, NoSuchMethodException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertNull(type0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[5] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(parameterizedTypeImpl0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(typeArray0[2]);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("6d[^3WqM", "6d[^3WqM");
      assertNull(string0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      boolean boolean1 = weakHashMap0.containsKey(numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Date date0 = new Date((-2124L));
      assertNotNull(date0);
      
      boolean boolean2 = weakHashMap0.containsKey(date0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = TypeUtils.isPath(class0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("=lJp\"`H {n:iPA.1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Collator> class0 = Collator.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, true);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      ParameterizedType parameterizedType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = Byte.compare((byte)2, (byte) (-1));
      assertEquals(3, int0);
      
      int int1 = Byte.compare((byte)19, (byte)19);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = DateFormat.SHORT;
      assertEquals(3, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("serialVersionUID");
      assertEquals("serialVersionUID", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "minIntegerDigits");
      assertEquals("serialVersionUID", threadGroup0.getName());
      assertEquals("minIntegerDigits", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread(threadGroup1, "serialVersionUID");
      assertEquals("serialVersionUID", threadGroup0.getName());
      assertEquals("minIntegerDigits", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals("serialVersionUID", threadGroup0.getName());
      assertEquals("minIntegerDigits", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(classLoader0);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      
      Class<?> class0 = TypeUtils.loadClass("minIntegerDigits", classLoader0);
      assertEquals("serialVersionUID", threadGroup0.getName());
      assertEquals("minIntegerDigits", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(class0);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      
      Class<?> class1 = TypeUtils.loadClass("serialVersionUID", classLoader0, false);
      assertEquals("serialVersionUID", threadGroup0.getName());
      assertEquals("minIntegerDigits", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(class1);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.compare((byte)52, (byte)25);
      assertEquals(27, int0);
      
      int int1 = Byte.toUnsignedInt((byte)2);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      long long0 = Byte.toUnsignedLong((byte) (-43));
      assertEquals(213L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<Point> class0 = Point.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "o", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(throwableDeserializer0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      boolean boolean0 = TypeUtils.isGenericParamType(typeArray0[0]);
      assertFalse(boolean0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ConcurrentHashMap<MockMinguoDate, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<MockMinguoDate, NoSuchMethodException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertTrue(parameterizedTypeImpl0.equals((Object)parameterizedTypeImpl1));
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertFalse(parameterizedTypeImpl2.equals((Object)parameterizedTypeImpl0));
      assertFalse(parameterizedTypeImpl2.equals((Object)parameterizedTypeImpl1));
      assertNotNull(parameterizedTypeImpl2);
      
      ParserConfig parserConfig2 = new ParserConfig();
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.fieldBased);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertNotNull(parserConfig2);
      
      DataTruncation dataTruncation0 = new DataTruncation(122, false, false, (-1934760498), 122);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.DataTruncation -> com.alibaba.fastjson.parser.deserializer.OptionalCodec
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Dimension dimension0 = new Dimension((-1), (-1));
      assertEquals((-1.0), dimension0.getHeight(), 0.01);
      assertEquals((-1.0), dimension0.getWidth(), 0.01);
      assertEquals((-1), dimension0.width);
      assertEquals((-1), dimension0.height);
      assertNotNull(dimension0);
      
      LinkedHashMap<SQLIntegrityConstraintViolationException, AtomicLong> linkedHashMap0 = new LinkedHashMap<SQLIntegrityConstraintViolationException, AtomicLong>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      linkedHashMap0.clear();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "kotlin.ranges.LongRange");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("kotlin.ranges.LongRange", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      AtomicLong atomicLong0 = linkedHashMap0.put(sQLIntegrityConstraintViolationException0, (AtomicLong) null);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("kotlin.ranges.LongRange", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(atomicLong0);
      
      Class<IllegalThreadStateException> class1 = IllegalThreadStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) linkedHashMap0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<BitSet> class0 = BitSet.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertNotNull(javaBeanInfo0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("iterator", "fP5:0-LH*", "<X4\"T2E#((:rxF", 1107297537);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("iterator.fP5:0-LH*(<X4\"T2E#((:rxF:1107297537)", stackTraceElement0.toString());
      assertEquals("fP5:0-LH*", stackTraceElement0.getMethodName());
      assertEquals("iterator", stackTraceElement0.getClassName());
      assertEquals("<X4\"T2E#((:rxF", stackTraceElement0.getFileName());
      assertEquals(1107297537, stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement(";Ljava/lang/Object;I)Z", "fastjson.parser.autoTypeAccept", "A|.!t?", 1107297537);
      assertEquals(";Ljava/lang/Object;I)Z.fastjson.parser.autoTypeAccept(A|.!t?:1107297537)", stackTraceElement1.toString());
      assertEquals(1107297537, stackTraceElement1.getLineNumber());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement1.getMethodName());
      assertEquals(";Ljava/lang/Object;I)Z", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("A|.!t?", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport", (ClassLoader) aSMDeserializerFactory1.classLoader);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNull(class1);
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      
      java.util.Date date0 = TypeUtils.castToDate(float0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("getfillInStackTrace");
      assertEquals("java.lang.NumberFormatException: getfillInStackTrace", numberFormatException0.toString());
      assertEquals("getfillInStackTrace", numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      boolean boolean0 = weakHashMap0.containsKey(".000000");
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      String string0 = weakHashMap1.put((String) null, "M$,nOg!|}");
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNull(string0);
      assertNotSame(weakHashMap1, weakHashMap0);
      
      Date date0 = new Date(0L);
      assertNotNull(date0);
      
      boolean boolean1 = weakHashMap1.containsKey(".000000");
      assertFalse(boolean1);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(weakHashMap1, weakHashMap0);
      
      Class<InstantiationException> class1 = InstantiationException.class;
      boolean boolean2 = TypeUtils.isPath(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertTrue(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1537, class2.getModifiers());
      assertEquals("interface java.lang.annotation.Annotation", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Double double0 = new Double((-1804.9998255003));
      assertEquals((-1804.9998255003), (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<Double> class1 = Double.class;
      Double double1 = TypeUtils.castToJavaBean((Object) double0, class1);
      assertEquals((-1804.9998255003), (double)double1, 0.01);
      assertNotNull(double1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [F", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertNotNull(class1);
      
      Character character0 = new Character('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<Double> class0 = Double.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<Boolean> class2 = Boolean.TYPE;
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("boolean", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class3 = TypeUtils.loadClass("double", (ClassLoader) aSMClassLoader0);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertEquals("double", class3.toString());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.equals((Object)class1));
      assertNotNull(class3);
      assertNotSame(class3, class1);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<Object> class0 = Object.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      assertNotNull(breakIterator0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L3e>mGVH");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = breakIterator0.previous();
      assertEquals((-1), int0);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      TreeMap<Integer, MockMinguoDate> treeMap0 = new TreeMap<Integer, MockMinguoDate>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      boolean boolean3 = TypeUtils.isHibernateInitialized(parameterizedTypeImpl0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Integer integer0 = new Integer(14);
      assertEquals(14, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[1], typeArray0[2], (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "o", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = Byte.compare((byte)2, (byte) (-1));
      assertEquals(3, int0);
      
      Class<Point> class0 = Point.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<String> class1 = String.class;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      StringCodec stringCodec0 = new StringCodec();
      assertEquals(4, stringCodec0.getFastMatchToken());
      assertNotNull(stringCodec0);
      
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class2);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(javaBeanDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(javaBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.JavaBeanInfo@9a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
      assertSame(classLoader0, classLoader1);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "/Dat(";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("/Dat(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Dat(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "*TD\"5)XRClFxC**6@M";
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("*TD\"5)XRClFxC**6@M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : *TD\"5)XRClFxC**6@M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotNull(serializeBeanInfo1);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("ownerContext");
      assertEquals((-8584653543591808361L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(typeUtils0);
      assertTrue(boolean1);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = new Double((-8584653543591808361L));
      assertEquals((-8.584653543591808E18), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = new Long((-8584653543591808361L));
      assertEquals((-8584653543591808361L), double1, 0.01);
      
      String string1 = TypeUtils.castToString(class0);
      assertNotNull(string1);
      
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Double double0 = new Double((-1804.9998255003));
      assertEquals((-1804.9998255003), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[2];
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      typeArray0[0] = type0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = Byte.compare((byte)2, (byte) (-1));
      assertEquals(3, int0);
      
      int int1 = Byte.compare((byte)19, (byte)19);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = DateFormat.SHORT;
      assertEquals(3, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)42;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)42}, byteArray0);
      assertEquals((byte)42, bigInteger0.byteValue());
      assertEquals((short)6186, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)42}, byteArray0);
      assertEquals((short)6186, bigInteger1.shortValue());
      assertEquals((byte)42, bigInteger1.byteValue());
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      assertArrayEquals(new byte[] {(byte)24, (byte)42}, byteArray0);
      assertEquals((byte)42, bigInteger0.byteValue());
      assertEquals((short)6186, bigInteger0.shortValue());
      assertEquals((short)6186, bigInteger1.shortValue());
      assertEquals((byte)42, bigInteger1.byteValue());
      assertEquals((byte)42, bigInteger2.byteValue());
      assertEquals((short)6186, bigInteger2.shortValue());
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      java.util.IdentityHashMap<MockMinguoDate, TimeDeserializer> identityHashMap0 = new java.util.IdentityHashMap<MockMinguoDate, TimeDeserializer>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNull(bigDecimal0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(1840);
      assertEquals(1840, (int)integer0);
      assertNotNull(integer0);
      
      InstantiationError instantiationError0 = new InstantiationError("@type");
      assertEquals("java.lang.InstantiationError: @type", instantiationError0.toString());
      assertEquals("@type", instantiationError0.getMessage());
      assertNotNull(instantiationError0);
      
      Class<Throwable> class0 = Throwable.class;
      InstantiationError instantiationError1 = (InstantiationError)TypeUtils.castToJavaBean((Object) instantiationError0, class0);
      assertEquals("java.lang.InstantiationError: @type", instantiationError1.toString());
      assertEquals("@type", instantiationError1.getMessage());
      assertEquals("java.lang.InstantiationError: @type", instantiationError0.toString());
      assertEquals("@type", instantiationError0.getMessage());
      assertNotNull(instantiationError1);
      assertSame(instantiationError1, instantiationError0);
      assertSame(instantiationError0, instantiationError1);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("yyyy-MM-dd HH:mm:ss");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(true);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      LinkedHashMap<SimpleTimeZone, Double> linkedHashMap0 = new LinkedHashMap<SimpleTimeZone, Double>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("{Kt2!BL*p8+", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("/,fn@d ?Ny");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("/,fn@d ?Ny");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/,fn@d ?Ny\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Double double0 = new Double((-1804.9998255003));
      assertEquals((-1804.9998255003), (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<Double> class1 = Double.class;
      Double double1 = TypeUtils.castToJavaBean((Object) double0, class1);
      assertEquals((-1804.9998255003), (double)double1, 0.01);
      assertNotNull(double1);
      
      Dimension dimension0 = new Dimension(1039, 2616);
      assertEquals(1039.0, dimension0.getWidth(), 0.01);
      assertEquals(2616.0, dimension0.getHeight(), 0.01);
      assertEquals(1039, dimension0.width);
      assertEquals(2616, dimension0.height);
      assertNotNull(dimension0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("[B", "=N", "[B", 2616);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("[B.=N([B:2616)", stackTraceElement0.toString());
      assertEquals("[B", stackTraceElement0.getClassName());
      assertEquals(2616, stackTraceElement0.getLineNumber());
      assertEquals("[B", stackTraceElement0.getFileName());
      assertEquals("=N", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [B.=N([B:2616)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("+<IAIlM?ku_u2aL\"", (ClassLoader) aSMClassLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<BitSet> class0 = BitSet.class;
      StackTraceElement stackTraceElement0 = new StackTraceElement("<X4\"T2E#((:rx", "fP5:0-LH*", "<X4\"T2E#((:rx", 1107297537);
      assertEquals("<X4\"T2E#((:rx", stackTraceElement0.getFileName());
      assertEquals("fP5:0-LH*", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(1107297537, stackTraceElement0.getLineNumber());
      assertEquals("<X4\"T2E#((:rx", stackTraceElement0.getClassName());
      assertEquals("<X4\"T2E#((:rx.fP5:0-LH*(<X4\"T2E#((:rx:1107297537)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("<X4\"T2E#((:rx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<X4\"T2E#((:rx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t`j+0_0}Z)7|;@8eNw");
      assertEquals("java.sql.SQLTransientConnectionException: t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("t`j+0_0}Z)7|;@8eNw", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertEquals("t`j+0_0}Z)7|;@8eNw.t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement0.toString());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getMethodName());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getClassName());
      assertEquals((-257), stackTraceElement0.getLineNumber());
      assertEquals("L", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("J*V/|E6wFyk(=g@ ", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertEquals("L", stackTraceElement1.getFileName());
      assertEquals((-257), stackTraceElement1.getLineNumber());
      assertEquals("J*V/|E6wFyk(=g@ .t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement1.toString());
      assertEquals("J*V/|E6wFyk(=g@ ", stackTraceElement1.getClassName());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Float float0 = new Float((-974.8248F));
      assertEquals((-974.8248F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ConcurrentHashMap<MockMinguoDate, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<MockMinguoDate, NoSuchMethodException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl1, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t`j+0_0}Z)7|;@8eNw");
      assertEquals("t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: t`j+0_0}Z)7|;@8eNw", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("t`j+0_0}Z)7|;@8eNw", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertEquals("L", stackTraceElement0.getFileName());
      assertEquals((-257), stackTraceElement0.getLineNumber());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement0.getMethodName());
      assertEquals("t`j+0_0}Z)7|;@8eNw.t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("J*V/|E6wFyk(=g@ ", "t`j+0_0}Z)7|;@8eNw", "L", (-257));
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("L", stackTraceElement1.getFileName());
      assertEquals((-257), stackTraceElement1.getLineNumber());
      assertEquals("J*V/|E6wFyk(=g@ ", stackTraceElement1.getClassName());
      assertEquals("J*V/|E6wFyk(=g@ .t`j+0_0}Z)7|;@8eNw(L)", stackTraceElement1.toString());
      assertEquals("t`j+0_0}Z)7|;@8eNw", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<InternalError> class2 = InternalError.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, propertyNamingStrategy1, true);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotNull(serializeBeanInfo1);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertEquals("class java.lang.InternalError", class3.toString());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertNotNull(class3);
      
      System.setCurrentTimeMillis((-1L));
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<Object> class0 = Object.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      assertNotNull(breakIterator0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BreakIterator breakIterator1 = BreakIterator.getCharacterInstance(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(breakIterator1.equals((Object)breakIterator0));
      assertNotNull(breakIterator1);
      assertNotSame(breakIterator1, breakIterator0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "stripExtensions");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = breakIterator0.previous();
      assertEquals((-1), int0);
      assertFalse(breakIterator0.equals((Object)breakIterator1));
      assertNotSame(breakIterator0, breakIterator1);
      
      AtomicLong atomicLong0 = new AtomicLong((-1));
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1L), atomicLong0.get());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1), atomicLong0.intValue());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      boolean boolean3 = TypeUtils.isHibernateInitialized(atomicLong0);
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1L), atomicLong0.get());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1), atomicLong0.intValue());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((-793.737443244607), (-873.26));
      assertEquals((-873.26), double1, 0.01);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("width");
      assertEquals((-2604543402434238017L), long0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      String string0 = TypeUtils.decapitalize("n");
      assertEquals("n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("n");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = new Double((-2604543402434238017L));
      assertEquals((-2.604543402434238E18), (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer((-276));
      assertEquals((-276), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized("n");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "width", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.compare((byte)52, (byte)25);
      assertEquals(27, int0);
      
      int int1 = Byte.toUnsignedInt((byte)2);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      long long0 = Byte.toUnsignedLong((byte) (-43));
      assertEquals(213L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-103)}, byteArray0);
      assertEquals((short) (-10855), bigInteger0.shortValue());
      assertEquals((byte) (-103), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-43), (byte) (-43), (byte) (-43), (byte) (-103)}, byteArray0);
      assertEquals((short) (-10855), bigInteger0.shortValue());
      assertEquals((byte) (-103), bigInteger0.byteValue());
      assertEquals((short) (-10855), bigInteger1.shortValue());
      assertEquals((byte) (-103), bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("fastjson.parser.deny");
      assertEquals("java.lang.NoSuchMethodError: fastjson.parser.deny", noSuchMethodError0.toString());
      assertEquals("fastjson.parser.deny", noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NoSuchMethodError: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Rectangle", classLoader0);
      assertNull(class0);
      assertSame(classLoader0, classLoader1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3908;
      longArray0[1] = (long) 3908;
      longArray0[2] = (long) 3908;
      longArray0[3] = (long) 3908;
      longArray0[4] = (long) 3908;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("WMrSYv1", "Ljava.awt.Rectangle", 3908, longArray0, (Throwable) null);
      assertArrayEquals(new long[] {3908L, 3908L, 3908L, 3908L, 3908L}, longArray0);
      assertEquals("Ljava.awt.Rectangle", batchUpdateException0.getSQLState());
      assertEquals(3908, batchUpdateException0.getErrorCode());
      assertEquals("WMrSYv1", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: WMrSYv1", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<String> class1 = String.class;
      Class<?> class2 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) null, (Type) class2, propertyNamingStrategy0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Class<Double> class0 = Double.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(javaBeanSerializer0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("oq*Q_ooA[_AC4#", "oq*Q_ooA[_AC4#");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("o", "(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z");
      assertNull(string1);
      
      String string2 = weakHashMap0.put("Ljava.lang.AutoCloseable", "o");
      assertNull(string2);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      NumberFormatException numberFormatException1 = new NumberFormatException("fi");
      assertEquals("fi", numberFormatException1.getMessage());
      assertEquals("java.lang.NumberFormatException: fi", numberFormatException1.toString());
      assertFalse(numberFormatException1.equals((Object)numberFormatException0));
      assertNotNull(numberFormatException1);
      
      Throwable throwable0 = numberFormatException0.fillInStackTrace();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.NumberFormatException", throwable0.toString());
      assertFalse(numberFormatException0.equals((Object)numberFormatException1));
      assertFalse(throwable0.equals((Object)numberFormatException1));
      assertNotNull(throwable0);
      assertNotSame(numberFormatException0, numberFormatException1);
      assertSame(numberFormatException0, throwable0);
      assertNotSame(throwable0, numberFormatException1);
      assertSame(throwable0, numberFormatException0);
      
      String string3 = weakHashMap0.put("o", (String) null);
      assertEquals("(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z", string3);
      assertNotNull(string3);
      
      boolean boolean0 = weakHashMap0.containsKey("9");
      assertFalse(boolean0);
      
      String string4 = File.pathSeparator;
      assertEquals(":", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      Jdk8DateCodec jdk8DateCodec0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(jdk8DateCodec0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<Double> class1 = Double.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[3] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[0] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      Class<Dimension> class1 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, (Map<String, String>) null);
      assertNotNull(javaBeanSerializer0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Set<String> set0 = identityHashMap0.keySet();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Collection<String> collection0 = identityHashMap0.values();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(collection0);
      
      Class<Time> class2 = Time.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) concurrentHashMap0, true);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = Byte.compare((byte) (-1), (byte) (-1));
      assertEquals(0, int0);
      
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<Double> class0 = Double.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("oq*Q_ooA[_AC4#", "oq*Q_ooA[_AC4#");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("o", "(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z");
      assertNull(string1);
      
      String string2 = weakHashMap0.put("Ljava.lang.AutoCloseable", "o");
      assertNull(string2);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      NumberFormatException numberFormatException1 = new NumberFormatException("fi");
      assertEquals("java.lang.NumberFormatException: fi", numberFormatException1.toString());
      assertEquals("fi", numberFormatException1.getMessage());
      assertFalse(numberFormatException1.equals((Object)numberFormatException0));
      assertNotNull(numberFormatException1);
      
      Throwable throwable0 = numberFormatException0.fillInStackTrace();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertEquals("java.lang.NumberFormatException", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertFalse(numberFormatException0.equals((Object)numberFormatException1));
      assertFalse(throwable0.equals((Object)numberFormatException1));
      assertNotNull(throwable0);
      assertSame(numberFormatException0, throwable0);
      assertNotSame(numberFormatException0, numberFormatException1);
      assertNotSame(throwable0, numberFormatException1);
      assertSame(throwable0, numberFormatException0);
      
      String string3 = weakHashMap0.put("o", (String) null);
      assertEquals("(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z", string3);
      assertNotNull(string3);
      
      boolean boolean0 = weakHashMap0.containsKey("9");
      assertFalse(boolean0);
      
      String string4 = File.pathSeparator;
      assertEquals(":", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      Jdk8DateCodec jdk8DateCodec0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(jdk8DateCodec0);
      
      Double double0 = new Double(1.0785606344199685);
      assertEquals(1.0785606344199685, (double)double0, 0.01);
      assertNotNull(double0);
      
      Date date0 = TypeUtils.castToSqlDate(double0);
      assertNotNull(date0);
      
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class2, weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy1);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotNull(serializeBeanInfo0);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<Double> class0 = Double.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(javaBeanSerializer0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("oq*Q_ooA[_AC4#", "oq*Q_ooA[_AC4#");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("o", "(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z");
      assertNull(string1);
      
      String string2 = weakHashMap0.put("Ljava.lang.AutoCloseable", "o");
      assertNull(string2);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>((byte)11);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy1, false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotNull(serializeBeanInfo1);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class2);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayList<MockThaiBuddhistDate> arrayList0 = new ArrayList<MockThaiBuddhistDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Collection<String> collection0 = identityHashMap0.values();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(collection0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertNotNull(identityHashMap1);
      
      String string0 = identityHashMap1.put("error parse new", "get");
      assertFalse(identityHashMap1.isEmpty());
      assertEquals(1, identityHashMap1.size());
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertNull(string0);
      assertNotSame(identityHashMap1, identityHashMap0);
      
      String string1 = identityHashMap1.putIfAbsent("(I)Z", "(I)Z");
      assertFalse(identityHashMap1.isEmpty());
      assertEquals(2, identityHashMap1.size());
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertNull(string1);
      assertNotSame(identityHashMap1, identityHashMap0);
      
      Set<String> set0 = identityHashMap1.keySet();
      assertFalse(identityHashMap1.isEmpty());
      assertEquals(2, identityHashMap1.size());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertNotNull(set0);
      assertNotSame(identityHashMap1, identityHashMap0);
      
      Collection<String> collection1 = identityHashMap0.values();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertNotNull(collection1);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertSame(collection1, collection0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl1);
      
      Locale locale0 = TypeUtils.toLocale("o");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("o", locale0.toString());
      assertEquals("o", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<BitSet> class0 = BitSet.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.remove((Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(javaBeanSerializer0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      parserConfig0.configFromPropety(properties0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertNotSame(parserConfig0, parserConfig1);
      
      Class<OptionalCodec> class2 = OptionalCodec.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class2);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertNotNull(javaBeanDeserializer0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.util.BitSet", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("O");
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      TreeMap<PropertyProcessableDeserializer, MockMinguoDate> treeMap0 = new TreeMap<PropertyProcessableDeserializer, MockMinguoDate>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : interface java.util.List
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
