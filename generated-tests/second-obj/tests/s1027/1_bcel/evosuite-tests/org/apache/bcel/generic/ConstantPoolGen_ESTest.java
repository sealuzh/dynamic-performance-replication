/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:36:25 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Deprecated;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2661), (-2661));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2661), (-2661));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2661
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger((-91));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-91), (-1));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInteger((-2021161078));
      int int1 = constantPoolGen0.lookupClass("hR;");
      assertTrue(int1 == int0);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("We", (String) null, "%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantString constantString0 = new ConstantString(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("{//b7y]7eV");
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      Method method0 = new Method();
      Method method1 = new Method(method0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method1, "RHJQ;tsit_q)IM", constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantString constantString0 = new ConstantString(0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("class_index");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class_index");
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantNameAndType0.copy();
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantInteger1.clone();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(5, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong(1);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-957), constantArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(305.5905546602959);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      int int0 = constantPoolGen0.lookupString(" 4");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupInteger((-2021161078));
      constantPoolGen0.size = (-1);
      String string0 = "hR;";
      // Undeclared exception!
      try { 
        constantPoolGen0.addFloat((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2021161078));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong((-2021161078));
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2021161078));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong((-2021161078));
      constantPoolGen0.addFloat((-2021161078));
      int int0 = constantPoolGen0.lookupLong(4);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2021161078));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addLong((-2021161078));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("R$iHw4(@)J=:2");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      double double0 = (-329.0133);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2774), (-2774));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -2774, name_and_type_index = -2774)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      int int0 = Character.MAX_CODE_POINT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("class_index");
      ConstantUtf8.getInstance("class_index");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("class_index");
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("QqDM)IS.4o}");
      constantPoolGen0.addClass("QqDM)IS.4o}");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, (-1));
      constantFieldref0.setNameAndTypeIndex(155);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(155);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble((-1136.4969));
      ConstantString constantString0 = new ConstantString(212);
      Constant[] constantArray1 = new Constant[5];
      constantArray1[0] = (Constant) constantString0;
      constantArray1[3] = (Constant) constantDouble0;
      constantArray1[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")p|! hLk[#W;");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.addDouble(1);
      constantPoolGen0.toString();
      assertEquals(8, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int1 = constantPoolGen1.lookupFieldref(")p|! hLk[#W;", "1)CONSTANT_Utf8[1](\")p|! hLk[#W;\")\n2)CONSTANT_Utf8[1](\")p|! hLk[#W;\")\n3)null\n4)null\n5)null\n6)CONSTANT_Double[6](bytes = 1.0)\n7)null\n", "`h1#mA>,2<");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(235);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-1040), (Constant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1040
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.size = 0;
      int int0 = constantPoolGen0.lookupMethodref("!x@Fh", "!x@Fh", "f");
      int int1 = constantPoolGen0.lookupInterfaceMethodref("R^IWELo2>ph!-4g", (String) null, "R^IWELo2>ph!-4g");
      assertEquals((-1), int1);
      
      constantLong0.setBytes((-1));
      int int2 = constantPoolGen0.addLong((-1));
      assertEquals(1, int2);
      
      int int3 = constantPoolGen0.lookupFieldref("f", (String) null, "f");
      assertEquals(2, constantPoolGen0.getSize());
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.toString();
      constantPoolGen0.lookupMethodref("o[e83R|gI:T_D\"", "o[e83R|gI:T_D\"", "h");
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantDouble constantDouble0 = new ConstantDouble(305.5905546602959);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      constantPoolGen1.getConstant(3);
      int int0 = constantPoolGen0.getSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(3937);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen0.lookupInterfaceMethodref("sTputstatic", "sTputstatic", "sTputstatic");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        dataOutputStream0.writeBytes("*5jAGsw R:~'3r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(3937);
      ConstantInteger constantInteger1 = new ConstantInteger(3937);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.addDouble(1);
      constantPoolGen0.toString();
      constantPoolGen0.lookupInteger(3937);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("V!I1%Wf:sZJP.");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("V!I1%Wf:sZJP.");
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger(3937);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = Pattern.COMMENTS;
      String string0 = constantPoolGen0.toString();
      assertEquals("1)null\n2)CONSTANT_Integer[3](bytes = 3937)\n3)null\n", string0);
      
      int int2 = constantPoolGen0.lookupInteger(1);
      assertEquals((-1), int2);
      
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int4 = ObjectStreamConstants.baseWireHandle;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertEquals(256, constantPool0.getLength());
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      objectType0.setSignature("Unknown constant type ");
      int int0 = Character.MAX_CODE_POINT;
      constantPoolGen0.lookupMethodref("Unknown constant type ", "Unknown constant type ", "Unknown constant type ");
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantFloat constantFloat0 = new ConstantFloat(28.08F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen0.addClass("<illegal opcode>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-37), 71);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantMethodHandle0.setReferenceIndex(71);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(71, 2370);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.toString();
      constantPoolGen0.addFloat(873.9022F);
      constantPoolGen0.lookupFloat((-693.99347F));
      constantPoolGen0.lookupNameAndType("", "{S");
      constantPoolGen0.lookupString("{S");
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("kFr+", (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -1
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.lookupFieldref("$np2wSy", "$np2wSy", "$np2wSy");
      constantPoolGen0.lookupNameAndType("XGX':Ilc5&`DojEG3#R:hU!8d|;l", "XGX':Ilc5&`DojEG3#R:hU!8d|;l");
      constantPoolGen0.addClass("Target of ");
      constantPoolGen0.toString();
      constantPoolGen0.addFloat((-1));
      constantPoolGen0.lookupFloat((-1));
      int int0 = Double.MAX_EXPONENT;
      int int1 = Character.SIZE;
      int int2 = constantPoolGen0.lookupFloat((-1));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("class_index");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_1.copy();
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[1] = constant0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = constantPoolGen0.index;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-904), (-904));
      constantFieldref0.setNameAndTypeIndex(0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -904
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Byte.SIZE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      constantPoolGen0.adjustSize();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(8, 8);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      String string0 = "class_index";
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-906), (-906));
      constantFieldref0.setNameAndTypeIndex(0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "L~)]zNv6d";
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(192, 150);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble(192);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 3);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantArray0[2], constantPoolGen0);
      ArrayType arrayType0 = null;
      ConstantPool constantPool0 = null;
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFieldref("/9&Uxyv-`;>", "%", ")%f5j~`/-\"z.\"3$6Q");
      int int0 = constantPoolGen0.index;
      ConstantClass constantClass0 = new ConstantClass((-1));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.toString();
      constantPoolGen0.addDouble(738.3836);
      int int0 = constantPoolGen0.lookupDouble(1149.0028123802924);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupNameAndType("aload", "aload");
      constantPoolGen0.getSize();
      constantPoolGen0.lookupMethodref("aload", "aload", "T.~|CZUfS[X");
      constantPoolGen0.addUtf8("aload");
      ConstantLong constantLong0 = new ConstantLong((-3614L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      
      constantPoolGen1.lookupUtf8((String) null);
      constantPoolGen1.lookupClass("-`<zF,\"0T@&c#yg8We");
      int int0 = constantPoolGen1.lookupInterfaceMethodref("dadd", "-`<zF,\"0T@&c#yg8We", "T.~|CZUfS[X");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(3937);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantInteger0.copy();
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen0.addUtf8("Unknown constant type ");
      // Undeclared exception!
      try { 
        constantPoolGen1.getConstant(1781);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1781
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble(127);
      constantPoolGen0.addInteger(127);
      constantPoolGen0.lookupDouble(127);
      constantPoolGen0.addFloat((-750.4F));
      ConstantMethodref constantMethodref0 = new ConstantMethodref(127, 4);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger(3937);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[3] = (Constant) constantInteger0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3937);
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.toString();
      constantPoolGen0.addFieldref("KP-[3]pB]$m}^(W/", "2", "1)null\n2)null\n3)CONSTANT_Integer[3](bytes = 3937)\n4)CONSTANT_MethodType[16](descriptor_index = 3937)\n5)CONSTANT_Integer[3](bytes = 3937)\n6)CONSTANT_Double[6](bytes = 0.0)\n7)null\n");
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.lookupUtf8("_mYmC$^_?& (");
      constantPoolGen0.lookupInteger(237);
      Attribute[] attributeArray0 = new Attribute[1];
      Deprecated deprecated0 = null;
      try {
        deprecated0 = new Deprecated((Deprecated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Deprecated", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(622);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(622, (-2104533973));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      int int0 = constantPoolGen0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("Ilc55&`DojEG3#R", "Ilc55&`DojEG3#R", "Ilc55&`DojEG3#R");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(5, constantPoolGen0.getSize());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "&:|;";
      constantPoolGen0.addString("&:|;");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "&:|;");
      pUSH0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&:|;");
      pUSH0.getInstructionList();
      // Undeclared exception!
      try { 
        constantPool0.getConstantString(2, (byte) (-92));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -92
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("");
      constantPoolGen0.adjustSize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantString constantString0 = new ConstantString(355);
      constantPoolGen0.lookupClass("6LBWxVo%J.^IbtDp!");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Pattern.UNICODE_CASE;
      int int1 = Member.PUBLIC;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("Ilc55&`DojyG3#R", "Ilc55&`DojyG3#R", "Ilc55&`DojyG3#R");
      constantPoolGen0.addNameAndType("Ilc55&`DojyG3#R", "Ilc55&`DojyG3#R");
      int int0 = Pattern.CANON_EQ;
      Constant.setComparator((BCELComparator) null);
      Constant.setComparator((BCELComparator) null);
      constantPoolGen0.getConstantPool();
      int int1 = constantPoolGen0.lookupUtf8("\"?7Df!+");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(9, 9);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(9, 9);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Character.getName(9);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      int int0 = Double.SIZE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantString constantString0 = new ConstantString(64);
      int int1 = constantPoolGen0.size;
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantString constantString2 = new ConstantString(constantString0);
      ConstantString constantString3 = new ConstantString(constantString2);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CHARACTER TABULATION");
      int int2 = Pattern.UNICODE_CHARACTER_CLASS;
      int int3 = Float.BYTES;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.addFieldref("CHARACTER TABULATION", "CHARACTER TABULATION", "CHARACTER TABULATION");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.lookupFloat(2.0F);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[3], constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 9, reference_index = 9)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("Ilc55&`DojEG3#R", "Ilc55&`DojEG3#R", "Ilc55&`DojEG3#R");
      int int0 = Double.MIN_EXPONENT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantString constantString0 = new ConstantString((-1022));
      constantPoolGen0.adjustSize();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) 4);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPoolGen0.addMethodref("Ilc55&`DojEG3#R", "Ilc55&`DojEG3#R", "Ilc55&`DojEG3#R");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1022), (-1022));
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      constantPoolGen0.getFinalConstantPool();
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("Ilc55&`DojyG3#R");
      constantPoolGen0.addInterfaceMethodref("Ilc55&`DojyG3#R", "Ilc55&`DojyG3#R", "Ilc55&`DojyG3#R");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      String string0 = Constants.ILLEGAL_OPCODE;
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 263);
      ClassPath classPath0 = new ClassPath("Ilc55&`DojyG3#R");
      ClassPath classPath1 = new ClassPath(classPath0, "Ilc55&`DojyG3#R");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath1);
      Class<java.lang.reflect.Method> class0 = java.lang.reflect.Method.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, visitor0);
      constantFieldref0.accept(descendingVisitor0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "w{}=?{G<yEb[&w2";
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(35, 35);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.lookupInterfaceMethodref("w{}=?{G<yEb[&w2", "w{}=?{G<yEb[&w2", "Constant pool at index ");
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("E(v\"6\"v", "E(v\"6\"v", "w{}=?{G<yEbz&w2");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupFloat(3429.6868F);
      constantPoolGen0.lookupUtf8("KxfSXHcaKwt#NT%' not found in class '");
      int int0 = constantPoolGen0.addInterfaceMethodref("E(v\"6\"v", "E(v\"6\"v", "w{}=?{G<yEbz&w2");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(9, 9);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(9, 9);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<init>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantUtf8_0.clone();
      constantPoolGen0.addUtf8("<init>");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(9, 9);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(9, 9);
      constantFieldref0.setNameAndTypeIndex(9);
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      constantPoolGen0.addInterfaceMethodref("<init>", "<init>", "<init>");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addFieldref("@FtW0@4&KVnU,TFk5", "<init>", "<init>");
      ConstantUtf8.getCachedInstance("Unknown constant type ");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      Constant.setComparator(bCELComparator0);
      constantPoolGen2.getFinalConstantPool();
      constantPoolGen1.size = 222;
      constantPoolGen1.addFieldref("@FtW0@4&KVnU,TFk5", "<init>", "<init>");
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen2.addFloat((-234.99565F));
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType0, constantPoolGen5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = 9)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
