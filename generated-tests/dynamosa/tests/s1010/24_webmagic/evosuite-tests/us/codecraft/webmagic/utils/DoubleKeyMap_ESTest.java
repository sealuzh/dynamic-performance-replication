/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 12:48:52 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, Map<Integer, Integer>>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Map<Integer, Integer>>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object>(hashMap0, class0);
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      Map<Object, Object> map1 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, String>, Map<Integer, Integer>>> hashMap0 = new HashMap<String, Map<HashMap<Object, String>, Map<Integer, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, String>, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, Map<Integer, Integer>>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((String) null, hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, (Object) doubleKeyMap1);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Map<Integer, Integer>, String>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Map<Integer, Integer>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, Map<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Map<Integer, Integer>, String>(hashMap0, class0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Map<String, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((String) null, object0, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>();
      DoubleKeyMap<Object, HashMap<Integer, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, String>, String>();
      Map<String, Map<Integer, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>(map0);
      Integer integer0 = new Integer(83);
      Object object0 = doubleKeyMap2.put("", integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>();
      DoubleKeyMap<Object, Object, Map<Map<Integer, Integer>, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Map<Integer, Integer>, String>>();
      HashMap<Map<Integer, Integer>, String> hashMap0 = new HashMap<Map<Integer, Integer>, String>();
      Map<Map<Integer, Integer>, String> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, (Map<Map<Integer, Integer>, String>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Map<String, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Object, String>>>();
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>(hashMap0);
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>((Map<Map<Integer, Integer>, Map<Object, Integer>>) null);
      Integer integer0 = doubleKeyMap1.get((Map<Integer, Integer>) null, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, (Object) hashMap0);
      HashMap<Object, Map<Integer, String>> hashMap1 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(hashMap1);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<String, String>>();
      Map<Object, HashMap<String, String>> map0 = doubleKeyMap0.get((HashMap<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>((Map<Object, Map<String, Integer>>) null);
      Object object0 = new Object();
      Map<String, Integer> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<HashMap<String, Integer>, String>> hashMap0 = new HashMap<Object, Map<HashMap<String, Integer>, String>>();
      DoubleKeyMap<Object, HashMap<String, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Integer>, String>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (HashMap<String, Integer>) null, "jK$]sm]6xk<");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Map<HashMap<Object, Integer>, Object>> hashMap0 = new HashMap<HashMap<Object, Integer>, Map<HashMap<Object, Integer>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Integer>, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, HashMap<Object, Integer>, Object>(hashMap0, class0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(hashMap1, hashMap1, (Object) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object>((Map<HashMap<Object, Map<Integer, Integer>>, Map<Object, Object>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, HashMap<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Object, String>>((Map<Integer, Map<Integer, HashMap<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<Integer, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Integer, Integer>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<Integer, Map<Map<Integer, Integer>, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, Map<Map<Integer, Integer>, Integer>>>();
      DoubleKeyMap<Integer, Integer, Map<Map<Integer, Integer>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Map<Integer, Integer>, Integer>>(hashMap0);
      Map<Integer, Map<Map<Integer, Integer>, Integer>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<HashMap<Object, Map<Integer, Integer>>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Map<Integer, Integer>>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object>(hashMap0, class0);
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap2.put(doubleKeyMap1, object0);
      hashMap0.put(hashMap1, hashMap2);
      doubleKeyMap0.remove(hashMap1, (Object) map0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Map<Integer, Integer>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Integer, Integer>, Map<Object, Integer>>();
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put((Map<Integer, Integer>) null, hashMap1);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.put((Map<Integer, Integer>) null, (Object) hashMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<HashMap<Object, Map<Integer, Integer>>, Map<Object, Map<String, Integer>>>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<HashMap<Object, Map<Integer, Integer>>, Map<Object, Map<String, Integer>>>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>((Map<Integer, Map<String, Integer>>) null);
      Integer integer0 = new Integer((-3383));
      doubleKeyMap0.put(integer0, "", integer0);
      Integer integer1 = doubleKeyMap0.get(integer0, "");
      assertEquals((-3383), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<HashMap<Object, Map<Integer, Integer>>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Map<Integer, Integer>>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, Object, Object>(hashMap0, class0);
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      doubleKeyMap0.remove(hashMap1, (Object) map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }
}
