/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:16:22 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.color.ICC_Profile;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.LinearNNSearch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".xml");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Evaluation.handleCostOption("MUmg8ufG\"4uf+N:|a", 874);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "getSearchAlgorithm");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.lastIndexOf(textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(2);
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.handleCostOption((String) null, 19);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(2);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.trueNegativeRate(1);
      evaluation0.toClassDetailsString(".arff");
      evaluation0.unweightedMacroFmeasure();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.lastIndexOf(textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      Evaluation.handleCostOption("", 210);
      evaluation0.weightedAreaUnderPRC();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      evaluation0.falseNegativeRate(19);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      Random.setNextRandom(1);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.trueNegativeRate(1);
      evaluation0.SFPriorEntropy();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      evaluation0.trueNegativeRate((-684));
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      evaluation0.KBRelativeInformation();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "checksTurnedOffTipText";
      stringArray0[1] = "':\n";
      ZeroR.main(stringArray0);
      Evaluation.getGlobalInfo(zeroR0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      sGD0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.recall(2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Evaluation.getGlobalInfo(zeroR0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\nSynopsis for weka.classifiers.rules.ZeroR:\n\nClass for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = ICC_Profile.icSigAbstractClass;
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.KBInformation();
      evaluation0.rootRelativeSquaredError();
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(963.416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 963
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      PlainText plainText0 = new PlainText();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      instances0.iterator();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      Evaluation evaluation2 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      evaluation1.KBMeanInformation();
      double double1 = evaluation0.m_TotalCoverage;
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation.getGlobalInfo(gaussianProcesses0);
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.fMeasure(2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.incorrect();
      evaluation0.getRevision();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      Evaluation.getGlobalInfo(sGD0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMO0);
      additiveRegression0.getRevision();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMO0);
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("FJ5?NZBsOA2");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf(filteredClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumAbsErr = 586.177033492262;
      evaluation0.areaUnderROC((-2));
      evaluation0.SFMeanSchemeEntropy();
      Random.setNextRandom((-1));
      evaluation0.weightedAreaUnderPRC();
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.weightedFalseNegativeRate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(2);
      evaluation0.SFSchemeEntropy();
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      sGD0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      TestInstances.forCapabilities(capabilities0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1111.1677325;
      doubleArray0[1] = 1111.1677325;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1111.1677325;
      doubleArray0[1] = 1111.1677325;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      instances0.iterator();
      testInstances0.setRelation(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(2);
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances1);
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      TestInstances.forCapabilities(capabilities0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray0 = new double[3];
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      sGD0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      try { 
        evaluation0.evaluateModel((Classifier) sGD0, instances0, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = ICC_Profile.icSigAbstractClass;
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.KBInformation();
      evaluation0.rootRelativeSquaredError();
      Capabilities.forInstances(instances0, true);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString();
      evaluation1.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sMO0);
      Capabilities capabilities1 = additiveRegression0.getCapabilities();
      capabilities0.or(capabilities1);
      capabilities0.disableAllAttributes();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf(filteredClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.updatePriors(binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.setDiscardPredictions(true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.toClassDetailsString(".arff");
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(2);
      J48 j48_0 = new J48();
      String string0 = ArffLoader.FILE_EXTENSION;
      evaluation0.weightedFMeasure();
      evaluation0.pctCorrect();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, (-1), testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) 1111;
      evaluation0.m_MissingClass = 0.9;
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString(true);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, (Object[]) stringArray0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numFalseNegatives(1276);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf(filteredClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-2869));
      evaluation0.KBMeanInformation();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTruePositiveRate();
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.priorEntropy();
      double[] doubleArray0 = new double[3];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.weightedTrueNegativeRate();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom(22);
      try { 
        evaluation0.crossValidateModel((Classifier) serializedClassifier0, instances0, 22, (java.util.Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[1];
      TextDirectoryLoader.main(stringArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom(22);
      try { 
        evaluation0.crossValidateModel((Classifier) serializedClassifier0, instances0, 22, (java.util.Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      sGD0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.SFPriorEntropy();
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(serializedClassifier0);
      additiveRegression0.getRevision();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("turnChecksOff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      try { 
        evaluation0.toClassDetailsString("A filter that removes a range of attributes from the dataset. Will re-order the remaining attributes if invert matching sense is turned on and the attribute column indices are not specified in ascending order.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DenseInstance denseInstance0 = new DenseInstance(597);
      instances0.add((Instance) denseInstance0);
      int int0 = ICC_Profile.icSigAbstractClass;
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-65));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.setDiscardPredictions(false);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      HTML hTML0 = new HTML();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.equals(testInstances0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      evaluation0.equals(filteredClassifier0);
      evaluation0.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      sGD0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1111.1677325;
      doubleArray0[1] = 1111.1677325;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = (double) 1;
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      MockFile mockFile0 = new MockFile("weka/core/Capabilities.props");
      serializedClassifier0.setModelFile(mockFile0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation.getGlobalInfo(serializedClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) binarySparseInstance0);
      evaluation0.errorRate();
      evaluation0.numTrueNegatives(104);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SMO sMO0 = new SMO();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0);
      SparseInstance sparseInstance0 = new SparseInstance(5);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1111.1677325;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2695.068156631846), doubleArray0);
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      Capabilities capabilities0 = sGD1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      instances1.add((Instance) binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances0);
      binarySparseInstance0.setDataset(instances2);
      instances1.iterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getRevision();
      try { 
        evaluation0.evaluateModelOnce((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1666L));
      DenseInstance denseInstance0 = new DenseInstance(27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      evaluation0.equals((Object) null);
      evaluation0.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1111.1677325;
      doubleArray0[1] = 1111.1677325;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '>';
      charArray0[2] = 'y';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Vote vote0 = new Vote();
      Evaluation.getGlobalInfo(vote0);
      Evaluation.makeOptionString(vote0, true);
      Random.setNextRandom(4);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Stacking stacking0 = new Stacking();
      Evaluation.getGlobalInfo(stacking0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) stacking0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SGD sGD0 = new SGD();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString(true);
      evaluation0.getDiscardPredictions();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("-39P\"6Fv3");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances1.iterator();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(2);
      MockRandom mockRandom1 = new MockRandom();
      instances1.add((Instance) sparseInstance0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.setDebug(true);
      double double0 = evaluation0.m_SumAbsErr;
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1;
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
      evaluation0.toClassDetailsString(".bsi");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (-2);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.iterator();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      instances1.add((Instance) sparseInstance0);
      Instances instances2 = textDirectoryLoader0.getStructure();
      instances2.resampleWithWeights((java.util.Random) mockRandom1);
      double double0 = evaluation0.m_SumAbsErr;
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1111.1677325;
      doubleArray0[1] = 1111.1677325;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      instances0.iterator();
      testInstances0.setRelation(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassPriorsSum = (double) 0;
      MockRandom mockRandom0 = new MockRandom(2);
      MockRandom mockRandom1 = new MockRandom();
      instances0.resampleWithWeights((java.util.Random) mockRandom1);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom((-336L));
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 2, (java.util.Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.updatePriors(binarySparseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.precision(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      evaluation0.correlationCoefficient();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SGD sGD0 = new SGD();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      binarySparseInstance0.setDataset(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      binarySparseInstance0.setDataset(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      Attribute attribute0 = new Attribute(" ", vector0);
      Attribute.main(testInstances1.DEFAULT_WORDS);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(2586);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setRelation("weka.core.matrix.CholeskyDecomposition");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      MockRandom mockRandom1 = new MockRandom();
      instances0.add((Instance) binarySparseInstance0);
      MockRandom mockRandom2 = new MockRandom();
      instances0.add((Instance) sparseInstance0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "lambdaTipText");
      TestInstances.forCapabilities(capabilities0);
      binarySparseInstance0.setDataset(instances0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) binarySparseInstance0);
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      binarySparseInstance0.setDataset(instances0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) binarySparseInstance0);
      evaluation0.SFSchemeEntropy();
      evaluation0.pctUnclassified();
      evaluation0.SFPriorEntropy();
  }
}
