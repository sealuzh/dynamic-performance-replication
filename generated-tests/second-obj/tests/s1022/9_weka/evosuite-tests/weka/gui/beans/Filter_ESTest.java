/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:50:54 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseMotionListener;
import java.awt.im.InputContext;
import java.awt.image.DirectColorModel;
import java.beans.EventSetDescriptor;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import javax.swing.InputMap;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JRootPane;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.synth.SynthColorChooserUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import weka.associations.FilteredAssociator;
import weka.core.AbstractInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.DatabaseSaver;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.Loader;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      Random.setNextRandom(1);
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(attributeSummarizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.AttributeSummarizer : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setFilter(spreadSubsample0);
      filter0.getWrappedAlgorithm();
      assertEquals("SpreadSubsample", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setWrappedAlgorithm(spreadSubsample0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addTrainingSetListener(flowByExpression0);
      assertEquals("SpreadSubsample", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      InstanceEvent instanceEvent0 = new InstanceEvent(mockJapaneseDate0);
      filter0.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getStructure("ebl");
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, 1088, 1088);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("weka/gui/beans/icons/", "weka/gui/beans/icons/");
      filter0.stop();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      Associator associator0 = new Associator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.removeTrainingSetListener(associator0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false, false, true);
      filter0.setLog(logPanel0);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.addDataSourceListener(dataVisualizer0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      SysErrLog sysErrLog0 = new SysErrLog();
      boolean boolean0 = substringReplacer0.m_busy;
      filter0.getTransferHandler();
      Sorter sorter0 = new Sorter();
      filter0.getMouseListeners();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      DatabaseSaver databaseSaver0 = new DatabaseSaver();
      Sorter sorter1 = new Sorter();
      filter0.acceptInstance(instanceEvent0);
      filter0.eventGeneratable("h/zw4(");
      AllFilter allFilter0 = new AllFilter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      instanceEvent0.setStatus(100);
      filter0.setFilter(multiFilter0);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      filter0.setCustomName("y}g|1*'");
      filter0.acceptInstance(instanceEvent0);
      Random.setNextRandom((-1641984631));
      filter0.addInstanceListener(sorter1);
      filter0.notifyInstanceListeners(instanceEvent0);
      boolean boolean1 = filter0.isBusy();
      assertEquals("y}g|1*'", filter0.getCustomName());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeTestSetListener(sorter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.connectionNotification("f", sorter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.getDebugGraphicsOptions();
      filter0.connectionNotification("f", "f");
      filter0.removeDataSourceListener(sorter0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      testSetMaker0.getStructure(" training set interrupted!");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockJapaneseDate0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Appender appender0 = new Appender();
      filter0.removeTestSetListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setWrappedAlgorithm(spreadSubsample0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression0, instances0, 46, 46, 46, 552);
      filter0.acceptTestSet(testSetEvent0);
      Rectangle rectangle0 = filter0.getVisibleRect();
      filter0.getBounds(rectangle0);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      Instances instances1 = flowByExpression0.getConnectedFormat();
      assertNull(instances1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertNotNull(spreadSubsample0);
      
      filter0.setWrappedAlgorithm(spreadSubsample0);
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      filter0.setLog(sysErrLog0);
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      assertFalse(instanceStreamToBatchMaker0.getIgnoreRepaint());
      assertTrue(instanceStreamToBatchMaker0.getFocusTraversalKeysEnabled());
      assertEquals("InstanceStreamToBatchMaker", instanceStreamToBatchMaker0.getCustomName());
      assertFalse(instanceStreamToBatchMaker0.isBusy());
      assertFalse(instanceStreamToBatchMaker0.isFocusTraversalPolicySet());
      assertFalse(instanceStreamToBatchMaker0.isFocusCycleRoot());
      assertFalse(instanceStreamToBatchMaker0.isFocusTraversalPolicyProvider());
      assertNotNull(instanceStreamToBatchMaker0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isBusy());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertNotNull(substringReplacer0);
      
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer1.globalInfo());
      assertFalse(substringReplacer1.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer1.getMatchReplaceDetails());
      assertFalse(substringReplacer1.getIgnoreRepaint());
      assertFalse(substringReplacer1.isFocusTraversalPolicySet());
      assertTrue(substringReplacer1.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer1.isBusy());
      assertFalse(substringReplacer1.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer1.getCustomName());
      assertNotNull(substringReplacer1);
      assertFalse(substringReplacer1.equals((Object)substringReplacer0));
      
      InstanceEvent instanceEvent0 = substringReplacer1.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      Sorter sorter0 = new Sorter();
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("", sorter0.getTempDirectory());
      assertNotNull(sorter0);
      
      boolean boolean0 = filter0.eventGeneratable("configu!ation");
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(boolean0);
      
      InputContext inputContext0 = filter0.getInputContext();
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNull(inputContext0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)filter0.getColorModel();
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(4, directColorModel0.getNumComponents());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(3, directColorModel0.getTransparency());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertNotNull(directColorModel0);
      
      Classifier classifier0 = new Classifier();
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.isFocusCycleRoot());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertNotNull(classifier0);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer1.globalInfo());
      assertFalse(substringReplacer1.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer1.getMatchReplaceDetails());
      assertFalse(substringReplacer1.getIgnoreRepaint());
      assertFalse(substringReplacer1.isFocusTraversalPolicySet());
      assertTrue(substringReplacer1.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer1.isBusy());
      assertFalse(substringReplacer1.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer1.getCustomName());
      assertEquals(0, instanceEvent0.getStatus());
      assertNotSame(substringReplacer1, substringReplacer0);
      assertFalse(substringReplacer1.equals((Object)substringReplacer0));
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(enumeration0);
      
      MouseMotionListener[] mouseMotionListenerArray0 = filter0.getMouseMotionListeners();
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(mouseMotionListenerArray0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(substringReplacer0, (Instances) null);
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isBusy());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertNotNull(trainingSetEvent0);
      assertFalse(substringReplacer0.equals((Object)substringReplacer1));
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isBusy());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertNotSame(substringReplacer0, substringReplacer1);
      assertFalse(substringReplacer0.equals((Object)substringReplacer1));
      
      SpreadSubsample spreadSubsample1 = (SpreadSubsample)filter0.getFilter();
      assertFalse(filter0.isBusy());
      assertEquals("SpreadSubsample", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample1.maxCountTipText());
      assertFalse(spreadSubsample1.getAdjustWeights());
      assertFalse(spreadSubsample1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample1.randomSeedTipText());
      assertFalse(spreadSubsample1.isOutputFormatDefined());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample1.adjustWeightsTipText());
      assertEquals(0.0, spreadSubsample1.getDistributionSpread(), 0.01);
      assertEquals(0.0, spreadSubsample1.getMaxCount(), 0.01);
      assertEquals(1, spreadSubsample1.getRandomSeed());
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample1.distributionSpreadTipText());
      assertFalse(spreadSubsample1.isFirstBatchDone());
      assertTrue(spreadSubsample1.isNewBatch());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample1.globalInfo());
      assertNotNull(spreadSubsample1);
      assertSame(spreadSubsample1, spreadSubsample0);
      
      // Undeclared exception!
      try { 
        filter0.performRequest("ERROR (See log for details).");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ERROR (See log for details). not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Sorter sorter0 = new Sorter();
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isBusy());
      assertNotNull(sorter0);
      
      boolean boolean1 = sorter0.getVerifyInputWhenFocusTarget();
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isBusy());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      filter0.addDataSourceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isBusy());
      
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      SystemInUtil.addInputLine("United Kingdom");
      // Undeclared exception!
      try { 
        filter0.disconnectionNotification((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertNotNull(filter0);
      
      Classifier classifier0 = new Classifier();
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.getBlockOnLastFold());
      assertNotNull(classifier0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertNotNull(defaultCaret0);
      
      JViewport jViewport0 = new JViewport();
      assertFalse(jViewport0.getIgnoreRepaint());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      assertFalse(jViewport0.isFocusCycleRoot());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertNotNull(jViewport0);
      
      Rectangle rectangle0 = jViewport0.getViewRect();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertFalse(jViewport0.getIgnoreRepaint());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      assertFalse(jViewport0.isFocusCycleRoot());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      
      defaultCaret0.add(rectangle0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertFalse(jViewport0.getIgnoreRepaint());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      assertFalse(jViewport0.isFocusCycleRoot());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertNull(mouseMotionListener0);
      
      classifier0.addMouseMotionListener(defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.getBlockOnLastFold());
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.remove(keyListener0, keyListener0);
      assertNull(keyListener1);
      
      classifier0.removeKeyListener((KeyListener) null);
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.getBlockOnLastFold());
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(classifier0, instances0);
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertTrue(dataSetEvent0.isStructureOnly());
      
      filter0.setLocation(0, 0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      ComponentListener componentListener0 = AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      assertNull(componentListener0);
      
      filter0.removeComponentListener((ComponentListener) null);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      Dimension dimension0 = filter0.getMinimumSize();
      assertEquals(68, dimension0.height);
      assertEquals(67, dimension0.width);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals(67.0, dimension0.getWidth(), 0.01);
      assertEquals(68.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      // Undeclared exception!
      try { 
        filter0.connectionNotification("\"-n~oY'v-)V4#=", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumString());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertNotNull(testInstances0);
      
      filter0.disconnectionNotification("weka.gui.beans.ImageEvent", testInstances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumString());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("weka.gui.beans.ImageEvent", instances0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertNotNull(appender0);
      
      filter0.removeTestSetListener(appender0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_ON;
      assertNotNull(sunHints_Value0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      Classifier classifier0 = new Classifier();
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.getIgnoreRepaint());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertNotNull(classifier0);
      
      filter0.setCustomName("Finished.");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Finished.", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertEquals("The min N of the NGram.", nGramTokenizer0.NGramMinSizeTipText());
      assertEquals(1, nGramTokenizer0.getNGramMinSize());
      assertEquals("Splits a string into an n-gram with min and max grams.", nGramTokenizer0.globalInfo());
      assertEquals(" \r\n\t.,;:'\"()?!", nGramTokenizer0.getDelimiters());
      assertEquals("The max N of the NGram.", nGramTokenizer0.NGramMaxSizeTipText());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", nGramTokenizer0.delimitersTipText());
      assertEquals(3, nGramTokenizer0.getNGramMaxSize());
      assertFalse(nGramTokenizer0.hasMoreElements());
      assertNotNull(nGramTokenizer0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertNotNull(classAssigner0);
      
      TransferHandler transferHandler0 = filter0.getTransferHandler();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Finished.", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNull(transferHandler0);
      
      filter0.disconnectionNotification("Qx@,Wal<G", (Object) null);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Finished.", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      boolean boolean0 = filter0.isBusy();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Finished.", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(boolean0);
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Finished.", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertNotNull(filteredAssociator0);
      
      String string0 = filteredAssociator0.toString();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertNotNull(string0);
      assertEquals("FilteredAssociator: No model built yet.", string0);
      
      MultiFilter multiFilter0 = (MultiFilter)filteredAssociator0.getFilter();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertNotNull(multiFilter0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isBusy());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertNotNull(substringLabeler0);
      
      MultiFilter multiFilter1 = new MultiFilter();
      assertFalse(multiFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter1.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter1.globalInfo());
      assertTrue(multiFilter1.isNewBatch());
      assertFalse(multiFilter1.getDebug());
      assertFalse(multiFilter1.isOutputFormatDefined());
      assertFalse(multiFilter1.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
      assertNotNull(multiFilter1);
      assertFalse(multiFilter1.equals((Object)multiFilter0));
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertNotSame(multiFilter0, multiFilter1);
      assertFalse(multiFilter0.equals((Object)multiFilter1));
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertFalse(modelPerformanceChart0.isBusy());
      assertNotNull(modelPerformanceChart0);
      
      boolean boolean1 = filter0.isFocusable();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      filter0.setCustomName("&/mhOh#");
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("&/mhOh#", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertEquals(3, nGramTokenizer0.getNGramMaxSize());
      assertEquals("Splits a string into an n-gram with min and max grams.", nGramTokenizer0.globalInfo());
      assertEquals("The min N of the NGram.", nGramTokenizer0.NGramMinSizeTipText());
      assertEquals(1, nGramTokenizer0.getNGramMinSize());
      assertFalse(nGramTokenizer0.hasMoreElements());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", nGramTokenizer0.delimitersTipText());
      assertEquals("The max N of the NGram.", nGramTokenizer0.NGramMaxSizeTipText());
      assertEquals(" \r\n\t.,;:'\"()?!", nGramTokenizer0.getDelimiters());
      assertNotNull(nGramTokenizer0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertNotNull(classAssigner0);
      
      TransferHandler transferHandler0 = filter0.getTransferHandler();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("&/mhOh#", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertNull(transferHandler0);
      
      TestSetMaker testSetMaker0 = new TestSetMaker();
      assertTrue(testSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(testSetMaker0.isFocusTraversalPolicySet());
      assertEquals("TestSetMaker", testSetMaker0.getCustomName());
      assertFalse(testSetMaker0.getIgnoreRepaint());
      assertFalse(testSetMaker0.isBusy());
      assertEquals("Designate an incoming data set as a test set.", testSetMaker0.globalInfo());
      assertFalse(testSetMaker0.isFocusCycleRoot());
      assertFalse(testSetMaker0.isFocusTraversalPolicyProvider());
      assertNotNull(testSetMaker0);
      
      Instances instances0 = testSetMaker0.getStructure("&/mhOh#");
      assertTrue(testSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(testSetMaker0.isFocusTraversalPolicySet());
      assertEquals("TestSetMaker", testSetMaker0.getCustomName());
      assertFalse(testSetMaker0.getIgnoreRepaint());
      assertFalse(testSetMaker0.isBusy());
      assertEquals("Designate an incoming data set as a test set.", testSetMaker0.globalInfo());
      assertFalse(testSetMaker0.isFocusCycleRoot());
      assertFalse(testSetMaker0.isFocusTraversalPolicyProvider());
      assertNull(instances0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("&/mhOh#", (Instances) null);
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("&/mhOh#", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertNotNull(appender0);
      
      filter0.removeTestSetListener(classAssigner0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("&/mhOh#", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertNotNull(flowByExpression0);
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertNotNull(filteredAssociator0);
      
      String string0 = filteredAssociator0.toString();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertNotNull(string0);
      assertEquals("FilteredAssociator: No model built yet.", string0);
      
      FilteredAssociator filteredAssociator1 = new FilteredAssociator();
      assertEquals((-1), filteredAssociator1.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator1.globalInfo());
      assertTrue(filteredAssociator1.canProduceRules());
      assertEquals("The filter to be used.", filteredAssociator1.filterTipText());
      assertEquals("The base associator to be used.", filteredAssociator1.associatorTipText());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator1.classIndexTipText());
      assertNotNull(filteredAssociator1);
      assertFalse(filteredAssociator1.equals((Object)filteredAssociator0));
      
      Add add0 = new Add();
      assertEquals("last", add0.getAttributeIndex());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertTrue(add0.isNewBatch());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertNotNull(add0);
      
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertNotNull(costBenefitAnalysis0);
      
      VetoableChangeListener[] vetoableChangeListenerArray0 = costBenefitAnalysis0.getVetoableChangeListeners();
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertNotNull(vetoableChangeListenerArray0);
      
      InputVerifier inputVerifier0 = costBenefitAnalysis0.getInputVerifier();
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertNull(inputVerifier0);
      
      CostBenefitAnalysis costBenefitAnalysis1 = new CostBenefitAnalysis();
      assertFalse(costBenefitAnalysis1.getIgnoreRepaint());
      assertFalse(costBenefitAnalysis1.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis1.isFocusTraversalPolicySet());
      assertFalse(costBenefitAnalysis1.isFocusCycleRoot());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis1.globalInfo());
      assertFalse(costBenefitAnalysis1.isBusy());
      assertTrue(costBenefitAnalysis1.getFocusTraversalKeysEnabled());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis1.getCustomName());
      assertNotNull(costBenefitAnalysis1);
      assertFalse(costBenefitAnalysis1.equals((Object)costBenefitAnalysis0));
      
      CostBenefitAnalysis costBenefitAnalysis2 = new CostBenefitAnalysis();
      assertFalse(costBenefitAnalysis2.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis2.globalInfo());
      assertFalse(costBenefitAnalysis2.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis2.isFocusCycleRoot());
      assertFalse(costBenefitAnalysis2.getIgnoreRepaint());
      assertTrue(costBenefitAnalysis2.getFocusTraversalKeysEnabled());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis2.getCustomName());
      assertFalse(costBenefitAnalysis2.isBusy());
      assertNotNull(costBenefitAnalysis2);
      assertFalse(costBenefitAnalysis2.equals((Object)costBenefitAnalysis0));
      assertFalse(costBenefitAnalysis2.equals((Object)costBenefitAnalysis1));
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertFalse(classValuePicker0.isBusy());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertNull(classValuePicker0.getClassValue());
      assertNotNull(classValuePicker0);
      
      BeanVisual beanVisual0 = classValuePicker0.getVisual();
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertFalse(classValuePicker0.isBusy());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertNull(classValuePicker0.getClassValue());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/ClassValuePicker.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/ClassValuePicker_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertEquals("ClassValuePicker", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertNotNull(beanVisual0);
      
      filter0.setVisual(beanVisual0);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("ClassValuePicker", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertFalse(classValuePicker0.isBusy());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertNull(classValuePicker0.getClassValue());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/ClassValuePicker.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/ClassValuePicker_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertEquals("ClassValuePicker", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.getIgnoreRepaint());
      
      TestSetEvent testSetEvent0 = null;
      try {
        testSetEvent0 = new TestSetEvent((Object) null, (Instances) null, 0, 3, 46, 216);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotNull(filter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      filter0.connectionNotification("weka/gui/beans/icons/", "weka/gui/beans/icons/");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      assertNotNull(componentListener1);
      
      ComponentListener componentListener2 = AWTEventMulticaster.remove(componentListener1, componentListener1);
      assertNull(componentListener2);
      
      ComponentListener componentListener3 = AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      assertNull(componentListener3);
      
      ComponentListener componentListener4 = AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      assertNull(componentListener4);
      
      ComponentListener componentListener5 = AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      assertNull(componentListener5);
      
      ComponentListener componentListener6 = AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      assertNull(componentListener6);
      
      ComponentListener componentListener7 = AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      assertNull(componentListener7);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertNotNull(substringReplacer0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      boolean boolean0 = filter0.connectionAllowed("weka/gui/beans/icons/");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(boolean0);
      
      Sorter sorter0 = new Sorter();
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertEquals("Sorter", sorter0.getCustomName());
      assertEquals("", sorter0.getTempDirectory());
      assertNull(sorter0.getSortDetails());
      assertFalse(sorter0.isFocusCycleRoot());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.getIgnoreRepaint());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNotNull(sorter0);
      
      Classifier classifier0 = new Classifier();
      assertFalse(classifier0.getIgnoreRepaint());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertNotNull(classifier0);
      
      DatabaseSaver databaseSaver0 = new DatabaseSaver();
      assertEquals("Sets the name of the table.", databaseSaver0.tableNameTipText());
      assertEquals("", databaseSaver0.getTableName());
      assertEquals("If set to true, the relation name will be used as name for the database table. Otherwise the user has to provide a table name.", databaseSaver0.relationForTableNameTipText());
      assertFalse(databaseSaver0.getTruncate());
      assertEquals("Writes to a database (tested with MySQL, InstantDB, HSQLDB).", databaseSaver0.globalInfo());
      assertEquals("If set to true, a primary key column is generated automatically (containing the row number as INTEGER). The name of the key is read from DatabaseUtils (idColumn) This primary key can be used for incremental loading (requires an unique key). This primary key will not be loaded as an attribute.", databaseSaver0.autoKeyGenerationTipText());
      assertEquals("", databaseSaver0.getUser());
      assertEquals("jdbc:idb=experiments.prp", databaseSaver0.getUrl());
      assertEquals(1, databaseSaver0.getWriteMode());
      assertEquals("Truncate (i.e. drop and recreate) table if it already exists", databaseSaver0.truncateTipText());
      assertEquals("The URL of the database", databaseSaver0.urlTipText());
      assertEquals("The custom properties that the user can use to override the default ones.", databaseSaver0.customPropsFileTipText());
      assertFalse(databaseSaver0.getAutoKeyGeneration());
      assertEquals("", databaseSaver0.getPassword());
      assertTrue(databaseSaver0.getRelationForTableName());
      assertEquals("The database password", databaseSaver0.passwordTipText());
      assertEquals("The user name for the database", databaseSaver0.userTipText());
      assertNotNull(databaseSaver0);
      
      Sorter sorter1 = new Sorter();
      assertEquals("", sorter1.getTempDirectory());
      assertFalse(sorter1.getIgnoreRepaint());
      assertEquals("Sorter", sorter1.getCustomName());
      assertTrue(sorter1.getFocusTraversalKeysEnabled());
      assertFalse(sorter1.isFocusTraversalPolicySet());
      assertFalse(sorter1.isBusy());
      assertNull(sorter1.getSortDetails());
      assertEquals("10000", sorter1.getBufferSize());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter1.globalInfo());
      assertFalse(sorter1.isFocusCycleRoot());
      assertFalse(sorter1.isFocusTraversalPolicyProvider());
      assertNotNull(sorter1);
      assertFalse(sorter1.equals((Object)sorter0));
      
      boolean boolean1 = filter0.eventGeneratable("weka/gui/beans/icons/");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertNotNull(flowByExpression0);
      
      SystemInUtil.addInputLine("model");
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertNotNull(trainingSetMaker0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(flowByExpression0, (Instances) null);
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(dataSetEvent0.isStructureOnly());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertNotNull(substringLabeler0);
      
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals(0, instanceEvent0.getStatus());
      
      String string0 = BorderLayout.PAGE_END;
      assertNotNull(string0);
      assertEquals("Last", string0);
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotNull(beanVisual0);
      
      // Undeclared exception!
      try { 
        filter0.performRequest("c/r9A$`)(agK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // c/r9A$`)(agK not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotNull(filter0);
      
      PropertyChangeListener[] propertyChangeListenerArray0 = filter0.getPropertyChangeListeners();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotNull(propertyChangeListenerArray0);
      
      ActionListener actionListener0 = filter0.getActionForKeyStroke((KeyStroke) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertNull(actionListener0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertNotNull(substringReplacer0);
      
      substringReplacer0.removeAll();
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      
      substringReplacer0.requestFocus();
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = filter0.eventGeneratable("configuration");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertNotNull(filteredAssociator0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertNotNull(classAssigner0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertNotNull(appender0);
      
      AllFilter allFilter0 = new AllFilter();
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertNotNull(multiFilter0);
      
      AllFilter allFilter1 = new AllFilter();
      assertTrue(allFilter1.isNewBatch());
      assertFalse(allFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter1.globalInfo());
      assertFalse(allFilter1.isFirstBatchDone());
      assertFalse(allFilter1.isOutputFormatDefined());
      assertNotNull(allFilter1);
      assertFalse(allFilter1.equals((Object)allFilter0));
      
      filter0.setFilter(allFilter1);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(allFilter1.isNewBatch());
      assertFalse(allFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter1.globalInfo());
      assertFalse(allFilter1.isFirstBatchDone());
      assertFalse(allFilter1.isOutputFormatDefined());
      assertNotSame(allFilter1, allFilter0);
      assertFalse(allFilter1.equals((Object)allFilter0));
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertFalse(modelPerformanceChart0.isBusy());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertNotNull(modelPerformanceChart0);
      
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("ModelPerformanceChart", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      assertNotNull(beanVisual0);
      
      filter0.setVisual(beanVisual0);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertFalse(modelPerformanceChart0.isBusy());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("ModelPerformanceChart", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("ModelPerformanceChart", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      
      filter0.setCustomName("Eliminate colinear attributes.");
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Eliminate colinear attributes.", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      
      Random.setNextRandom(3);
      filter0.addTrainingSetListener(classAssigner0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Eliminate colinear attributes.", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      Add add0 = new Add();
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertEquals("last", add0.getAttributeIndex());
      assertNotNull(add0);
      
      Capabilities capabilities0 = add0.getCapabilities();
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertEquals("last", add0.getAttributeIndex());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      filter0.setFilter(add0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertEquals("last", add0.getAttributeIndex());
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertNotNull(attributeSummarizer0);
      
      filter0.removeTrainingSetListener(attributeSummarizer0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      
      filter0.removeInstanceListener((InstanceListener) null);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      filter0.addDataSourceListener(attributeSummarizer0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      
      Associator associator0 = new Associator();
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.getIgnoreRepaint());
      assertEquals("Apriori", associator0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertNotNull(associator0);
      
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      assertEquals("XRFF data files", xRFFLoader0.getFileDescription());
      assertEquals("Use relative rather than absolute paths", xRFFLoader0.useRelativePathTipText());
      assertEquals("http://", xRFFLoader0.retrieveURL());
      assertFalse(xRFFLoader0.getUseRelativePath());
      assertEquals(".xrff", xRFFLoader0.getFileExtension());
      assertNotNull(xRFFLoader0);
      
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      Classifier classifier0 = new Classifier();
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.getIgnoreRepaint());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertNotNull(classifier0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertNotNull(defaultCaret0);
      
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertNull(mouseMotionListener0);
      
      DefaultCaret defaultCaret1 = new DefaultCaret();
      assertEquals(0, defaultCaret1.height);
      assertEquals(0, defaultCaret1.x);
      assertEquals(0, defaultCaret1.y);
      assertEquals(0, defaultCaret1.width);
      assertEquals(0.0, defaultCaret1.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret1.getWidth(), 0.01);
      assertTrue(defaultCaret1.isEmpty());
      assertEquals(0.0, defaultCaret1.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret1.getY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret1.getX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterX(), 0.01);
      assertNotNull(defaultCaret1);
      assertFalse(defaultCaret1.equals((Object)defaultCaret0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      classifier0.addMouseMotionListener(defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.getIgnoreRepaint());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertNotSame(defaultCaret0, defaultCaret1);
      assertFalse(defaultCaret0.equals((Object)defaultCaret1));
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      assertNotNull(keyListener1);
      
      Border border0 = LineBorder.createBlackLineBorder();
      assertNotNull(border0);
      
      Sorter sorter0 = new Sorter();
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isBusy());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNotNull(sorter0);
      
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
      assertEquals("Evaluate the performance of batch trained clusterers.", clustererPerformanceEvaluator0.globalInfo());
      assertFalse(clustererPerformanceEvaluator0.getIgnoreRepaint());
      assertFalse(clustererPerformanceEvaluator0.isBusy());
      assertTrue(clustererPerformanceEvaluator0.getFocusTraversalKeysEnabled());
      assertFalse(clustererPerformanceEvaluator0.isFocusTraversalPolicySet());
      assertFalse(clustererPerformanceEvaluator0.isFocusTraversalPolicyProvider());
      assertFalse(clustererPerformanceEvaluator0.isFocusCycleRoot());
      assertNotNull(clustererPerformanceEvaluator0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertNull(classValuePicker0.getClassValue());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNotNull(classValuePicker0);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.isFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertNotNull(allFilter0);
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertNotNull(flowByExpression0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertNotNull(trainingSetMaker0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isBusy());
      assertNotNull(substringLabeler0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertNotNull(multiFilter0);
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertFalse(modelPerformanceChart0.isBusy());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertNotNull(modelPerformanceChart0);
      
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      assertNotNull(synthTreeUI0);
      
      Dimension dimension0 = synthTreeUI0.getPreferredSize((JComponent) flowByExpression0, true);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      modelPerformanceChart0.setSize(dimension0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertFalse(modelPerformanceChart0.isBusy());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertEquals("ModelPerformanceChart", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertNotNull(beanVisual0);
      
      filter0.setCustomName("weka/gui/beans/icons/");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isBusy());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals(0, instanceEvent0.getStatus());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      filter0.connectionNotification("h/zw4(", "h/zw4(");
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      filter0.setLog(sysErrLog0);
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      Filter filter1 = new Filter();
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertNotNull(filter1);
      assertFalse(filter1.equals((Object)filter0));
      
      filter0.removeInstanceListener(filter1);
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertNotSame(filter0, filter1);
      assertNotSame(filter1, filter0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter1.equals((Object)filter0));
      
      Associator associator0 = new Associator();
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.getIgnoreRepaint());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isFocusCycleRoot());
      assertEquals("Apriori", associator0.getCustomName());
      assertNotNull(associator0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader1.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader1.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader1.charSetTipText());
      assertEquals("", textDirectoryLoader1.getCharSet());
      assertFalse(textDirectoryLoader1.getDebug());
      assertFalse(textDirectoryLoader1.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader1.globalInfo());
      assertEquals("Directories", textDirectoryLoader1.getFileDescription());
      assertNotNull(textDirectoryLoader1);
      assertFalse(textDirectoryLoader1.equals((Object)textDirectoryLoader0));
      
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(stringArray0);
      assertNotSame(textDirectoryLoader0, textDirectoryLoader1);
      assertFalse(textDirectoryLoader0.equals((Object)textDirectoryLoader1));
      
      textDirectoryLoader1.setCharSet("WrapperSubsetEval:\n\nEvaluates attribute sets by using a learning scheme. Cross validation is used to estimate the accuracy of the learning scheme for a set of attributes.\n\nFor more information see:\n\n");
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader1.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader1.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader1.charSetTipText());
      assertEquals("WrapperSubsetEval:\n\nEvaluates attribute sets by using a learning scheme. Cross validation is used to estimate the accuracy of the learning scheme for a set of attributes.\n\nFor more information see:\n\n", textDirectoryLoader1.getCharSet());
      assertFalse(textDirectoryLoader1.getDebug());
      assertFalse(textDirectoryLoader1.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader1.globalInfo());
      assertEquals("Directories", textDirectoryLoader1.getFileDescription());
      assertNotSame(textDirectoryLoader1, textDirectoryLoader0);
      assertFalse(textDirectoryLoader1.equals((Object)textDirectoryLoader0));
      
      File file0 = textDirectoryLoader0.getDirectory();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("9_weka", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      assertNotSame(textDirectoryLoader0, textDirectoryLoader1);
      assertFalse(textDirectoryLoader0.equals((Object)textDirectoryLoader1));
      
      Filter filter2 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertEquals("AllFilter", filter2.getCustomName());
      assertFalse(filter2.isBusy());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.getIgnoreRepaint());
      assertNotNull(filter2);
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.equals((Object)filter1));
      
      Filter filter3 = new Filter();
      assertFalse(filter3.isFocusCycleRoot());
      assertFalse(filter3.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter3.globalInfo());
      assertFalse(filter3.isFocusTraversalPolicyProvider());
      assertFalse(filter3.isBusy());
      assertEquals("AllFilter", filter3.getCustomName());
      assertFalse(filter3.getIgnoreRepaint());
      assertTrue(filter3.getFocusTraversalKeysEnabled());
      assertNotNull(filter3);
      assertFalse(filter3.equals((Object)filter0));
      assertFalse(filter3.equals((Object)filter2));
      assertFalse(filter3.equals((Object)filter1));
      
      boolean boolean1 = filter0.isFocusOwner();
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotSame(filter0, filter2);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter3);
      assertFalse(boolean1);
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter3));
      assertFalse(boolean1 == boolean0);
      
      Classifier classifier0 = new Classifier();
      assertFalse(classifier0.getIgnoreRepaint());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertFalse(classifier0.getBlockOnLastFold());
      assertEquals(2, classifier0.getExecutionSlots());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertNotNull(classifier0);
      
      Filter filter4 = new Filter();
      assertFalse(filter4.isBusy());
      assertTrue(filter4.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter4.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter4.globalInfo());
      assertFalse(filter4.isFocusTraversalPolicyProvider());
      assertFalse(filter4.isFocusCycleRoot());
      assertFalse(filter4.getIgnoreRepaint());
      assertFalse(filter4.isFocusTraversalPolicySet());
      assertNotNull(filter4);
      assertFalse(filter4.equals((Object)filter2));
      assertFalse(filter4.equals((Object)filter0));
      assertFalse(filter4.equals((Object)filter1));
      assertFalse(filter4.equals((Object)filter3));
      
      Filter filter5 = new Filter();
      assertFalse(filter5.getIgnoreRepaint());
      assertFalse(filter5.isBusy());
      assertTrue(filter5.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter5.getCustomName());
      assertFalse(filter5.isFocusTraversalPolicySet());
      assertFalse(filter5.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter5.globalInfo());
      assertFalse(filter5.isFocusTraversalPolicyProvider());
      assertNotNull(filter5);
      assertFalse(filter5.equals((Object)filter3));
      assertFalse(filter5.equals((Object)filter4));
      assertFalse(filter5.equals((Object)filter0));
      assertFalse(filter5.equals((Object)filter2));
      assertFalse(filter5.equals((Object)filter1));
      
      PropertyChangeListener[] propertyChangeListenerArray0 = filter1.getPropertyChangeListeners("h/zw4(");
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertNotNull(propertyChangeListenerArray0);
      assertNotSame(filter1, filter4);
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
      assertNotSame(filter1, filter3);
      assertNotSame(filter1, filter5);
      assertFalse(filter1.equals((Object)filter4));
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      assertFalse(filter1.equals((Object)filter3));
      assertFalse(filter1.equals((Object)filter5));
      
      filter2.performRequest("Stop");
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertEquals("AllFilter", filter2.getCustomName());
      assertFalse(filter2.isBusy());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.getIgnoreRepaint());
      assertNotSame(filter2, filter0);
      assertNotSame(filter2, filter1);
      assertNotSame(filter2, filter5);
      assertNotSame(filter2, filter3);
      assertNotSame(filter2, filter4);
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter5));
      assertFalse(filter2.equals((Object)filter3));
      assertFalse(filter2.equals((Object)filter4));
      
      filter2.addDataSourceListener(associator0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertEquals("AllFilter", filter2.getCustomName());
      assertFalse(filter2.isBusy());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.getIgnoreRepaint());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isFocusCycleRoot());
      assertEquals("Apriori", associator0.getCustomName());
      assertNotSame(filter2, filter0);
      assertNotSame(filter2, filter1);
      assertNotSame(filter2, filter5);
      assertNotSame(filter2, filter3);
      assertNotSame(filter2, filter4);
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter5));
      assertFalse(filter2.equals((Object)filter3));
      assertFalse(filter2.equals((Object)filter4));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      filter0.validate();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.remove(keyListener0, keyListener0);
      assertNull(keyListener1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("]s'pFdE|1+");
      assertEquals("]s'pFdE|1+", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("]s'pFdE|1+");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "}UF%z5H&{z<b!c", 0L);
      assertEquals("]s'pFdE|1+", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertEquals("]s'pFdE|1+", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      filter0.m_filterThread = (Thread) mockThread2;
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("]s'pFdE|1+", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals(0, filter0.m_filterThread.countStackFrames());
      assertFalse(filter0.m_filterThread.isInterrupted());
      assertFalse(filter0.m_filterThread.isDaemon());
      
      KeyListener keyListener2 = AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      assertNull(keyListener2);
      
      filter0.removeKeyListener((KeyListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      filter0.revalidate();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      filter0.setLog((Logger) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(enumeration0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertNotNull(classAssigner0);
      
      filter0.addTestSetListener(classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      
      SystemInUtil.addInputLine("]s'pFdE|1+");
      filter0.removeTestSetListener(classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      
      filter0.removeInstanceListener((InstanceListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      Classifier classifier0 = new Classifier();
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.isFocusCycleRoot());
      assertNotNull(classifier0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertNotNull(instances0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertNotNull(defaultCaret0);
      
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertNull(mouseMotionListener0);
      
      DefaultCaret defaultCaret1 = new DefaultCaret();
      assertEquals(0, defaultCaret1.x);
      assertEquals(0, defaultCaret1.width);
      assertEquals(0, defaultCaret1.height);
      assertEquals(0, defaultCaret1.y);
      assertEquals(0.0, defaultCaret1.getY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret1.getX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getHeight(), 0.01);
      assertTrue(defaultCaret1.isEmpty());
      assertEquals(0.0, defaultCaret1.getWidth(), 0.01);
      assertNotNull(defaultCaret1);
      assertFalse(defaultCaret1.equals((Object)defaultCaret0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      classifier0.addMouseMotionListener(defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.isFocusCycleRoot());
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertNotSame(defaultCaret0, defaultCaret1);
      assertFalse(defaultCaret0.equals((Object)defaultCaret1));
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      assertNotNull(keyListener1);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(enumeration0);
      
      SynthColorChooserUI synthColorChooserUI0 = new SynthColorChooserUI();
      assertNotNull(synthColorChooserUI0);
      
      Border border0 = LineBorder.createBlackLineBorder();
      assertNotNull(border0);
      
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertEquals("Evaluate the performance of batch trained clusterers.", clustererPerformanceEvaluator0.globalInfo());
      assertFalse(clustererPerformanceEvaluator0.isFocusTraversalPolicyProvider());
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
      assertFalse(clustererPerformanceEvaluator0.getIgnoreRepaint());
      assertFalse(clustererPerformanceEvaluator0.isFocusTraversalPolicySet());
      assertTrue(clustererPerformanceEvaluator0.getFocusTraversalKeysEnabled());
      assertFalse(clustererPerformanceEvaluator0.isBusy());
      assertFalse(clustererPerformanceEvaluator0.isFocusCycleRoot());
      assertNotNull(clustererPerformanceEvaluator0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertNull(classValuePicker0.getClassValue());
      assertNotNull(classValuePicker0);
      
      boolean boolean1 = filter0.eventGeneratable(".arff");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertNotNull(allFilter0);
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertNotNull(flowByExpression0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertNotNull(trainingSetMaker0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertNotNull(substringLabeler0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertNotNull(multiFilter0);
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.isBusy());
      assertNotNull(modelPerformanceChart0);
      
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      assertNotNull(synthTreeUI0);
      
      Dimension dimension0 = synthTreeUI0.getPreferredSize((JComponent) flowByExpression0, true);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      modelPerformanceChart0.setSize(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.isBusy());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("ModelPerformanceChart", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertNotNull(beanVisual0);
      
      filter0.setCustomName("weka/gui/beans/icons/");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      
      boolean boolean2 = filter0.connectionAllowed("@data");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = filter0.getCustomName();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertNotNull(string0);
      assertEquals("weka/gui/beans/icons/", string0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(defaultCaret1, instances0);
      assertEquals(0, defaultCaret1.x);
      assertEquals(0, defaultCaret1.width);
      assertEquals(0, defaultCaret1.height);
      assertEquals(0, defaultCaret1.y);
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, defaultCaret1.getY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret1.getX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getHeight(), 0.01);
      assertTrue(defaultCaret1.isEmpty());
      assertEquals(0.0, defaultCaret1.getWidth(), 0.01);
      assertNotNull(trainingSetEvent0);
      assertFalse(defaultCaret1.equals((Object)defaultCaret0));
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals(0, defaultCaret1.x);
      assertEquals(0, defaultCaret1.width);
      assertEquals(0, defaultCaret1.height);
      assertEquals(0, defaultCaret1.y);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, defaultCaret1.getY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret1.getX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getHeight(), 0.01);
      assertTrue(defaultCaret1.isEmpty());
      assertEquals(0.0, defaultCaret1.getWidth(), 0.01);
      assertNotSame(defaultCaret1, defaultCaret0);
      assertFalse(defaultCaret1.equals((Object)defaultCaret0));
      
      // Undeclared exception!
      try { 
        filter0.performRequest("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @relation not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      textDirectoryLoader0.setCharSet("weka.gui.beans.ImageEvent");
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("weka.gui.beans.ImageEvent", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertNotNull(substringLabeler0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertNotNull(multiFilter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertFalse(modelPerformanceChart0.isBusy());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertNotNull(modelPerformanceChart0);
      
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      boolean boolean0 = substringLabeler0.m_consumeNonMatchingInstances;
      assertFalse(boolean0);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertNotNull(filter1);
      assertFalse(filter1.equals((Object)filter0));
      
      InputVerifier inputVerifier0 = filter1.getInputVerifier();
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertNull(inputVerifier0);
      assertNotSame(filter1, filter0);
      assertFalse(filter1.equals((Object)filter0));
      
      filter1.setInputVerifier((InputVerifier) null);
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertNotSame(filter1, filter0);
      assertFalse(filter1.equals((Object)filter0));
      
      filter0.addDataSourceListener(substringLabeler0);
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotSame(filter0, filter1);
      assertFalse(filter0.equals((Object)filter1));
      
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-74);
      textDirectoryLoader0.reset();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("weka.gui.beans.ImageEvent", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Associator associator0 = new Associator();
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.getIgnoreRepaint());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      assertNotNull(associator0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent("weka.gui.beans.ImageEvent", instances0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("weka.gui.beans.ImageEvent", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[4] = (double) (byte) (-69);
      filter0.setOpaque(true);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotSame(filter0, filter1);
      assertFalse(filter0.equals((Object)filter1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("weka.gui.beans.ImageEvent", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotSame(filter0, filter1);
      assertFalse(filter0.equals((Object)filter1));
      
      // Undeclared exception!
      try { 
        filter1.performRequest("DenseInstance has accesss to a dataset!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DenseInstance has accesss to a dataset! not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertEquals("last", classAssigner0.getClassColumn());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertNotNull(classAssigner0);
      
      filter0.connectionNotification("@mkcr=a1b2:F$&;f|:&", classAssigner0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertEquals("last", classAssigner0.getClassColumn());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.getIgnoreRepaint());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PropertyChangeListener[] propertyChangeListenerArray0 = filter0.getPropertyChangeListeners();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(propertyChangeListenerArray0);
      
      Sorter sorter0 = new Sorter();
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusCycleRoot());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertNotNull(sorter0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean3 = filter0.eventGeneratable("@mkcr=a1b2:F$&;f|:&");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertNotNull(filteredAssociator0);
      
      Add add0 = new Add();
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("last", add0.getAttributeIndex());
      assertTrue(add0.isNewBatch());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(add0);
      
      filter0.firePropertyChange("@mkcr=a1b2:F$&;f|:&", (-544L), (-1514L));
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      assertFalse(wekaTaskMonitor0.getIgnoreRepaint());
      assertTrue(wekaTaskMonitor0.getFocusTraversalKeysEnabled());
      assertFalse(wekaTaskMonitor0.isFocusTraversalPolicySet());
      assertFalse(wekaTaskMonitor0.isFocusTraversalPolicyProvider());
      assertFalse(wekaTaskMonitor0.isFocusCycleRoot());
      assertNotNull(wekaTaskMonitor0);
      
      weka.gui.LogPanel logPanel0 = null;
      try {
        logPanel0 = new weka.gui.LogPanel((WekaTaskMonitor) null, true, true, true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("last", classAssigner0.getClassColumn());
      assertNotNull(classAssigner0);
      
      filter0.connectionNotification("dataSet", classAssigner0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("last", classAssigner0.getClassColumn());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PropertyChangeListener[] propertyChangeListenerArray0 = filter0.getPropertyChangeListeners("Ohd)FMU,.V'`O~!24o");
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(propertyChangeListenerArray0);
      
      Sorter sorter0 = new Sorter();
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNotNull(sorter0);
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      assertNotNull(keyListener1);
      
      sorter0.addKeyListener(keyListener1);
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean3 = filter0.eventGeneratable("dataSet");
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      Add add0 = new Add();
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertNotNull(add0);
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertNotNull(allFilter0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean6 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean6);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      
      filter0.removeDataSourceListener(sorter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.addInstanceListener(sorter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isBusy());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertNotNull(predictionAppender0);
      
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      assertNull(instanceEvent0);
      
      filter0.acceptInstance((InstanceEvent) null);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      MockThread mockThread0 = new MockThread("trainingSet");
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      filter0.m_filterThread = (Thread) mockThread0;
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, filter0.m_filterThread.countStackFrames());
      assertFalse(filter0.m_filterThread.isDaemon());
      assertFalse(filter0.m_filterThread.isInterrupted());
      
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertNotNull(trainTestSplitMaker0);
      
      Sorter sorter0 = new Sorter();
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNotNull(sorter0);
      
      Logger logger0 = sorter0.m_log;
      assertNull(logger0);
      
      trainTestSplitMaker0.setLog((Logger) null);
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      
      filter0.disconnectionNotification("trainingSet", "trainingSet");
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      String string0 = filter0.globalInfo();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(string0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      Loader loader0 = new Loader();
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertFalse(loader0.isBusy());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.isFocusCycleRoot());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertNotNull(loader0);
      
      FocusTraversalPolicy focusTraversalPolicy0 = filter0.getFocusTraversalPolicy();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNull(focusTraversalPolicy0);
      
      filter0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      BeanVisual beanVisual0 = loader0.getVisual();
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertFalse(loader0.isBusy());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.isFocusCycleRoot());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals("ArffLoader", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultDataSource.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/DefaultDataSource_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertNotNull(beanVisual0);
      
      filter0.setVisual(beanVisual0);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("ArffLoader", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertFalse(loader0.isBusy());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.isFocusCycleRoot());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals("ArffLoader", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultDataSource.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/DefaultDataSource_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.getIgnoreRepaint());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BeanVisual beanVisual1 = filter0.getVisual();
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals("ArffLoader", beanVisual1.getText());
      assertTrue(beanVisual1.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/DefaultDataSource_animated.gif", beanVisual1.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultDataSource.gif", beanVisual1.getIconPath());
      assertFalse(beanVisual1.getIgnoreRepaint());
      assertFalse(beanVisual1.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual1.isFocusCycleRoot());
      assertFalse(beanVisual1.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("ArffLoader", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(beanVisual1);
      assertSame(beanVisual1, beanVisual0);
      
      Instances instances0 = sorter0.getConnectedFormat();
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNull(instances0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(beanVisual1, (Instances) null);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals("ArffLoader", beanVisual1.getText());
      assertTrue(beanVisual1.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/DefaultDataSource_animated.gif", beanVisual1.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultDataSource.gif", beanVisual1.getIconPath());
      assertFalse(beanVisual1.getIgnoreRepaint());
      assertFalse(beanVisual1.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual1.isFocusCycleRoot());
      assertFalse(beanVisual1.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("ArffLoader", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals("ArffLoader", beanVisual1.getText());
      assertTrue(beanVisual1.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/DefaultDataSource_animated.gif", beanVisual1.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultDataSource.gif", beanVisual1.getIconPath());
      assertFalse(beanVisual1.getIgnoreRepaint());
      assertFalse(beanVisual1.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual1.isFocusCycleRoot());
      assertFalse(beanVisual1.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("ArffLoader", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertSame(beanVisual1, beanVisual0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      filter0.connectionNotification("h/zw4(", "h/zw4(");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      assertNotNull(componentListener1);
      
      ComponentListener componentListener2 = AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      assertNull(componentListener2);
      
      ComponentListener componentListener3 = AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      assertNull(componentListener3);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertNotNull(substringReplacer0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      boolean boolean0 = substringReplacer0.m_busy;
      assertFalse(boolean0);
      
      Sorter sorter0 = new Sorter();
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertNotNull(sorter0);
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      DatabaseSaver databaseSaver0 = new DatabaseSaver();
      assertEquals("Truncate (i.e. drop and recreate) table if it already exists", databaseSaver0.truncateTipText());
      assertEquals("Writes to a database (tested with MySQL, InstantDB, HSQLDB).", databaseSaver0.globalInfo());
      assertFalse(databaseSaver0.getTruncate());
      assertEquals("The URL of the database", databaseSaver0.urlTipText());
      assertEquals("", databaseSaver0.getTableName());
      assertFalse(databaseSaver0.getAutoKeyGeneration());
      assertEquals("If set to true, the relation name will be used as name for the database table. Otherwise the user has to provide a table name.", databaseSaver0.relationForTableNameTipText());
      assertEquals(1, databaseSaver0.getWriteMode());
      assertEquals("The user name for the database", databaseSaver0.userTipText());
      assertEquals("Sets the name of the table.", databaseSaver0.tableNameTipText());
      assertEquals("", databaseSaver0.getPassword());
      assertEquals("The database password", databaseSaver0.passwordTipText());
      assertTrue(databaseSaver0.getRelationForTableName());
      assertEquals("The custom properties that the user can use to override the default ones.", databaseSaver0.customPropsFileTipText());
      assertEquals("", databaseSaver0.getUser());
      assertEquals("jdbc:idb=experiments.prp", databaseSaver0.getUrl());
      assertEquals("If set to true, a primary key column is generated automatically (containing the row number as INTEGER). The name of the key is read from DatabaseUtils (idColumn) This primary key can be used for incremental loading (requires an unique key). This primary key will not be loaded as an attribute.", databaseSaver0.autoKeyGenerationTipText());
      assertNotNull(databaseSaver0);
      
      DenseInstance denseInstance0 = new DenseInstance(0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(0, denseInstance0.numValues());
      assertEquals(0, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      InstanceEvent instanceEvent1 = new InstanceEvent(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(0, denseInstance0.numValues());
      assertEquals(0, denseInstance0.numAttributes());
      assertEquals(0, instanceEvent1.getStatus());
      assertNotNull(instanceEvent1);
      assertFalse(instanceEvent1.equals((Object)instanceEvent0));
      
      instanceEvent1.setStatus(2);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(0, denseInstance0.numValues());
      assertEquals(0, denseInstance0.numAttributes());
      assertEquals(2, instanceEvent1.getStatus());
      assertNotSame(instanceEvent1, instanceEvent0);
      assertFalse(instanceEvent1.equals((Object)instanceEvent0));
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertNotNull(multiFilter0);
      
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(allFilter0.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertNotNull(allFilter0);
      
      filter0.setFilter(multiFilter0);
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      
      substringReplacer0.setToolTipText("h/zw4(");
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      
      filter0.setCustomName("can't process streamed instances; can't continue");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("can't process streamed instances; can't continue", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.acceptInstance(instanceEvent1);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("can't process streamed instances; can't continue", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(0, denseInstance0.numValues());
      assertEquals(0, denseInstance0.numAttributes());
      assertEquals(2, instanceEvent1.getStatus());
      assertNotSame(instanceEvent1, instanceEvent0);
      assertFalse(instanceEvent1.equals((Object)instanceEvent0));
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("can't process streamed instances; can't continue", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(enumeration0);
      
      filter0.addInstanceListener(substringReplacer0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("can't process streamed instances; can't continue", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertNotNull(substringReplacer0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Sorter sorter0 = new Sorter();
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isBusy());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNotNull(sorter0);
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      DatabaseSaver databaseSaver0 = new DatabaseSaver();
      assertFalse(databaseSaver0.getAutoKeyGeneration());
      assertEquals("The URL of the database", databaseSaver0.urlTipText());
      assertFalse(databaseSaver0.getTruncate());
      assertEquals("Writes to a database (tested with MySQL, InstantDB, HSQLDB).", databaseSaver0.globalInfo());
      assertEquals("", databaseSaver0.getTableName());
      assertEquals("Truncate (i.e. drop and recreate) table if it already exists", databaseSaver0.truncateTipText());
      assertEquals("If set to true, the relation name will be used as name for the database table. Otherwise the user has to provide a table name.", databaseSaver0.relationForTableNameTipText());
      assertEquals("jdbc:idb=experiments.prp", databaseSaver0.getUrl());
      assertEquals("", databaseSaver0.getUser());
      assertEquals("If set to true, a primary key column is generated automatically (containing the row number as INTEGER). The name of the key is read from DatabaseUtils (idColumn) This primary key can be used for incremental loading (requires an unique key). This primary key will not be loaded as an attribute.", databaseSaver0.autoKeyGenerationTipText());
      assertEquals("The database password", databaseSaver0.passwordTipText());
      assertEquals("", databaseSaver0.getPassword());
      assertTrue(databaseSaver0.getRelationForTableName());
      assertEquals("The custom properties that the user can use to override the default ones.", databaseSaver0.customPropsFileTipText());
      assertEquals("Sets the name of the table.", databaseSaver0.tableNameTipText());
      assertEquals(1, databaseSaver0.getWriteMode());
      assertEquals("The user name for the database", databaseSaver0.userTipText());
      assertNotNull(databaseSaver0);
      
      Sorter sorter1 = new Sorter();
      assertFalse(sorter1.isFocusCycleRoot());
      assertFalse(sorter1.isBusy());
      assertFalse(sorter1.isFocusTraversalPolicySet());
      assertFalse(sorter1.isFocusTraversalPolicyProvider());
      assertEquals("10000", sorter1.getBufferSize());
      assertEquals("Sorter", sorter1.getCustomName());
      assertFalse(sorter1.getIgnoreRepaint());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter1.globalInfo());
      assertTrue(sorter1.getFocusTraversalKeysEnabled());
      assertEquals("", sorter1.getTempDirectory());
      assertNull(sorter1.getSortDetails());
      assertNotNull(sorter1);
      assertFalse(sorter1.equals((Object)sorter0));
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals(0, instanceEvent0.getStatus());
      
      boolean boolean1 = filter0.eventGeneratable("h/zw4(");
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.stop();
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getNominalBinary());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertNotNull(substringLabeler0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      assertNotNull(multiFilter0);
      
      AllFilter allFilter1 = new AllFilter();
      assertFalse(allFilter1.isOutputFormatDefined());
      assertTrue(allFilter1.isNewBatch());
      assertFalse(allFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter1.globalInfo());
      assertFalse(allFilter1.isFirstBatchDone());
      assertNotNull(allFilter1);
      assertFalse(allFilter1.equals((Object)allFilter0));
      
      instanceEvent0.setStatus(100);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals(100, instanceEvent0.getStatus());
      
      filter0.setFilter(multiFilter0);
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertFalse(modelPerformanceChart0.isBusy());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertNotNull(modelPerformanceChart0);
      
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("ModelPerformanceChart", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertNotNull(beanVisual0);
      
      filter0.setVisual(beanVisual0);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("ModelPerformanceChart", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertFalse(modelPerformanceChart0.isBusy());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("weka/gui/beans/icons/ModelPerformanceChart_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("ModelPerformanceChart", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      
      filter0.setCustomName("Free variable ");
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("Free variable ", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("Free variable ", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals(100, instanceEvent0.getStatus());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      filter0.connectionNotification("h/zw4(", "h/zw4(");
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertNotNull(substringReplacer0);
      
      JRootPane jRootPane0 = substringReplacer0.getRootPane();
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertNull(jRootPane0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertNotNull(flowByExpression0);
      
      boolean boolean0 = substringReplacer0.m_busy;
      assertFalse(boolean0);
      
      Sorter sorter0 = new Sorter();
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertNotNull(sorter0);
      
      InputMap inputMap0 = sorter0.getInputMap();
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertNotNull(inputMap0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      DatabaseSaver databaseSaver0 = new DatabaseSaver();
      assertEquals("The database password", databaseSaver0.passwordTipText());
      assertEquals("The custom properties that the user can use to override the default ones.", databaseSaver0.customPropsFileTipText());
      assertEquals("If set to true, a primary key column is generated automatically (containing the row number as INTEGER). The name of the key is read from DatabaseUtils (idColumn) This primary key can be used for incremental loading (requires an unique key). This primary key will not be loaded as an attribute.", databaseSaver0.autoKeyGenerationTipText());
      assertEquals("", databaseSaver0.getUser());
      assertEquals("", databaseSaver0.getTableName());
      assertEquals("jdbc:idb=experiments.prp", databaseSaver0.getUrl());
      assertEquals("Truncate (i.e. drop and recreate) table if it already exists", databaseSaver0.truncateTipText());
      assertEquals("Writes to a database (tested with MySQL, InstantDB, HSQLDB).", databaseSaver0.globalInfo());
      assertEquals("The URL of the database", databaseSaver0.urlTipText());
      assertFalse(databaseSaver0.getAutoKeyGeneration());
      assertFalse(databaseSaver0.getTruncate());
      assertEquals("If set to true, the relation name will be used as name for the database table. Otherwise the user has to provide a table name.", databaseSaver0.relationForTableNameTipText());
      assertEquals(1, databaseSaver0.getWriteMode());
      assertTrue(databaseSaver0.getRelationForTableName());
      assertEquals("Sets the name of the table.", databaseSaver0.tableNameTipText());
      assertEquals("", databaseSaver0.getPassword());
      assertEquals("The user name for the database", databaseSaver0.userTipText());
      assertNotNull(databaseSaver0);
      
      boolean boolean2 = filter0.eventGeneratable("h/zw4(");
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Sorter sorter1 = new Sorter();
      assertNull(sorter1.getSortDetails());
      assertEquals("10000", sorter1.getBufferSize());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter1.globalInfo());
      assertTrue(sorter1.getFocusTraversalKeysEnabled());
      assertFalse(sorter1.isBusy());
      assertEquals("Sorter", sorter1.getCustomName());
      assertEquals("", sorter1.getTempDirectory());
      assertFalse(sorter1.isFocusTraversalPolicyProvider());
      assertFalse(sorter1.isFocusCycleRoot());
      assertFalse(sorter1.isFocusTraversalPolicySet());
      assertFalse(sorter1.getIgnoreRepaint());
      assertNotNull(sorter1);
      assertFalse(sorter1.equals((Object)sorter0));
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      textDirectoryLoader0.setCharSet("h/zw4(");
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("h/zw4(", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals(0, instanceEvent0.getStatus());
      assertNotSame(sorter0, sorter1);
      assertFalse(sorter0.equals((Object)sorter1));
      
      Sorter sorter2 = new Sorter();
      assertFalse(sorter2.isFocusTraversalPolicySet());
      assertFalse(sorter2.isBusy());
      assertEquals("Sorter", sorter2.getCustomName());
      assertTrue(sorter2.getFocusTraversalKeysEnabled());
      assertFalse(sorter2.getIgnoreRepaint());
      assertNull(sorter2.getSortDetails());
      assertEquals("10000", sorter2.getBufferSize());
      assertEquals("", sorter2.getTempDirectory());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter2.globalInfo());
      assertFalse(sorter2.isFocusTraversalPolicyProvider());
      assertFalse(sorter2.isFocusCycleRoot());
      assertNotNull(sorter2);
      assertFalse(sorter2.equals((Object)sorter0));
      assertFalse(sorter2.equals((Object)sorter1));
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Classifier classifier0 = new Classifier();
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.getBlockOnLastFold());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getIgnoreRepaint());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertNotNull(classifier0);
      
      sorter2.firePropertyChange("mdOKg;Wm3", true, false);
      assertFalse(sorter2.isFocusTraversalPolicySet());
      assertFalse(sorter2.isBusy());
      assertEquals("Sorter", sorter2.getCustomName());
      assertTrue(sorter2.getFocusTraversalKeysEnabled());
      assertFalse(sorter2.getIgnoreRepaint());
      assertNull(sorter2.getSortDetails());
      assertEquals("10000", sorter2.getBufferSize());
      assertEquals("", sorter2.getTempDirectory());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter2.globalInfo());
      assertFalse(sorter2.isFocusTraversalPolicyProvider());
      assertFalse(sorter2.isFocusCycleRoot());
      assertNotSame(sorter2, sorter0);
      assertNotSame(sorter2, sorter1);
      assertFalse(sorter2.equals((Object)sorter0));
      assertFalse(sorter2.equals((Object)sorter1));
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertNotNull(filteredAssociator0);
      
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertNotNull(costBenefitAnalysis0);
      
      CostBenefitAnalysis costBenefitAnalysis1 = new CostBenefitAnalysis();
      assertFalse(costBenefitAnalysis1.isFocusCycleRoot());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis1.globalInfo());
      assertFalse(costBenefitAnalysis1.isFocusTraversalPolicyProvider());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis1.getCustomName());
      assertTrue(costBenefitAnalysis1.getFocusTraversalKeysEnabled());
      assertFalse(costBenefitAnalysis1.isBusy());
      assertFalse(costBenefitAnalysis1.getIgnoreRepaint());
      assertFalse(costBenefitAnalysis1.isFocusTraversalPolicySet());
      assertNotNull(costBenefitAnalysis1);
      assertFalse(costBenefitAnalysis1.equals((Object)costBenefitAnalysis0));
      
      Dimension dimension0 = costBenefitAnalysis1.getMaximumSize();
      assertEquals(32767, dimension0.height);
      assertEquals(32767, dimension0.width);
      assertFalse(costBenefitAnalysis1.isFocusCycleRoot());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis1.globalInfo());
      assertFalse(costBenefitAnalysis1.isFocusTraversalPolicyProvider());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis1.getCustomName());
      assertTrue(costBenefitAnalysis1.getFocusTraversalKeysEnabled());
      assertFalse(costBenefitAnalysis1.isBusy());
      assertFalse(costBenefitAnalysis1.getIgnoreRepaint());
      assertFalse(costBenefitAnalysis1.isFocusTraversalPolicySet());
      assertEquals(32767.0, dimension0.getWidth(), 0.01);
      assertEquals(32767.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      assertNotSame(costBenefitAnalysis1, costBenefitAnalysis0);
      assertFalse(costBenefitAnalysis1.equals((Object)costBenefitAnalysis0));
      
      InputContext inputContext0 = classifier0.getInputContext();
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.getBlockOnLastFold());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getIgnoreRepaint());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertNull(inputContext0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("h/zw4(", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(instances0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(instanceEvent0, instances0, (-2041183108), 2);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals((-2041183108), testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("h/zw4(", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(testSetEvent0);
      assertFalse(sorter0.equals((Object)sorter2));
      assertFalse(sorter0.equals((Object)sorter1));
      
      filter0.acceptTestSet(testSetEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals((-2041183108), testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("h/zw4(", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotSame(sorter0, sorter2);
      assertNotSame(sorter0, sorter1);
      assertFalse(sorter0.equals((Object)sorter2));
      assertFalse(sorter0.equals((Object)sorter1));
      
      String string0 = DefaultEditorKit.selectionEndWordAction;
      assertNotNull(string0);
      assertEquals("selection-end-word", string0);
      
      String string1 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(string1);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string1);
      assertFalse(string1.equals((Object)string0));
      
      filter0.setLog((Logger) null);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.addTestSetListener(classifier0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.getBlockOnLastFold());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getIgnoreRepaint());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingBatchInstances());
      
      filter0.addInstanceListener(substringReplacer0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      
      filter0.acceptTestSet(testSetEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals((-2041183108), testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("h/zw4(", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotSame(sorter0, sorter2);
      assertNotSame(sorter0, sorter1);
      assertFalse(sorter0.equals((Object)sorter2));
      assertFalse(sorter0.equals((Object)sorter1));
  }
}
