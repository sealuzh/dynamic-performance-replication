/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:13:27 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(13, 13, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(559, 559);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)48;
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = cCSMatrix0.to((MatrixFactory<CCSMatrix>) null);
      cCSMatrix1.determinant();
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 1905;
      CCSMatrix.randomSymmetric(int0, (double) byteArray0[0], (Random) mockRandom0);
      double[][] doubleArrayArray0 = null;
      CCSMatrix.from2DArray(doubleArrayArray0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int1 = 383;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, int1);
      cCSMatrix1.multiply((Vector) denseVector0);
      int int2 = 980;
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(int2, long0);
      cCSMatrix2.max();
      cCSMatrix0.columnMajorIterator();
      cCSMatrix2.max();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
      cCSMatrix0.removeFirstRow();
      int int1 = 0;
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, 2932.295748590752, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 620.3594354151;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 620.3594354151;
      doubleArray2[3] = 620.3594354151;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.getRow(937);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1000;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      cCSMatrix0.rank();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.getRow(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(0, 765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 765
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(580, 580);
      cCSMatrix0.min();
      cCSMatrix0.maxInColumn(580);
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(int0, vectorFunction0);
      double[][] doubleArray0 = new double[3][7];
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      int int1 = 351;
      cCSMatrix1.maxInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-2250), 0, (double) (-2250), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1513, 1513, 842);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.getColumn(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2435.2593361678496;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(32, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1712;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, 48);
      Integer integer0 = new Integer(1712);
      cCSMatrix0.maxInColumn(48);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      matrix0.set(1712, 1712, 1712);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int int1 = 288;
      cCSMatrix0.set(int0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, (-41.48));
      cCSMatrix0.min();
      cCSMatrix0.maxInColumn(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      cCSMatrix0.nonZeroAt((byte) (-125), 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(8, (-2801.0878277));
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, (-41.48));
      cCSMatrix0.min();
      cCSMatrix0.maxInColumn(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2281, 2281);
      org.evosuite.runtime.Random.setNextRandom(904);
      CCSMatrix.diagonal(0, 0);
      cCSMatrix1.nonZeroAt(920, 1685);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2687);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-567.1)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      byte[] byteArray0 = null;
      CCSMatrix.fromBinary(byteArray0);
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat.getInstance();
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)48, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 395;
      int int1 = 1710;
      int int2 = 3854;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3854, 1710);
      int int3 = 1209;
      cCSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
      int int4 = 10;
      cCSMatrix0.iteratorOfColumn(int4);
      Integer integer0 = new Integer(int3);
      int int5 = 3;
      cCSMatrix0.maxInColumn(int5);
      int int6 = 98;
      int int7 = (-1569);
      int int8 = 48;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int6, int7, int8);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.is(matrixPredicate0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInColumn(int0, vectorProcedure0);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.non(matrixPredicate1);
      String string0 = "ES5i_<m\\)q>#{6";
      CCSMatrix cCSMatrix3 = CCSMatrix.fromMatrixMarket(string0);
      SparseMatrix.identity(int1);
      double double0 = 0.0;
      cCSMatrix3.getOrElse(int8, int2, double0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)102;
      byteArray0[0] = byte0;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1682, 622, (double) 0L, (Random) mockRandom0);
      ColumnMajorSparseMatrix.zero(2, 526);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0L;
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0.0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.rank();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(559, 559);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)559).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(559, 697, 559.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      double[][] doubleArray0 = new double[0][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, (-41.48));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1712, (double) 0, (Random) mockRandom0);
      mockRandom0.longs((long) 2611);
      cCSMatrix0.maxInColumn(0);
      byte[] byteArray0 = new byte[0];
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      double double0 = (-1272.41760747);
      CCSMatrix.diagonal(int0, double0);
      int int1 = 160;
      double double1 = (-1507.1211450584);
      CCSMatrix.diagonal(int1, double1);
      cCSMatrix1.nonZeroAt(int0, int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(545, 545);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byte byte0 = (byte) (-121);
      cCSMatrix0.nonZeroIteratorOfColumn(545);
      DenseMatrix denseMatrix0 = DenseMatrix.identity((byte)48);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, denseMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = (-1098);
      cCSMatrix1.copyOfShape(byte0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8, 8);
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("P4b$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) 395;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-580.17));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) 395;
      CCSMatrix.diagonal(1, (-580.17));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(395);
      CCSMatrix cCSMatrix0 = new CCSMatrix(395, 1, 395);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(699);
      mockRandom0.ints();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)699, (-618.511), (double)1, (double)395, (double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.transformRow(7, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1712;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1712;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 2916, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-1316));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1316
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(9, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2611, 2611);
      cCSMatrix0.copyOfShape(897, (-2596));
      String string0 = "dz+ 1*7-G{0OnAr";
      CCSMatrix.fromMatrixMarket(string0);
      int int0 = (-1);
      cCSMatrix0.blankOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 5;
      doubleArray0[3] = (double) 5;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(13, 5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(559, 559);
      byte[] byteArray0 = new byte[19];
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)559).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      byteArray0[0] = (byte)48;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(17, 1.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2611, 2611);
      cCSMatrix0.copyOfShape(897, (-2596));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 23;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 6);
      cCSMatrix0.copyOfShape(23, 2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 395;
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) 395;
      int int1 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-580.17));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1710, 1710, 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)42;
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape((byte) (-117), 105);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -117x105
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 3272;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3272;
      doubleArray0[1] = (double) 3272;
      doubleArray0[2] = (double) 1705;
      doubleArray0[3] = (double) 3272;
      doubleArray0[4] = (double) 1705;
      doubleArray0[5] = (double) 1705;
      doubleArray0[6] = (double) 3272;
      doubleArray0[7] = (double) 3272;
      doubleArray0[8] = (double) 1705;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(326, 3272.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      CCSMatrix.fromMatrixMarket("ES5i_<m)q>#{6");
      int int1 = 17;
      int int2 = 260;
      cCSMatrix0.getOrElse(int1, int2, int0);
      byte[] byteArray0 = null;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(515, 515);
      cCSMatrix0.min();
      double double0 = new Double(0.0);
      org.evosuite.runtime.Random.setNextRandom(2281);
      CCSMatrix.diagonal(110, 1919);
      cCSMatrix0.setAll(515);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      double double1 = 1682.0;
      doubleArray1[1] = 1682.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroIterator();
      double double2 = 0.964;
      cCSMatrix0.setAll(0.964);
      int int0 = (-157);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-157), (-157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -157x-157
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(43, 43);
      cCSMatrix0.setAll((-1.0));
      int[] intArray0 = new int[4];
      intArray0[0] = 597;
      intArray0[1] = 597;
      intArray0[2] = 597;
      intArray0[3] = 597;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '597' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1712, 1712, 1712);
      cCSMatrix0.min();
      cCSMatrix0.maxInColumn(17);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      Matrix matrix0 = cCSMatrix0.copyOfShape((byte)48, 128);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, 0);
      cCSMatrix0.maxInColumn(0);
      double[] doubleArray0 = new double[1];
      CCSMatrix.from1DArray((byte) (-125), 1535, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, (-18));
      cCSMatrix0.min();
      Double double0 = new Double((-18.0));
      Matrix matrix0 = cCSMatrix0.copyOfShape((byte)48, 128);
      matrix0.manhattanNorm();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[3];
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      double double1 = 1682.0;
      doubleArray1[1] = 1682.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.setAll(0.0);
      int int0 = (-157);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-157), (-157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -157x-157
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, (-377.374897));
      cCSMatrix0.max();
      int int1 = 7;
      cCSMatrix0.blankOfShape(7, 9);
      cCSMatrix0.nonZeroIterator();
      int int2 = 1284;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn((-343));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -343
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      int int1 = 56;
      Integer integer0 = new Integer(56);
      int int2 = 9;
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(10, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 395;
      int int0 = 988;
      CCSMatrix.diagonal(1, 988);
      Double double0 = new Double(395);
      Matrix matrix0 = Matrix.unit(1, 1683);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1684
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 9);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cCSMatrix0.mkString("", "V&>");
      cCSMatrix0.mkString(numberFormat0, "?;Y;q3f{)(X<", "?;Y;q3f{)(X<");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.min();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, rowMajorSparseMatrix0, cCSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, 0);
      cCSMatrix0.min();
      cCSMatrix0.maxInColumn(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      Matrix matrix0 = cCSMatrix0.copyOfShape((byte)48, 128);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(13, vectorProcedure0);
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      int int0 = 32;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(32, 32);
      cCSMatrix1.toSparseMatrix();
      cCSMatrix0.getRow(129);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(129, 1246);
      cCSMatrix0.setAll((-572.9775382364934));
      cCSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.updateAt(32, (-1717986917), matrixFunction0);
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      int int1 = 1118;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.toRowVector();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 665.666111, 2545.5785243953464).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      int int1 = (-2362);
      int int2 = (-1693);
      double double0 = (-108.45);
      MockRandom mockRandom0 = new MockRandom(9968L);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(3, 577.602351349, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(559, 559);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      int int0 = 2;
      int int1 = 2;
      Double double0 = new Double((byte)48);
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      int int2 = 626;
      Matrix.randomSymmetric(int2, mockRandom0);
      int int3 = 871;
      int int4 = 1826;
      int int5 = 1073741824;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int4;
      doubleArray0[1] = (double) byteArray0[0];
      doubleArray0[2] = (double) byte0;
      double double1 = 0.2;
      doubleArray0[3] = double1;
      doubleArray0[4] = (double) int3;
      doubleArray0[5] = (double) int4;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int2;
      int[] intArray0 = null;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int3, int4, int5, doubleArray0, intArray0, intArray0);
      cCSMatrix1.removeFirstColumn();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix1.getRow(int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 23;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(23);
      Integer integer0 = new Integer(4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 23;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(23, 23);
      int int0 = NumberFormat.INTEGER_FIELD;
      cCSMatrix0.toSparseMatrix();
      CCSMatrix.zero(0, 23);
      MockRandom mockRandom0 = new MockRandom(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(23.0, (double)23, 23.0, (double)0, (double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(0, vectorFunction0);
      CCSMatrix.from1DArray(111, 0, doubleArray0);
      org.evosuite.runtime.Random.setNextRandom((-212));
      int int1 = 2719;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(2719, 3507);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3507
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 23;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(23, (-2134.3110477966206));
      cCSMatrix0.min();
      Double double0 = new Double((-2134.3110477966206));
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 395;
      int int0 = 988;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(988, 395.0);
      int int1 = 2;
      double double0 = 1191.54;
      Double double1 = new Double(1191.54);
      Matrix matrix0 = Matrix.unit(395, 988);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, cCSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(int1, mockRandom0);
      cCSMatrix1.removeFirstColumn();
      cCSMatrix0.iteratorOrNonZeroColumns();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix1.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.toRowVector();
      cCSMatrix1.setAll(double0);
      cCSMatrix1.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1712;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1712, 23);
      Integer integer0 = new Integer(1712);
      cCSMatrix0.maxInColumn(23);
      byte byte0 = (byte) (-121);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      int int1 = 0;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int0);
      MockRandom mockRandom0 = new MockRandom(int1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(int0, vectorFunction0);
      int int2 = 1722;
      double[] doubleArray0 = new double[0];
      CCSMatrix.from1DArray(byte0, int2, doubleArray0);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      byte[] byteArray0 = null;
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) 395;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-580.17));
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.identity(692);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix1.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = (double) 380;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(380, 1, 380);
      Double double0 = new Double(380.0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '381' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) 395;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(692);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray((-3148), 8, doubleArray0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(23);
      int int0 = NumberFormat.INTEGER_FIELD;
      cCSMatrix0.toSparseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 23);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.transform(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 13;
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.transformColumn(0, vectorFunction0);
      cCSMatrix0.toCSV();
      cCSMatrix2.rank();
      int[] intArray0 = new int[2];
      intArray0[0] = int1;
      MockRandom mockRandom1 = new MockRandom();
      cCSMatrix2.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(23);
      int int0 = NumberFormat.INTEGER_FIELD;
      cCSMatrix0.toSparseMatrix();
      CCSMatrix.zero(0, 23);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(23, 23);
      MockRandom mockRandom0 = new MockRandom(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)23, 0.0, (double)0, (double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(0, vectorFunction0);
      matrix0.rank();
      int int1 = 111;
      CCSMatrix.from1DArray(int1, int0, doubleArray0);
      int int2 = (-212);
      org.evosuite.runtime.Random.setNextRandom(int2);
      int int3 = (-2843);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(int3, int2);
      String string0 = "pV5k'IDj,nRV?-5pF-q";
      CCSMatrix.fromCSV(string0);
      cCSMatrix2.max();
      cCSMatrix1.columnMajorIterator();
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(48, 0);
      cCSMatrix0.rank();
      cCSMatrix0.min();
      Double double0 = new Double(48);
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.getRow((-717));
      cCSMatrix0.getRow(3);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(1300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1300
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-790.918074272));
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1682, 622, (double) 0L, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom(1682);
      int int0 = 32;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(32, vectorFunction0);
      int int1 = 48;
      double[] doubleArray0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(6, 48, (double[]) null);
      cCSMatrix1.eachNonZero(matrixProcedure0);
      CCSMatrix cCSMatrix2 = CCSMatrix.from1DArray(int1, int0, doubleArray0);
      cCSMatrix2.rank();
      String string0 = "";
      CCSMatrix cCSMatrix3 = CCSMatrix.fromMatrixMarket(string0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.eachNonZero(matrixProcedure1);
      byte[] byteArray0 = null;
      CCSMatrix.fromBinary(byteArray0);
      CCSMatrix cCSMatrix4 = CCSMatrix.fromMatrixMarket(string0);
      cCSMatrix4.max();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) 395;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, (-580.17));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(395);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(" 'cFM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-790.918074272));
      MockRandom mockRandom0 = new MockRandom(622);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1682, 622, (double) 0L, (Random) mockRandom0);
      cCSMatrix0.minInColumn(2);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextGaussian();
      CCSMatrix.random(2, 622, 4428.888179463401, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(10, 48);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1546);
      SparseMatrix.zero(1546, 395, 1546);
      int int0 = 422;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(395);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication1 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication1.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.transformRow(int0, vectorFunction0);
      MatrixFactory<Matrix> matrixFactory0 = null;
      cCSMatrix2.to(matrixFactory0);
      String string0 = null;
      Matrix.fromCSV(string0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      CCSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-3202);
      int int1 = (-26);
      int int2 = 3130;
      // Undeclared exception!
      CCSMatrix.random(48, 3130, 1.0, (Random) mockRandom0);
  }
}
