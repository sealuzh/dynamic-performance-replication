/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:36:17 GMT 2018
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Edge;
import org.objectweb.asm.jip.Frame;
import org.objectweb.asm.jip.Item;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;
import org.objectweb.asm.jip.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-107), "S?EP'b", "S?EP'b", "S?EP'b", stringArray0, false, false);
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[10] = (byte)112;
      // Undeclared exception!
      try { 
        MethodWriter.writeShort(byteArray0, (byte)112, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(2);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter1, 3215, "", "dG{:#n{x&J)J*l}qZ;F", "9}/;t", stringArray0, true, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 2, stringArray0, 3215, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-2909));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)81;
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)112;
      byteArray0[0] = (byte)112;
      // Undeclared exception!
      try { 
        MethodWriter.readInt(byteArray0, 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 322
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[7];
      ClassWriter classWriter0 = new ClassWriter(1263);
      Label label0 = new Label();
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-4479);
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, (-4479), (-2045977740));
      assertEquals((-2045968782), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, (-1467869616));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1467869616
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = (-1758);
      intArray0[2] = (-404);
      intArray0[3] = 230;
      intArray0[4] = (-1328);
      int[] intArray1 = new int[7];
      intArray1[0] = (-1328);
      intArray1[1] = 17;
      intArray1[2] = (-404);
      intArray1[3] = 17;
      intArray1[4] = 230;
      intArray1[5] = (-1758);
      intArray1[6] = (-404);
      int int0 = MethodWriter.getNewOffset(intArray0, intArray1, 17, 230);
      assertEquals(230, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(197);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 197, "C2c9xZ7^s=l3bM?P", "C2c9xZ7^s=l3bM?P", "eh", (String[]) null, false, false);
      methodWriter0.getSize();
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dG{f#n{x&J)J*l}q<;F";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "9Z0+7x", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      Attribute attribute0 = new Attribute("dG{f#n{x&J)J*l}q<;F");
      methodWriter0.visitTypeInsn(32762, "dG{f#n{x&J)J*l}q<;F");
      methodWriter0.getSize();
      methodWriter0.visitLdcInsn("dG{f#n{x&J)J*l}q<;F");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 65535, "boolean", "Deprecated", (String) null, (String[]) null, false, false);
      methodWriter0.getSize();
      Object object0 = new Object();
      Label label0 = new Label();
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.visitMaxs(2590, 1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, Integer.MAX_VALUE, "c_$hM&*$/pN&{[q,", "GdMc_6'4~)(I^:Y ", "9Z0+7x", (String[]) null, false, false);
      methodWriter0.getSize();
      Object object0 = new Object();
      Label label0 = new Label();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putLong(1);
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "dG{f#n{x&J)J*l}q<;F";
      stringArray0[1] = "dG{f#n{x&J)J*l}q<;F";
      stringArray0[2] = "rWrb[ZuNs8{sm>";
      stringArray0[3] = "rWrb[ZuNs8{sm>";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1510), "rWrb[ZuNs8{sm>", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dG{f#Rn{&J)J*l}q;F", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Q [Xav", "", "", stringArray0, false, false);
      methodWriter0.visitVarInsn(0, 1);
      methodWriter0.visitMethodInsn(0, "Q [Xav", "D.u@-'sP86Hnd", "uJP@|m");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 159, "dG{:#n{x&J)J*l}qZ;F", "dG{:#n{x&J)J*l}qZ;F", "Deprecated", (String[]) null, true, true);
      methodWriter0.visitMethodInsn(2966, "3nMF:r`H$\"+", "dG{:#n{x&J)J*l}qZ;F", "b4~s<S5!Z\u0003");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(185);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3701), "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", (String[]) null, false, true);
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn(label0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value L11
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dG{f#n{x&J)J*l}q<;F";
      stringArray0[1] = ".s.IFJDCS";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Oy*#", "Oy*#", "dG{f#n{x&J)J*l}q<;F", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitMaxs(76, 2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(197);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 197, "5t.t3K]Y[", "C2c9xZ7^s=l3bM?P", "eh", (String[]) null, false, false);
      ClassWriter classWriter1 = new ClassWriter(197);
      ByteVector byteVector0 = classWriter1.pool;
      ByteVector byteVector1 = byteVector0.putLong(496L);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter1.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      Label label0 = new Label();
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.put(byteVector0);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn(byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.objectweb.asm.jip.ByteVector@d
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "RuntimeInvisibleAnnotations";
      stringArray0[1] = "";
      stringArray0[2] = "#Af2#Iy";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 0, "<init>", "<init>", "\"xUB{Lo^5+v2h|3r", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "Oy*#", (String[]) null, false, false);
      Attribute attribute0 = new Attribute("I7ve}T6");
      methodWriter1.visitAttribute(attribute0);
      methodWriter1.visitMaxs(2, 1);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Deprecated", "ConstantValue", "Deprecated", (String[]) null, false, false);
      methodWriter0.visitAnnotation("org.objectweb.asm.jip.Edge", false);
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "boolean", "Deprecated", (String) null, (String[]) null, false, false);
      methodWriter0.getSize();
      Object object0 = new Object();
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(8, "Deprecated", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 186, "rFh`.|", "dG{:#n{x&J)J*l}qZ;F", "Deprecatd", (String[]) null, false, false);
      methodWriter0.visitFieldInsn(1, "&hx6 J", "rFh`.|", "&hx6 J");
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 65535, "boolean", "Deprecated", (String) null, (String[]) null, false, false);
      methodWriter0.getSize();
      Object object0 = new Object();
      Label label0 = new Label();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putLong(10);
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      Label label0 = new Label();
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "dG{f#n{x&J)J*l}q<;F");
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(1, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1059);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1759), "boolean", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      methodWriter0.visitIincInsn(192, 941);
      Label label0 = new Label();
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn(184, 90, label0, labelArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      methodWriter0.visitFrame(2, 2, (Object[]) null, 262144, (Object[]) null);
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      methodWriter1.visitLdcInsn("j\"0lvW");
      int int0 = Type.BOOLEAN;
      methodWriter0.getSize();
      methodWriter1.visitEnd();
      Label label0 = new Label();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 47;
      intArray0[3] = 47;
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter1.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter(218);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "\"99lnt`gi", "<rbxpT')b$", "\"99lnt`gi", stringArray0, false, false);
      methodWriter0.visitMultiANewArrayInsn("\"99lnt`gi", 6);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 59, "TiHZ+qUwE@98:F+m", "qs", "dG{f#n{x&J)J*l}q<;F", (String[]) null, false, false);
      methodWriter0.visitIincInsn(59, (-1266));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      methodWriter0.visitTypeInsn(0, "Code");
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(1, "Code", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(197);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 197, "5t.t3K]Y[", "C2c9xZ7^s=l3bM?P", "eh", (String[]) null, false, false);
      methodWriter0.visitFrame(46, 12, (Object[]) null, 167, (Object[]) null);
      methodWriter0.visitIincInsn(1165, 2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      methodWriter0.visitFrame(2, 2, (Object[]) null, 262144, (Object[]) null);
      methodWriter0.visitVarInsn(577, 0);
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, true);
      methodWriter0.visitAnnotation("6SdQ`9fS#HX", true);
      classWriter0.toByteArray();
      Label label0 = new Label();
      Label label1 = new Label();
      methodWriter0.visitTryCatchBlock(label1, label1, label0, "dG{f#n{x&J)J*l}q<;F");
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(2170, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-31));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-31), "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      methodWriter0.visitVarInsn(187, (-1));
      Object object0 = new Object();
      Label label0 = new Label();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putLong((-1));
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 74, "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(166, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, false);
      methodWriter0.visitAnnotation("s26", false);
      classWriter0.toByteArray();
      Label label0 = new Label();
      methodWriter0.visitLineNumber(0, label0);
      Label label1 = new Label();
      methodWriter0.visitTryCatchBlock(label1, label0, label1, "dP{#n{&J)J*l}q;F");
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      Label label0 = new Label();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "Synthetic";
      stringArray0[2] = "Synthetic";
      stringArray0[3] = "Synthetic";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Synthetic", "Synthetic", "Synthetic", stringArray0, false, false);
      methodWriter0.visitFrame((-1912873226), 1, stringArray0, 246, stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(166, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(197);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Code", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      methodWriter0.visitFieldInsn(197, "-hDmJ.dnZXE[}6}@nN", "-hDmJ.dnZXE[}6}@nN", "Code");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.objectweb.asm.jip.Edge";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 285, "org.objectweb.asm.jip.Edge", "org.objectweb.asm.jip.Edge", "org.objectweb.asm.jip.Edge", stringArray0, false, false);
      methodWriter0.visitFieldInsn((-1), "org.objectweb.asm.jip.Edge", "Q [Xav", "org.objectweb.asm.jip.Edge");
      methodWriter0.visitInsn(2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Oy*#", "boolean", "dG{f#n{x&J)J*l}q<;F", stringArray0, false, false);
      methodWriter0.visitVarInsn(1, 3391);
      Label label0 = new Label();
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(197);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", (String) null, (String[]) null, true, true);
      methodWriter0.visitVarInsn(1, (-1));
      Label label0 = new Label();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      Object object0 = new Object();
      methodWriter0.visitMultiANewArrayInsn("Oy*#", 2966);
      methodWriter0.visitMaxs(2, 28);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      methodWriter0.visitMultiANewArrayInsn("t6vUwiL", 19);
      methodWriter0.visitTypeInsn((-725), "t6vUwiL");
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitFrame((-602), 16777225, stringArray0, (-725), stringArray0);
      // Undeclared exception!
      try { 
        methodWriter0.visitIincInsn((-725), 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -725
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      methodWriter0.visitIincInsn(16777226, 1);
      Label label0 = new Label();
      Integer integer0 = new Integer(25165824);
      methodWriter0.visitLdcInsn(integer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1059);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "y*#", "dG{f#n{x&J)J*l}q<;F", "y*#", stringArray0, false, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("dG{f#n{x&J)J*l}q<;F");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      Attribute attribute1 = new Attribute("[ieo:`2*_2U?>=G{");
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      
      attribute0.next = attribute1;
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertTrue(attribute0.next.isUnknown());
      assertFalse(attribute0.next.isCodeAttribute());
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertFalse(attribute0.equals((Object)attribute1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(attribute0, attribute1);
      
      methodWriter0.visitIincInsn(2, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.info = (Object) classWriter0;
      methodWriter0.visitTypeInsn((-772), "dG{f#n{x&J)J*l}q<;F");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(0, (-772));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-6), "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitVarInsn(177, (-6));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Oy*#");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 159, "dG{:#n{x&J)J*l}qZ;F", "dG{:#n{x&J)J*l}qZ;F", "Deprecated", (String[]) null, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(159, 159);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(159, "RuntimeInvisibleParameterAnnotations", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[]";
      stringArray0[1] = "?>/PFPn0U&QwD48$7O";
      stringArray0[2] = "zh|X=q?>JAmie87qW";
      stringArray0[3] = "?>/PFPn0U&QwD48$7O";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "?>/PFPn0U&QwD48$7O", "[]", "zh|X=q?>JAmie87qW", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(251, 131072);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(685);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn(685, 2808);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 685
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "CofYd", "j`)Ll@}l", "j`)Ll@}l", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      methodWriter0.visitIntInsn((-797), 2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 1689, (Object[]) null, 2, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      methodWriter0.visitIntInsn(187, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(1, (-337));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-337));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -337
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "CofYd", "j`)Ll@}l", "j`)Ll@}l", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Item item0 = classWriter0.newLong(2808);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      methodWriter0.visitVarInsn(2, 16777227);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(2, "CofYd", "j`)Ll@}l", "j`)Ll@}l");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(2808, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "CofYd", "j`)Ll@}l", "j`)Ll@}l", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Item item0 = classWriter0.newLong(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter0.visitVarInsn(2, 16777227);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(2, "CofYd", "j`)Ll@}l", "j`)Ll@}l");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.next = methodWriter0;
      int int0 = methodWriter1.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(41, int0);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitLdcInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n!h%)_WDnQ8>,d)7FJ";
      stringArray0[1] = "org.objectweb.asm.jip.Edge";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 469, "dG{f#n{x&J)J*l}q<;F", "n!h%)_WDnQ8>,d)7FJ", ".HE~.F=hW%qV{g5n=", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFieldInsn(53, "org.objectweb.asm.jip.Edge", ".HE~.F=hW%qV{g5n=", "n!h%)_WDnQ8>,d)7FJ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3701), "Oy*#", "dG{f#n{x&J)J*l}q<;F", "", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFieldInsn(2, "Oy*#", "java/lang/String", "Deprecated");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("Oy*#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("Oy*#", (-3701));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(1, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("dG{f#n{x&J)J*l}q<;F", 8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1059);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "y*#", "dG{f#n{x&J)J*l}q<;F", "y*#", stringArray0, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("dG{f#n{x&J)J*l}q<;F");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-1759), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Oy*#", "Oy*#", "Oy*#", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(2966, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object object0 = label0.info;
      assertNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn(fileSystemHandling0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.testdata.FileSystemHandling@3ceaaf0c
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Oy*#";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("RtN%}pDmP[}L ", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Oy*#", "Oy*#", "", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation("440R+qSU4v#,/", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label0.outputStackMax = 2074;
      label0.successor = label1;
      methodWriter0.visitTryCatchBlock(label0.successor, label1, label1, "Oy*#");
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Oy*#");
      assertFalse(boolean0);
      
      methodWriter0.visitLineNumber(1392510722, label0.successor);
      assertFalse(label0.equals((Object)label1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(label0, label1);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      methodWriter0.visitVarInsn(188, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn((-1840700267));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(88, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "CofYd", "j`)Ll@}l", "j`)Ll@}l", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      methodWriter0.visitVarInsn(167, 16777227);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(167);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "C>f`d", "j`)Ll@}l", "j`)Ll@}l", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Item item0 = classWriter0.newLong(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      methodWriter0.visitVarInsn(167, 16777227);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1059);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-381), ":wSAXi$|cw8Sr-qZ", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFieldInsn((-394), ":wSAXi$|cw8Sr-qZ", "y*#", "java/lang/String");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "CofYd", "j`)Ll@}l", "j`)Ll@}l", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 389, "CofYd", "j`)Ll@}l", "CofYd", (String[]) null, true, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("CofYd", false);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertNotSame(methodWriter0, methodWriter1);
      
      ClassWriter classWriter1 = new ClassWriter((-2050559108));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      byte[] byteArray0 = classWriter1.toByteArray();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      assertNotSame(classWriter1, classWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label label2 = label0.getFirst();
      assertFalse(label0.equals((Object)label1));
      assertFalse(label2.equals((Object)label1));
      assertNotNull(label2);
      assertNotSame(label0, label1);
      assertSame(label0, label2);
      assertSame(label2, label0);
      assertNotSame(label2, label1);
      
      methodWriter1.visitTryCatchBlock(label1, label2, label2, (String) null);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label2.equals((Object)label1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(methodWriter1, methodWriter0);
      assertNotSame(label0, label1);
      assertSame(label0, label2);
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      assertSame(label2, label0);
      assertNotSame(label2, label1);
      
      methodWriter0.visitMaxs(1, (-2552));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitEnd();
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 159, "dG{:#n{x&J)J*l}qZ;F", "dG{:#n{x&J)J*l}qZ;F", "Deprecated", (String[]) null, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dG{:#n{x&J)J*l}qZ;F", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitFrame(28, 1, (Object[]) null, 1, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(197);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 197, "5t.t3K]Y[", "C2c9xZ7^s=l3bM?P", "eh", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int0 = classWriter0.newMethod("9Z0+7x", "rFh`.|", "9Z0+7x", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(7, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(1165, "rFh`.|", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0s6";
      stringArray0[1] = "0s6";
      stringArray0[2] = "0s6";
      stringArray0[3] = "0s6";
      stringArray0[4] = "0s6";
      stringArray0[5] = "0s6";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "0s6", "dG{f#n{&J)J*l}q;F", "0s6", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLdcInsn("0s6");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable("0s6", "Ljava/lang/Synthetic;", (String) null, label0, label0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      try { 
        Integer.valueOf("0s6", 981);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 981 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "dqpf#n{x&J)J*K}q<;F", "Oy*#", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(0, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(186, "", "Oy*#", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "Oy*#";
      stringArray0[2] = "Oy*#";
      stringArray0[3] = "Oy*#";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "j\"0lvW", "Oy*#", "Oy*#", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(1, 0, stringArray0, 0, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(186, "j\"0lvW", "Oy*#", "Oy*#");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("Oy*#");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Type.BOOLEAN;
      assertEquals(1, int0);
      
      int int1 = methodWriter0.getSize();
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(72, int1);
      
      methodWriter0.visitCode();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs((-617), 72);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "j`)Ll@}l";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Lmyyk2%", "j`)Ll@}l", "", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "Lmyyk2%");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = 795;
      methodWriter0.visitFrame(795, 1, (Object[]) null, 541, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertNotNull(label1);
      
      Label label2 = new Label();
      assertFalse(label2.equals((Object)label1));
      assertNotNull(label2);
      
      methodWriter0.visitTryCatchBlock((Label) null, label2, (Label) null, "");
      assertFalse(label2.equals((Object)label1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(label2, label1);
      
      methodWriter0.visitIntInsn(2, 40);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(16, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 2, (Object[]) null, 262144, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitTypeInsn(1, "Code");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitFrame(1426, 1, (Object[]) null, (-964), (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Code";
      stringArray0[1] = "Code";
      stringArray0[2] = "Code";
      stringArray0[3] = "Code";
      stringArray0[4] = "Code";
      classWriter0.index = 2966;
      stringArray0[5] = "Code";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2966, "Code", "dG{f#n{x&J)J*l}q<;F", "Code", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("Code");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitCode();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(0, "jINi");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(2, "3nMF:r`H$\"P+", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Oy*#";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Oy*#", "Oy*#", "", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMethodInsn(1, "hwv ?8LN?cO9", "Oy*#", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("440R+qSU4v#,/", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label label2 = new Label();
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      
      label1.outputStackMax = 2074;
      label1.successor = label2;
      methodWriter0.visitTryCatchBlock(label1.successor, label2, label2, "Oy*#");
      assertFalse(label1.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(label1, label2);
      assertNotSame(label1, label0);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Oy*#");
      assertFalse(boolean0);
      
      methodWriter0.visitLineNumber(1392510722, label1.successor);
      assertFalse(label1.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(label1, label2);
      assertNotSame(label1, label0);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      methodWriter0.visitVarInsn(188, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(188);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 186, "j\"0lvW", "dG{f#n{x&J)J*l}q<;F", "JSR/RET are not supported with computeFrames option", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(186, (-3701));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newClass("!=()");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(9, int0);
      
      Attribute attribute0 = new Attribute("Oy*#");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1346);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1121447640), "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("s26", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitMaxs(1346, (-1121447640));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(1, 1346);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTableSwitchInsn(3153, 1, label0, labelArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn((-700), label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.objectweb.asm.jip.Edge";
      stringArray0[1] = "boolean";
      stringArray0[2] = "org.objectweb.asm.jip.Edge";
      stringArray0[3] = "boolean";
      stringArray0[4] = "org.objectweb.asm.jip.Edge";
      stringArray0[5] = "org.objectweb.asm.jip.Edge";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2966, "org.objectweb.asm.jip.Edge", "dG{f#n{x&J)J*l}q<;F", "boolean", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFieldInsn(2, "boolean", "dG{f#n{x&J)J*l}q<;F", "Lxgff.fetDK");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[2];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      methodWriter0.visitTableSwitchInsn(54, (-812), label0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1121447640), "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("s26", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "dP{#n{&J)J*l}q;F");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(0, (-1121447640));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(1, 8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(172);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTypeInsn(297, "K<g),bD|t`c.6F}z%");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(1, 1, stringArray0, 1312, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "Oy*#";
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      objectArray0[2] = (Object) classWriter0;
      objectArray0[4] = (Object) "dG{f#n{x&J)J*l}q<;F";
      methodWriter0.visitLdcInsn(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2797);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Code", "j`)Ll@}l", "j`)Ll@}l", (String[]) null, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn((-797), 2797);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.objectweb.asm.jip.Edge";
      stringArray0[1] = "boolean";
      stringArray0[2] = "org.objectweb.asm.jip.Edge";
      stringArray0[3] = "boolean";
      stringArray0[4] = "org.objectweb.asm.jip.Edge";
      boolean boolean0 = classWriter0.invalidFrames;
      assertFalse(boolean0);
      
      stringArray0[5] = "org.objectweb.asm.jip.Edge";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "org.objectweb.asm.jip.Edge", "dG{f#n{x&J)J*l}q<;F", "boolean", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn(2, "boolean", "dG{f#n{x&J)J*l}q<;F", "Lxgff.fetDK");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(66, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Deprecated", "Deprecated", "dG{f#n{x&J)J*l}q<;F", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      methodWriter0.visitIincInsn((-675), (-1995913993));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(0, 392, (Object[]) null, (-3150), (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Oy*#";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Oy*#", "Oy*#", "", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMethodInsn(1, "hwv ?8LN?cO9", "Oy*#", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("440R+qSU4v#,/", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{@y");
      assertFalse(boolean0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      label0.outputStackMax = 2074;
      label0.successor = label1;
      methodWriter0.visitTryCatchBlock(label0.successor, label1, label1, "Oy*#");
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Oy*#");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      methodWriter0.visitLineNumber(1392510722, label0.successor);
      assertFalse(label0.equals((Object)label1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(label0, label1);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      methodWriter0.visitVarInsn(188, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(188);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Lmyyk2%", "Lmyyk2%", "", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      Label label0 = edge0.successor;
      assertNull(label0);
      
      Edge edge1 = new Edge();
      assertFalse(edge1.equals((Object)edge0));
      assertNotNull(edge1);
      
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "Lmyyk2%");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn((-813), 2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0s6";
      stringArray0[1] = "0s6";
      stringArray0[2] = "0s6";
      stringArray0[3] = "0s6";
      stringArray0[4] = "0s6";
      stringArray0[5] = "0s6";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "0s6", "dG{f#n{&J)J*l}q;F", "0s6", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("0s6", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0s6");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0s6");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label0, "dG{f#n{&J)J*l}q;F");
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      methodWriter0.visitIntInsn(2, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label2 = new Label();
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put12(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      methodWriter0.put(byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dG{f#n{x&J)J*l}q<;F", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitVarInsn(1, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Oy*#");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.next;
      assertNull(attribute1);
      
      methodWriter0.visitInsn(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1121447640), "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("s26", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitTryCatchBlock(label1, label0, label1, "dP{#n{&J)J*l}q;F");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitMaxs(0, (-1121447640));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1121447640), "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "j6*>G", "dP{#n{&J)J*l}q;F", "RuntimeInvisibleParameterAnnotations", (String[]) null, false, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      assertNotSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitLdcInsn("dP{#n{&J)J*l}q;F");
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitVarInsn(0, (-1586));
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitMultiANewArrayInsn("RuntimeInvisibleParameterAnnotations", (-1586));
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitFieldInsn(2, "dP{#n{&J)J*l}q;F", "", "s26");
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3701), "Oy*#", "dG{f#n{x&J)J*l}q<;F", "", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("Oy*#");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-4310), (-3008), stringArray0, (-3008), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(24, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(24, (-3701));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLocalVariable("char", "Deprecated", "", label0, label0, (-94));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 2, (Object[]) null, 262144, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      int int0 = classWriter0.newField("Code", "RuntimeInvisibleAnnotations", "Oy*#");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(6, int0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      classWriter0.visitInnerClass("+)# YZVcZ'UJ!GNn3M", (String) null, "qkj t-", 262144);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitLdcInsn("j\"0lvW");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      int int1 = Type.BOOLEAN;
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = methodWriter0.getSize();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(53, int2);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter1.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 2, (Object[]) null, 262144, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Oy*#", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      assertSame(methodWriter0, methodWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(2, (-128), (Object[]) null, 76, (Object[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Rp+>[el", "Oy*#", "y5Y", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("Rp+>[el", "nxPl", "nxPl", label0, label0, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn(classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.objectweb.asm.jip.ClassWriter@5
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 13, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Oy*#";
      label0.info = (Object) classWriter0;
      objectArray0[3] = (Object) classWriter0;
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(1, 1763);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Oy*#";
      label0.info = (Object) classWriter0;
      objectArray0[3] = (Object) classWriter0;
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(28, "#E", "+OwI&'/T-;l%'#Q`", "dG{f#n{x&J)J*l}q<;F");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(28, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs((-2033), 177);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource("dG{f#n{x&J)J*l}q<;F", "Oy*#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-17), "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Oy*#", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "dG{f#n{x&J)J*l}q<;F");
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(1860, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.line = 4;
      methodWriter0.visitLocalVariable("dG{f#n{x&J)J*l}q<;F", "LineNumberTable", "LineNumberTable", label0, label0, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Type.BOOLEAN;
      assertEquals(1, int0);
      
      int int1 = methodWriter0.getSize();
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(26, int1);
      
      methodWriter0.visitLocalVariable("LineNumberTable", "aL|>~e{pe", "aL|>~e{pe", label0, label0, 62);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1021, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f1oV6`1tW[p`wAkZ{");
      assertFalse(boolean0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.classReaderOffset = (-1644);
      methodWriter1.visitIntInsn(3744, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitMaxs(185, 3425);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(6, int0);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Oy*#";
      objectArray0[3] = (Object) classWriter0;
      objectArray0[4] = (Object) "dG{f#n{x&J)J*l}q<;F";
      methodWriter0.visitFrame(0, (-602), objectArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "", "dqpf#n{x&J)J*K}q<;F", "Oy*#", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(57, 127);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 172, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("Oy*#");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-4310), (-3008), stringArray0, (-3008), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = classWriter0.pool;
      assertNotNull(byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putUTF8(">*2");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn((-7), 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      
      methodWriter0.visitIntInsn(188, 188);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0s6";
      stringArray0[1] = "0s6";
      stringArray0[2] = "0s6";
      stringArray0[3] = "0s6";
      stringArray0[4] = "0s6";
      stringArray0[5] = "0s6";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "0s6", "dG{f#n{&J)J*l}q;F", "0s6", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(0, (-3869), stringArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitIntInsn(16, (-2242));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(183, (-1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitLocalVariable("Z*$j{gO_jmB", ";J#HM}>c9dC\"", ";J#HM}>c9dC\"", label0, label0, (-3869));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = methodWriter1.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(110, int0);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitMultiANewArrayInsn("0s6", 115);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dG{f#n{x&J)J*l}q<;F";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "9Z0+7x", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("dG{f#n{x&J)J*l}q<;F");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("m[B.7Mg", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitFrame(2, (-2049), stringArray0, 2, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = label0.getFirst();
      assertNotNull(label1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      methodWriter0.visitLabel(label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("Oy*#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame((-4310), (-4310), stringArray0, (-4310), stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(172, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn(21, 2613, label0, labelArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(17, 2613);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newClass("LocalVariableTypeTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, int0);
      
      Attribute attribute0 = new Attribute("boolean");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(1, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(8, (-1534));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(169);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Oy*#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Oy*#";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4), "Oy*#", "dG{f#n{x&J)J*l}q<;F", "", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("Oy*#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "LineNumberTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(76, int0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitMultiANewArrayInsn("", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      methodWriter1.visitVarInsn(24, 90);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertNotNull(methodWriter2);
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      
      methodWriter0.visitTypeInsn((short)5, "V`%$LPJ");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      assertSame(methodWriter0, methodWriter2);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn(530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 530
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int1 = (-3638);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*:GcB6(^~7";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3638), "y*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("p)V)t|adogY");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.put12(1, 251);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector0.putInt(1);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "dG{:#n{x&J)J*l}qZ;F";
      Object object0 = new Object();
      assertNotNull(object0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "S", "dG{:#n{x&J)J*l}qZ;F", "dG{:#n{x&J)J*l}qZ;F", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(4, (-856), (Object[]) null, 1191, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "boolean", "dG{f#n{&KJ)J*l}q;F", "dG{f#n{&KJ)J*l}q;F", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("F,,2LIREq1bE5`", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitFrame(262144, 2, stringArray0, (-2641), stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = Type.BOOLEAN;
      assertEquals(1, int0);
      
      int int1 = methodWriter1.getSize();
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(28, int1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Oy*#";
      label0.info = (Object) classWriter0;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dG{f#n{x&J)J*l}q<;F", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn(2, 201);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(201);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Oy*#";
      label0.info = (Object) classWriter0;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("dG{f#n{x&J)J*l}q<;F", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(0, 2, objectArray0, 0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTypeInsn(170, "jINi");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitParameterAnnotation(1, "Ljava/lang/Synthetic;", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.version = (-1772);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "j\"0lvW", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 2, (Object[]) null, 262144, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertNotNull(methodWriter1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitLdcInsn("j\"0lvW");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      int int0 = Type.BOOLEAN;
      assertEquals(1, int0);
      
      int int1 = methodWriter1.getSize();
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(47, int1);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter1.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dG{:#n{x&J)J*l}qZ;F";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "dG{:#n{x&J)J*l}qZ;F", "dG{:#n{x&J)J*l}qZ;F", "dG{:#n{x&J)J*l}qZ;F", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = label0.resolve(methodWriter0, 7, byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      methodWriter0.visitJumpInsn((byte)0, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("dG{:#n{x&J)J*l}qZ;F");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "LocalVariableTable";
      stringArray0[1] = "LocalVariableTable";
      stringArray0[2] = "LocalVariableTable";
      stringArray0[3] = "LocalVariableTable";
      stringArray0[4] = "Oy*#";
      stringArray0[5] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "LocalVariableTable", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitLdcInsn("Oy*#");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame((-4310), 974, stringArray0, 974, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-4310), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = (-689);
      MethodWriter.getNewOffset((int[]) null, (int[]) null, label0);
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-361));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Oy*#";
      label0.info = (Object) classWriter0;
      objectArray0[3] = (Object) classWriter0;
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(185, "org.objectweb.asm.jip.ClassReader", "uNO)j(", "^@v");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Code", "Oy*#", "Oy*#", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 2, (Object[]) null, 262144, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.classReaderOffset = 262144;
      methodWriter0.visitVarInsn(577, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("s26", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitVarInsn(55, 20);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("dP{#n{&J)J*l}q;F", (-1874));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn((-1586), "s26", "dP{#n{&J)J*l}q;F", "jl5'oBb}L(t?");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 10, "boolean", "Deprecated", (String) null, (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putLong(10);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2966);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "boolean", "dG{f#n{&KJ)J*l}q;F", "dG{f#n{&KJ)J*l}q;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("<init>", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "boolean";
      objectArray0[1] = (Object) methodWriter0;
      objectArray0[2] = (Object) annotationVisitor0;
      objectArray0[3] = (Object) classWriter0;
      objectArray0[4] = (Object) classWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "boolean";
      methodWriter0.visitMethodInsn(186, "/@r@\"hIX^Y]{I2", "", "dG{f#n{&KJ)J*l}q;F");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("dG{f#n{x&J)J*l}q<;F", "LineNumberTable", "LineNumberTable", label0, label0, 16777222);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn(integer0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(16777222);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      ByteVector byteVector2 = byteVector1.putInt(1022);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      
      methodWriter0.put(byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RuntimeInvisibleParameterAnnotations");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oy*#";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "Oy*#", "dG{f#n{x&J)J*l}q<;F", "dG{f#n{x&J)J*l}q<;F", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitTypeInsn(187, "jINi");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(2, (-964), stringArray0, 0, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitCode();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(184, "Oy*#", "[]", "dG{f#n{x&J)J*l}q<;F");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-411), "CKg(]JQ6&F", "", "CofYd", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) methodWriter0;
      objectArray0[1] = (Object) "CKg(]JQ6&F";
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), 49, (Object[]) null, (-1), objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", "dP{#n{&J)J*l}q;F", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("s26", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Frame frame0 = label1.frame;
      assertNull(frame0);
      
      label1.frame = null;
      label1.status = 1189;
      methodWriter0.visitTryCatchBlock(label1, label0, label1, "dP{#n{&J)J*l}q;F");
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }
}
