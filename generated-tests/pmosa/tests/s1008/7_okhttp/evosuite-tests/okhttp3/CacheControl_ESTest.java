/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:21:22 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(59, timeUnit0);
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-180), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -180
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(2269, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      assertSame(cacheControl_Builder1, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String string0 = null;
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll((String) null);
      Headers headers0 = headers_Builder1.build();
      CacheControl.parse(headers0);
      String string1 = "";
      cacheControl0.headerValue = "";
      cacheControl0.maxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.maxAge((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      int int0 = cacheControl0.minFreshSeconds();
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), int0);
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      cacheControl_Builder1.minFresh(0, timeUnit1);
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxStale((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(338, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      cacheControl_Builder0.minFresh(0, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.FORCE_CACHE.toString();
      String string0 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("no-cache", string0);
      
      cacheControl0.FORCE_NETWORK.headerValue = "name == null";
      cacheControl0.headerValue = "name == null";
      cacheControl0.isPrivate();
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.headerValue = "name == null";
      cacheControl0.FORCE_CACHE.toString();
      cacheControl_Builder0.noStore();
      String string1 = cacheControl1.FORCE_CACHE.toString();
      assertEquals("", string1);
      
      cacheControl0.isPublic();
      cacheControl0.noTransform();
      cacheControl1.noCache();
      int int0 = cacheControl1.sMaxAgeSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noCache());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(704, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder2.build();
      cacheControl0.FORCE_NETWORK.headerValue = "";
      cacheControl0.toString();
      cacheControl0.mustRevalidate();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      cacheControl_Builder4.onlyIfCached();
      cacheControl_Builder4.maxAge(Integer.MAX_VALUE, timeUnit1);
      cacheControl_Builder4.minFresh(704, timeUnit1);
      cacheControl_Builder4.onlyIfCached();
      cacheControl0.isPrivate();
      cacheControl0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder1.noCache();
      cacheControl_Builder3.noCache();
      cacheControl0.isPublic();
      cacheControl0.mustRevalidate();
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.maxStale(1423, timeUnit0);
      assertSame(cacheControl_Builder6, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.headerValue = null;
      cacheControl0.FORCE_CACHE.headerValue = "w:PP'r^mO|*G";
      cacheControl0.mustRevalidate();
      cacheControl0.maxAgeSeconds();
      cacheControl0.noCache();
      cacheControl0.maxStaleSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(1667, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(Integer.MAX_VALUE, timeUnit0);
      cacheControl_Builder1.noTransform();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.FORCE_NETWORK.headerValue = "-{J7t3j#BJg6_w?6b";
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl_Builder1.noCache();
      cacheControl_Builder2.noStore();
      cacheControl_Builder2.maxAge(Integer.MAX_VALUE, timeUnit0);
      cacheControl0.maxStaleSeconds();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl_Builder2.maxStale(2859, timeUnit0);
      cacheControl0.noCache();
      cacheControl_Builder0.onlyIfCached();
      cacheControl0.noStore();
      cacheControl0.mustRevalidate();
      cacheControl_Builder2.maxStale(944, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder1.noCache();
      assertSame(cacheControl_Builder3, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "name is empty";
      Headers headers0 = Headers.of(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      cacheControl_Builder1.noCache();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "os/d=+</M1*)";
      stringArray0[1] = "name is empty";
      stringArray0[2] = "pragma";
      stringArray0[3] = "]&PW";
      stringArray0[4] = "PAtTe$gAs";
      stringArray0[5] = "name is empty";
      stringArray0[6] = "Unexpected char %#04x at %d in %s value: %s";
      stringArray0[7] = "Unexpected char %#04x at %d in %s value: %s";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl_Builder1.maxStale(651, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.onlyIfCached();
      cacheControl_Builder2.noTransform();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = cacheControl1.isPublic();
      assertFalse(boolean0);
      
      int int0 = cacheControl1.maxAgeSeconds();
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.noTransform());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "pragma";
      stringArray0[1] = "os/d=+</M1*)";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      
      CacheControl cacheControl2 = new CacheControl(cacheControl_Builder0);
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertTrue(cacheControl2.noCache());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      cacheControl_Builder1.noCache();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pragma";
      stringArray0[1] = "PAtTe$gAs";
      stringArray0[2] = "pragma";
      stringArray0[3] = "os/d=+</M1*)";
      stringArray0[4] = "PAtTe$gAs";
      stringArray0[5] = "os/d=+</M1*)";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder1.maxStale(651, timeUnit0);
      cacheControl_Builder0.onlyIfCached();
      cacheControl_Builder2.noTransform();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      cacheControl0.isPublic();
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      cacheControl_Builder1.noCache();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pragma";
      stringArray0[1] = "PAtTe$gAs";
      stringArray0[2] = "pragma";
      stringArray0[3] = "os/d=+</1*";
      stringArray0[4] = "PAtTe$gAs";
      stringArray0[5] = "os/d=+</1*";
      Headers.of(stringArray0);
      Headers.of(stringArray0);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("pragma", ",;");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("f]&p w", "");
      Headers.Builder headers_Builder3 = headers_Builder2.removeAll(",;");
      Headers headers0 = headers_Builder3.build();
      CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = new CacheControl(cacheControl_Builder1);
      Headers.of((Map<String, String>) hashMap0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl cacheControl1 = cacheControl_Builder1.build();
      cacheControl0.headerValue = "[wl#X=WX!^O(K~U0a";
      cacheControl1.toString();
      cacheControl1.noCache();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("pragma", "min-fresh=");
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("1");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.maxStale(44, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder0.onlyIfCached();
      CacheControl cacheControl2 = CacheControl.FORCE_NETWORK;
      cacheControl0.noCache();
      cacheControl_Builder3.noStore();
      cacheControl0.isPrivate();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder2.onlyIfCached();
      assertSame(cacheControl_Builder4, cacheControl_Builder3);
  }
}
