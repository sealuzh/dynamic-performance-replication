/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:25:09 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Token token0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 116);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (-1605), (-2028));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1605));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1605. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StringReader stringReader0 = new StringReader("abstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 660, 1940);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 660);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 660. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nb.j");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)84, 1759);
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("b", token0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstrat");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4074), (-4074));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-4074), javaCharStream0.getBeginColumn());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("++");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1940, 660);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 80. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("^", token0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0, 20, 20);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjmatchedKind = 112;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '$';
      charArray0[3] = ')';
      charArray0[4] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 655, 655);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 655, column 660.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B3R:LEUB");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 357, 357);
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 357, column 364.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0, 20, 20);
      char[] charArray0 = new char[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '$';
      charArray0[3] = ')';
      charArray0[4] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 655, 655);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 655, column 660.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-179), (-171));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-179));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -179. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '^';
      charArray0[2] = 'K';
      charArray0[3] = '%';
      charArray0[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-625), 28);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 29);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 29. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), 3962);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = 'f';
      charArray0[2] = '}';
      charArray0[3] = '8';
      charArray0[4] = '%';
      charArray0[5] = '{';
      charArray0[6] = 'H';
      stringReader0.read(charArray0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-4688));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4688. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("++");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1940, 660);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(661, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("++");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1940, 660);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(660, javaCharStream0.getBeginColumn());
      assertEquals(661, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("|=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1052), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1052), javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-635), (-635));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-842), 63);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-842), javaCharStream1.getLine());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = '^';
      charArray0[2] = 'A';
      charArray0[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-625), 28);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        JavaCharStream.hexval('%');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("[6r6LF<(-<B}d=z{o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1873), 660);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(661, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 28, (-454));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 28);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 28. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-625), 287);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-625));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -625. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aEstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), 3962);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-4688));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4688. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      char[] charArray0 = new char[9];
      charArray0[1] = 'a';
      charArray0[3] = '%';
      charArray0[4] = '=';
      charArray0[6] = 'k';
      charArray0[7] = 'K';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)79;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!*J9D+Z)N*Uy<h;F{+f");
      stringReader0.read();
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0084';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2091), 13);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2091, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.jjimageLen = (int) (byte) (-62);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("[6r6LF<(-<B}d=z{o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1873), 660);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(665, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '6';
      charArray0[2] = '\u0084';
      charArray0[3] = '\u0084';
      charArray0[4] = '\u0084';
      charArray0[5] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2091), 3525);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3526, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, (-4688));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '{';
      charArray0[2] = '%';
      charArray0[3] = '{';
      charArray0[4] = 'H';
      charArray0[5] = '%';
      charArray0[6] = '{';
      stringReader0.read(charArray0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 60. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 122, 122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 122, column 123.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'N', (-454));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 78, column -453.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aEstract");
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'd';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-625), 70);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 70. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), 3962);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '%';
      charArray0[2] = '%';
      stringReader0.read(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2748));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2748. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), 3962);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'H';
      charArray0[2] = '}';
      charArray0[3] = '{';
      charArray0[4] = '5';
      charArray0[5] = '%';
      stringReader0.read(charArray0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-4688));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4688. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), 3962);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = '{';
      charArray0[4] = 'H';
      stringReader0.read(charArray0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-4688));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4688. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = '^';
      char[] charArray1 = new char[6];
      charArray1[0] = '^';
      charArray1[1] = 'A';
      charArray1[2] = '^';
      charArray1[3] = '^';
      charArray1[4] = '^';
      charArray1[5] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 28, 3890);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-642));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -642. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L{/mtQqW");
      StringReader stringReader1 = new StringReader("\"||\"");
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '<';
      charArray0[2] = '%';
      charArray0[3] = 'H';
      charArray0[5] = 'Z';
      charArray0[5] = '6';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1347, 3);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("\"||\"", token0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3970, 3970);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3970);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3970. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '^';
      charArray0[2] = '=';
      charArray0[3] = '%';
      charArray0[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-625), 28);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 29);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 29. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = '|';
      charArray0[7] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 28, 73);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-619));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -619. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = '|';
      charArray0[1] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 28, 73);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = '|';
      charArray0[7] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 87, 1346);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 58, 1990, 1346);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 1990);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1990. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0, 20, 20);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjmatchedKind = (-1);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-108), 1886);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'v';
      stringReader0.read(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'v';
      charArray0[2] = ' ';
      charArray0[3] = '0';
      charArray0[4] = '|';
      charArray0[5] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 98);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 98. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.SwitchTo(1);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = '|';
      charArray0[7] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 87, 1346);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stringReader0.read(charArray0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 986, 1503);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 3);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 87, column 1354.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")'&IE4rEmti\"](");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, 57);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = '@';
      charArray0[2] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      JavaCharStream javaCharStream1 = new JavaCharStream(inputStreamReader0, (-1741), 121);
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-454), 1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 119. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = '^';
      char[] charArray1 = new char[6];
      charArray1[0] = '^';
      charArray1[1] = 'A';
      charArray1[2] = '^';
      charArray1[3] = '^';
      charArray1[4] = '^';
      charArray1[5] = '^';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      StringReader stringReader0 = new StringReader("Uw]");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, (byte)107);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 2);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(2, javaCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '^';
      charArray0[2] = '=';
      charArray0[3] = '%';
      charArray0[4] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-625), 28);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.next;
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      javaParserTokenManager1.ReInit(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(31, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-364), 747);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjmatchedKind = (-364);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-620));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -620. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'v';
      charArray0[2] = '^';
      charArray0[3] = 'v';
      charArray0[4] = '|';
      charArray0[5] = '^';
      charArray0[6] = 'v';
      charArray0[7] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-411), 8);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -411, column 16.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte) (-2), (byte)94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 94);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 94. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)75;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2513, 49);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = 'i';
      charArray0[5] = '|';
      charArray0[6] = '|';
      charArray0[7] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 87, 1346);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      stringReader0.read(charArray0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 986, 1503);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager2.getNextToken();
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      token0.beginColumn = 1683;
      token0.next = token1;
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(48, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("+");
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'y';
      charArray0[2] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 40, (-2801));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2799), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("lVVK");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 660, (-755));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-3508), 105, 74);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-752), javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      int int0 = ObjectStreamConstants.baseWireHandle;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 8257536, (-1556));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      stringReader0.read();
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      charArray0[3] = '\u0084';
      charArray0[4] = 'i';
      charArray0[5] = '\u0084';
      charArray0[6] = '\u0084';
      charArray0[7] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 87, 1346);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 87, column 1346.  Encountered: \"\\u0084\" (132), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = '`';
      charArray0[2] = '9';
      charArray0[3] = 'h';
      charArray0[4] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 224, 1283);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1283, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("char");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 110, (-635));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-633), javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '_';
      charArray0[2] = '\'';
      charArray0[3] = '=';
      charArray0[4] = 'l';
      charArray0[5] = '3';
      charArray0[6] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 85, (-439));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 85, column -432.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, (-4688));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '{';
      charArray0[2] = '%';
      charArray0[3] = '{';
      charArray0[4] = 'H';
      charArray0[5] = '%';
      charArray0[6] = '{';
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals((-4688), javaCharStream0.getEndColumn());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals((-4688), javaCharStream0.getColumn());
      assertEquals("@", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(86, token0.kind);
      assertEquals((-4688), token0.endColumn);
      assertEquals(3962, token0.beginLine);
      assertEquals((-4688), token0.beginColumn);
      assertEquals(3962, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 100. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WC/NVn1kx;Zr;c,");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(87, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'B';
      charArray0[2] = 'J';
      charArray0[3] = 'j';
      charArray0[4] = 'w';
      charArray0[5] = 'g';
      charArray0[6] = '$';
      charArray0[7] = 't';
      charArray0[8] = '3';
      int int1 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'C', '/', 'N', 'V', 'n', '1', 'k', 'x', ';'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-635), 87);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-635), javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals((-635), javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals((-635), javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals("Zr", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-635), token0.beginLine);
      assertEquals((-635), token0.endLine);
      assertEquals(88, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals("Zr", token1.toString());
      assertEquals((-635), javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals((-635), javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals((-635), javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertNotNull(token1);
      assertEquals(88, token1.endColumn);
      assertEquals(87, token1.beginColumn);
      assertEquals((-635), token1.beginLine);
      assertEquals((-635), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[L{/mtp=`qW");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-17), 8257536);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals(8257536, javaCharStream0.getBeginColumn());
      assertEquals(8257536, javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals(8257536, javaCharStream0.getColumn());
      assertEquals("y", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-17), token0.beginLine);
      assertEquals(8257536, token0.endColumn);
      assertEquals(8257536, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-17), token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals(8257536, javaCharStream0.getBeginColumn());
      assertEquals(8257536, javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals(8257536, javaCharStream0.getColumn());
      assertEquals("y", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-17), token0.beginLine);
      assertEquals(8257536, token0.endColumn);
      assertEquals(8257536, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-17), token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals(8257536, javaCharStream0.getBeginColumn());
      assertEquals(8257536, javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals(8257536, javaCharStream0.getColumn());
      assertEquals("y", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-17), token0.beginLine);
      assertEquals(8257536, token0.endColumn);
      assertEquals(8257536, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-17), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '+';
      charArray0[2] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', '+', 'r'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'w', '+', 'r'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 122, 122);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', '+', 'r'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'w', '+', 'r'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'w', '+', 'r'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'w', '+', 'r'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("\f");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-635), (-635));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-635), javaCharStream0.getEndColumn());
      assertEquals((-635), javaCharStream0.getColumn());
      assertEquals((-635), javaCharStream0.getLine());
      assertEquals((-635), javaCharStream0.getBeginColumn());
      assertEquals((-635), javaCharStream0.getBeginLine());
      assertEquals((-635), javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals((-635), token0.beginLine);
      assertEquals((-635), token0.endColumn);
      assertEquals((-635), token0.beginColumn);
      assertEquals((-635), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)98;
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      StringReader stringReader0 = new StringReader("5ElR:7e~e@,0`L/$Vg");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1347, (byte) (-2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1347, javaCharStream0.getBeginLine());
      assertEquals(1347, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1347, javaCharStream0.getEndLine());
      assertEquals((-2), javaCharStream0.getBeginColumn());
      assertEquals("5ElR", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1347, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals((-2), token0.beginColumn);
      assertEquals(1347, token0.endLine);
      
      javaParserTokenManager0.curLexState = (-2);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1347, javaCharStream0.getBeginLine());
      assertEquals(1347, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1347, javaCharStream0.getEndLine());
      assertEquals((-2), javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-5303));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -5303. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'a';
      charArray0[2] = '=';
      charArray0[3] = '\'';
      charArray0[4] = '=';
      charArray0[5] = 'w';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', 'a', '=', '\'', '=', 'w', '\'', '\''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '=', (-362));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\'', 'a', '=', '\'', '=', 'w', '\'', '\''}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', 'a', '=', '\'', '=', 'w', '\'', '\''}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 61, column -360.  Encountered: \"=\" (61), after : \"\\'a\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, (-4688));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[7];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("j>9Q");
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.remaining());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(4, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.position());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertEquals("j>9Q", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(4, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.position());
      assertEquals(4, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, int0);
      
      charArray0[1] = '{';
      charArray0[2] = '%';
      charArray0[3] = '{';
      charArray0[4] = 'H';
      charArray0[5] = '%';
      charArray0[6] = '{';
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("?", token0.toString());
      assertEquals((-4688), javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4688), javaCharStream0.getEndColumn());
      assertNotNull(token0);
      assertEquals((-4688), token0.endColumn);
      assertEquals(3962, token0.endLine);
      assertEquals(91, token0.kind);
      assertEquals(3962, token0.beginLine);
      assertEquals((-4688), token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 100. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'I';
      charArray0[2] = 'i';
      charArray0[3] = '7';
      charArray0[4] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'I', 'i', '7', 'i'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-196), 28);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', 'I', 'i', '7', 'i'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', 'I', 'i', '7', 'i'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-196), javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals((-196), javaCharStream0.getEndLine());
      assertEquals((-196), javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals("iIi7i", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', 'I', 'i', '7', 'i'}, charArray0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token0.endColumn);
      assertEquals((-196), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-196), token0.beginLine);
      assertEquals(28, token0.beginColumn);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-196), javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals((-196), javaCharStream0.getEndLine());
      assertEquals((-196), javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'i', 'I', 'i', '7', 'i'}, charArray0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 93);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 93. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[L{/mtp=`qW");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'q', ')'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)84, 2114);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'q', ')'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'q', ')'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(2114, javaCharStream0.getColumn());
      assertEquals(2114, javaCharStream0.getBeginColumn());
      assertEquals(2114, javaCharStream0.getEndColumn());
      assertEquals("q", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'q', ')'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.beginLine);
      assertEquals(2114, token0.beginColumn);
      assertEquals(2114, token0.endColumn);
      assertEquals(84, token0.endLine);
      assertEquals(74, token0.kind);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(2114, javaCharStream0.getColumn());
      assertEquals(2114, javaCharStream0.getBeginColumn());
      assertEquals(2114, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'q', ')'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 84. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L{/mtQqW");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"||\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y[L{/mtp=`qW");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      StringReader stringReader1 = new StringReader("\"||\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '<';
      charArray0[2] = '%';
      charArray0[3] = 'H';
      charArray0[4] = 'x';
      charArray0[5] = 'Z';
      charArray0[6] = '6';
      charArray0[7] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '<', '%', 'H', 'x', 'Z', '6', '9'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1347, 848);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '<', '%', 'H', 'x', 'Z', '6', '9'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '<', '%', 'H', 'x', 'Z', '6', '9'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1347, javaCharStream0.getEndLine());
      assertEquals(848, javaCharStream0.getEndColumn());
      assertEquals(848, javaCharStream0.getColumn());
      assertEquals(848, javaCharStream0.getBeginColumn());
      assertEquals(1347, javaCharStream0.getLine());
      assertEquals(1347, javaCharStream0.getBeginLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '<', '%', 'H', 'x', 'Z', '6', '9'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1347, token0.beginLine);
      assertEquals(848, token0.beginColumn);
      assertEquals(1347, token0.endLine);
      assertEquals(85, token0.kind);
      assertEquals(848, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 8257536);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 8257536. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'e';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[1] = 'e';
      charArray1[2] = 'e';
      charArray1[5] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', 'e', 'e', '\u0000', '\u0000', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 28, 3890);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'e', 'e', '\u0000', '\u0000', 'e'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', 'e', 'e', '\u0000', '\u0000', 'e'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(3890, javaCharStream0.getBeginColumn());
      assertEquals(3892, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(3892, javaCharStream0.getColumn());
      assertEquals("eee", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', 'e', 'e', '\u0000', '\u0000', 'e'}, charArray1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(3892, token0.endColumn);
      assertEquals(3890, token0.beginColumn);
      assertEquals(28, token0.endLine);
      assertEquals(28, token0.beginLine);
      assertFalse(charArray1.equals((Object)charArray0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(3890, javaCharStream0.getBeginColumn());
      assertEquals(3892, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(3892, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'e', 'e', 'e', '\u0000', '\u0000', 'e'}, charArray1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-870));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -870. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'w';
      charArray0[2] = '3';
      charArray0[3] = 'v';
      charArray0[4] = '>';
      charArray0[5] = '7';
      charArray0[6] = ',';
      charArray0[7] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', 'w', '3', 'v', '>', '7', ',', '/'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1346, 600);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'O', 'w', '3', 'v', '>', '7', ',', '/'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'O', 'w', '3', 'v', '>', '7', ',', '/'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1346, javaCharStream0.getLine());
      assertEquals(603, javaCharStream0.getColumn());
      assertEquals(1346, javaCharStream0.getBeginLine());
      assertEquals(600, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getEndLine());
      assertEquals(603, javaCharStream0.getEndColumn());
      assertEquals("Ow3v", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'O', 'w', '3', 'v', '>', '7', ',', '/'}, charArray0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1346, token0.beginLine);
      assertEquals(1346, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(600, token0.beginColumn);
      assertEquals(603, token0.endColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1346, javaCharStream0.getLine());
      assertEquals(603, javaCharStream0.getColumn());
      assertEquals(1346, javaCharStream0.getBeginLine());
      assertEquals(600, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getEndLine());
      assertEquals(603, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'O', 'w', '3', 'v', '>', '7', ',', '/'}, charArray0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1346, javaCharStream0.getLine());
      assertEquals(603, javaCharStream0.getColumn());
      assertEquals(1346, javaCharStream0.getBeginLine());
      assertEquals(600, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getEndLine());
      assertEquals(603, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'O', 'w', '3', 'v', '>', '7', ',', '/'}, charArray0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(">", token1.toString());
      assertEquals(1346, javaCharStream0.getLine());
      assertEquals(604, javaCharStream0.getColumn());
      assertEquals(1346, javaCharStream0.getBeginLine());
      assertEquals(1346, javaCharStream0.getEndLine());
      assertEquals(604, javaCharStream0.getEndColumn());
      assertEquals(604, javaCharStream0.getBeginColumn());
      assertNotNull(token1);
      assertArrayEquals(new char[] {'O', 'w', '3', 'v', '>', '7', ',', '/'}, charArray0);
      assertEquals(1346, token1.beginLine);
      assertEquals(1346, token1.endLine);
      assertEquals(124, token1.kind);
      assertEquals(604, token1.beginColumn);
      assertEquals(604, token1.endColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e=)/Cf/p");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'g';
      charArray0[2] = 's';
      charArray0[3] = 'w';
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)70, (byte)84);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.defaultLexState = 98;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals("e", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(70, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(84, token0.endColumn);
      assertEquals(84, token0.beginColumn);
      assertEquals(70, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals("e", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(84, token1.endColumn);
      assertEquals(70, token1.beginLine);
      assertEquals(84, token1.beginColumn);
      assertEquals(70, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 70. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '+';
      charArray0[2] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'u', '+', 'r'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'u', '+', 'r'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 122, 122);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'u', '+', 'r'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'u', '+', 'r'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals("u", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'u', '+', 'r'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(122, token0.endLine);
      assertEquals(122, token0.endColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1735);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1735. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[9];
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 1940);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(1944, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(1940, javaCharStream0.getBeginColumn());
      assertEquals(1944, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals("Error", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(23, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1944, token0.endColumn);
      assertEquals(23, token0.endLine);
      assertEquals(1940, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(1945, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(1945, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(1945, javaCharStream0.getEndColumn());
      assertEquals(":", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(92, token1.kind);
      assertEquals(1945, token1.beginColumn);
      assertEquals(1945, token1.endColumn);
      assertEquals(23, token1.endLine);
      assertEquals(23, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-64), (byte)82, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-64), (byte)82, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-64), (byte)82, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)98, (-323));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-64), (byte)82, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-64), (byte)82, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-64), (byte)82, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(98, javaCharStream1.getEndLine());
      assertEquals(98, javaCharStream1.getLine());
      assertEquals(98, javaCharStream1.getBeginLine());
      assertEquals((-323), javaCharStream1.getEndColumn());
      assertEquals((-323), javaCharStream1.getColumn());
      assertEquals((-323), javaCharStream1.getBeginColumn());
      assertEquals("R", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-64), (byte)82, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(98, token0.endLine);
      assertEquals((-323), token0.endColumn);
      assertEquals(98, token0.beginLine);
      assertEquals((-323), token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, (-3754));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3754. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)115;
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-42), 92);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-42), javaCharStream0.getLine());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals((-42), javaCharStream0.getEndLine());
      assertEquals((-42), javaCharStream0.getBeginLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals("$", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(92, token0.endColumn);
      assertEquals(92, token0.beginColumn);
      assertEquals((-42), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-42), token0.beginLine);
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2695));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2695. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '$';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      long long0 = charArrayReader1.skip((-1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("$", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      StringReader stringReader0 = new StringReader(":*7l%4O&W03HYW+fM9j");
      assertNotNull(stringReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 1940, 23);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 439, (-1));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(439, javaCharStream1.getLine());
      assertEquals(439, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals(439, javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1), token0.beginColumn);
      assertEquals(92, token0.kind);
      assertEquals(439, token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(439, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(439, javaCharStream1.getLine());
      assertEquals(439, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(439, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(103, token1.kind);
      assertEquals(439, token1.endLine);
      assertEquals(439, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}CJXHL H|#^)@'%J");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'g';
      charArray0[2] = 'w';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'}', 'C', 'J'}, charArray0);
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, 89);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals("XHL", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(89, token0.beginColumn);
      assertEquals(3, token0.endLine);
      assertEquals(3, token0.beginLine);
      assertEquals(91, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}CJXHL H|#^)@'%J");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("9Dq2N");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1940, 1940);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1940, javaCharStream0.getBeginColumn());
      assertEquals(1940, javaCharStream0.getColumn());
      assertEquals(1940, javaCharStream0.getLine());
      assertEquals(1940, javaCharStream0.getEndColumn());
      assertEquals(1940, javaCharStream0.getBeginLine());
      assertEquals(1940, javaCharStream0.getEndLine());
      assertEquals("}", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token0.kind);
      assertEquals(1940, token0.beginLine);
      assertEquals(1940, token0.endLine);
      assertEquals(1940, token0.endColumn);
      assertEquals(1940, token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(1941, javaCharStream0.getBeginColumn());
      assertEquals(1940, javaCharStream0.getLine());
      assertEquals(1940, javaCharStream0.getBeginLine());
      assertEquals(1945, javaCharStream0.getEndColumn());
      assertEquals(1945, javaCharStream0.getColumn());
      assertEquals(1940, javaCharStream0.getEndLine());
      assertEquals("CJXHL", token1.toString());
      assertNotNull(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1940, token1.beginLine);
      assertEquals(1941, token1.beginColumn);
      assertEquals(1940, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1945, token1.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1940, javaCharStream0.getLine());
      assertEquals(1940, javaCharStream0.getBeginLine());
      assertEquals(1947, javaCharStream0.getBeginColumn());
      assertEquals(1947, javaCharStream0.getEndColumn());
      assertEquals(1947, javaCharStream0.getColumn());
      assertEquals(1940, javaCharStream0.getEndLine());
      assertEquals("H", token2.toString());
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1940, token2.endLine);
      assertEquals(1947, token2.endColumn);
      assertEquals(1940, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(1947, token2.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("Lexical error at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-365), 114);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-365), javaCharStream0.getBeginLine());
      assertEquals(120, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getColumn());
      assertEquals((-365), javaCharStream0.getLine());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals((-365), javaCharStream0.getEndLine());
      assertEquals("Lexical", token0.toString());
      assertNotNull(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-365), token0.beginLine);
      assertEquals((-365), token0.endLine);
      assertEquals(114, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(120, token0.endColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 74, 120);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lexical");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(74, javaCharStream1.getBeginLine());
      assertEquals(119, javaCharStream1.getColumn());
      assertEquals(74, javaCharStream1.getLine());
      assertEquals(74, javaCharStream1.getEndLine());
      assertEquals(119, javaCharStream1.getEndColumn());
      assertEquals(119, javaCharStream1.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token1.beginLine);
      assertEquals(74, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(119, token1.beginColumn);
      assertEquals(119, token1.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aEstract");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-926), 3962);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3962, javaCharStream0.getBeginColumn());
      assertEquals((-926), javaCharStream0.getLine());
      assertEquals((-926), javaCharStream0.getBeginLine());
      assertEquals(3962, javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getEndColumn());
      assertEquals((-926), javaCharStream0.getEndLine());
      assertEquals("j", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-926), token0.endLine);
      assertEquals(3962, token0.beginColumn);
      assertEquals(3962, token0.endColumn);
      assertEquals((-926), token0.beginLine);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(3962, javaCharStream0.getBeginColumn());
      assertEquals((-926), javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3962, javaCharStream0.getBeginColumn());
      assertEquals((-926), javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3962, javaCharStream0.getBeginColumn());
      assertEquals((-926), javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertArrayEquals(new char[] {'j', '`'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream1, (-1731));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1731. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), 3962);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '}';
      charArray0[2] = '%';
      charArray0[3] = '%';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'a', 'b', 's', 't'}, charArray0);
      assertEquals(4, int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', 'b', 's', 't'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1796), (-902));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3962, javaCharStream0.getBeginColumn());
      assertEquals((-4688), javaCharStream0.getEndLine());
      assertEquals(3965, javaCharStream0.getEndColumn());
      assertEquals((-4688), javaCharStream0.getLine());
      assertEquals(3965, javaCharStream0.getColumn());
      assertEquals((-4688), javaCharStream0.getBeginLine());
      assertEquals("ract", token0.toString());
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-4688), token0.endLine);
      assertEquals(3962, token0.beginColumn);
      assertEquals(3965, token0.endColumn);
      assertEquals((-4688), token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(3965, javaCharStream0.getBeginColumn());
      assertEquals((-4688), javaCharStream0.getEndLine());
      assertEquals(3965, javaCharStream0.getEndColumn());
      assertEquals((-4688), javaCharStream0.getLine());
      assertEquals(3965, javaCharStream0.getColumn());
      assertEquals((-4688), javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals((-4688), token1.beginLine);
      assertEquals((-4688), token1.endLine);
      assertEquals(3965, token1.endColumn);
      assertEquals(3965, token1.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1, (-4688));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4688. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nb.j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)84, 1759);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals('N', char0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1759, javaCharStream0.getColumn());
      assertEquals(1759, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1759, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(char1 == char0);
      assertEquals('b', char1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1759, javaCharStream0.getColumn());
      assertEquals(1759, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1759, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1760, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1760, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1760, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1760, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(1760, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(84, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("J<@f/");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-829), (-272));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-272), javaCharStream0.getEndColumn());
      assertEquals((-272), javaCharStream0.getColumn());
      assertEquals((-829), javaCharStream0.getLine());
      assertEquals((-272), javaCharStream0.getBeginColumn());
      assertEquals((-829), javaCharStream0.getEndLine());
      assertEquals((-829), javaCharStream0.getBeginLine());
      assertEquals("J", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-829), token0.beginLine);
      assertEquals((-272), token0.beginColumn);
      assertEquals((-272), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-829), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals((-271), javaCharStream0.getBeginColumn());
      assertEquals((-271), javaCharStream0.getColumn());
      assertEquals((-829), javaCharStream0.getLine());
      assertEquals((-829), javaCharStream0.getEndLine());
      assertEquals((-829), javaCharStream0.getBeginLine());
      assertEquals((-271), javaCharStream0.getEndColumn());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-271), token1.beginColumn);
      assertEquals((-829), token1.beginLine);
      assertEquals((-271), token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals((-829), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-270), javaCharStream0.getBeginColumn());
      assertEquals((-829), javaCharStream0.getLine());
      assertEquals((-270), javaCharStream0.getColumn());
      assertEquals((-829), javaCharStream0.getEndLine());
      assertEquals((-829), javaCharStream0.getBeginLine());
      assertEquals((-270), javaCharStream0.getEndColumn());
      assertEquals("@", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-829), token2.endLine);
      assertEquals(86, token2.kind);
      assertEquals((-270), token2.endColumn);
      assertEquals((-270), token2.beginColumn);
      assertEquals((-829), token2.beginLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("lVVK");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(108, int0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1738);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 49, (-755));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-755), javaCharStream0.getBeginColumn());
      assertEquals((-753), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-753), javaCharStream0.getEndColumn());
      assertEquals("VVK", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-755), token0.beginColumn);
      assertEquals(49, token0.beginLine);
      assertEquals((-753), token0.endColumn);
      assertEquals(49, token0.endLine);
      assertEquals(74, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-755), javaCharStream0.getBeginColumn());
      assertEquals((-753), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-753), javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals((-753), javaCharStream0.getBeginColumn());
      assertEquals((-753), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-753), javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(49, token1.endLine);
      assertEquals((-753), token1.beginColumn);
      assertEquals(49, token1.beginLine);
      assertEquals((-753), token1.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-753), javaCharStream0.getBeginColumn());
      assertEquals((-753), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-753), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nb.j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)84, 1759);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = 'u';
      charArray0[4] = 'q';
      charArray0[5] = '7';
      charArray0[6] = 'w';
      charArray0[7] = '2';
      charArray0[8] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', 'R', '!', 'u', 'q', '7', 'w', '2', 'a'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 52);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'4', 'R', '!', 'u', 'q', '7', 'w', '2', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'4', 'R', '!', 'u', 'q', '7', 'w', '2', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 61.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L{/mtQqW");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      StringReader stringReader1 = new StringReader("\"||\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[8];
      charArray0[5] = '.';
      charArray0[1] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'D', '\u0000', '\u0000', '\u0000', '.', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 98, 98);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals("\"||\"", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(98, token0.beginColumn);
      assertEquals(101, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(98, token0.endLine);
      assertEquals(98, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_PH0jWB3h#;4/~)LslX");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("_PH0jWB3h#;4/~)LslX");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("EQ-gWu[Bm?T(|q'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader1.markSupported();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 660, (-755));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-754), javaCharStream0.getEndColumn());
      assertEquals((-754), javaCharStream0.getColumn());
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals(660, javaCharStream0.getLine());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals((-755), javaCharStream0.getBeginColumn());
      assertEquals("EQ", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-755), token0.beginColumn);
      assertEquals(660, token0.beginLine);
      assertEquals((-754), token0.endColumn);
      assertEquals(660, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals((-753), javaCharStream0.getEndColumn());
      assertEquals((-753), javaCharStream0.getColumn());
      assertEquals((-753), javaCharStream0.getBeginColumn());
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals(660, javaCharStream0.getLine());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(660, token1.endLine);
      assertEquals((-753), token1.beginColumn);
      assertEquals(102, token1.kind);
      assertEquals(660, token1.beginLine);
      assertEquals((-753), token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-752), javaCharStream0.getBeginColumn());
      assertEquals((-750), javaCharStream0.getEndColumn());
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals(660, javaCharStream0.getLine());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals((-750), javaCharStream0.getColumn());
      assertEquals("gWu", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(660, token2.beginLine);
      assertEquals((-752), token2.beginColumn);
      assertEquals(660, token2.endLine);
      assertEquals((-750), token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")o:-[D0");
      assertNotNull(stringReader0);
      
      int int0 = (-635);
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '(';
      charArray0[2] = 'O';
      charArray0[3] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', '(', 'O', '^'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-635), (-635));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'s', '(', 'O', '^'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'s', '(', 'O', '^'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-635), javaCharStream0.getBeginLine());
      assertEquals((-635), javaCharStream0.getBeginColumn());
      assertEquals((-635), javaCharStream0.getColumn());
      assertEquals((-635), javaCharStream0.getEndColumn());
      assertEquals((-635), javaCharStream0.getEndLine());
      assertEquals((-635), javaCharStream0.getLine());
      assertEquals("s", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'s', '(', 'O', '^'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-635), token0.beginLine);
      assertEquals((-635), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-635), token0.endColumn);
      assertEquals((-635), token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_PH0jWB3h#;4/~)LslX");
      assertFalse(boolean0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("_PH0jWB3h#;4/~)LslX");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-829), (-272));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 14, 2074, 57);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(2074, javaCharStream1.getBeginColumn());
      assertEquals(14, javaCharStream1.getEndLine());
      assertEquals(2082, javaCharStream1.getColumn());
      assertEquals(14, javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getLine());
      assertEquals(2082, javaCharStream1.getEndColumn());
      assertEquals("_PH0jWB3h", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(14, token0.endLine);
      assertEquals(2082, token0.endColumn);
      assertEquals(2074, token0.beginColumn);
      assertEquals(14, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 14, column 2083.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, (-4688));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[7];
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?', '_', 'w'}, charArray0);
      assertEquals(7, int0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals('_', char0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals((-4688), javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4688), javaCharStream0.getEndColumn());
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertEquals("[", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token1.kind);
      assertEquals((-4688), token1.beginColumn);
      assertEquals((-4688), token1.endColumn);
      assertEquals(3962, token1.endLine);
      assertEquals(3962, token1.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 108, 3962);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals((-4688), javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4688), javaCharStream0.getEndColumn());
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3962, column -4682.  Encountered: <EOF> after : \"\\\"BH>4\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = 'I';
      charArray0[4] = '7';
      charArray0[5] = 'I';
      charArray0[6] = '7';
      charArray0[7] = 'I';
      charArray0[8] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'I', '7', '7', 'I', '7', 'I', '7', 'I', 'I'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1267), (-1267));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'I', '7', '7', 'I', '7', 'I', '7', 'I', 'I'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'I', '7', '7', 'I', '7', 'I', '7', 'I', 'I'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1267), javaCharStream0.getBeginLine());
      assertEquals((-1267), javaCharStream0.getBeginColumn());
      assertEquals((-1259), javaCharStream0.getColumn());
      assertEquals((-1267), javaCharStream0.getEndLine());
      assertEquals((-1267), javaCharStream0.getLine());
      assertEquals((-1259), javaCharStream0.getEndColumn());
      assertEquals("I77I7I7II", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'I', '7', '7', 'I', '7', 'I', '7', 'I', 'I'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1259), token0.endColumn);
      assertEquals((-1267), token0.beginLine);
      assertEquals((-1267), token0.endLine);
      assertEquals((-1267), token0.beginColumn);
      
      javaCharStream0.tokenBegin = (-1267);
      assertEquals((-1259), javaCharStream0.getColumn());
      assertEquals((-1267), javaCharStream0.getEndLine());
      assertEquals((-1267), javaCharStream0.getLine());
      assertEquals((-1259), javaCharStream0.getEndColumn());
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals("", token2.toString());
      assertEquals((-1267), javaCharStream0.getBeginLine());
      assertEquals((-1259), javaCharStream0.getColumn());
      assertEquals((-1267), javaCharStream0.getEndLine());
      assertEquals((-1267), javaCharStream0.getLine());
      assertEquals((-1259), javaCharStream0.getBeginColumn());
      assertEquals((-1259), javaCharStream0.getEndColumn());
      assertNotNull(token2);
      assertArrayEquals(new char[] {'I', '7', '7', 'I', '7', 'I', '7', 'I', 'I'}, charArray0);
      assertEquals(0, token2.kind);
      assertEquals((-1267), token2.endLine);
      assertEquals((-1259), token2.endColumn);
      assertEquals((-1259), token2.beginColumn);
      assertEquals((-1267), token2.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      MockFile mockFile0 = new MockFile("==", "");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/==", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("==", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca", mockFile0.getParent());
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, (-4688));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 41, (-4688));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      int int0 = stringReader0.read();
      assertEquals(64, int0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertEquals((-4686), javaCharStream0.getEndColumn());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4686), javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals("Y0A", token0.toString());
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-4688), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3962, token0.endLine);
      assertEquals(3962, token0.beginLine);
      assertEquals((-4686), token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertEquals((-4686), javaCharStream0.getEndColumn());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4686), javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals((-4685), javaCharStream0.getBeginColumn());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4685), javaCharStream0.getEndColumn());
      assertEquals((-4685), javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals("?", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(91, token1.kind);
      assertEquals((-4685), token1.beginColumn);
      assertEquals(3962, token1.beginLine);
      assertEquals((-4685), token1.endColumn);
      assertEquals(3962, token1.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager2.setDebugStream(javaParserTokenManager0.debugStream);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertEquals((-4685), javaCharStream0.getBeginColumn());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals((-4685), javaCharStream0.getEndColumn());
      assertEquals((-4685), javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("float", token0.toString());
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(33, token0.kind);
      assertEquals(2, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1347);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1347. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '!';
      charArray1[1] = '7';
      charArray1[2] = '7';
      charArray1[3] = '7';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'!', '7', '7', '7'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 1346, 1346);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'!', '7', '7', '7'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'!', '7', '7', '7'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1346, javaCharStream0.getEndLine());
      assertEquals(1346, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getColumn());
      assertEquals(1346, javaCharStream0.getEndColumn());
      assertEquals(1346, javaCharStream0.getBeginLine());
      assertEquals(1346, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'!', '7', '7', '7'}, charArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(1346, token0.endLine);
      assertEquals(1346, token0.endColumn);
      assertEquals(1346, token0.beginColumn);
      assertEquals(1346, token0.beginLine);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1346, javaCharStream0.getEndLine());
      assertEquals(1346, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getColumn());
      assertEquals(1346, javaCharStream0.getEndColumn());
      assertEquals(1346, javaCharStream0.getBeginLine());
      assertEquals(1346, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'!', '7', '7', '7'}, charArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("_PH0jWB3h#Q4/~)LslX");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("EQ-gWu[Bm?T(|q'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader1.markSupported();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 660, 660);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals(661, javaCharStream0.getEndColumn());
      assertEquals(660, javaCharStream0.getBeginColumn());
      assertEquals(660, javaCharStream0.getLine());
      assertEquals(661, javaCharStream0.getColumn());
      assertEquals("EQ", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(660, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(661, token0.endColumn);
      assertEquals(660, token0.beginLine);
      assertEquals(660, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.curLexState = 59;
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals(661, javaCharStream0.getEndColumn());
      assertEquals(660, javaCharStream0.getBeginColumn());
      assertEquals(660, javaCharStream0.getLine());
      assertEquals(661, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals(662, javaCharStream0.getEndColumn());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals(662, javaCharStream0.getColumn());
      assertEquals(662, javaCharStream0.getBeginColumn());
      assertEquals(660, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(662, token1.beginColumn);
      assertEquals(660, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(662, token1.endColumn);
      assertEquals(660, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals(662, javaCharStream0.getEndColumn());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals(662, javaCharStream0.getColumn());
      assertEquals(662, javaCharStream0.getBeginColumn());
      assertEquals(660, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(662, token2.endColumn);
      assertEquals(662, token2.beginColumn);
      assertEquals(660, token2.beginLine);
      assertEquals(660, token2.endLine);
      assertEquals(0, token2.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9Dq2N");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1426, 1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1426, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1426, javaCharStream0.getLine());
      assertEquals(1426, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("9Dq2N", token0.toString());
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1426, token0.endLine);
      assertEquals(1426, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1426, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1426, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1426, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1426, token1.endLine);
      assertEquals(1426, token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1426, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1426, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1426, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.jjmatchedKind = 2558;
      assertEquals(1426, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1426, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1426, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1426, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1426, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1426, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(5, token2.beginColumn);
      assertEquals(1426, token2.endLine);
      assertEquals(5, token2.endColumn);
      assertEquals(1426, token2.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(1426, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1426, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1426, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1426, token3.endLine);
      assertEquals(1426, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1426, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1426, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1426, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")o:-[D0");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 35, 1864);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(41, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1864, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(1864, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(1864, javaCharStream0.getEndColumn());
      assertEquals("o", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(35, token0.endLine);
      assertEquals(35, token0.beginLine);
      assertEquals(1864, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1864, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1864, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(1864, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(1864, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 's';
      charArray1[1] = 's';
      javaCharStream0.nextCharBuf = charArray1;
      assertEquals(1864, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(1864, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(1864, javaCharStream0.getEndColumn());
      
      Token token1 = Token.newToken(1864);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1864, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(1864, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(1864, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1864, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(1864, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(1864, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[3] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '%'}, charArray0);
      
      int int0 = 848;
      int int1 = 894;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 894, (byte)84);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '%'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '%'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(894, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(894, javaCharStream0.getLine());
      assertEquals(894, javaCharStream0.getBeginLine());
      assertEquals("x", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '%'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(894, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(84, token0.endColumn);
      assertEquals(894, token0.endLine);
      assertEquals(84, token0.beginColumn);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader(", column ");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(44, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 122, 44, 50);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockFile mockFile0 = new MockFile(", column ", "");
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/, column ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(", column ", mockFile0.getName());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/, column ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(", column ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ", column ");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/, column ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(9L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(", column ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertNotNull(printStream0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/, column ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(9L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(", column ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.endLine);
      assertEquals(84, token0.kind);
      assertEquals(44, token0.beginColumn);
      assertEquals(44, token0.endColumn);
      assertEquals(122, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("K~>[*o");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1, 4);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("K", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("~", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(90, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(">", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals(6, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(6, token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("[", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(7, token3.endColumn);
      assertEquals(7, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(81, token3.kind);
      assertEquals(1, token3.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nb.j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)84, 1759);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'u';
      charArray0[4] = 'q';
      charArray0[5] = '7';
      charArray0[1] = 'w';
      charArray0[7] = '2';
      charArray0[8] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', 'w', 'R', 'u', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)84, 629);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'4', 'w', 'R', 'u', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'4', 'w', 'R', 'u', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(84, javaCharStream1.getBeginLine());
      assertEquals(634, javaCharStream1.getEndColumn());
      assertEquals(629, javaCharStream1.getBeginColumn());
      assertEquals(84, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getEndLine());
      assertEquals(634, javaCharStream1.getColumn());
      assertEquals("4wRuq7", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'4', 'w', 'R', 'u', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertEquals(84, token0.beginLine);
      assertEquals(634, token0.endColumn);
      assertEquals(84, token0.endLine);
      assertEquals(629, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column 635.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qG)U)d;;5st");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1153, 1355);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = '^';
      charArray0[2] = '2';
      charArray0[3] = '7';
      charArray0[4] = 'A';
      charArray0[5] = ':';
      charArray0[6] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'A', '^', '2', '7', 'A', ':', 'R'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 200, (-416));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'A', '^', '2', '7', 'A', ':', 'R'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'A', '^', '2', '7', 'A', ':', 'R'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-416), javaCharStream1.getBeginColumn());
      assertEquals((-416), javaCharStream1.getEndColumn());
      assertEquals(200, javaCharStream1.getEndLine());
      assertEquals(200, javaCharStream1.getBeginLine());
      assertEquals((-416), javaCharStream1.getColumn());
      assertEquals(200, javaCharStream1.getLine());
      assertEquals("A", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'A', '^', '2', '7', 'A', ':', 'R'}, charArray0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-416), token0.beginColumn);
      assertEquals((-416), token0.endColumn);
      assertEquals(200, token0.beginLine);
      assertEquals(200, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-415), javaCharStream1.getBeginColumn());
      assertEquals((-415), javaCharStream1.getEndColumn());
      assertEquals(200, javaCharStream1.getEndLine());
      assertEquals(200, javaCharStream1.getBeginLine());
      assertEquals(200, javaCharStream1.getLine());
      assertEquals((-415), javaCharStream1.getColumn());
      assertEquals("^", token2.toString());
      assertNotNull(token2);
      assertArrayEquals(new char[] {'A', '^', '2', '7', 'A', ':', 'R'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(107, token2.kind);
      assertEquals(200, token2.endLine);
      assertEquals((-415), token2.beginColumn);
      assertEquals(200, token2.beginLine);
      assertEquals((-415), token2.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '5';
      charArray0[6] = '>';
      charArray0[7] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '5', '5', '>', '>', '5', '>', '>'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 1346);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'>', '5', '5', '>', '>', '5', '>', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, '5', 1346);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', '5', '5', '>', '>', '5', '>', '>'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', '5', '5', '>', '>', '5', '>', '>'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(1346, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(1346, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getEndColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', '5', '5', '>', '>', '5', '>', '>'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1346, token0.beginColumn);
      assertEquals(53, token0.beginLine);
      assertEquals(53, token0.endLine);
      assertEquals(1346, token0.endColumn);
      assertEquals(124, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(1346, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(1346, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'>', '5', '5', '>', '>', '5', '>', '>'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(1346, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(1346, javaCharStream0.getBeginColumn());
      assertEquals(1346, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new char[] {'>', '5', '5', '>', '>', '5', '>', '>'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 53, column 1354.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3962, 101);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@Y0A?_w_[\"BH>4");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals("<<", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3962, token0.endLine);
      assertEquals(109, token0.kind);
      assertEquals(3962, token0.beginLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(102, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2603);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2603. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '3';
      charArray0[2] = 'V';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '3', 'V', 'e', 'e', 'e', 'e'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 28, (-3915));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', '3', 'V', 'e', 'e', 'e', 'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', '3', 'V', 'e', 'e', 'e', 'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3909), javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3909), javaCharStream0.getColumn());
      assertEquals((-3915), javaCharStream0.getBeginColumn());
      assertEquals("e3Veeee", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', '3', 'V', 'e', 'e', 'e', 'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-3915), token0.beginColumn);
      assertEquals(28, token0.endLine);
      assertEquals((-3909), token0.endColumn);
      assertEquals(28, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3909), javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3909), javaCharStream0.getColumn());
      assertEquals((-3915), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'e', '3', 'V', 'e', 'e', 'e', 'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3909), javaCharStream0.getBeginColumn());
      assertEquals((-3909), javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3909), javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertArrayEquals(new char[] {'e', '3', 'V', 'e', 'e', 'e', 'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(28, token1.endLine);
      assertEquals((-3909), token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(28, token1.beginLine);
      assertEquals((-3909), token1.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-3909), javaCharStream0.getBeginColumn());
      assertEquals((-3909), javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals((-3909), javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'e', '3', 'V', 'e', 'e', 'e', 'e'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qG)U)d;;5st");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1153, 1355);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      int int0 = stringReader0.read();
      assertEquals(113, int0);
      
      charArray0[1] = '^';
      charArray0[2] = '2';
      charArray0[3] = '7';
      charArray0[4] = 'A';
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1153, (-2823));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1153, javaCharStream0.getEndLine());
      assertEquals(1153, javaCharStream0.getLine());
      assertEquals(1355, javaCharStream0.getBeginColumn());
      assertEquals(1153, javaCharStream0.getBeginLine());
      assertEquals(1355, javaCharStream0.getColumn());
      assertEquals(1355, javaCharStream0.getEndColumn());
      assertEquals("G", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1355, token0.beginColumn);
      assertEquals(1153, token0.beginLine);
      assertEquals(1355, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1153, token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1153, javaCharStream0.getEndLine());
      assertEquals(1153, javaCharStream0.getLine());
      assertEquals(1356, javaCharStream0.getBeginColumn());
      assertEquals(1153, javaCharStream0.getBeginLine());
      assertEquals(1356, javaCharStream0.getColumn());
      assertEquals(1356, javaCharStream0.getEndColumn());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1153, token1.endLine);
      assertEquals(1153, token1.beginLine);
      assertEquals(1356, token1.beginColumn);
      assertEquals(1356, token1.endColumn);
      assertEquals(78, token1.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1153, javaCharStream1.getLine());
      assertEquals(1153, javaCharStream1.getBeginLine());
      assertEquals((-2824), javaCharStream1.getColumn());
      assertEquals((-2824), javaCharStream1.getEndColumn());
      assertEquals((-2824), javaCharStream1.getBeginColumn());
      assertEquals(1153, javaCharStream1.getEndLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1153, token2.endLine);
      assertEquals((-2824), token2.beginColumn);
      assertEquals(1153, token2.beginLine);
      assertEquals((-2824), token2.endColumn);
      assertEquals(0, token2.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Kq>[go");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '{';
      charArray0[2] = 'P';
      charArray0[3] = '';
      charArray0[4] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'B', '{', 'P', '', 'K'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, Integer.MAX_VALUE, 3701);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'B', '{', 'P', '', 'K'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'B', '{', 'P', '', 'K'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3701, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(3701, javaCharStream0.getBeginColumn());
      assertEquals(3701, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals("B", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'B', '{', 'P', '', 'K'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3701, token0.endColumn);
      assertEquals(3701, token0.beginColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(3702, javaCharStream0.getEndColumn());
      assertEquals(3702, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(3702, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
      assertNotNull(token1);
      assertArrayEquals(new char[] {'B', '{', 'P', '', 'K'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token1.beginLine);
      assertEquals(79, token1.kind);
      assertEquals(3702, token1.endColumn);
      assertEquals(Integer.MAX_VALUE, token1.endLine);
      assertEquals(3702, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(3703, javaCharStream0.getBeginColumn());
      assertEquals(3703, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(3703, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals("P", token2.toString());
      assertNotNull(token2);
      assertArrayEquals(new char[] {'B', '{', 'P', '', 'K'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(Integer.MAX_VALUE, token2.beginLine);
      assertEquals(3703, token2.endColumn);
      assertEquals(Integer.MAX_VALUE, token2.endLine);
      assertEquals(3703, token2.beginColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(3703, javaCharStream0.getBeginColumn());
      assertEquals(3703, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(3703, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'B', '{', 'P', '', 'K'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3962, 101);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@Y0A?_w_[\"BH>4");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals("<<", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3962, token0.endLine);
      assertEquals(109, token0.kind);
      assertEquals(3962, token0.beginLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(102, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2603);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2603. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")'&IE4rEmti\"](");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, 57);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3962, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(57, token0.endColumn);
      assertEquals(57, token0.beginColumn);
      assertEquals(3962, token0.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'f';
      charArray0[2] = '^';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'u', 'f', '^'}, charArray0);
      assertEquals((-1), int0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\'', char0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, (-227));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals("&", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(58, token1.endColumn);
      assertEquals(58, token1.beginColumn);
      assertEquals(3962, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(3962, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = new Token();
      assertNull(token2.toString());
      assertNotNull(token2);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("_PH0jWB3h#Q4/~)LslX");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("EQ-gWu[Bm?T(|q'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader1.markSupported();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 660, 660);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(660, javaCharStream0.getLine());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals(661, javaCharStream0.getEndColumn());
      assertEquals(661, javaCharStream0.getColumn());
      assertEquals(660, javaCharStream0.getBeginColumn());
      assertEquals(660, javaCharStream0.getEndLine());
      assertEquals("EQ", token0.toString());
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(660, token0.beginLine);
      assertEquals(660, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(661, token0.endColumn);
      assertEquals(660, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.curLexState = 1;
      assertEquals(660, javaCharStream0.getLine());
      assertEquals(660, javaCharStream0.getBeginLine());
      assertEquals(661, javaCharStream0.getEndColumn());
      assertEquals(661, javaCharStream0.getColumn());
      assertEquals(660, javaCharStream0.getBeginColumn());
      assertEquals(660, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 660, column 675.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\'';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")'&IE4rEmti\"](");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3962, 57);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3962, javaCharStream0.getEndLine());
      assertEquals(3962, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(3962, javaCharStream0.getLine());
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(3962, token0.beginLine);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.endColumn);
      assertEquals(3962, token0.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = '6';
      charArray0[2] = 'H';
      charArray0[3] = '6';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = '9';
      charArray0[7] = 'H';
      charArray0[8] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k', '6', 'H', '6', 'x', 'x', '9', 'H', 'Z'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 3962, 0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3962, column 60.  Encountered: \"I\" (73), after : \"\\'&\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), (-4688));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 63, 1583);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals(1, int0);
      
      char char0 = javaCharStream0.ReadByte();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('b', char0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1582, javaCharStream1.getEndColumn());
      assertEquals(1582, javaCharStream1.getBeginColumn());
      assertEquals(63, javaCharStream1.getEndLine());
      assertEquals(63, javaCharStream1.getBeginLine());
      assertEquals(63, javaCharStream1.getLine());
      assertEquals(1582, javaCharStream1.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1582, token1.endColumn);
      assertEquals(63, token1.endLine);
      assertEquals(1582, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(63, token1.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 63, 63);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-4688), javaCharStream0.getEndLine());
      assertEquals((-4688), javaCharStream0.getLine());
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertEquals((-4683), javaCharStream0.getColumn());
      assertEquals((-4688), javaCharStream0.getBeginLine());
      assertEquals((-4683), javaCharStream0.getEndColumn());
      assertEquals("stract", token2.toString());
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals((-4688), token2.endLine);
      assertEquals((-4683), token2.endColumn);
      assertEquals((-4688), token2.beginColumn);
      assertEquals((-4688), token2.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      assertNotNull(pipedOutputStream1);
      assertFalse(pipedOutputStream1.equals((Object)pipedOutputStream0));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertEquals((-4688), javaCharStream0.getEndLine());
      assertEquals((-4688), javaCharStream0.getLine());
      assertEquals((-4688), javaCharStream0.getBeginColumn());
      assertEquals((-4683), javaCharStream0.getColumn());
      assertEquals((-4688), javaCharStream0.getBeginLine());
      assertEquals((-4683), javaCharStream0.getEndColumn());
      assertEquals(1582, javaCharStream1.getEndColumn());
      assertEquals(1582, javaCharStream1.getBeginColumn());
      assertEquals(63, javaCharStream1.getEndLine());
      assertEquals(63, javaCharStream1.getBeginLine());
      assertEquals(63, javaCharStream1.getLine());
      assertEquals(1582, javaCharStream1.getColumn());
      assertEquals("", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1582, token1.endColumn);
      assertEquals(63, token1.endLine);
      assertEquals(1582, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(63, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertEquals((-4688), javaCharStream0.getEndLine());
      assertEquals((-4683), javaCharStream0.getBeginColumn());
      assertEquals((-4688), javaCharStream0.getLine());
      assertEquals((-4683), javaCharStream0.getColumn());
      assertEquals((-4688), javaCharStream0.getBeginLine());
      assertEquals((-4683), javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4683), token3.beginColumn);
      assertEquals((-4683), token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals((-4688), token3.beginLine);
      assertEquals((-4688), token3.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("const");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("case");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2057, (-1901));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1897), javaCharStream0.getEndColumn());
      assertEquals(2057, javaCharStream0.getLine());
      assertEquals((-1897), javaCharStream0.getColumn());
      assertEquals(2057, javaCharStream0.getBeginLine());
      assertEquals((-1901), javaCharStream0.getBeginColumn());
      assertEquals(2057, javaCharStream0.getEndLine());
      assertEquals("const", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-1901), token0.beginColumn);
      assertEquals(22, token0.kind);
      assertEquals(2057, token0.endLine);
      assertEquals((-1897), token0.endColumn);
      assertEquals(2057, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 4);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("K~>[*o");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1, 4);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("K", token0.toString());
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token1.toString());
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(90, token1.kind);
      assertEquals(5, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">", token2.toString());
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token2.kind);
      assertEquals(6, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("[", token3.toString());
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(7, token3.endColumn);
      assertEquals(7, token3.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token4.toString());
      assertNotNull(token4);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token4.beginColumn);
      assertEquals(8, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(103, token4.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9Dq2N");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1583, 9);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'9', 'D'}, charArray0);
      assertEquals(2, int0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('q', char0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1583, column 11.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = ';';
      charArray0[2] = 'p';
      charArray0[3] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', ';', 'p', 'm'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 122, 122);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'*', ';', 'p', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'*', ';', 'p', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'*', ';', 'p', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(103, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertEquals(122, token0.endColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertArrayEquals(new char[] {'*', ';', 'p', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(103, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertEquals(122, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '.';
      charArray0[2] = 'D';
      charArray0[3] = '\'';
      charArray0[4] = '=';
      charArray0[5] = 's';
      charArray0[6] = 'w';
      charArray0[7] = 'a';
      charArray0[8] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '.', 'D', '\'', '=', 's', 'w', 'a', '@'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-544), (-362));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'1', '.', 'D', '\'', '=', 's', 'w', 'a', '@'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'1', '.', 'D', '\'', '=', 's', 'w', 'a', '@'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -544, column -353.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@Y0A?_w_[\"BH>4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 1583);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = new Token();
      assertNull(token0.toString());
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals(5, int0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('_', char0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q\"vZT,[eA9h");
      assertFalse(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(1583, javaCharStream0.getBeginColumn());
      assertEquals(1584, javaCharStream0.getEndColumn());
      assertEquals(1584, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals("w_", token1.toString());
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(31, token1.beginLine);
      assertEquals(1583, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1584, token1.endColumn);
      assertEquals(31, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 0, 32);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(1583, javaCharStream0.getBeginColumn());
      assertEquals(1584, javaCharStream0.getEndColumn());
      assertEquals(1584, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals("[", token2.toString());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(1585, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(1585, javaCharStream0.getColumn());
      assertEquals(1585, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertNotNull(token2);
      assertEquals(1585, token2.endColumn);
      assertEquals(31, token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals(1585, token2.beginColumn);
      assertEquals(31, token2.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      assertNotNull(pipedOutputStream1);
      assertFalse(pipedOutputStream1.equals((Object)pipedOutputStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, 74, (-1), 3786);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager3);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager4);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager2.TokenLexicalActions(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager4);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager3);
      assertEquals("[", token2.toString());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(1585, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(1585, javaCharStream0.getColumn());
      assertEquals(1585, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(1585, token2.endColumn);
      assertEquals(31, token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals(1585, token2.beginColumn);
      assertEquals(31, token2.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager4));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager3));
      
      JavaParserTokenManager javaParserTokenManager5 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager5);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager4));
      
      Token token3 = javaParserTokenManager5.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager5, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager5, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager5, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager5, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager5, javaParserTokenManager4);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals(74, javaCharStream2.getLine());
      assertEquals(74, javaCharStream2.getEndLine());
      assertEquals((-1), javaCharStream2.getColumn());
      assertEquals(74, javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getBeginColumn());
      assertEquals("@", token3.toString());
      assertNotNull(token3);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.beginLine);
      assertEquals(86, token3.kind);
      assertEquals((-1), token3.endColumn);
      assertEquals((-1), token3.beginColumn);
      assertEquals(74, token3.endLine);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager5.equals((Object)javaParserTokenManager4));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      
      Token token4 = javaParserTokenManager4.getNextToken();
      assertNotSame(javaParserTokenManager4, javaParserTokenManager5);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager4, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals("", token4.toString());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(31, javaCharStream1.getColumn());
      assertEquals(31, javaCharStream1.getEndColumn());
      assertEquals(31, javaCharStream1.getBeginColumn());
      assertNotNull(token4);
      assertArrayEquals(new char[] {'@', 'Y', '0', 'A', '?'}, charArray0);
      assertEquals(31, token4.endColumn);
      assertEquals(31, token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.endLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager5));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager4.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("cy");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)84, (byte)84);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals("false", token0.toString());
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.endColumn);
      assertEquals(30, token0.kind);
      assertEquals(84, token0.beginLine);
      assertEquals(84, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[0] = ';';
      charArray0[2] = 'p';
      charArray0[3] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {';', '\u0000', 'p', 'm'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 122, 122);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {';', '\u0000', 'p', 'm'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {';', '\u0000', 'p', 'm'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(";", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {';', '\u0000', 'p', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals(122, token0.beginLine);
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 122, column 123.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("(");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.markSupported();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-2809), 511);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-2809), javaCharStream0.getBeginLine());
      assertEquals(511, javaCharStream0.getBeginColumn());
      assertEquals(511, javaCharStream0.getEndColumn());
      assertEquals((-2809), javaCharStream0.getEndLine());
      assertEquals((-2809), javaCharStream0.getLine());
      assertEquals(511, javaCharStream0.getColumn());
      assertEquals("(", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals(511, token0.beginColumn);
      assertEquals((-2809), token0.endLine);
      assertEquals((-2809), token0.beginLine);
      assertEquals(511, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      StringReader stringReader0 = new StringReader("8^y9-r>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)82, (byte)82);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 82, column 89.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'a';
      charArray0[2] = '=';
      charArray0[3] = '\'';
      charArray0[4] = '=';
      charArray0[5] = 'w';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', 'a', '=', '\'', '=', 'w', '\'', '\''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 38, (-362));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\'', 'a', '=', '\'', '=', 'w', '\'', '\''}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', 'a', '=', '\'', '=', 'w', '\'', '\''}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 38, column -360.  Encountered: \"=\" (61), after : \"\\'a\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '.';
      charArray0[2] = '1';
      charArray0[3] = '\'';
      charArray0[4] = '=';
      charArray0[5] = 's';
      charArray0[6] = 'w';
      charArray0[7] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-544), (-362));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-360), javaCharStream0.getEndColumn());
      assertEquals((-544), javaCharStream0.getEndLine());
      assertEquals((-544), javaCharStream0.getBeginLine());
      assertEquals((-360), javaCharStream0.getColumn());
      assertEquals((-362), javaCharStream0.getBeginColumn());
      assertEquals((-544), javaCharStream0.getLine());
      assertEquals("1.1", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-544), token0.beginLine);
      assertEquals((-544), token0.endLine);
      assertEquals(70, token0.kind);
      assertEquals((-362), token0.beginColumn);
      assertEquals((-360), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '.';
      charArray0[2] = '1';
      charArray0[3] = '\'';
      charArray0[4] = '=';
      charArray0[5] = 's';
      charArray0[6] = 'w';
      charArray0[7] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-567), (-362));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-567), javaCharStream0.getBeginLine());
      assertEquals((-567), javaCharStream0.getLine());
      assertEquals((-360), javaCharStream0.getColumn());
      assertEquals((-360), javaCharStream0.getEndColumn());
      assertEquals((-362), javaCharStream0.getBeginColumn());
      assertEquals((-567), javaCharStream0.getEndLine());
      assertEquals("1.1", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'1', '.', '1', '\'', '=', 's', 'w', 'a', '\u0000'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(70, token0.kind);
      assertEquals((-567), token0.endLine);
      assertEquals((-567), token0.beginLine);
      assertEquals((-362), token0.beginColumn);
      assertEquals((-360), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4688), (-4688));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 68);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char0 = javaCharStream1.ReadByte();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('a', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(68, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(74, javaCharStream1.getEndColumn());
      assertEquals(74, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals("bstract", token0.toString());
      assertNotNull(token0);
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginLine);
      assertEquals(74, token0.endColumn);
      assertEquals(68, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[0] = 'i';
      StringReader stringReader0 = new StringReader(" eQ9I-\"~<");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 10);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(10, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals("eQ9I", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(10, token0.endLine);
      assertEquals(14, token0.endColumn);
      assertEquals(11, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(10, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(10, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(10, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getEndLine());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token1.kind);
      assertEquals(15, token1.endColumn);
      assertEquals(15, token1.beginColumn);
      assertEquals(10, token1.endLine);
      assertEquals(10, token1.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 10, column 19.  Encountered: <EOF> after : \"\\\"~<\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!*J9D+Z)N*Uy<h;F{+f");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-88);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("/", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 18. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!*J9D+Z)N*Uy<h;F{+f");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)1;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-88);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("/", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)41, (byte)10, (byte) (-88), (byte)90, (byte)9, (byte)13}, byteArray0);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u0001\" (1), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0, 20, 20);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.bufpos = javaCharStream0.bufpos;
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-108), 1886);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.jjround = 20;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -108, column 1888.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("lVVK");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[0] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'m', '\u0000', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 122, 2337);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'m', '\u0000', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'m', '\u0000', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2337, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(2337, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(2337, javaCharStream0.getEndColumn());
      assertEquals("m", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'m', '\u0000', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2337, token0.beginColumn);
      assertEquals(2337, token0.endColumn);
      assertEquals(122, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(122, token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(2337, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(2337, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(2337, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'m', '\u0000', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!*J9D+Z)N*Uy<h;F{+f");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)1;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)47, 717);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(717, javaCharStream0.getEndColumn());
      assertEquals(717, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(717, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(89, token0.kind);
      assertEquals(47, token0.beginLine);
      assertEquals(717, token0.beginColumn);
      assertEquals(717, token0.endColumn);
      assertEquals(47, token0.endLine);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(717, javaCharStream0.getEndColumn());
      assertEquals(717, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(717, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("++");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1940, 660);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'K';
      charArray0[2] = '4';
      charArray0[3] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Q', 'K', '4', 'K'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'Q', 'K', '4', 'K'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'Q', 'K', '4', 'K'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'Q', 'K', '4', 'K'}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("QK4K", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'Q', 'K', '4', 'K'}, charArray0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y!~Rz;bjL!%78a");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = 'S';
      charArray0[6] = 'S';
      charArray0[7] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'`', 'S', 'S', 'S', 'S', 'S', 'S', 'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1405), (-1405));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'`', 'S', 'S', 'S', 'S', 'S', 'S', 'S'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'`', 'S', 'S', 'S', 'S', 'S', 'S', 'S'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1405, column -1405.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'D';
      charArray0[5] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'D', 'D', 'A', 'A', 'D', 'A'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'D', 'D', 'A', 'A', 'D', 'A'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'D', 'D', 'A', 'A', 'D', 'A'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("DDAADA", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'D', 'D', 'A', 'A', 'D', 'A'}, charArray0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("case");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3435, 3435);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaCharStream0.ReInit((Reader) stringReader0, 3435, 3435, 3435);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(3435, javaCharStream0.getEndLine());
      assertEquals(3435, javaCharStream0.getLine());
      assertEquals(3435, javaCharStream0.getEndColumn());
      assertEquals(3435, javaCharStream0.getColumn());
      assertEquals(3435, javaCharStream0.getBeginLine());
      assertEquals(3435, javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3435, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(3435, token0.endLine);
      assertEquals(3435, token0.beginColumn);
      assertEquals(3435, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(3435, javaCharStream0.getEndLine());
      assertEquals(3435, javaCharStream0.getLine());
      assertEquals(3436, javaCharStream0.getBeginColumn());
      assertEquals(3449, javaCharStream0.getColumn());
      assertEquals(3435, javaCharStream0.getBeginLine());
      assertEquals(3449, javaCharStream0.getEndColumn());
      assertEquals("STRING_LITERAL", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals(3436, token1.beginColumn);
      assertEquals(3435, token1.beginLine);
      assertEquals(3449, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(3435, token1.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L{/mtQqW");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("<%-x ya7RQTR4:KK1");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 4, 617);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getBeginColumn());
      assertEquals(617, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(617, javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(617, token0.beginColumn);
      assertEquals(617, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(617, javaCharStream0.getBeginColumn());
      assertEquals(617, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(617, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(618, javaCharStream0.getBeginColumn());
      assertEquals(618, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(618, javaCharStream0.getColumn());
      assertEquals("%", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(4, token1.beginLine);
      assertEquals(4, token1.endLine);
      assertEquals(618, token1.endColumn);
      assertEquals(108, token1.kind);
      assertEquals(618, token1.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'v';
      charArray0[2] = 'g';
      charArray0[3] = '(';
      charArray0[4] = '{';
      charArray0[5] = '\\';
      charArray0[6] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', 'v', 'g', '(', '{', '\\', '9'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'a', 'v', 'g', '(', '{', '\\', '9'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'a', 'v', 'g', '(', '{', '\\', '9'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("avg", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'a', 'v', 'g', '(', '{', '\\', '9'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[7] = '^';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '^', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '^', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      StringReader stringReader0 = new StringReader("phZv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("phZv", token0.toString());
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lVVK");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("lVVK");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'p', 'L'}, charArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'p'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'p', 'L'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'p', 'L'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("pL", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'p', 'L'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-554));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -554. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 'a';
      charArray0[4] = '\'';
      charArray0[5] = '=';
      charArray0[6] = '\'';
      charArray0[7] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', '\'', '\'', 'a', '\'', '=', '\'', 'a'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2502), 2213);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'=', '\'', '\'', 'a', '\'', '=', '\'', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 96, 2213);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'=', '\'', '\'', 'a', '\'', '=', '\'', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'=', '\'', '\'', 'a', '\'', '=', '\'', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(96, javaCharStream1.getBeginColumn());
      assertEquals(96, javaCharStream1.getEndColumn());
      assertEquals(96, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'=', '\'', '\'', 'a', '\'', '=', '\'', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(87, token0.kind);
      assertEquals(96, token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertEquals(96, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(96, javaCharStream1.getBeginColumn());
      assertEquals(96, javaCharStream1.getEndColumn());
      assertEquals(96, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals("=", token1.toString());
      assertNotNull(token1);
      assertArrayEquals(new char[] {'=', '\'', '\'', 'a', '\'', '=', '\'', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1), token1.beginLine);
      assertEquals(96, token1.endColumn);
      assertEquals(96, token1.beginColumn);
      assertEquals(87, token1.kind);
      assertEquals((-1), token1.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nb.j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)84, 1759);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = '4';
      charArray0[4] = 'q';
      charArray0[5] = '7';
      charArray0[1] = 'e';
      charArray0[7] = '2';
      charArray0[8] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', 'e', 'G', '4', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)84, 629);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'4', 'e', 'G', '4', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'4', 'e', 'G', '4', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(84, javaCharStream1.getEndLine());
      assertEquals(84, javaCharStream1.getLine());
      assertEquals(634, javaCharStream1.getEndColumn());
      assertEquals(84, javaCharStream1.getBeginLine());
      assertEquals(634, javaCharStream1.getColumn());
      assertEquals(629, javaCharStream1.getBeginColumn());
      assertEquals("4eG4q7", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'4', 'e', 'G', '4', 'q', '7', '\u0000', '2', 'a'}, charArray0);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.endLine);
      assertEquals(634, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(629, token0.beginColumn);
      assertEquals(84, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column 635.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!*J9D+Z)N*Uy<h;F{+f");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)1;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)47, 717);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(717, javaCharStream0.getBeginColumn());
      assertEquals(717, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(717, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token0.beginLine);
      assertEquals(717, token0.endColumn);
      assertEquals(717, token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals(47, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(718, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(718, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(718, javaCharStream0.getBeginColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(47, token1.endLine);
      assertEquals(718, token1.beginColumn);
      assertEquals(47, token1.beginLine);
      assertEquals(718, token1.endColumn);
      assertEquals(103, token1.kind);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(721, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(721, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(719, javaCharStream0.getBeginColumn());
      assertEquals("J9D", token2.toString());
      assertNotNull(token2);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, token2.endLine);
      assertEquals(47, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(721, token2.endColumn);
      assertEquals(719, token2.beginColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(722, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(722, javaCharStream0.getColumn());
      assertEquals(722, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals("+", token3.toString());
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(47, token3.beginLine);
      assertEquals(722, token3.endColumn);
      assertEquals(47, token3.endLine);
      assertEquals(722, token3.beginColumn);
      assertEquals(101, token3.kind);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = 'D';
      charArray0[2] = '.';
      charArray0[3] = '1';
      charArray0[4] = 'D';
      charArray0[5] = '1';
      charArray0[6] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', 'D', '.', '1', 'D', '1', '1'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '.';
      charArray1[1] = 'w';
      charArray1[2] = 'D';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'.', 'w', 'D'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'1', 'D', '.', '1', 'D', '1', '1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'1', 'D', '.', '1', 'D', '1', '1'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'w';
      charArray0[2] = '6';
      charArray0[3] = '7';
      charArray0[4] = 'w';
      charArray0[5] = 'F';
      charArray0[6] = 'u';
      charArray0[7] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', 'w', '6', '7', 'w', 'F', 'u', 'a'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 629, 1888);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'a', 'w', '6', '7', 'w', 'F', 'u', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'a', 'w', '6', '7', 'w', 'F', 'u', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(629, javaCharStream0.getLine());
      assertEquals(629, javaCharStream0.getEndLine());
      assertEquals(1895, javaCharStream0.getColumn());
      assertEquals(1888, javaCharStream0.getBeginColumn());
      assertEquals(629, javaCharStream0.getBeginLine());
      assertEquals(1895, javaCharStream0.getEndColumn());
      assertEquals("aw67wFua", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'a', 'w', '6', '7', 'w', 'F', 'u', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1888, token0.beginColumn);
      assertEquals(1895, token0.endColumn);
      assertEquals(629, token0.endLine);
      assertEquals(629, token0.beginLine);
      assertEquals(74, token0.kind);
      
      Token token1 = new Token();
      assertNull(token1.toString());
      assertNotNull(token1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(629, javaCharStream0.getLine());
      assertEquals(629, javaCharStream0.getEndLine());
      assertEquals(1895, javaCharStream0.getColumn());
      assertEquals(629, javaCharStream0.getBeginLine());
      assertEquals(1895, javaCharStream0.getEndColumn());
      assertEquals(1895, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertArrayEquals(new char[] {'a', 'w', '6', '7', 'w', 'F', 'u', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(629, token2.beginLine);
      assertEquals(1895, token2.beginColumn);
      assertEquals(1895, token2.endColumn);
      assertEquals(629, token2.endLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(629, javaCharStream0.getLine());
      assertEquals(629, javaCharStream0.getEndLine());
      assertEquals(1895, javaCharStream0.getColumn());
      assertEquals(629, javaCharStream0.getBeginLine());
      assertEquals(1895, javaCharStream0.getEndColumn());
      assertEquals(1895, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'a', 'w', '6', '7', 'w', 'F', 'u', 'a'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(629, token2.beginLine);
      assertEquals(1895, token2.beginColumn);
      assertEquals(1895, token2.endColumn);
      assertEquals(629, token2.endLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }
}
