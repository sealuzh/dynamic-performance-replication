/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:47:50 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Excecutable;
import org.javathena.core.data.Socket_data;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      login0.getAuth_max();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      Login.display_title();
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      System.setCurrentTimeMillis(4336L);
      Login.showTab(byteArray0);
      Login.display_title();
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("----End of login-server (normal end with closing of all files).");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
      
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login0.do_final();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "conf/subnet_athena.conf");
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      int[] intArray0 = new int[6];
      intArray0[0] = 2000000;
      intArray0[1] = 10;
      intArray0[2] = 2000000;
      intArray0[3] = 0;
      intArray0[4] = 2000000;
      intArray0[5] = 50;
      login0.setServer_fd(intArray0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      PrintWriter printWriter0 = Login.loginLogOut;
      login0.setOut((PrintWriter) null);
      login0.getAuth_num();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-344));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-344
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      Login.mmo_auth_syncXML();
      login0.check_auth_sync();
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      ConfigurationManagement.lesslessAuth_before_save_file();
      login0.getLog_fp();
      int[] intArray0 = login0.getServer_fd();
      assertEquals(0, login0.getAuth_max());
      assertNotNull(intArray0);
      
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
      
      int int1 = Login.mmo_auth_initTXT();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login.getDbManagemtType();
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      Login.mmo_auth_syncTXT();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 100000000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:100000000
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Socket_data socket_data0 = new Socket_data((Socket) null);
      socket_data0.getFunc_send();
      socket_data0.getFunc_send();
      socket_data0.setFunc_console((Excecutable) null);
      Login.getPASSWORDENC();
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login.login_log("9");
      Login.getDbManagemtType();
      Random.setNextRandom(1646);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      login0.getServer_fd();
      byte[] byteArray0 = new byte[1];
      MySQLConfig.setLogin_server_id("G$");
      byteArray0[0] = (byte)100;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      login0.check_ip(inetAddress0);
      login0.yesNoOnOffToBoolean("ON");
      Random.setNextRandom((-3419));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        login0.parse_admin(2084, socket_data0, login0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.txt");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      login0.check_auth_sync();
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("PORT.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login.display_title();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X{#90!t(%i=$HhrlFX");
      mockPrintWriter0.append((CharSequence) "X{#90!t(%i=$HhrlFX");
      Login login0 = new Login();
      login0.setOut(mockPrintWriter0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.check_ipmask((-40366234), "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login.display_title();
      // Undeclared exception!
      try { 
        Login.mmo_auth_syncXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      Login.display_title();
      int int0 = Calendar.MAY;
      Login login0 = new Login();
      login0.setAuth_max((-169));
      assertEquals((-169), login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      Login.mmo_auth_syncXML();
      MockSocket mockSocket0 = new MockSocket();
      Object object0 = new Object();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      login0.parse_console("cstm");
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      linkedHashSet0.add(mockHijrahDate0);
      linkedHashSet0.add(mockHijrahDate0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.containsAll(linkedHashSet0);
      Login.getPASSWORDENC();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.getByName("IhYt)x#M!Z<");
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket(inetAddress1, 50, inetAddress0, (-68309877));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-68309877
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login.display_title();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IF)r5I+DMa,");
      byteArray0[0] = (byte)25;
      byteArray0[2] = (byte)102;
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)102}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("V!}T(^b>", 12345);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eN;Hc}PXl3Y<tUW");
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Login login0 = new Login();
      Login.logUnknownPackets((Socket_data) null);
      Login.getPASSWORDENC();
      Random.setNextRandom((-1994838328));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      login0.check_auth_sync();
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      login0.yesNoOnOffToBoolean("OFF");
      Login.mmo_auth_initTXT();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.setAccountIdCount((-666));
      login0.do_initXML();
      Object object0 = new Object();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = object2;
      objectArray1[1] = object2;
      Object object3 = new Object();
      objectArray1[2] = object3;
      Object object4 = new Object();
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      objectArray1[6] = object2;
      objectArray1[7] = (Object) linkedList0;
      objectArray1[8] = (Object) login0;
      linkedList0.toArray(objectArray1);
      login0.parse_console("alive");
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      Login.getPASSWORDENC();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login.getPASSWORDENC();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.of(2264, 2, 2);
      Predicate.isEqual((Object) thaiBuddhistDate0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Object object0 = new Object();
      MockMinguoDate.now();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedHashSet0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      Locale.getISOCountries();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Login login0 = new Login();
      login0.yesNoOnOffToBoolean("NO");
      // Undeclared exception!
      try { 
        Login.login_log("F1![LO^!$jd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      Login.setPASSWORDENC(31028);
      login0.getOut();
      assertEquals(31028, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login.mmo_auth_initXML();
      FromClient fromClient0 = new FromClient();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Login.getMd5Data(socket_data0);
      MockFile mockFile0 = new MockFile("conf/subnet_athena.conf", "conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      Login login1 = new Login();
      login1.check_auth_sync();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      linkedList0.containsAll(linkedHashSet0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "conf/subnet_athena.conf");
      Predicate.isEqual((Object) login1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.getISOLanguages();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        login1.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N;");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N;");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fileSystemHandling0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      predicate4.and(predicate0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add((Locale.LanguageRange) null);
      TimeZone.getAvailableIDs(10);
      login0.do_initXML();
      Login.mmo_auth_initXML();
      Login.mmo_auth_initTXT();
      login0.yesNoOnOffToBoolean("YES");
      Login login1 = new Login();
      // Undeclared exception!
      login1.do_init();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      Login.mmo_auth_syncXML();
      Login login1 = new Login();
      MockSocket mockSocket0 = new MockSocket();
      Object object0 = new Object();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockSocket0;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      linkedHashSet0.add(mockHijrahDate0);
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Login login2 = new Login();
      login2.parse_console("BXn4WayBjC{8C'+");
      Object object2 = new Object();
      Object object3 = new Object();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Object object4 = new Object();
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        login1.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_denynum((-932));
      String string0 = "unknown";
      login0.do_initTXT();
      MySQLConfig.setLogin_server_id("unknown");
      login0.do_initXML();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("conf/subnet_athena.conf", 2738.995821339125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=2738.995821339125
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_denynum(2578);
      login0.do_initTXT();
      MySQLConfig.setLogin_server_id("unknown");
      login0.do_initXML();
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[1];
      intArray0[0] = 2000000;
      ConfigurationManagement.setSubnetmaski(intArray0);
      UserManagement.addAccountIdCount();
      UserManagement.addAccountIdCount((int) (byte) (-35));
      byteArray0[0] = (byte) (-35);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("unknown", 30, inetAddress0, 100000000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:100000000
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_denynum((-932));
      login0.do_initTXT();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedList0.poll();
      login0.do_initTXT();
      UserManagement.addUserTXT("unknown", "unknown", "  /_____/  /__//_//_/     /_//_//__/ /_//_//____//_//_//__//_/  ", 'F');
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer0 = new Integer(50);
      Integer integer1 = new Integer(100000000);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.negate();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.getISOCountries();
      login0.parse_console("  /_____/  /__//_//_/     /_//_//__/ /_//_//____//_//_//__//_/  ");
      Login.login_log((String) null);
      Login login1 = new Login();
      login0.save_config_in_log();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login1.new Timer_interval_check_auth_sync();
      login_ConnectionListener0.close();
      login_Timer_interval_check_auth_sync0.run();
      login_ConnectionListener0.close();
      login_Timer_interval_check_auth_sync0.run();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
