/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:15:48 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 558.2332381896775;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.setError(0, 1000.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 558.2332381896775, mnStrategy0, 558.2332381896775);
      int[] intArray0 = new int[14];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1000.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(446.17194, 446.17194, 1000.0, 1000.0, 446.17194).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 558.2332381896775;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 558.2332381896775, mnStrategy0, 0.0);
      mnStrategy0.setHessianGradientNCycles((-1473));
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 10.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(446.17194, 446.17194, 1000.0, 1000.0, 446.17194).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.setError(0, 2141.53233528);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 558.2332381896775, mnStrategy0, 558.2332381896775);
      int[] intArray0 = new int[0];
      mnStrategy0.setLowStrategy();
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 725);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1466.0, 725);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 6.069088409829668, (-1699.24045), (-43.0417315588178)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[17];
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = (-2485.086756517);
      doubleArray1[2] = 6.069088409829668;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.setUpperLimit(0, 0.0);
      mnUserParameterState0.setPrecision(0);
      mnUserParameterState0.setLimits(0, (-379.1365), 6.069088409829668);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2485.086756517), mnStrategy0, 0.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-2485.086756517);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 6.069088409829668;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-379.1365);
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, 4.0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-826.5628737), (-337.029782276), (-2485.086756517), (-2024.7315233721047), (-990.131731393526)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0E-6;
      doubleArray1[1] = 1.0E-6;
      doubleArray1[2] = 1.0E-6;
      doubleArray1[3] = 1.0E-6;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1.0E-6, 6);
      mnUserParameterState0.add("tYsS", 1.0E-6, 1.0E-6);
      double[] doubleArray2 = mnUserParameterState0.params();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, (-1.263819510775808E16), 6);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, (-2024.7315233721047), (-3320));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.6479789505725), 4.0, 10.954407992522562, 4.0, (-1699.6479789505725)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[32];
      doubleArray0[0] = (-1699.6479789505725);
      doubleArray1[2] = (-1699.6479789505725);
      doubleArray1[5] = 10.954407992522562;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setUpperLimit(0, 0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2485.086756517), mnStrategy0, 10.954407992522562);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      mnUserParameterState0.setValue(0, (double) 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2485.086756517), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(446.17194, 446.17194, 1000.0, 1000.0, 446.17194).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 558.2332381896775;
      doubleArray0[1] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientNCycles(14);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 558.2332381896775);
      mnStrategy0.setGradientStepTolerance(0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 558.2332381896775, 3);
      mnStrategy0.setMediumStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.05, 3704);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2047.3095156437444, 1.0E-35, 2047.3095156437444, 1.0E-35, 2047.3095156437444).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0E-6;
      mnUserCovariance0.clone();
      doubleArray1[1] = 13.0;
      doubleArray1[2] = 1.0E-6;
      doubleArray1[3] = 1.0E-6;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-6, 5);
      MnStrategy mnStrategy1 = new MnStrategy(5);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLowerLimit("Minuit does not accept user specified gradient. To force acceptance, override 'virtual bool checkGradient() const' of FCNGradientBase.h in the derived class.", 1533.7887252227422);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 558.2332381896775;
      double[] doubleArray1 = new double[17];
      doubleArray0[0] = 558.2332381896775;
      doubleArray0[1] = 4.0;
      doubleArray1[5] = 4.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 558.2332381896775, mnStrategy0, 0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      mnStrategy0.setHessianNCycles(0);
      intArray0[1] = 0;
      doubleArray1[4] = (double) 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(558.2332381896775, 558.2332381896775, (double)0, 4.0, 2163.3825373256727).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 1461.9186045716826, mnStrategy0, 4.0);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      mnFunctionCross1.cross(intArray1, doubleArray1, doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.0, (-1724.1939058), 8.999999999999999E-7, 3.0, (-1724.1939058)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-6, (-812));
      // Undeclared exception!
      try { 
        mnUserParameterState0.intOfExt((-812));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-812
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 6.069088409829668, (-1699.24045), (-1108.466041)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[25];
      doubleArray0[3] = 6.069088409829668;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHighStrategy();
      int[] intArray0 = new int[7];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-654.7264713091603), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 557.3563823333425;
      double[] doubleArray1 = new double[20];
      doubleArray0[1] = (-13.0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianStepTolerance((-4785.595879062176));
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      mnStrategy0.setHessianNCycles(0);
      doubleArray1[12] = (double) 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(557.3563823333425, 0.0, (double)0, 4.0, (-13.0)).when(fCNBase0).valueOf(any(double[].class));
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-13.0), mnStrategy0, (-13.0));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray1, (-316.519), 2146999125);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(446.17194, 446.17194, 1000.0, 1000.0, 446.17194).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.setError(0, 2141.53233528);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 558.2332381896775, mnStrategy0, 558.2332381896775);
      int[] intArray0 = new int[0];
      int int1 = 0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2025.4), 14);
      // Undeclared exception!
      try { 
        mnUserParameterState0.release("U{fJs|y(|}&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, 0.5, 0.05, 0.05, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2485.086756517);
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = (-2485.086756517);
      doubleArray1[2] = 41.10834027172669;
      doubleArray1[5] = 0.5;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.setPrecision(7.375469768301578);
      mnUserParameterState0.setUpperLimit(0, (-2485.086756517));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2485.086756517), mnStrategy0, 0.5);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      mnUserParameterState0.intOfExt(0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 2353.4, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 558.2332381896775;
      doubleArray0[1] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianGradientNCycles(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 558.2332381896775);
      MnStrategy mnStrategy1 = new MnStrategy(0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy2 = new MnStrategy();
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1488.94939), mnStrategy2, (-2942.22));
      mnStrategy2.setMediumStrategy();
      int[] intArray0 = new int[2];
      mnStrategy0.setHessianG2Tolerance(0);
      intArray0[0] = 0;
      intArray0[1] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1037.2686152681), 54574);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 6.069088409829668, (-1699.24045), (-1107.8602254439909)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = (-654.7264713091603);
      doubleArray1[3] = 6.069088409829668;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.params();
      mnUserParameterState0.setUpperLimit(0, 0.0);
      mnUserParameterState0.setPrecision(0);
      mnStrategy0.setHighStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-654.7264713091603), mnStrategy0, 0.0);
      int[] intArray0 = new int[7];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 20.763430999330804, (-1699.24045), (-1107.8602254439909)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = (-654.7264713091603);
      doubleArray1[3] = (-654.7264713091603);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.params();
      mnUserParameterState0.setUpperLimit(0, 0.0);
      mnUserParameterState0.setPrecision(0);
      mnStrategy0.setHighStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-654.7264713091603), mnStrategy0, 0.0);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 6.069088409829668, (-1699.24045), (-43.0417315588178)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = 16.6;
      doubleArray1[2] = 6.069088409829668;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setPrecision(0);
      mnUserParameterState0.setLimits(0, (-379.1365), 6.069088409829668);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 16.6, mnStrategy0, 6.069088409829668);
      int[] intArray0 = new int[7];
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 6.069088409829668, 0);
      mnUserParameterState0.setUpperLimit(0, 16.6);
      intArray0[0] = 0;
      mnStrategy0.setHighStrategy();
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 0);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit(915, (double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 915, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = (-1698.1535698870466);
      double double1 = 6.069088409829668;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1698.1535698870466), (-1698.1535698870466), 6.069088409829668, (-1698.1535698870466), (-43.042)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = (-2441.592645079687);
      doubleArray1[2] = 6.069088409829668;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setUpperLimit(0, 0.0);
      mnUserParameterState0.setPrecision(0);
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setLimits(0, (-2441.592645079687), 6.069088409829668);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2441.592645079687), mnStrategy0, 6.069088409829668);
      int[] intArray0 = new int[7];
      mnStrategy0.setHessianG2Tolerance(0);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 6.069088409829668, 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 6.069088409829668, (-1699.24045), (-1108.466041)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = (-654.7264713091603);
      doubleArray1[3] = 6.069088409829668;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.params();
      mnUserParameterState0.setUpperLimit(0, 0.0);
      mnUserParameterState0.setPrecision(0);
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setLimits(0, (-379.1365), 6.069088409829668);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-654.7264713091603), mnStrategy0, 6.069088409829668);
      int[] intArray0 = new int[7];
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.0, 0);
      double double0 = 12.000000000000002;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1699.24045), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 10000.0, (-1699.24045), (-1107.8602254439909)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[20];
      double[] doubleArray1 = new double[25];
      doubleArray0[0] = (-1107.8602254439909);
      doubleArray1[3] = (-654.7264713091603);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      double[] doubleArray2 = mnUserParameterState0.params();
      mnUserParameterState0.setUpperLimit(0, 0.0);
      mnUserParameterState0.setPrecision(0);
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setLowerLimit(0, 0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-654.7264713091603), mnStrategy0, 0.0);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, (-654.7264713091603), 0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.0, (-1724.1939058), 8.999999999999999E-7).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 8.999999999999999E-7, mnStrategy0, 8.999999999999999E-7);
      int[] intArray0 = new int[0];
      mnStrategy0.setMediumStrategy();
      double[] doubleArray0 = new double[7];
      mnStrategy0.setHessianNCycles((-2462));
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 3.0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, (-2462));
      MnStrategy mnStrategy1 = new MnStrategy(2);
      // Undeclared exception!
      try { 
        mnUserParameterState0.fix((-1785));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-1785
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.0, 3.0, (-0.30655808973432946), 3.0, 3.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-6, 1171354691);
      // Undeclared exception!
      try { 
        mnUserParameterState0.name(1171354691);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1171354691, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2047.3095156437444, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0E-6;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 703.28148698, 0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross((int[]) null, doubleArray1, doubleArray1, 1.0E-35, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = (-1699.6479789505725);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.6479789505725), 4.0, 10.954407992522562, 4.0, (-1699.6479789505725)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      double double1 = 1.0E-6;
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.954407992522562, mnStrategy0, 0.10000000000000003);
      double double2 = 13.0;
      int int0 = 1171354717;
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 10.954407992522562;
      doubleArray1[1] = (-1699.6479789505725);
      doubleArray1[2] = 13.0;
      doubleArray1[3] = 13.0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1.0E-6, 1171354717);
      mnUserCovariance0.toString();
      double double3 = (-2.0);
      int int1 = 2142258197;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.0), 2142258197);
      // Undeclared exception!
      try { 
        mnUserParameterState0.intOfExt(2142258197);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=2142258197
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.6968582027026535, 1000.0, (-0.30655808973432946), 1.6968582027026535, 1000.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-6, mnStrategy0, 1.0E-6);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = 1.0E-6;
      mnUserParameterState0.setPrecision(1.0E-6);
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      int int0 = 1171354717;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0E-6, 1171354717);
      double double0 = 2.0;
      int[] intArray1 = new int[9];
      intArray1[0] = 1171354717;
      intArray1[1] = 1171354717;
      intArray1[2] = 1171354717;
      intArray1[3] = 1171354717;
      intArray1[4] = 1171354717;
      intArray1[5] = 1171354717;
      intArray1[6] = 1171354717;
      intArray1[7] = 1171354717;
      intArray1[8] = 1171354717;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 1000.0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1171354717, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1699.24045), (-1699.24045), 6.069088409829668, (-1699.24045), (-58.6103664148382)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[15];
      doubleArray0[0] = (-58.6103664148382);
      doubleArray1[3] = 6.069088409829668;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int int0 = 0;
      mnUserParameterState0.params();
      mnStrategy0.setGradientStepTolerance(6.069088409829668);
      mnUserParameterState0.setUpperLimit(0, 0.0);
      mnUserParameterState0.errors();
      mnUserParameterState0.setPrecision(0);
      mnStrategy0.setHessianNCycles(0);
      mnStrategy0.setHighStrategy();
      mnUserParameterState0.setLimits(0, (-379.1365), 6.069088409829668);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-459.15475191782), mnStrategy0, 0.0);
      int[] intArray0 = new int[7];
      mnStrategy0.setHessianG2Tolerance(0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.0, 0);
      mnStrategy0.setHessianNCycles((-2124734880));
      mnUserParameterState0.setUpperLimit(0, (-459.15475191782));
      mnUserParameterState0.add("T", 0.0);
      mnUserParameterState0.setLowerLimit(0, 100.0);
      mnUserParameterState0.params();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0, 0);
  }
}
