/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:51:28 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1708), (-1708));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1708 byteCount=-1708
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.lastIndexOf(byteString0);
      byteString1.toAsciiUppercase();
      ByteString byteString2 = ByteString.of(byteArray0);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      Object object0 = new Object();
      byte[] byteArray0 = byteString0.internalArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64();
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.toAsciiUppercase();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      int int0 = byteString0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.indexOf(byteString1, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      int int1 = byteString1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      Object object0 = new Object();
      byteString0.EMPTY.equals(object0);
      ByteString byteString1 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      byte[] byteArray1 = byteString0.toByteArray();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("q,.#ia:$y5*:x\"&!icm", charset0);
      ByteString byteString1 = byteString0.substring(1);
      assertEquals(18, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("SHA-512", charset0);
      byteString0.sha512();
      String string0 = byteString0.toString();
      assertEquals("[text=SHA-512]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("f");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.hex();
      byteString0.startsWith(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64();
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.toAsciiUppercase();
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      byteString0.write(buffer0);
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      boolean boolean0 = byteString2.startsWith(byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(102, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("Unexpected hex string: ", 13);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      int int0 = byteString0.lastIndexOf(byteString1, (-780));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0c0000]", string0);
      
      byteString0.asByteBuffer();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("`6}aqg.o+A,+V\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      boolean boolean0 = byteString0.rangeEquals(57, byteArray0, 57, 57);
      assertFalse(boolean0);
      assertEquals(15, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString.decodeBase64("");
      int int0 = ByteString.codePointIndexToCharIndex("", 87);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString1.sha1();
      assertNotSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byte[] byteArray0 = new byte[1];
      HashingSink.sha512(pipe_PipeSink0);
      byteArray0[0] = (byte)0;
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString1.write(buffer0);
      byteString0.write(buffer0);
      pipe0.sinkClosed = false;
      byteString0.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=80888c8e88008000ee800ee8ec88008e]", string0);
      
      pipe_PipeSink0.flush();
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      ByteString byteString2 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertTrue(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha256();
      // Undeclared exception!
      try { 
        byteString0.substring((-874));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("E;H}bY^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: E;H}bY^
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.hashCode();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=c883e8388ee8888888800880866880088600e0080888888c8380ae08836ceece0880883c8888808088838880888eec08638e388808088a88a838308a8e088a3e]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("+(}zQf7c3`");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      assertEquals(10, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha256();
      int int0 = byteString0.indexOf(byteArray0, (-639));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.hmacSha1(buffer0, byteString0);
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("KM}5>wOPc^,T*W-W(z", charset0);
      byteString0.toString();
      byteString1.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals((-1), int0);
      assertSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2o%&8Ib=");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-320), (-320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("q,.#ia:$y5*:x\"&!icm", charset0);
      String string0 = byteString0.utf8();
      byteString0.toString();
      ByteString byteString1 = byteString0.sha256();
      String string1 = byteString1.string(charset0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString byteString1 = ByteString.read(byteArrayInputStream0, (byte)0);
      String string0 = byteString1.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-3898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3898
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      Object object0 = new Object();
      byteString0.EMPTY.equals(object0);
      // Undeclared exception!
      try { 
        byteString0.indexOf(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("%H^)35t:PhH", charset0);
      byteString0.EMPTY.md5();
      byteString0.toString();
      String string0 = byteString0.toString();
      assertEquals("[text=%H^)35t:PhH]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink1.hash();
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=c883e8388ee8888888800880866880088600e0080888888c8380ae08836ceece0880883c8888808088838880888eec08638e388808088a88a838308a8e088a3e]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.base64Url();
      assertEquals("AA==", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("E;H}bY^y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ;
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("beginIndex < 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString byteString1 = ByteString.read(byteArrayInputStream0, (byte)0);
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertFalse(boolean0);
      
      byteString1.toAsciiUppercase();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.equals(byteString0);
      byteString1.toString();
      byteString1.endsWith(byteString0);
      ByteString byteString2 = byteString0.md5();
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 825);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      byteString0.lastIndexOf(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "%s: actual 0x%08x != expected 0x%08x";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("%s: actual 0x%08x != expected 0x%08x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: %
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(5);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.sha256();
      byteString0.EMPTY.hashCode();
      String string0 = byteString0.toString();
      assertEquals("[hex=8883e8388ee8888888888888888888888888e8888888888883888e888388ee8e888888388888888888838888888ee888838e388888888888883838888e88883e]", string0);
      
      String string1 = byteString1.toString();
      assertEquals("[hex=888888888888e8888e8e88888e8e88888888388e888888888888888888888888]", string1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      int int0 = byteString1.lastIndexOf(byteString0);
      ByteString byteString2 = ByteString.of(byteArray0);
      int int1 = byteString2.compareTo(byteString1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size < 8: ");
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      int int0 = byteString1.compareTo(byteString2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte) (-31);
      byteArray1[5] = (byte)102;
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=38883888e888]", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.rangeEquals(101, byteArray0, (-1607), (-1607));
      byteString0.toString();
      byteString0.hashCode = (-1607);
      byteString0.hashCode();
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.hmacSha1(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.compareTo(byteString0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring((-28), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("0SN2(y,g#!|NgfJm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: S
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=8883e8388ee8888888888888888888888888e8888888888883888e888388ee8e888888388888888888838888888ee888838e388888888888883838888e88883e]", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteString2.equals(hashingSink1);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteString3.equals(byteString2);
      assertTrue(byteString2.equals((Object)byteString1));
      
      ByteString byteString4 = byteString3.toAsciiUppercase();
      assertFalse(byteString4.equals((Object)byteString0));
  }
}
