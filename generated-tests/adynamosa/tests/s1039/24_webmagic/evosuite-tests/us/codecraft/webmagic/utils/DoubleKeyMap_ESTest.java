/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 16:20:41 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, Object>, Map<Object, Object>>();
      DoubleKeyMap<Map<Integer, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Object, Object>(hashMap0);
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(map0, hashMap1);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      Map<Object, Object> map1 = doubleKeyMap0.remove((Map<Integer, Object>) hashMap2);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<HashMap<Object, Object>, HashMap<Integer, Object>>> hashMap0 = new HashMap<HashMap<String, Object>, Map<HashMap<Object, Object>, HashMap<Integer, Object>>>();
      DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, HashMap<Integer, Object>>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      doubleKeyMap0.put(hashMap1, hashMap2, hashMap3);
      HashMap<Integer, Object> hashMap4 = doubleKeyMap0.get(hashMap1, hashMap2);
      assertSame(hashMap4, hashMap3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Object>();
      Map<Integer, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      hashMap0.put("dH<|l,m_", map0);
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Integer>(hashMap0);
      Map<Integer, Integer> map1 = doubleKeyMap1.get("dH<|l,m_");
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<Object, String>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Integer>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Integer integer0 = new Integer((-2017));
      doubleKeyMap0.put(hashMap1, integer0, integer0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get(hashMap1);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, Object>, Map<Object, Object>>();
      DoubleKeyMap<Map<Integer, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, Object, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap1.remove((Map<Integer, Object>) hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, Object>();
      Object object0 = doubleKeyMap0.remove((HashMap<Object, Object>) null, (HashMap<Object, Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Map<String, Map<Integer, Object>>> hashMap0 = new HashMap<Object, Map<String, Map<Integer, Object>>>();
      DoubleKeyMap<Object, String, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Integer, Object>>(hashMap0);
      Object object0 = new Object();
      Map<Integer, Object> map0 = doubleKeyMap0.remove(object0, "&P8");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, Map<Integer, Object>>();
      Map<Integer, Map<Integer, Object>> map0 = doubleKeyMap0.remove((HashMap<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Object object0 = new Object();
      Map<String, String> map1 = doubleKeyMap1.remove(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Map<Integer, Map<Integer, Map<Integer, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Map<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Map<Integer, Object>>(map0, class0);
      DoubleKeyMap<String, Object, Map<HashMap<Map<Integer, Object>, Integer>, Map<String, HashMap<Object, Integer>>>> doubleKeyMap2 = new DoubleKeyMap<String, Object, Map<HashMap<Map<Integer, Object>, Integer>, Map<String, HashMap<Object, Integer>>>>();
      Map<HashMap<Map<Integer, Object>, Integer>, Map<String, HashMap<Object, Integer>>> map1 = doubleKeyMap2.newMap();
      Map<HashMap<Map<Integer, Object>, Integer>, Map<String, HashMap<Object, Integer>>> map2 = doubleKeyMap2.put("YE6_pBnJ", (Object) doubleKeyMap1, map1);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, String>, Object>();
      Object object0 = doubleKeyMap0.put((Object) null, (Map<Integer, String>) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Map<Integer, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, String, String>();
      Map<Object, Map<HashMap<Object, Map<Integer, Object>>, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Object, Map<Integer, Object>>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Map<Integer, Object>>, Integer>(map0);
      Object object0 = new Object();
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Integer integer1 = doubleKeyMap1.put(object0, hashMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Integer, Object>>();
      Map<Map<Integer, Object>, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Object>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, Integer, Object>(map0, class0);
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap1.get((Map<Integer, Object>) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Integer, Object>>();
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      Map<Integer, Object> map0 = doubleKeyMap0.get(object0, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<Object, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<HashMap<Object, String>, Map<Object, String>> hashMap1 = new HashMap<HashMap<Object, String>, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, String>(hashMap1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(hashMap0, (Object) null, "?kdeJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Map<String, Map<HashMap<Integer, Object>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, HashMap<Integer, Object>, String> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Integer, Object>, String>(map0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap1.put(integer0, map0);
      doubleKeyMap1.put("7*", hashMap1, "7*");
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap2 = new DoubleKeyMap<Object, HashMap<Object, String>, String>(class0);
      // Undeclared exception!
      try { 
        doubleKeyMap2.get((Object) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, String>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, Object>((Map<HashMap<Integer, String>, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<String, String> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put("", (Object) "", "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.remove("", (Object) map0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      DoubleKeyMap<Map<Integer, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, String, Object>();
      Object object0 = doubleKeyMap0.get((Map<Integer, Object>) hashMap0, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Object>, HashMap<String, String>, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, HashMap<String, String>, HashMap<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, Map<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<String, String>, Integer>();
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, Object>, Map<Object, Object>>();
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap1 = new HashMap<Map<Integer, Object>, Map<Object, Object>>();
      DoubleKeyMap<Map<Integer, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, Object, Object>(hashMap1);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      doubleKeyMap1.put((Map<Integer, Object>) hashMap2, (Object) hashMap0, (Object) doubleKeyMap0);
      doubleKeyMap1.remove((Map<Integer, Object>) hashMap2, (Object) hashMap0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, Object>, Map<Object, Object>>();
      DoubleKeyMap<Map<Integer, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Object, Object>(hashMap0);
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(map0, (Object) map0, (Object) map0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Map<Object, Object> map1 = doubleKeyMap0.remove((Map<Integer, Object>) hashMap1);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.put("", (Object) "", "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.put("", (Object) "", (String) null);
      assertNotNull(string0);
      assertEquals("us.codecraft.webmagic.utils.DoubleKeyMap", string0);
  }
}
