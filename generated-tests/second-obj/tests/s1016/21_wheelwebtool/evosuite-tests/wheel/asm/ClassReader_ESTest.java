/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:40:06 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("whel.am.ClassWrite'");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      Label[] labelArray0 = new Label[1];
      // Undeclared exception!
      try { 
        classReader0.readLabel(14, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getSuperName();
      Edge edge0 = new Edge();
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) null, (-4129));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "wheel.asm.ClassWriter";
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        classReader0.readConst(36, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
          assertNotNull(classReader0);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(7316, classReader0.header);
          assertEquals(33, classReader0.getAccess());
          
          String[] stringArray0 = classReader0.getInterfaces();
          assertNotNull(stringArray0);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(7316, classReader0.header);
          assertEquals(33, classReader0.getAccess());
          
          ClassVisitor classVisitor0 = null;
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
          assertNotNull(classAdapter0);
          
          ClassReader classReader1 = new ClassReader(classReader0.b);
          assertFalse(classReader1.equals((Object)classReader0));
          assertNotNull(classReader1);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(7316, classReader0.header);
          assertEquals(7316, classReader1.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classReader1.getAccess());
          
          // Undeclared exception!
          try { 
            classReader1.accept((ClassVisitor) classAdapter0, 268435456);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("wheel.asm.ClassAdapter", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(7316, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter((-591));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(7316, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7316, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, (-39));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(7316, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(7316, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      classReader0.accept((ClassVisitor) classAdapter0, 1);
      classReader1.readShort((-591));
      char[] charArray0 = new char[4];
      char char0 = 't';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = ':';
      charArray0[2] = char2;
      char char3 = '-';
      charArray0[3] = char3;
      classReader1.readConst(classWriter0.COMPUTE_MAXS, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">'zM15@8)bJw");
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7316, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7316, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals("java/lang/Object", string0);
      assertEquals(33, classReader0.getAccess());
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      ClassWriter classWriter0 = new ClassWriter(16433);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2, (-1150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22728
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      assertNotNull(classReader0);
      assertEquals(7316, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals(7316, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals("java/lang/Object", string0);
      assertEquals(33, classReader0.getAccess());
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.accept((ClassVisitor) classAdapter0, 2);
      classReader0.getClassName();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      assertNotNull(classReader0);
      assertEquals(7316, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(59);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, (-2754));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter((-591));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, (-52));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getSuperName();
      Edge edge0 = new Edge();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 7316);
      classReader0.accept((ClassVisitor) classWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "wheel.asm.ClassWriter";
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      int int0 = 36;
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'H';
      charArray0[2] = ' ';
      charArray0[3] = 't';
      charArray0[4] = '#';
      charArray0[5] = 'k';
      charArray0[6] = ';';
      charArray0[7] = 'E';
      classReader0.getClassName();
      charArray0[8] = '@';
      // Undeclared exception!
      try { 
        classReader0.getItem(4187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4187
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter((-591));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 55);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getSuperName();
      Edge edge0 = new Edge();
      ClassWriter classWriter0 = new ClassWriter(16433);
      classReader0.accept((ClassVisitor) classWriter0, 10);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter((-1576));
      classReader0.readByte(636);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1);
      classReader0.accept((ClassVisitor) classWriter0, 9);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getSuperName();
      Edge edge0 = new Edge();
      ClassWriter classWriter0 = new ClassWriter(743);
      classWriter0.newInteger(1416);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 't';
      charArray0[4] = '#';
      // Undeclared exception!
      try { 
        classReader0.readConst(19, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
