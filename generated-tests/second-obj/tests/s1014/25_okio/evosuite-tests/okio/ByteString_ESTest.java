/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:21:40 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("eheK=");
      byteString0.base64Url();
      String string0 = byteString0.utf8();
      assertEquals("eheK=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("U2.UKPJ");
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
      
      String string0 = byteString0.toString();
      assertEquals("[text=U2.UKPJ]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 38, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=38 byteCount=38
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.rangeEquals(244, byteArray0, (int) (byte)111, (int) (byte)111);
      ByteString byteString1 = byteString0.sha512();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 66);
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, (byte)0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      try { 
        ByteString.read(sequenceInputStream0, 16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      assertEquals(0, int0);
      
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=000000]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("size < 4: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("U2.UKPJ");
      String string0 = byteString0.toString();
      assertEquals("[text=U2.UKPJ]", string0);
      
      byte[] byteArray0 = byteString0.toByteArray();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString.decodeBase64("okio.ByteString");
      ByteString byteString0 = ByteString.encodeUtf8("okio.ByteString");
      String string0 = byteString0.toString();
      assertEquals("[text=okio.ByteString]", string0);
      
      byte[] byteArray0 = byteString0.toByteArray();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("<Ow D<urFA;>AN)]jC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)111);
      assertEquals(0, int0);
      
      byteString0.EMPTY.hashCode();
      String string0 = byteString0.toString();
      assertEquals("[text=o]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, (byte)116);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      ByteString.decodeBase64("");
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.toString();
      byte[] byteArray0 = byteString0.toByteArray();
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        Charset.forName("[size=0]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [size=0]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.base64Url();
      byteString0.getByte(8);
      byteString0.write(buffer0);
      assertEquals(20L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      byteString2.EMPTY.lastIndexOf(byteString0, (-940));
      byteString2.compareTo(byteString0);
      byteString1.size();
      ByteString byteString3 = byteString0.sha512();
      assertNotSame(byteString3, byteString1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("eheK=");
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = byteString0.EMPTY.hmacSha512(byteString0);
      String string0 = byteString0.toString();
      assertEquals("[text=eheK=]", string0);
      
      byteString0.toByteArray();
      byteString0.toByteArray();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
      
      String string1 = byteString0.hex();
      assertEquals("6568650b3d", string1);
      
      ByteString byteString3 = byteString0.md5();
      int int1 = byteString0.compareTo(byteString3);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        byteString0.substring(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (-2096));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2096
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0000]", string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.base64Url();
      byteString0.hex();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)51;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.EMPTY.hashCode();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.compareTo(byteString1);
      byteString1.hashCode();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      byteString1.write(buffer2);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Inflater inflater0 = new Inflater(false);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\"of,0U^$\"pQ<z98?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \"
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Inflater inflater0 = new Inflater();
      byteString0.startsWith(byteArray0);
      byte[] byteArray1 = byteString0.internalArray();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.EMPTY.md5();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.asByteBuffer();
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.indexOf(byteString0);
      byteString0.lastIndexOf(byteArray0, (-604));
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("00", string0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString1 = options0.get((byte)0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte)0, byteString1, (int) (byte)0, 98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)71;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.rangeEquals((int) (byte)51, byteArray0, (int) (byte)51, 40);
      byteString0.asByteBuffer();
      byteString0.hashCode();
      String string0 = byteString0.toString();
      assertEquals("[hex=000000]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=0000bd0000e0000000000aa0d00b0b0d00fffef0]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[1] = byteString0;
      byteString0.utf8();
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "x+";
      // Undeclared exception!
      try { 
        ByteString.encodeString("x+", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString.decodeBase64("<2h]gP,uxA.05C/B%8h");
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteString.encodeString("<2h]gP,uxA.05C/B%8h", charset0);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Expected leading [0-9a-fA-F] character but was %#x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.asByteBuffer();
      byteString0.EMPTY.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        Charset.forName("byteCount > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // byteCount > Integer.MAX_VALUE: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      HashingSource.md5(hashingSource0);
      HashingSource.sha1(buffer0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Inflater inflater0 = new Inflater(false);
      Inflater inflater1 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      inflater0.finished();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      byteString0.compareTo(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteString((-2896L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2896
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 69;
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = null;
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, 1546);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = ByteString.codePointIndexToCharIndex("s-xB+X$QEF((nG8", (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.indexOf(byteString0);
      assertEquals(0, int0);
      
      byteString0.base64Url();
      Charset.defaultCharset();
      int int1 = byteString0.indexOf(byteArray0, 42);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pipe pipe0 = new Pipe(3116L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toByteArray();
      ByteString byteString1 = ByteString.encodeUtf8("g6+");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteString1.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=da00a0ee0e0b0b0d0000bfef00000000afd00000]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertArrayEquals(new byte[] {(byte)107, (byte)54, (byte)104, (byte)48, (byte)89, (byte) (-1)}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("eheK=");
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = ByteString.encodeUtf8("eheK=");
      ByteString byteString2 = byteString1.EMPTY.hmacSha512(byteString0);
      byteString2.base64();
      ByteString byteString3 = byteString2.toAsciiLowercase();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X|}5lk{)BDY");
      byteString0.utf8();
      ByteString byteString4 = byteString3.toAsciiUppercase();
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString3, byteString2);
      
      int int0 = byteString0.lastIndexOf(byteString1, 2609);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("U2.UKPJ");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      // Undeclared exception!
      try { 
        byteString0.substring((-939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Pipe pipe0 = new Pipe(3116L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toByteArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        byteString0.substring(15, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(20)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.EMPTY.startsWith(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteString0.toAsciiUppercase();
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString2 = options0.get((byte)0);
      byteString1.equals(byteString2);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("s-xB+X$QEF((nG8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: s-xB+X$QEF((nG8
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[13] = (byte)87;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      ByteString byteString2 = byteString1.sha512();
      int int0 = byteString1.indexOf(byteString1);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString2.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = ByteString.decodeHex("");
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteString1.base64();
      int int1 = byteString1.lastIndexOf(byteArray0, 72);
      ByteString byteString2 = ByteString.of(byteArray0, 0, 0);
      boolean boolean0 = byteString2.equals(byteString1);
      assertTrue(boolean0);
      
      int int2 = byteString1.indexOf(byteArray0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteString byteString0 = ByteString.encodeString("SHA-1", charset0);
      byteString0.rangeEquals(1084, byteArray0, (-84), (-507));
      byteString0.sha512();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Pipe pipe0 = new Pipe(3116L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-106);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X|}5lk{)BDY");
      byteString0.utf8();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString0.lastIndexOf(byteString1, 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals("\r");
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((int) (byte) (-20), (int) (byte) (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)71;
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.lastIndexOf(byteString0, 19);
      byteString0.utf8();
      byteString1.toString();
      byteString1.startsWith(byteString0);
      // Undeclared exception!
      try { 
        Charset.forName("[hex=0000]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [hex=0000]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      HashingSource.md5(hashingSource0);
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      HashingSource hashingSource2 = HashingSource.sha256(hashingSource1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Inflater inflater0 = new Inflater();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Inflater inflater1 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource2, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      inflater0.finished();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      ByteString byteString1 = realBufferedSource1.readByteString();
      byteString1.compareTo(byteString0);
      int int0 = 59;
      byteString0.rangeEquals((-1), byteArray0, (-1), 59);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1), 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=-1 byteCount=46
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.asByteBuffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      int int0 = byteString2.lastIndexOf(byteString0);
      assertSame(byteString0, byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "U2.UKPJ";
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Pipe pipe0 = new Pipe(3116L);
      ByteString byteString0 = ByteString.encodeUtf8("g6+");
      byteString0.sha1();
      assertEquals(3, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteString.decodeBase64("okio.ByteString");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("base64 == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteString byteString0 = ByteString.encodeString("SHA-1", charset0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.hmacSha1(byteString0);
      ByteString byteString2 = ByteString.decodeBase64("SHA-1");
      assertNull(byteString2);
      
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[1] = byteString0;
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha256();
      byteString1.toString();
      byteString1.toByteArray();
      String string0 = byteString0.utf8;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]", false);
      try { 
        byteString0.write(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "2X#X<{p_/9J])yrH";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("2X#X<{p_/9J])yrH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: X
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.base64Url();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.toString();
      byteString1.startsWith(byteString0);
      byteString0.utf8();
      byteString1.lastIndexOf(byteArray0);
      byteString1.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AAA=", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byteString0.EMPTY.hex();
      byteString1.hmacSha512(byteString1);
      String string0 = byteString0.toString();
      assertEquals("[hex=0000]", string0);
      
      byteString0.hashCode = (-3271);
      byteString1.toByteArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteString0.size();
      ByteString byteString2 = byteString1.substring(2);
      assertSame(byteString1, byteString0);
      assertEquals(0, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)118;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("eheK=");
      ByteString byteString1 = byteString0.EMPTY.hmacSha512(byteString0);
      byteString1.base64();
      byteString1.toAsciiLowercase();
      ByteString byteString2 = ByteString.encodeUtf8("I3pC8LFvcBB9i4D8diiDQmqA75sRk70wcSgEjk0DON3FcfdJKqx5Qk1wHwIAHsu4Dzknsfm5sgaKfkwwEqMK+w==");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString2.toString();
      byteString1.toByteArray();
      byteString1.toByteArray();
      // Undeclared exception!
      try { 
        byteString1.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = (-1655);
      int int1 = 3861;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-1655), 3861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString0.lastIndexOf(byteString1);
      byteString0.toAsciiLowercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.toString();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/AAA=");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int int0 = 24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 24);
      try { 
        ByteString.read(byteArrayInputStream0, 454);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString0.toString();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/AAA=");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/AAA=");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "gE4B)&qZXp6W+%K}B!");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2740), (byte)13);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteString0.asByteBuffer();
      ByteString byteString2 = new ByteString(byteArray0);
      byte[] byteArray1 = byteString0.toByteArray();
      byteString0.lastIndexOf(byteArray1);
      byteString2.utf8();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString3 = options0.get(3);
      byteString2.rangeEquals((int) (byte)68, byteString3, (int) (byte)68, 56);
      ByteString byteString4 = byteString2.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString4.substring((int) (byte)68);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }
}
