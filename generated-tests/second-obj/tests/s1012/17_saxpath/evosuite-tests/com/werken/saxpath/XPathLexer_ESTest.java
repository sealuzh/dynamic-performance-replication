/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:48:26 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      xPathLexer0.div();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vwq}3");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-161));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y^");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("^", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      assertEquals("", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token1 = xPathLexer2.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-2117));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w.(7I");
      xPathLexer0.equals();
      xPathLexer0.number();
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.currentPosition();
      xPathLexer0.not();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      xPathLexer0.div();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token0 = xPathLexer2.notEquals();
      assertEquals("[ ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer2.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer2.getXPath();
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      int int0 = xPathLexer2.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wU,0?>WfT5cuf");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("wU", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A]:3w");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      assertEquals("A]:3w", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QR.`LV9{dam!EjE");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("R", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2@Ru.I5 !1O;:8R4w");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.setXPath("1h|z(o?'F(o#w(e/");
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2@7u.I> !1O;:8R2w9");
      Token token0 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (30) (2)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(415);
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9xdm!E`E");
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.endPosition();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<AtD$|>j");
      Token token0 = xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.pipe();
      Token token3 = xPathLexer0.nextToken();
      token3.toString();
      token1.toString();
      token0.toString();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QR.`LV@{dam!EjE");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("Q", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("R.", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("kgX", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.minus();
      assertEquals(":", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2]ss{D#");
      Token token0 = xPathLexer0.colon();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("]", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (18) (2)", string0);
      
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.endPosition();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('\\');
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("ss", token2.getTokenText());
      
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.dollar();
      assertEquals("{", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertFalse(boolean1 == boolean0);
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("D", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("#", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<AtD$|>Zj");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C!>mlS>KF]1K'rU%Sr");
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "qge-L^$e";
      XPathLexer xPathLexer0 = new XPathLexer("qge-L^$e");
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.number();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.setXPath("}Kxcc1F/_X3E");
      token0.toString();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setXPath("R.`L@{dam!EjE");
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ggr[lj;WF43");
      xPathLexer0.literal();
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9{dam!EjE");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      String string0 = "P9&6##}D'V`s_\\";
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9xdm!E`E");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (Q)", string0);
      
      Token token1 = xPathLexer0.at();
      Token token2 = xPathLexer0.slashes();
      assertEquals(".", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.doubleColon();
      String string1 = token1.toString();
      assertEquals("[ (16) (R)", string1);
      
      Token token3 = xPathLexer0.plus();
      token3.toString();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("9x", token4.getTokenText());
      
      xPathLexer0.operatorName();
      String string2 = token3.toString();
      assertEquals("[ (5) (V)", string2);
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z3-B*5ki-,L0O1&6!");
      String string0 = "mu>S!rb";
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.star();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4?yiGKGA 94");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.mod();
      Token token2 = xPathLexer3.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer3.getXPath();
      Token token3 = xPathLexer3.identifier();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c!ZdT2\"%mCK3dz^'");
      Token token0 = xPathLexer0.plus();
      assertEquals("c", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(23, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("ZdT2\"%mCK3dz^'", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("Z", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("2\"", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"J-*VkN-~0O1&6!");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals("", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      XPathLexer xPathLexer1 = new XPathLexer("Z|W@HJxE/w:H,");
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("96", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(20, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.setXPath("+;|SMIS");
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals(";", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("|", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      assertNotSame(token6, token2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"J-*VkN-~0O1&6!");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setXPath("96*5-IbEk]|Z%9oOZ*`");
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      token1.toString();
      xPathLexer0.setXPath("Wo*T6;Ze]");
      String string0 = token1.toString();
      assertEquals("[ (2) (9)", string0);
      
      xPathLexer0.isIdentifierStartChar('=');
      Token token3 = xPathLexer0.minus();
      token3.toString();
      String string1 = token3.toString();
      assertEquals("[ (6) (W)", string1);
      
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("\"", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken((Token) null);
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("T6", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token6 = xPathLexer0.minus();
      assertEquals(";", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("2@7u.I> !1O;:8R2w");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C!>mlS>KF0]1K'rU%Sr");
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      xPathLexer1.getPreviousToken();
      xPathLexer0.equals();
      xPathLexer0.and();
      Token token1 = xPathLexer1.nextToken();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer("8v");
      xPathLexer2.dots();
      xPathLexer2.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("x>mN#> *HAY");
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QR.`LV@{dam!EjE");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("QR.", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("`", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9xdm!E`E");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      Token token1 = xPathLexer0.slashes();
      assertEquals("R", token1.getTokenText());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (Q)", string0);
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.dollar();
      assertEquals(".", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("`", token3.getTokenText());
      
      xPathLexer0.consume(1010);
      XPathLexer xPathLexer1 = new XPathLexer("9'2");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer1.plus();
      assertEquals("9", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("", token6.getTokenText());
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#iq?b*Ro0avAf-x");
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3738));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"J-*VkN-~0O1&6!");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setXPath("\"J-*VkN-~0O1&6!");
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token0.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (13) (\")", string0);
      
      Token token2 = xPathLexer0.not();
      assertEquals("J", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      xPathLexer1.or();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("*V", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("&z");
      xPathLexer0.mod();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("k", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      String string1 = token0.toString();
      assertEquals("[ (1) (\")", string1);
      
      xPathLexer3.setPreviousToken((Token) null);
      xPathLexer0.dots();
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer2.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer1.identifier();
      assertEquals(15, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YXV;");
      Token token0 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (15) (YXV)", string0);
      
      Token token1 = xPathLexer0.at();
      assertEquals(";", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.colon();
      assertEquals("t", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("f", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("kg", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("X", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer0.minus();
      assertEquals(":", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wU,0?>WfT5cuf");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("w", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.star();
      assertEquals("U", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals(",0", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("?>WfT5cuf", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("?", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("bd,");
      xPathLexer0.and();
      Token token1 = xPathLexer1.dollar();
      assertEquals("b", token1.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.number();
      assertEquals(30, token4.getTokenType());
      
      char char0 = xPathLexer0.LA(1);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("ggr[lj;WF43");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("gr", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.minus();
      assertEquals("[", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("W[ ");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C!>mlS>KF]1K'rU%Sr");
      XPathLexer xPathLexer1 = new XPathLexer("C!>mlS>KF]1K'rU%Sr");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer1.equals();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer1.div();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YNoi2I$$%");
      Token token0 = xPathLexer0.equals();
      assertEquals("t", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("fkgX", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wU,0?>WfT5cuf");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("U,", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mu>S!rb");
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G~5O[+J,86;~?W");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("G~", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer1.operatorName();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mu>S!rb");
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("mu>S!rb");
      Token token0 = xPathLexer1.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.minus();
      xPathLexer1.not();
      Token token1 = xPathLexer0.equals();
      xPathLexer1.at();
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      Token token2 = xPathLexer1.at();
      xPathLexer0.hasMoreChars();
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      xPathLexer0.div();
      token2.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ic63Or{9,d<");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Ic63Or", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.isIdentifierChar('H');
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9xdm!E`E");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      Token token1 = xPathLexer0.at();
      xPathLexer0.slashes();
      token1.toString();
      token1.toString();
      xPathLexer0.doubleColon();
      token1.toString();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2@7u.I> !1O;:8R2w9");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w*.7MI");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.colon();
      Token token1 = xPathLexer0.comma();
      token1.toString();
      token1.toString();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.consume(111);
      assertEquals("w*.7MI", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mu>S!rb");
      xPathLexer0.setXPath("\"J-*VkN-~L0O1&6!");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|q\"\"gpg");
      Token token0 = xPathLexer0.colon();
      Token token1 = xPathLexer0.at();
      assertEquals("q", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (18) (|)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.currentPosition();
      xPathLexer0.setXPath("|q\"\"gpg");
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('X');
      assertTrue(boolean0);
      
      xPathLexer0.getXPath();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(27, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("g", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("p", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("Lh", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.setXPath("LhWdD4[Df|");
      xPathLexer0.consume(136);
      xPathLexer0.setXPath("_@WJ7XJ)");
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("_", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w*.7MI");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.comma();
      String string0 = token2.toString();
      assertEquals("[ (32) ()", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (20) (*)", string1);
      assertEquals(20, token1.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      xPathLexer0.getXPath();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w*.7MI");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.not();
      Token token1 = xPathLexer1.equals();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("/<6&EJ:6");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LhWdD4[Df|");
      xPathLexer0.or();
      xPathLexer0.consume(136);
      xPathLexer0.setXPath(": cq{F@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.equals();
      assertEquals("q", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("F@", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("F", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@*#hsK.,l");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume();
      int int0 = xPathLexer2.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mu>S!rb");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.consume((-1603));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ic63Or{9,d<");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.pipe();
      assertEquals("I", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("c63Or", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.isIdentifierChar('H');
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":C%+|'");
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wU,0?>WfT5cuf");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("U", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9{dam!EjE");
      Token token0 = xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("~=X?");
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("=", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer1.comma();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(".", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      token0.toString();
      String string0 = token3.toString();
      assertEquals("[ (32) (X)", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (19) (QR)", string1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9xdm!E`E");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer(")");
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("D");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=*eaeP7wFepEQSRxW");
      Token token0 = xPathLexer0.at();
      token0.toString();
      xPathLexer0.div();
      String string0 = token0.toString();
      assertEquals("[ (16) (=)", string0);
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      xPathLexer0.setXPath("=P'hh7f");
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("P", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals("'", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      xPathLexer0.setXPath("f%bDM\"zz|||rdi9MES");
      xPathLexer0.consume((-1));
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-1));
      xPathLexer0.and();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("f", token7.getTokenText());
      
      xPathLexer0.at();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("bD", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("M", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.equals();
      assertEquals("t", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("WK");
      Token token2 = xPathLexer1.star();
      assertEquals("W", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("K", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("kg", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=8,9$r");
      Token token0 = xPathLexer0.equals();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("8", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(",9", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setXPath("|LXz_hC[[v$w(ESl");
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.isIdentifierChar('\\');
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(4, int0);
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("LJ*^pzH6,");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      Token token1 = xPathLexer0.at();
      assertEquals("J", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("*", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      token0.toString();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("^p", token3.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (5) (L)", string0);
      
      xPathLexer0.plus();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(32, token5.getTokenType());
      assertEquals(",", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("b#");
      Token token6 = xPathLexer1.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer1.leftBracket();
      assertEquals("#", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("@*#hsK.,l");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token1 = xPathLexer2.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9xdm!E`E");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.plus();
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.div();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer8 = null;
      try {
        xPathLexer8 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G~5O[+J,86;~?ENW");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.at();
      xPathLexer1.colon();
      xPathLexer0.nextToken();
      xPathLexer1.literal();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m/SHC'GMY0X|w5=");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("m", token0.getTokenText());
      
      xPathLexer1.operatorName();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("S", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("m/SHC'GMY0X|w5=");
      XPathLexer xPathLexer3 = new XPathLexer("m/SHC'GMY0X|w5=");
      Token token3 = xPathLexer3.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer3.nextToken();
      assertEquals(11, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      xPathLexer3.notEquals();
      xPathLexer1.setXPath("g$=e^\"(z|u59>C1f");
      Token token5 = xPathLexer3.leftBracket();
      assertEquals("C", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer2.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer2.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      XPathLexer xPathLexer6 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('H');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer2.slashes();
      assertEquals("m/", token8.getTokenText());
      assertEquals(12, token8.getTokenType());
      
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals("g$", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qge-L^$e");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('a');
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.nextToken();
      assertEquals("qge-L", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("^", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("qge-L^$e");
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|r%MwR0>=Jt95A");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("%", token2.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("R0", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals(">", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("=", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("J", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("t", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.consume();
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      assertEquals("5", token9.getTokenText());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("A", token10.getTokenText());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setXPath("1#Wbp?zo/[nC'A;cE");
      Token token0 = xPathLexer1.equals();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer1.setPreviousToken(token0);
      token0.toString();
      xPathLexer1.dollar();
      xPathLexer1.slashes();
      Token token1 = xPathLexer1.dollar();
      token1.toString();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer1.and();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("[ (21) (1)");
      xPathLexer0.whitespace();
      xPathLexer1.plus();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<AtD$|>Zj");
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G~5O[+J,86;~?W");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.getXPath();
      xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Mfz+7%@|O?&");
      xPathLexer1.operatorName();
      Token token0 = xPathLexer1.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("M", token0.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("Mfz+7%@|O?&");
      xPathLexer0.div();
      xPathLexer1.mod();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer1.notEquals();
      assertEquals("fz", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("f", token4.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("QR.`LV9xdm!E`E");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.at();
      xPathLexer0.slashes();
      token1.toString();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token1.toString();
      Token token2 = xPathLexer0.div();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      String string0 = "w*.7MI";
      XPathLexer xPathLexer0 = new XPathLexer("w*.7MI");
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z3-B*5ki-,L0O1&6!");
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      int int0 = xPathLexer0.endPosition();
      assertEquals(17, int0);
      
      Token token0 = xPathLexer0.leftParen();
      assertEquals("3", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("mu>S!rb");
      xPathLexer1.identifierOrOperatorName();
      Token token3 = xPathLexer1.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.consume(0);
      Token token5 = xPathLexer0.nextToken();
      assertEquals(20, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
      
      xPathLexer1.and();
      String string0 = token2.toString();
      assertEquals("[ (15) (B)", string0);
      
      Token token6 = xPathLexer1.rightBracket();
      assertEquals("S", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer2.consume();
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("5", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tfkgX:tr!YN'oi2I$$%");
      Token token0 = xPathLexer0.not();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      token0.toString();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("&e}O.C\"");
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("[ (23) (t)");
      xPathLexer2.whitespace();
      xPathLexer2.dots();
      xPathLexer1.nextToken();
      xPathLexer2.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-50));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
