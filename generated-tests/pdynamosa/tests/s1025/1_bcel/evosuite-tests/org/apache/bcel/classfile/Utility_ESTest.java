/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:14:28 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode(", ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("=JxY6S-&u;L+@&pp;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =JxY6S-&u;L+@&pp;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.convertString("LC8Y\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.compactClassName("iht", "iht", true);
      assertEquals("", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("g", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "dsub";
      stringArray0[1] = "g";
      stringArray0[2] = "dsub";
      stringArray0[3] = "iht";
      String string2 = Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1", stringArray0);
      assertEquals("(Ldsub;Lg;Ldsub;Liht;)Lorg/apache/bcel/classfile/ConstantUtf8$CACHE_HOLDER$1;", string2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.signatureToString("J\"E_#H|si#,B9", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "t6";
      Utility.compactClassName("t6", "t6", true);
      int int0 = (-1260);
      Utility.setBit((-1260), 2284);
      try { 
        Utility.typeOfSignature("rQnT8MRc+j!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: rQnT8MRc+j!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer((-1726));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      Object object0 = new Object();
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.signatureToString("SourceFile: ", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName("XJs3JW4a -Y`o_k", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)42;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$9f$b1$c5$b1$w$A", string0);
      
      byte[] byteArray1 = Utility.decode("$9f$b1$c5$b1$w$A", false);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-79), (byte) (-59), (byte) (-79), (byte)42, (byte)0}, byteArray1);
      
      int int0 = Utility.clearBit((byte)42, 194);
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, 'G');
      assertEquals("0", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)0;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.compactClassName("iht", "iht", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)93;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24667. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.convertString("Yt(;s~W3I&[q9");
      assertEquals("Yt(;s~W3I&[q9", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w");
      mockPrintWriter0.println();
      mockPrintWriter0.println(false);
      Locale locale0 = Locale.forLanguageTag("R*+JT51f");
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      Locale locale2 = Locale.forLanguageTag("h2c9^oqEJ{lQ $F");
      objectArray0[1] = object0;
      locale1.getDisplayCountry(locale2);
      objectArray0[2] = (Object) locale1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "w";
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale1, "/AgE`Y", objectArray0);
      mockPrintWriter0.append((CharSequence) "w", 0, 0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      Utility.convertString("87*W,9L0VdTF");
      Utility.clearBit((-1649), 0);
      Utility.typeOfSignature("Cp} ");
      Utility.fillup("lastore", 0, false, 'A');
      Utility.isJavaIdentifierPart('A');
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.compactClassName("if_icmpge\t\t#18166", "c|2>", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1724));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ofgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ofgt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.decode("", false);
      Utility.fillup("#A{AI5", 0, false, ':');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "#A{AI5";
      objectArray0[1] = (Object) "#A{AI5";
      Utility.printArray(objectArray0, false, false);
      Utility.methodSignatureReturnType("Illegal type for StackMapType: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#A{AI5", "jky7n3?AP", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #A{AI5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2^]*]^4");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ".`2.ek/\"l";
      objectArray0[1] = (Object) ".`2.ek/\"l";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "2^]*]^4";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) ".`2.ek/\"l";
      PrintWriter printWriter0 = mockPrintWriter0.printf(".`2.ek/\"l", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C0@1}IED@T9GeaEWa&");
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte) (-39);
      byteArray1[5] = (byte)42;
      byteArray1[6] = (byte) (-39);
      byteArray1[7] = (byte)115;
      byteArray1[8] = (byte)90;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.compactClassName("return");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Ed6c%{IPGZHS;D18";
      Utility.searchOpcode("Ed6c%{IPGZHS;D18");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "The array of suffixes must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of suffixes must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("\t\t");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.clearBit(240, 240);
      try { 
        Utility.typeOfSignature("HLnCJ15p[tc]a1Xh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HLnCJ15p[tc]a1Xh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.clearBit(4711, 4711);
      String string0 = "^";
      try { 
        Utility.methodSignatureReturnType("^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      Utility.replace("H5xj@&:Wen", ",Lm6-H8}r8z^O8k_2", "H5xj@&:Wen");
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokeinterface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "(+FpLw{h%-LZo";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "(+FpLw{h%-LZo", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Qm7T]n)F($x(yX");
      assertEquals("float", string0);
      
      int int0 = Utility.clearBit(87, 87);
      assertEquals(87, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)16;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("3f 89 42 ee 89 e7 4a 10", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "YXc)vKDrz7J";
      stringArray0[1] = ", ";
      stringArray0[2] = "YXc)vKDrz7J";
      Utility.methodTypeToSignature(", ", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)122, false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-45);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3, 831);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    irem
         // 4:    irem
         // 5:    nop
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = Utility.clearBit((-132), (-132));
      assertEquals((-268435588), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-40);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$a3$u$8b$fe$r$97Bx$d8", false);
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$a3$u$8b$fe$r$97Bx$d8", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit(3247, 187);
      assertEquals(3247, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)44;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), 132);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    ifle\t\t#-24930\n3:    nop\n4:    <illegal opcode>\n5:    aload_0\n6:    i2b\n7:    aload_0\n8:    aload_2\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    ifle\t\t#-24930
         // 3:    nop
         // 4:    <illegal opcode>
         // 5:    aload_0
         // 6:    i2b
         // 7:    aload_0
         // 8:    aload_2
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.convertString("[\t\t%");
      Utility.replace("[\t\t%", "[\t\t%", "V`7p%) ]2RB=/{");
      Utility.typeOfSignature("[\t\t%");
      try { 
        Utility.methodSignatureReturnType("V`7p%) ]2RB=/{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` ]2RB=/{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.setBit(48, 48);
      try { 
        Utility.typeOfSignature("?-`)GD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?-`)GD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      Utility.typeOfSignature("!JeM\"QyPp/");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "'Mp'^w/";
      objectArray0[1] = (Object) "'Mp'^w/";
      objectArray0[2] = (Object) "'Mp'^w/";
      objectArray0[3] = (Object) "'Mp'^w/";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, 42, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("%jPW*+H5u9/-E");
      try { 
        Utility.typeOfSignature("%jPW*+H5u9/-E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %jPW*+H5u9/-E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "^G";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("^G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)42;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$ff$w$c8$w0$w", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.compactClassName("The list of names must not be null");
      try { 
        Utility.typeOfMethodSignature("V?|RPTCTifNQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V?|RPTCTifNQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.signatureToString("VeT]QEg", false);
      assertEquals("void", string0);
      
      int int0 = Utility.clearBit(182, 186);
      assertEquals(182, int0);
      
      String string1 = Utility.convertString("\t\t%");
      assertEquals("\t\t%", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.classOrInterface(153);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.Double", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string1 = Utility.format(206, 206, false, 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii206", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpeq\t\t#22317", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.convertString("[\t\t%");
      assertEquals("[\t\t%", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(165);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-14);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-531), (-3157));
      assertEquals("0:    fload_3\n1:    fload_3\n2:    lstore\t\t%219\n4:    <illegal opcode>\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, true);
      String string0 = null;
      String string1 = null;
      boolean boolean0 = false;
      int int0 = (-26);
      int int1 = (-967);
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[7];
      // Undeclared exception!
      try { 
        Constant.readConstant((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LC8Y\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LC8Y\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)60;
      byteArray0[6] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.typeOfSignature("The suffix must not be null");
      // Undeclared exception!
      try { 
        Utility.signatureToString("The suffix must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The suffix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      try { 
        Utility.typeOfSignature(";,IYs+!%{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;,IYs+!%{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("checkcast", true);
      assertEquals("checkcast", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.convertString("iht");
      Utility.getSignature("iht");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(38);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-94), (byte) (-94));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)67);
      constantArray0[3] = (Constant) constantMethodType0;
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("%>dDO$CpO7x7%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%>dDO$CpO7x7%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      Utility.printArray((Object[]) null, false, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("jsr_w\t\t#673720360", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)90;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.convertString("&~O;{");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)51;
      try { 
        Utility.typeOfSignature("P#n*X*vm:97D+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P#n*X*vm:97D+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-63);
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("40", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(172);
      try { 
        Utility.typeOfSignature("Ofgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ofgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.isJavaIdentifierPart('t');
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("Q^6WO_!0s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q^6WO_!0s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "(+FpLw{h%-LZo";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("(+FpLw{h%-LZo", "(+FpLw{h%-LZo", "(+FpLw{h%-LZo", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+FpLw{h%-LZo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 255, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("UNU)2");
      assertEquals("UNU)2", string0);
      
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00", string1);
      
      boolean boolean0 = Utility.isSet(0, 1947);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 153;
      Utility.classOrInterface(153);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(131);
      try { 
        Utility.typeOfSignature("+2Bb4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Bb4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)28;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, 885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C0@1}IED@T9GeaEWa&");
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (int) (byte)6);
      boolean boolean0 = Utility.isJavaIdentifierPart('H');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "char";
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      String string2 = Utility.printArray(objectArray0, false);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short short0 = Utility.searchOpcode("fload_3");
      assertEquals((short)37, short0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.replace("C0@1}IED@T9GeaEWa&", "C0@1}IED@T9GeaEWa&", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.classOrInterface(86);
      Utility.isSet((-888), 1666);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("impdep2", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer((byte)94);
      try { 
        Utility.typeOfSignature("<nr.'6.\"5.5i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <nr.'6.\"5.5i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.convertString("LC8Y\"");
      assertEquals("LC8Y\\\"", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.format((byte)108, 68, true, '<');
      assertEquals("108<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName(", class=");
      assertEquals(", class=", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)92;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[0] = (byte)47;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.accessToString(0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SgM");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Yqiir_%";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Yqiir_%";
      objectArray0[3] = (Object) "Yqiir_%";
      Utility.clearBit((-636), 90);
      try { 
        Utility.typeOfSignature("Nw/5!?XgzV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nw/5!?XgzV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodSignatureReturnType("Invalid type: ", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "int", "e}YU0fig");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class", true);
      try { 
        Utility.methodSignatureReturnType("EdR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EdR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("T", "Pattern is missing", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.replace("q>VpVVXg</E0sSm\"", "\t", (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)99;
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iinc\t\t%8\t90", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GNLnyZ-jumTH#vn^72G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GNLnyZ-jumTH#vn^72G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The list of names must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.fillup(" arg", (-4032), false, '\"');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-4032), (-4032));
      byte[] byteArray0 = Utility.decode(" arg", false);
      Utility.compactClassName("Ti)\"", ", class=", true);
      Utility.getSignature("Ti)\"");
      String string0 = Utility.compactClassName(", class=", ", class=", false);
      Utility.classOrInterface(195);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readBoolean();
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("class");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.compactClassName("Ti)\"", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("\tdefault = ", (String[]) null);
      assertEquals("()Ldefault;", string0);
      
      MockFile mockFile0 = new MockFile("null");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toURI();
      PrintStream printStream0 = mockPrintStream0.append('7');
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char char0 = '\"';
      Utility.fillup(" arg", (-3992), false, '\"');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-3992), (-3992));
      byte[] byteArray0 = Utility.decode(" arg", false);
      Utility.compactClassName("Ti)\"", "9agLONpa", true);
      Utility.getSignature("Ti)\"");
      Utility.compactClassName("9agLONpa", "9agLONpa", false);
      Utility.classOrInterface(195);
      Utility.toHexString(byteArray0);
      Utility.setBit(20, 20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("invokeinterface");
      Utility.decode("hShC4+vg@e0R#hN", false);
      try { 
        Utility.typeOfSignature("9agLONpa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9agLONpa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byteSequence1.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)5);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)5, 233);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("boolean");
      ConstantDouble constantDouble1 = new ConstantDouble((byte)59);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.classOrInterface((-6486));
      try { 
        Utility.methodSignatureArgumentTypes("interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Utility.compactClassName("VO*", "VO*", true);
      assertEquals("", string0);
      
      int int0 = Utility.setBit(405, 405);
      assertEquals(2097557, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      String string0 = Utility.methodTypeToSignature("char", stringArray0);
      assertEquals("(C)C", string0);
      
      String string1 = Utility.compactClassName("", "T|1B0q=", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.convertString("LC7~8Yk");
      assertEquals("LC7~8Yk", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)57;
      Utility.encode(byteArray0, false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$d7S9", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$7bx", string0);
      
      byte[] byteArray1 = Utility.decode("$7bx", false);
      assertArrayEquals(new byte[] {(byte)123, (byte)120}, byteArray1);
      
      String string1 = Utility.format((-538), (byte)123, false, '|');
      assertEquals("|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||-538", string1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte) (-21);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-21);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 151, (-2676));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = true;
      ByteSequence byteSequence0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)126;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte)126;
      byteArray1[4] = (byte)126;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.typeOfSignature("F.xA@,BBo4`Cg%4$p ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("F.xA@,BBo4`Cg%4$p ", "F.xA@,BBo4`Cg%4$p ", "F.xA@,BBo4`Cg%4$p ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F.xA@,BBo4`Cg%4$p 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 32;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "<", "org.apache.commons.io.filefilter.AbstractFileFilter", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "V&z\\zQ0Aa";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("jsr");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-104), (byte)36);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("V&zzQ0Aa", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V&zzQ0Aa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-85);
      byte byte0 = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)87);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte) (-53);
      byteArray1[2] = (byte) (-85);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit(1605, (byte) (-113));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.getSignature("[|]>Uc}uhYV^68+))");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [|]>Uc}uhYV^68+))
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 936;
      Utility.setBit(936, 936);
      try { 
        Utility.methodSignatureReturnType("if_icmpge", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpge'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.getSignature(">$@ S%FTQ?vz:u");
      boolean boolean0 = false;
      Utility.accessToString(41, false);
      Utility.format((-1355), 41, false, ',');
      int int0 = (-288);
      Utility.setBit(3349, (-288));
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "dZ\\9XZ2$$3K\\#F";
      String string1 = "2wY]pTX";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dZ9XZ2$$3K#F", (String) null, "2wY]pTX", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dZ9XZ2$$3K#F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("J\"E_#H|si#,B9", "", "");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.classOrInterface(92);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(32, true);
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.getSignature("The list of names must not be null");
      Utility.isJavaIdentifierPart(';');
      try { 
        Utility.methodSignatureReturnType("The list of names must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-84);
      byteArray0[0] = (byte)121;
      byteArray0[4] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray1 = new Object[2];
      String string0 = Utility.printArray(objectArray1);
      assertEquals("{null, null}", string0);
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaWriter");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ret\t\t%33", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnull\t\t#-23108", string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "newarray";
      Utility.convertString("newarray");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 999, (-1054));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.bcel.classfile.Utility";
      stringArray0[1] = "org.apache.bcel.classfile.Utility";
      stringArray0[2] = "\tdefault = ";
      stringArray0[3] = "\tdefault = ";
      stringArray0[4] = "org.apache.bcel.classfile.Utility";
      stringArray0[5] = null;
      stringArray0[6] = "\tdefault = ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      byteSequence0.readByte();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("public");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.compactClassName("iht", "iht", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.replace("putfield", "breakpoint", (String) null);
      boolean boolean0 = true;
      try { 
        Utility.decode("Illegal type: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid StackMap offset: ");
      Utility.compactClassName("int", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "if_acmpeq", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)38;
      objectArray0[2] = (Object) (byte) (-8);
      byteArray0[7] = (byte)0;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("'");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 891, (-401));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      String string0 = Utility.methodTypeToSignature("char", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.decode("$9dx", false);
      try { 
        Utility.typeOfSignature("*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2NU.EG", "", "2NU.EG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2NU.EG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iflt\t\t#2", string0);
      
      int int0 = Utility.clearBit((byte) (-101), (byte) (-101));
      assertEquals((-134217829), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iinc\t\t%8\t90", string0);
      
      String string1 = Utility.signatureToString("L3*alA5lpTXFI$II!)/;V", true);
      assertEquals("3*alA5lpTXFI$II!).", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jsr_w";
      stringArray0[1] = "jsr_w";
      stringArray0[2] = "jsr_w";
      stringArray0[3] = "jsr_w";
      stringArray0[4] = "jsr_w";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("HdjZkecP%q5$zk+72", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HdjZkecP%q5$zk+72'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("lload_0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.methodSignatureReturnType("C0@1}IED@T9GeaEWa&");
      String string0 = Utility.signatureToString("C0@1}IED@T9GeaEWa&", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.replace("q>VpVVXg</E0sSm\"", "\t", (String) null);
      assertEquals("q>VpVVXg</E0sSm\"", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.compactClassName("if_icmpge\t\t#18166", "c|2>", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      Utility.methodTypeToSignature("char", stringArray0);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.methodSignatureToString("(C)C", "(C)C", "char", true);
      try { 
        Utility.typeOfMethodSignature("HZ8Gcf*?yCrwx?IK?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HZ8Gcf*?yCrwx?IK?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[2] = object1;
      Utility.printArray(objectArray0, false);
      Utility.clearBit((-2684), (-2684));
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[\t\t%", false);
      String string0 = Utility.compactClassName("rOR[", "4u", false);
      assertEquals("rOR[", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)91, (byte)9, (byte)9, (byte)37}, byteArray0);
      assertEquals("lconst_0", string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.decode("", false);
      Utility.fillup("#A{AI5", (-9), false, ':');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "#A{AI5";
      objectArray0[1] = (Object) "#A{AI5";
      Utility.printArray(objectArray0, false, false);
      Utility.methodSignatureReturnType("Illegal type for StackMapType: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#A{AI5", "jky7n3?AP", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #A{AI5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w");
      mockPrintWriter0.println();
      mockPrintWriter0.println(false);
      Locale locale0 = Locale.forLanguageTag("R*+JT51f");
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      Locale locale2 = Locale.forLanguageTag("h2c9^oqEJ{lQ $F");
      objectArray0[1] = object0;
      locale1.getDisplayCountry(locale2);
      objectArray0[2] = (Object) locale1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "w";
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale1, "/AgE`Y", objectArray0);
      mockPrintWriter0.append((CharSequence) "w", 0, 0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      String string0 = Utility.getSignature("87*W,9L0VdTF");
      assertEquals("L87*W,9L0VdTF;", string0);
      
      int int0 = Utility.clearBit((-1649), 0);
      assertEquals((-1650), int0);
      
      byte byte0 = Utility.typeOfSignature("Cp} ");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.fillup("lastore", 0, false, 'A');
      assertEquals("lastore", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7f 7f 5a 09", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object object0 = new Object();
      int int0 = new Integer((-1724));
      try { 
        Utility.typeOfSignature("Gr&b}IA99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gr&b}IA99
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.methodSignatureReturnType("Byte code error: ");
      Utility.clearBit(91, 79);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "xIG<eXbyE";
      String string1 = "}le.&";
      String string2 = "static";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}le.&", "xIG<eXbyE", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }le.&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("land", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yqiir_%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yqiir_%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.fillup("z/+", 203, true, '|');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(203, 85);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)103;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, (int) (byte)103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("50 00 50 50 b8 09 50 50 09", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3182), 2345, true);
      String string0 = Utility.compactClassName("fconst_0", true);
      assertEquals("fconst_0", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.searchOpcode("The list of prefixes must not be null");
      Utility.accessToString((int) (short) (-1), true);
      int int0 = 3927;
      Utility.isSet((short) (-1), 3927);
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private protected static final volatile transient native abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected static final volatile transient native abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      Utility.encode(byteArray0, false);
      Utility.format(2799, 547, true, '}');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ZZ";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.classOrInterface(7);
      Utility.classOrInterface(112);
      try { 
        Utility.methodSignatureToString("class", "c9", "c9", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "lload_1";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "?>...";
      stringArray0[7] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;Llload_1;L;L;L;L;L?>///;L;)L;", string0);
      
      String string1 = Utility.fillup("lload_1", (-416), false, ':');
      assertEquals("lload_1", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, false);
      assertEquals("{, lload_1, , , , , ?>..., }", string2);
      
      String string3 = Utility.compactClassName("null", "", true);
      assertEquals("null", string3);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PN79M?N4\"OvFN#R(+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PN79M?N4\"OvFN#R(+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.getSignature("float");
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Yqiir_%";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Yqiir_%";
      objectArray0[3] = (Object) "Yqiir_%";
      Utility.clearBit((-636), (-1724));
      try { 
        Utility.typeOfSignature(":RD_|u!<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :RD_|u!<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = Utility.setBit(53, 53);
      assertEquals(2097205, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) "int";
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{int, int}", string0);
      
      String string1 = Utility.classOrInterface(53);
      assertEquals("class", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "int";
      stringArray0[1] = "int";
      Utility.methodTypeToSignature("{int, int}", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(II)L{int,;", false);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("85 85 85 5a 5a eb 42 85 eb", string0);
      
      String string1 = Utility.fillup("i2l", (-742), true, '#');
      assertEquals("i2l", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("#!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "f6244g9lSA()$qp";
      try { 
        Utility.methodSignatureReturnType("f6244g9lSA()$qp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$qp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.setBit(35, 58);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      objectArray0[3] = (Object) (byte) (-82);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("{java.lang.Object@5149e81d, java.lang.Object@a4adfde, java.lang.Object@25acb588, java.lang.Object@1a7abf0a, java.lang.Object@4eda558}");
      try { 
        Utility.typeOfSignature("{java.lang.Object@5149e81d, java.lang.Object@a4adfde, java.lang.Object@25acb588, java.lang.Object@1a7abf0a, java.lang.Object@4eda558}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@5149e81d, java.lang.Object@a4adfde, java.lang.Object@25acb588, java.lang.Object@1a7abf0a, java.lang.Object@4eda558}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte) (-31);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, (int) (byte) (-31));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "iht";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 4711, 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("a*WI[;gHL;'", false);
      String string0 = Utility.compactClassName("a*WI[;gHL;'", " [@8", false);
      assertEquals("a*WI[;gHL;'", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("a$wWI$5b$3bgHL$3b$t", string1);
      
      byte[] byteArray1 = Utility.decode("Dwh5}r3hJ%hd", false);
      assertEquals(12, byteArray1.length);
      
      int int0 = Utility.clearBit(78, 1);
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("dstore_2");
      assertEquals((short)73, short0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.setBit(39, 58);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      Utility.printArray(objectArray0, false, false);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(193);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 58, 39, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = Utility.clearBit((-2514), (-2514));
      assertEquals((-18898), int0);
      
      byte byte0 = Utility.typeOfSignature("Lifnull;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.convertString("");
      int int0 = Utility.clearBit(905, 905);
      assertEquals(393, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.convertString("[\t\t%");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)51;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-223), (-210), false);
      Utility.compactClassName("[\t\t%", false);
      try { 
        Utility.methodSignatureReturnType("^`gOSEbj5WpZ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^`gOSEbj5WpZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.compactClassName("return");
      String string0 = Utility.compactClassName("return", "freturn", true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("X\"NDM0+[-7>>4v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X\"NDM0+[-7>>4v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)32;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-5293), (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    lload_2
         // 2:    <illegal opcode>
         // 3:    lload_2
         // 4:    dload_2
         // 5:    lload_2
         // 6:    dload_3
         // 7:    istore_1
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)17;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-89);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 152, (-1888));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, 'G');
      assertEquals("0", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)64;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "0";
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) (byte)64;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "0";
      objectArray0[5] = (Object) (byte)64;
      objectArray0[6] = (Object) (byte) (-94);
      Utility.printArray(objectArray0, true, true);
      String string2 = Utility.classOrInterface((-1104));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.compactClassName("iht", "iht", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("public");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1796, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48573. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Integer integer0 = new Integer((-1726));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)67;
      byteArray0[2] = (byte) (-33);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), (int) (byte) (-101));
      assertEquals("0:    iflt\t\t#-25633\n3:    fstore_0\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('>');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "Mw?EBALjQ";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("Mw?EBALjQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mw?EBALjQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "B!!B";
      Utility.replace("B!!B", "tF)e", "B!!B");
      Utility.isSet((-1691), (-1691));
      Utility.accessToString((-1691));
      try { 
        Utility.methodSignatureArgumentTypes("public protected synchronized volatile native strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected synchronized volatile native strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")\t";
      objectArray0[1] = (Object) ")\t";
      objectArray0[2] = (Object) ")\t";
      objectArray0[3] = (Object) ")\t";
      objectArray0[4] = (Object) ")\t";
      objectArray0[5] = (Object) ")\t";
      objectArray0[6] = (Object) ")\t";
      objectArray0[7] = (Object) ")\t";
      objectArray0[8] = (Object) ")\t";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.compactClassName("", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("Invalid signature: ", false);
      assertEquals("int", string0);
      
      String string1 = Utility.compactClassName("getstatic");
      assertEquals("getstatic", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Re%bmT*2km#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Re%bmT*2km#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      int int0 = 14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 14, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.methodSignatureReturnType("Vi@4f^iJa|R[cS2CSIv");
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("NU7hwu", false);
      try { 
        Utility.methodSignatureReturnType("java.class.path");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.class.path'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dreturn";
      Utility.methodTypeToSignature("dreturn", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = "6q'`(7E";
      try { 
        Utility.typeOfSignature("6q'`(7E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6q'`(7E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      String string0 = Utility.compactClassName(":");
      assertEquals(":", string0);
      
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-45);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-21);
      byteArray1[1] = (byte) (-21);
      byteArray1[2] = (byte) (-65);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Utility.signatureToString("Bm");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("a*WI[;gHL;'", false);
      Utility.compactClassName("a*WI[;gHL;'", " [@8", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = (byte)70;
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[|]>Uc}uhYV^68+))");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [|]>Uc}uhYV^68+))
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("1d cb e5 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1d cb e5 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.typeOfSignature("J'R5n:`\"#{NY");
      Utility.methodSignatureReturnType("J'R5n:`\"#{NY", true);
      try { 
        Utility.methodSignatureReturnType("long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(51, 51, (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("^uKzkF+k'PC^*\"]", "@:8<-V%", "@:8<-V%", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^uKzkF+k'PC^*\"]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit(173, 24);
      assertEquals(173, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("X#7:U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X#7:U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = ",%~8\\|O'<<TcJE[/";
      // Undeclared exception!
      try { 
        Utility.getSignature(",%~8|O'<<TcJE[/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      try { 
        Utility.decode("[$-S#3", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      Integer integer0 = new Integer((byte)93);
      String string0 = "7P9+$";
      try { 
        Utility.typeOfSignature("7P9+$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7P9+$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.convertString("LC8Y\"");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        constantPool1.constantToString((int) (byte)108, (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 108. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 998, true, '7');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Integer integer0 = new Integer((-1726));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.replace("i2d", "i2d", "IUTMypLqXvKC{zyFm.k");
      assertEquals("IUTMypLqXvKC{zyFm.k", string0);
      
      String string1 = Utility.convertString("i2d");
      assertEquals("i2d", string1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-14);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-531), (-3157));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.methodSignatureReturnType("LdW]eA^/p7sHa#-$Zx;V");
      try { 
        Utility.typeOfMethodSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(l&u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (l&u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.accessToString((-1853));
      byte[] byteArray0 = Utility.decode("public private volatile transient strictfp synthetic annotation enum", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1931), (-2568));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1659, 2987);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) constantLong0;
      objectArray0[1] = (Object) "ineg";
      objectArray0[2] = (Object) constantArray0[1];
      objectArray0[3] = (Object) "ineg";
      // Undeclared exception!
      try { 
        constantPool0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("FD!@", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-96);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 47
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.signatureToString("VeT]QEg", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null}", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "iastore");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.searchOpcode("fload_");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-95), (-2772));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_2
         // 1:    ifgt\t\t#-10444
         // 4:    caload
         // 5:    iconst_2
         // 6:    astore_1
         // 7:    lshr
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.compactClassName("fcmpg", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, (int) (byte) (-110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.compactClassName("dreturn");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-127);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "{Zj_";
      stringArray0[2] = "lstore_3";
      byteSequence0.readByte();
      stringArray0[3] = "lstore_3";
      stringArray0[4] = "lstore_3";
      stringArray0[5] = "lstore_3";
      stringArray0[6] = "lstore_3";
      try { 
        Utility.methodTypeToSignature("lstore_3", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "!FhO";
      try { 
        Utility.typeOfMethodSignature("!FhO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !FhO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, 1404);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "'Y";
      try { 
        Utility.methodSignatureArgumentTypes("'Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.fillup("", (-4032), false, '/');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-4032), (-4032));
      try { 
        Utility.decode("new", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("D#Jw;X~='h3", false);
      Utility.compactClassName(" [@8", " [@8", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = Utility.classOrInterface(153);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)39;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$3d$d1LU$r$Z$LR$t$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $3d$d1LU$r$Z$LR$t$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)53;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("g5NR]E.`bKl");
      try { 
        Utility.typeOfSignature("static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.clearBit((-132), (-132));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "g^Uan60\\M3sCG Af`'";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g^Uan60M3sCG Af`'";
      stringArray0[1] = "g^Uan60M3sCG Af`'";
      stringArray0[2] = "g^Uan60M3sCG Af`'";
      stringArray0[3] = "g^Uan60M3sCG Af`'";
      stringArray0[4] = "g^Uan60M3sCG Af`'";
      stringArray0[5] = "g^Uan60M3sCG Af`'";
      stringArray0[6] = "g^Uan60M3sCG Af`'";
      stringArray0[7] = "lreturn";
      Utility.methodTypeToSignature("g^Uan60M3sCG Af`'", stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("int");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream1 = new MockPrintStream(filterOutputStream0, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "(Lg^Uan60M3sCG;Lg^Uan60M3sCG;Lg^Uan60M3sCG;Lg^Uan60M3sCG;Lg^Uan60M3sCG;Lg^Uan60M3sCG;Lg^Uan60M3sCG;Llreturn;)Lg^Uan60M3sCG;");
      Utility.printArray(printStream0, (Object[]) stringArray0);
      Utility.searchOpcode("RuntimeInvisibleAnnotations");
      String string1 = "\"";
      try { 
        Utility.decode("\"", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("org.apache.bcel.util.ClassPath$PathEntry");
      try { 
        Utility.typeOfSignature("org.apache.bcel.util.ClassPath$PathEntry");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.util.ClassPath$PathEntry
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)53;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-198), (int) (byte)123);
      assertEquals("0:    ladd\n1:    lshr\n2:    saload\n", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)3;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("\"I)Fs,dp>l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"I)Fs,dp>l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RSH&w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RSH&w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J\"E_#H|si#,B9");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("aload_2", 2548, true, 'h');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.signatureToString("C0@1}IED@T9GeaEWa&", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1357, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q^6WO_!0s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q^6WO_!0s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.clearBit(57, 116);
      try { 
        Utility.typeOfSignature("YXc)vKDrz7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YXc)vKDrz7J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-84);
      byteArray1[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.compactClassName("QM/MPi].q0C?l53}{@f", "ixor", true);
      try { 
        Utility.methodSignatureArgumentTypes("'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.signatureToString("ZIy7hHS gq^ug;F");
      try { 
        Utility.methodSignatureArgumentTypes("T%8oOX|+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T%8oOX|+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-59);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("2a c5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2a c5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "PR+j>1[~Q}(cU ";
      int int0 = 203;
      Utility.fillup("z/+", 203, true, '|');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = 85;
      Utility.isSet(203, 85);
      byte[] byteArray0 = Utility.decode("z/+", false);
      String string1 = " [@8";
      Utility.compactClassName(" [@8", "PR+j>1[~Q}(cU ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = "|zj.A98gc_K {U{y~'";
      boolean boolean0 = true;
      int int2 = 177;
      LocalVariable[] localVariableArray0 = new LocalVariable[9];
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, 2837);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R>KJx:dK.7b", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R>KJx:dK.7b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Yqiir_%";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Yqiir_%";
      objectArray0[3] = (Object) "Yqiir_%";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("iload\t\t%0");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n(6ga0yfUD>>l=(G/U");
      try { 
        Utility.methodSignatureArgumentTypes("(l&u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l&u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-1649));
      byteSequence0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "\"java.lang.Object@3cfeba6c\", \"java.lang.Object@3cfeba6c\", \"java.lang.Object@2e5c9340\", \"java.lang.Object@3cfeba6c\", \"java.lang.Object@3cfeba6c\", \"java.lang.Object@3cfeba6c\"";
      objectArray1[1] = (Object) (byte)121;
      Utility.printArray(objectArray1);
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaWriter");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = Utility.compactClassName("LdW]eA^/p7s?Ha-$x;V", "", true);
      assertEquals("LdW]eA^.p7s?Ha-$x;V", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Utility.compactClassName("iht", "iht", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)93;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)91, 167);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24667. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.compactClassName("class", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "The wildcard must not be null", "k&Ec(ShCyQ0#9^b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.setBit(1652, 96);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -122
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) (byte) (-114);
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Utility.replace("invokeinterface", "invokeinterface", "invokeinterface");
      Utility.isJavaIdentifierPart(')');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", "invokeinterface", "transient", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("astore_1", false);
      assertEquals("astore_1", string0);
      
      int int0 = Utility.clearBit((byte)76, (byte) (-8));
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.convertString("%d%$E=$ z&@kM-");
      Utility.classOrInterface(1454);
      Utility.format((-84), (-84), false, '=');
      Utility.clearBit((-84), 39);
      Utility.isSet(39, 0);
      Utility.isJavaIdentifierPart('=');
      Utility.searchOpcode("-84");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.MethodParameters", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.MethodParameters'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jsr_w";
      stringArray0[1] = "jsr_w";
      stringArray0[2] = "jsr_w";
      stringArray0[3] = "jsr_w";
      stringArray0[4] = "long";
      stringArray0[5] = "k#@n&0S-@2~_+yQ";
      String string0 = Utility.methodTypeToSignature("jsr_w", stringArray0);
      assertEquals("(Ljsr_w;Ljsr_w;Ljsr_w;Ljsr_w;JLk#@n&0S-@2~_+yQ;)Ljsr_w;", string0);
      
      String string1 = Utility.methodSignatureToString("(Ljsr_w;Ljsr_w;Ljsr_w;Ljsr_w;JLk#@n&0S-@2~_+yQ;)Ljsr_w;", "PMGClas(", "(Ljsr_w;Ljsr_w;Ljsr_w;Ljsr_w;JLk#@n&0S-@2~_+yQ;)Ljsr_w;");
      assertEquals("(Ljsr_w;Ljsr_w;Ljsr_w;Ljsr_w;JLk#@n&0S-@2~_+yQ;)Ljsr_w; jsr_w PMGClas((jsr_w arg1, jsr_w arg2, jsr_w arg3, jsr_w arg4, long arg5, k#@n&0S-@2~_+yQ arg7)", string1);
      
      short short0 = Utility.searchOpcode("jsr_w");
      assertEquals((short)201, short0);
      
      String string2 = Utility.convertString("k#@n&0S-@2~_+yQ");
      assertEquals("k#@n&0S-@2~_+yQ", string2);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("42 4c f8 6d 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "'Mp'^w/";
      objectArray0[1] = (Object) "'Mp'^w/";
      objectArray0[2] = (Object) "'Mp'^w/";
      objectArray0[3] = (Object) "'Mp'^w/";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.toHexString(byteArray0);
      Object object1 = new Object();
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) (byte)91;
      objectArray1[1] = (Object) "'Mp'^w/";
      objectArray1[2] = (Object) (byte)91;
      objectArray1[3] = object1;
      objectArray1[4] = object1;
      objectArray1[5] = (Object) (byte)91;
      objectArray1[6] = object0;
      objectArray1[7] = (Object) constantPool0;
      Utility.printArray(objectArray1, true);
      try { 
        Utility.typeOfSignature("'Mp'^w/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'Mp'^w/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((-839));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5998, (-839));
      constantInteger0.setBytes((byte) (-64));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      byteSequence1.mark((-839));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString((int) (byte)117, true);
      try { 
        Utility.typeOfMethodSignature("public protected final volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected final volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.printArray((Object[]) null, true, true);
      String string0 = "java.lang.Float";
      try { 
        Utility.typeOfMethodSignature("java.lang.Float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-32);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4875, 4875);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = Utility.signatureToString("B/K~Gr-`", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (-22));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "areturn";
      stringArray0[1] = "areturn";
      stringArray0[2] = "areturn";
      stringArray0[3] = "areturn";
      stringArray0[4] = "areturn";
      stringArray0[5] = "areturn";
      stringArray0[6] = "areturn";
      stringArray0[7] = "areturn";
      stringArray0[8] = "areturn";
      Utility.methodTypeToSignature("areturn", stringArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte byte0 = (byte)109;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes(")\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = Utility.convertString("[\t\t%");
      assertEquals("[\t\t%", string0);
      
      byte byte0 = Utility.typeOfSignature("Z`7m/");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)27;
      Utility.encode(byteArray0, true);
      String string0 = "8\"YcC)rts3h)PdQQn";
      try { 
        Utility.typeOfSignature("8\"YcC)rts3h)PdQQn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8\"YcC)rts3h)PdQQn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.accessToString(629);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)94;
      byteArray0[4] = (byte) (-113);
      Utility.compactClassName("Mz7icHF&I2L");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)47;
      objectArray0[1] = (Object) "Mz7icHF&I2L";
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("AQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.format((byte)10, 196, true, 'v');
      assertEquals("10vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)90;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$feF$R$d5$s$f8y$83Z", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false);
      Utility.fillup("{}", 76, false, 'M');
      boolean boolean0 = true;
      Utility.compactClassName("E(L\"Nl#[X5", true);
      Utility.isSet(76, 56);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("Zm8t[x5[HG{ijvv@zz");
      assertEquals("Zm8t[x5[HG{ijvv@zz", string1);
      
      short short0 = Utility.searchOpcode("anewarray");
      assertEquals((short)189, short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-3);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("22 3c 50 d3 73 c7 89 fd", string2);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Na", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Na'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore\t\t%91", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("3a 5b", string1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "[N1PM]]3tJU8gJ";
      try { 
        Utility.methodSignatureReturnType("[N1PM]]3tJU8gJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N1PM]]3tJU8gJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%30", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7, 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-101);
      byte byte0 = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)87);
      constantArray0[0] = (Constant) constantInteger0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte) (-53);
      byteArray1[2] = (byte) (-101);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte) (-79));
      Utility.methodTypeToSignature("4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", (String[]) null);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "(", "x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Utility.compactClassName("IM]b-", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("IM]b-", stringArray0);
      Utility.methodSignatureToString("()LIM]b-;", "()LIM]b-;", "IM]b-");
      String string0 = "mT5^i,S#W";
      try { 
        Utility.methodSignatureReturnType("mT5^i,S#W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `mT5^i,S#W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.clearBit(57, (-2684));
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-59);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Utility.convertString("[\t\t%");
      Utility.replace("lushr", "[\t\t%", "V`7p%) ]2RB=/{");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[\t\t%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "YXc)vKDrz7J";
      stringArray0[1] = ", ";
      stringArray0[2] = "YXc)vKDrz7J";
      Utility.methodTypeToSignature(", ", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)122, false);
      try { 
        Utility.typeOfMethodSignature("private static final synchronized volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private static final synchronized volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(0, 0, false, 'N');
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.classOrInterface(153);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      String string0 = "char";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      Utility.methodTypeToSignature("char", stringArray0);
      Utility.printArray((Object[]) stringArray0, true);
      try { 
        Utility.typeOfSignature("(C)C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (C)C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, (-1726));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-15);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertEquals("if_icmpgt\t\t#-23645", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: PadZing byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: PadZing byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.decode("", false);
      Utility.fillup("#A{AI5", 0, false, ':');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "#A{AI5";
      objectArray0[1] = (Object) "#A{AI5";
      Utility.printArray(objectArray0, false, false);
      Utility.methodSignatureReturnType("Illegal type for StackMapType: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("#A{AI5", "jky7n3?AP", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #A{AI5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("UNU)2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      try { 
        Utility.typeOfSignature(".99wQ&tEg0m0/hm2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .99wQ&tEg0m0/hm2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.format(76, 76, true, '0');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "7600000000000000000000000000000000000000000000000000000000000000000000000000";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "7600000000000000000000000000000000000000000000000000000000000000000000000000";
      objectArray0[5] = (Object) "7600000000000000000000000000000000000000000000000000000000000000000000000000";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Utility.compactClassName("lreturn");
      Utility.replace("(=uR|R9", "(=uR|R9", "};zD96=a");
      try { 
        Utility.methodSignatureReturnType("KiNa,;[?*7u\"8V*vS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KiNa,;[?*7u\"8V*vS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.convertString("[\t\t%");
      int int0 = 20;
      Utility.fillup("[\t\t%", 20, false, '\"');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(20, 20);
      // Undeclared exception!
      try { 
        Utility.decode("CW`><+D$9~jG\"x]x2,", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-84);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (-2970));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-`)D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -`)D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = "\tdefault = ";
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("\tdefault = ", (String[]) null);
      try { 
        Utility.typeOfSignature("Wo!BcJs4\"Iu/=_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wo!BcJs4\"Iu/=_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = Utility.convertString("[\t\t%");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("()S", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("f4", string1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("K\"LC8Y\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K\"LC8Y\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-3);
      byteArray0[7] = (byte)64;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(":r1\"R", "<k/!zbXyQ", ":r1\"R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :r1\"R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[2] = (byte) (-79);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = Utility.fillup(" arg", (-4032), false, '\"');
      assertEquals(" arg", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet((-4032), (-4032));
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode(" arg", false);
      String string1 = Utility.compactClassName("Ti)\"", ", class=", true);
      assertEquals("Ti)\"", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_2", string2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("ifge\t\t#10271");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Utility.compactClassName("*", "*", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.classOrInterface(86);
      try { 
        Utility.typeOfSignature("@X}V)+l/dN]G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @X}V)+l/dN]G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte) (-8);
      byteSequence0.read(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnull\t\t#3", string0);
      
      short short0 = Utility.searchOpcode("ifnull\t\t#3");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.getSignature("ldiv");
      assertEquals("Lldiv;", string1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X#7:U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X#7:U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "{}";
      objectArray1[1] = (Object) "{}";
      objectArray1[2] = (Object) "{}";
      objectArray1[3] = (Object) "{}";
      Utility.printArray(objectArray1);
      int int0 = (-2425);
      Utility.accessToString((-2425));
      String string0 = "<";
      boolean boolean0 = true;
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.replace("q>VpVVXg</E0sSm\"", "\t", (String) null);
      Utility.typeOfSignature("Dv[HsES");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Ud%]p4n.xc;]c2", "N)c2:d}#v.8PQkoi", "NewObject", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ud%]p4n.xc;]c2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "org.apache.bcel.classfile.Utility", "The list of names must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yqiir_%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yqiir_%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-14);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-531), (-3157));
      Utility.getSignature("OH::!oJQ;.K`9");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), 14, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokeinterface", ">;", "invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Utility.format(0, 0, true, 'G');
      Utility.getSignature("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)0, true, 'A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.classOrInterface((-1314));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)87;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("interface");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (-1153), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.format((-573), 304, true, 'a');
      assertEquals("-573aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) "-573aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
      objectArray0[2] = (Object) (byte)56;
      objectArray0[3] = (Object) (byte)56;
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) (byte)56;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) byteSequence0;
      Utility.printArray(objectArray0, true, true);
      short short0 = Utility.searchOpcode("Invalid signature: ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-79));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("0:    areturn\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    areturn
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.compactClassName(" extends ", " extends ", false);
      assertEquals(" extends ", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      short short0 = Utility.searchOpcode("X;;@Ep;*+");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ", npairs = ";
      stringArray0[1] = "X;;@Ep;*+";
      stringArray0[2] = "X;;@Ep;*+";
      stringArray0[3] = "X;;@Ep;*+";
      String string0 = Utility.methodTypeToSignature("X;;@Ep;*+", stringArray0);
      assertEquals("(L,;LX;;@Ep;*+;LX;;@Ep;*+;LX;;@Ep;*+;)LX;;@Ep;*+;", string0);
      
      int int0 = Utility.clearBit((short) (-1), (short) (-1));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)32;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 163, 497);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      short short0 = Utility.searchOpcode("fstore_2");
      assertEquals((short)69, short0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = Utility.signatureToString("Dont call getValueByte() on a non BYTE ElementValue", true);
      assertEquals("double", string0);
      
      String string1 = Utility.convertString("Dont call getValueByte() on a non BYTE ElementValue");
      assertEquals("Dont call getValueByte() on a non BYTE ElementValue", string1);
      
      String string2 = Utility.classOrInterface(785);
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("S|}90v");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-80);
      byteArray0[2] = (byte) (-79);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)105;
      byteArray0[4] = (byte)105;
      byteArray0[8] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)105, 2043);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)105, (byte)105);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2043, (byte)105);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(9, (byte)105);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      constantMethodref0.toString();
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantMethodref0.setNameAndTypeIndex((byte)105);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfSignature("o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-102);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-102), (int) (byte) (-102));
      String string1 = Utility.convertString("0:    nop\n1:    ifne\t\t#1\n4:    nop\n");
      assertEquals("0:    nop\\n1:    ifne\t\t#1\\n4:    nop\\n", string1);
      
      String string2 = Utility.compactClassName("0:    nop\n1:    ifne\t\t#1\n4:    nop\n");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "(+FpLw{h%-LZo";
      objectArray0[3] = (Object) "(+FpLw{h%-LZo";
      Object object0 = new Object();
      Utility.printArray(objectArray0, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      Utility.codeToString(byteArray0, constantPool0, (-201), 316, true);
      Utility.compactClassName("{null, \"(+FpLw{h%-LZo\", null, \"(+FpLw{h%-LZo\", null, null, null}", true);
      try { 
        Utility.methodSignatureReturnType("* k&6ta{x+(w8", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `* k&6ta{x+(w8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)53;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("ishl", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = "ayKcLO5^4U| %'xh+";
      // Undeclared exception!
      try { 
        Utility.signatureToString("ayKcLO5^4U| %'xh+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ayKcLO5^4U| %'xh+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = Utility.replace("5NP^o", " ", " ");
      String string1 = Utility.compactClassName("5NP^o", "The FileFilter must not be null", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.accessToString(127);
      try { 
        Utility.typeOfSignature("public private protected static final synchronized volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final synchronized volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.typeOfSignature("E7^r5=+E/?vQyX5UpK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E7^r5=+E/?vQyX5UpK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-280), (-54));
      assertEquals("0:    land\n1:    land\n2:    dup_x1\n3:    lconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#-20027", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.clearBit(57, (-2684));
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.compactClassName(",Lm6-H8}r8z^O8k_2");
      Utility.replace("H5xj@&:Wen", ",Lm6-H8}r8z^O8k_2", "H5xj@&:Wen");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = "IM]b-";
      boolean boolean0 = false;
      Utility.compactClassName("IM]b-", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("IM]b-", stringArray0);
      String string1 = "LYXc)vKDrz7J;V";
      Utility.methodSignatureToString("()LIM]b-;", "IM]b-", "LYXc)vKDrz7J;V", false);
      String string2 = "mT5^i,S#W";
      try { 
        Utility.methodSignatureReturnType("mT5^i,S#W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `mT5^i,S#W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpgt\t\t#-23645", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = Utility.compactClassName("Lladd;V", "Lladd;V", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("bastore", string1);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)108;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(1564.38);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.signatureToString("V` M!{[,=!S");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Integer integer0 = new Integer((-1726));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.isSet((-4058), 16384);
      String string0 = "}BNH?|KcQ#W B};1$A";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "}BNH?|KcQ#W B};1$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      Utility.printArray(objectArray0, true, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, (-28), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">}>f'``cOsky4|r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >}>f'``cOsky4|r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.setBit(39, 58);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("{java.lang.Object@1282f224, java.lang.Object@65a1e0d5, java.lang.Object@bbee986, java.lang.Object@1e86185c, java.lang.Object@1b10da7a}");
      try { 
        Utility.typeOfSignature("{java.lang.Object@1282f224, java.lang.Object@65a1e0d5, java.lang.Object@bbee986, java.lang.Object@1e86185c, java.lang.Object@1b10da7a}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@1282f224, java.lang.Object@65a1e0d5, java.lang.Object@bbee986, java.lang.Object@1e86185c, java.lang.Object@1b10da7a}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)0;
      byte byte1 = (byte)106;
      byteArray0[6] = (byte)106;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-854), (-854), false, 'r');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)118;
      byte byte0 = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-4058), 16384);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-68);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.accessToString((int) (byte)68);
      assertEquals("protected volatile", string0);
      
      String string1 = Utility.compactClassName("monitorenter", false);
      assertEquals("monitorenter", string1);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-14);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-538), (-3157));
      Utility.getSignature("0:    iload_1\n1:    iload_1\n2:    dload_3\n3:    <illegal opcode>\n4:    <illegal opcode>\n");
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), 14, false);
      String string0 = "jSQNAuj[|A|";
      try { 
        Utility.typeOfMethodSignature("jSQNAuj[|A|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jSQNAuj[|A|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Integer integer0 = new Integer((-1726));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("i2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte)2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Integer integer0 = new Integer(90);
      try { 
        Utility.typeOfSignature("5jE9C!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5jE9C!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)53;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)53;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)110);
      assertEquals("0:    nop\n1:    saload\n2:    nop\n3:    fdiv\n4:    saload\n", string0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-32);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)65;
      byteArray1[4] = (byte) (-107);
      byteArray1[5] = (byte)76;
      byteArray1[6] = (byte)65;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.convertString("[\t\t%");
      assertEquals("[\t\t%", string0);
      
      String string1 = Utility.compactClassName("checkcast", "[\t\t%", false);
      assertEquals("checkcast", string1);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dastore", string2);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ladd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ladd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = ", ";
      stringArray0[2] = "YXc)vKDrz7J";
      String string0 = Utility.compactClassName("YXc)vKDrz7J");
      assertEquals("YXc)vKDrz7J", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)23;
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.replace("ishr", ", ", "YXc)vKDrz7J");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      String string0 = Utility.methodTypeToSignature("char", stringArray0);
      assertEquals("(C)C", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%0", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("38 00", string2);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      Object[] objectArray0 = new Object[21];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, true);
      Constant[] constantArray0 = new Constant[7];
      // Undeclared exception!
      try { 
        Constant.readConstant((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LjbtG(_rSg+$<Hf", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LjbtG(_rSg+$<Hf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      String string1 = Utility.methodSignatureReturnType("L;");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.getSignature("Invalid type: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Utility.compactClassName("int", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-31);
      byteArray0[4] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte)6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      char char0 = '\"';
      Utility.fillup(" arg", (-4032), false, '\"');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-4032), (-4032));
      byte[] byteArray0 = Utility.decode(" arg", false);
      boolean boolean0 = true;
      Utility.compactClassName("Ti)\"", ", class=", true);
      Utility.getSignature("Ti)\"");
      Utility.compactClassName(", class=", ", class=", false);
      int int0 = 195;
      Utility.classOrInterface(195);
      Utility.toHexString(byteArray0);
      int int1 = 20;
      Utility.setBit(20, 20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("invokeinterface");
      Utility.decode("hShC4+vg@e0R#hN", false);
      try { 
        Utility.typeOfSignature(", class=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , class=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[0];
      int int0 = 57;
      Utility.clearBit(57, (-449));
      Utility.printArray(objectArray0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-449), (-449));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(176, 1240, true, 'k');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = "&G(`";
      try { 
        Utility.typeOfSignature("&G(`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &G(`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("ES:guPI");
      Utility.isJavaIdentifierPart('s');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (int) (byte)41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "LC8Y\"";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LC8Y\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LC8Y\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      int int0 = Utility.clearBit(232, 116);
      assertEquals(232, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dmul", string1);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fadd", string0);
      
      String string1 = Utility.accessToString((int) (byte)98);
      assertEquals("private synchronized volatile", string1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.convertString("'Y");
      int int0 = (-80);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 97
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#P", false);
      String string0 = Utility.compactClassName("", "d.@p~&}x", false);
      assertEquals("", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)35, (byte)80}, byteArray0);
      assertEquals("lastore", string2);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = Utility.replace("}E- 0Amt", "}E- 0Amt", "C-6 vUOwd");
      assertEquals("C-6 vUOwd", string0);
      
      byte[] byteArray0 = Utility.decode("kfgC#Js&!==2:js", false);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.convertString("[\t\t%");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#31651", string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(5, byteSequence0.getIndex());
      
      Utility.clearBit((byte) (-126), 90);
      String string0 = Utility.compactClassName("jsr\t\t#-32227");
      assertEquals("jsr\t\t#-32227", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Integer integer0 = new Integer((-1726));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iflt\t\t#-21113", string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      try { 
        Utility.typeOfSignature("352{3`K4:1n<o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 352{3`K4:1n<o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)53;
      byteArray0[0] = (byte) (-119);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("BWs9W");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.fillup("BWs9W", 239, false, '/');
      assertEquals("//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////BWs9W", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.classOrInterface(0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-55);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("F$ff$ff$bf$ffZ$c9", string0);
      
      byte[] byteArray1 = Utility.decode("F$ff$ff$bf$ffZ$c9", false);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-1), (byte) (-1), (byte) (-65), (byte) (-1), (byte)90, (byte) (-55)}, byteArray1);
      assertEquals(7, byteArray1.length);
      
      String string1 = Utility.format(80, (byte) (-1), false, 'c');
      assertEquals("80", string1);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)70;
      Utility.equals(byteArray2, byteArray1);
      try { 
        Utility.typeOfSignature("U;&9J?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U;&9J?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("{null, java.lang.Object@7fd687e2, java.lang.Object@4f50aba7, java.lang.Object@557616a5, null}");
      try { 
        Utility.typeOfSignature("{null, java.lang.Object@7fd687e2, java.lang.Object@4f50aba7, java.lang.Object@557616a5, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null, java.lang.Object@7fd687e2, java.lang.Object@4f50aba7, java.lang.Object@557616a5, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[2];
          byteArray0[0] = (byte) (-106);
          byteArray0[1] = (byte) (-106);
          ByteSequence byteSequence0 = new ByteSequence(byteArray0);
          Utility.codeToString(byteSequence0, (ConstantPool) null, true);
          FileSystemHandling.shouldAllThrowIOExceptions();
          Utility.codeToString(byteSequence0, (ConstantPool) null, true);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor106.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = Utility.compactClassName("VO*");
      assertEquals("VO*", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertNotNull(string1);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = Utility.convertString("PN79M?N4\"OvFN+R(+");
      assertEquals("PN79M?N4\\\"OvFN+R(+", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-80);
      byte[] byteArray1 = Utility.decode("mOC~$", false);
      Utility.encode(byteArray1, false);
      Utility.setBit((byte) (-80), 174);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName(", ", "BV", false);
      assertEquals(", ", string0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(0, 0, false, 'N');
      assertEquals("0", string0);
      
      String string1 = Utility.getSignature("0");
      assertEquals("L0;", string1);
      
      int int0 = Utility.clearBit(0, 1394);
      assertEquals(0, int0);
  }
}
