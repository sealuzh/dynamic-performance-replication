/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:08:37 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Map<Map<Object, Object>, Integer>> hashMap0 = new HashMap<String, Map<Map<Object, Object>, Integer>>();
      DoubleKeyMap<String, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, Integer>(hashMap0);
      HashMap<Map<Object, Object>, Integer> hashMap1 = new HashMap<Map<Object, Object>, Integer>();
      hashMap0.put("jy_X':-S>N)FmwxG", hashMap1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>(990);
      doubleKeyMap0.remove("jy_X':-S>N)FmwxG", (Map<Object, Object>) hashMap2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0, class0);
      Integer integer0 = new Integer(2462);
      Integer integer1 = new Integer(2462);
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Integer, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put(integer0, map0);
      String string0 = doubleKeyMap0.get(integer0, integer1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0, class0);
      Integer integer0 = new Integer(2462);
      doubleKeyMap0.put(integer0, integer0, "#");
      String string0 = doubleKeyMap0.get(integer0, integer0);
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>((Map<Object, Map<Integer, String>>) null);
      Map<Integer, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Integer, Map<Integer, Object>> hashMap0 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(1182);
      doubleKeyMap0.put(integer0, integer0, (Object) integer0);
      Integer integer1 = new Integer(3131);
      doubleKeyMap0.remove(integer0, integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>((Map<Object, Map<Integer, String>>) null);
      String string0 = doubleKeyMap0.remove((Object) ",<V`,\">", integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0, class0);
      Integer integer0 = new Integer(2462);
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Integer, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put(integer0, map0);
      String string0 = doubleKeyMap0.put(integer0, integer0, "#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashMap<Object, Map<HashMap<String, String>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, Object>>();
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Object object0 = doubleKeyMap0.put((Object) null, hashMap1, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DoubleKeyMap<String, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Integer, String>>();
      Map<Integer, HashMap<Integer, String>> map0 = doubleKeyMap0.remove(",<V`,\">");
      assertNull(map0);
  }
}
