/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:16:12 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)37;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = "Unexpected hex digit: ";
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("Unexpected hex digit: ", charset0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 56, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=56 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(56320);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64();
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.toAsciiUppercase();
      byteString1.lastIndexOf(byteString0);
      byteString1.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(1160);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)24;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      String string0 = byteString0.toString();
      assertEquals("[hex=0b]", string0);
      
      byteString1.rangeEquals((int) (byte)11, byteString0, (int) (byte)11, (int) (byte)11);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\"x;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \"x;
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteString1, 3);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("q)P.!b");
      byteString0.EMPTY.sha512();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(16, (-48));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byte[] byteArray0 = new byte[1];
      HashingSink.sha512(pipe_PipeSink0);
      byteArray0[0] = (byte)0;
      byteString0.startsWith(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString1.write(buffer0);
      byteString0.write(buffer0);
      pipe0.sinkClosed = false;
      byteString0.utf8();
      byteString0.toString();
      byteString1.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)0, 1835);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(16)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("J~T:?lF|Xc_r [}x", 55);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset1.encode("?SSE]TKZKNF`");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      charset0.decode(byteBuffer1);
      ByteString byteString0 = ByteString.encodeString("?SSE]TKZKNF`", charset0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (-4170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byte[] byteArray0 = new byte[1];
      HashingSink.sha512(pipe_PipeSink0);
      byteArray0[0] = (byte)0;
      byteString0.startsWith(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString0.indexOf(byteArray0, (int) (byte)0);
      byteString0.endsWith(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteString0.indexOf(byteArray1, (int) (byte)0);
      ByteString byteString2 = byteString1.sha256();
      byteString2.sha1();
      byteString0.utf8();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (-4200));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)11, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString1);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      HashingSink hashingSink2 = HashingSink.sha512(realBufferedSink0);
      byteString2.startsWith(byteArray0);
      Buffer buffer1 = new Buffer();
      ByteString byteString3 = byteString0.toAsciiLowercase();
      byteString0.write(realBufferedSink0.buffer);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString3;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString2;
      byteStringArray0[3] = byteString2;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString4 = options0.get((byte)0);
      byteString4.write(buffer0);
      byteString0.utf8();
      ByteString byteString5 = hashingSink2.hash();
      byteString5.toString();
      byteString5.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString2.substring(1150, (-150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-49);
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        byteString0.getByte(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.substring((int) (byte)9);
      assertEquals(0, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("G\"x;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: G
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=0b]", string0);
      
      ByteString byteString1 = byteString0.sha256();
      boolean boolean0 = byteString1.EMPTY.rangeEquals((int) (byte)11, byteString0, 1, (int) (byte)11);
      assertFalse(boolean0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString0.hmacSha1(byteString2);
      int int0 = byteString3.EMPTY.indexOf(byteString0);
      ByteString byteString4 = new ByteString(byteArray0);
      int int1 = byteString3.lastIndexOf(byteArray0, 7);
      assertTrue(int1 == int0);
      
      byteString2.hex();
      assertTrue(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=0b]", string0);
      
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString1);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      HashingSink hashingSink2 = HashingSink.sha512(realBufferedSink0);
      boolean boolean0 = byteString2.startsWith(byteArray0);
      Buffer buffer1 = new Buffer();
      ByteString byteString3 = byteString0.toAsciiLowercase();
      byteString0.write(realBufferedSink0.buffer);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString3;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString2;
      byteStringArray0[3] = byteString2;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString4 = options0.get((byte)0);
      byteString4.write(buffer0);
      byteString0.utf8();
      hashingSink2.hash();
      int int0 = byteString3.lastIndexOf(byteArray0, (-276));
      assertEquals((-1), int0);
      
      byteString3.base64Url();
      assertTrue(byteString3.equals((Object)byteString1));
      
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.indexOf(byteString1, 3);
      assertEquals((-1), int0);
      
      int int1 = ByteString.codePointIndexToCharIndex("CRC", 51);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pipe pipe0 = new Pipe(1188L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha256(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.sha512(hashingSink0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteString0.startsWith(byteArray0);
      Buffer buffer1 = new Buffer();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.indexOf(byteString2, 98);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("5GyJ]&Z.p[WB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: G
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte) (-112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeHex("");
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      assertEquals(0, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pipe pipe0 = new Pipe(958L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)53;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString0);
      HashingSink hashingSink1 = HashingSink.hmacSha1(hashingSink0, byteString0);
      ByteString byteString1 = hashingSink1.hash();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteString0.hmacSha512(byteString1);
      ByteString byteString3 = ByteString.decodeBase64("q4kNP&?Ptb1");
      assertNull(byteString3);
      
      ByteString byteString4 = byteString0.sha1();
      boolean boolean0 = byteString4.endsWith(byteArray0);
      ByteString byteString5 = new ByteString(byteArray0);
      boolean boolean1 = byteString2.rangeEquals(128, byteArray0, (-2533), (-1138));
      assertTrue(byteString0.equals((Object)byteString5));
      assertTrue(boolean1 == boolean0);
      assertFalse(byteString2.equals((Object)byteString4));
      assertSame(byteString2, byteString1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\"f_V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \"
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)71;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("M?Af#}X0$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString0.hmacSha1(byteString2);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString2);
      Object object0 = new Object();
      ByteString byteString4 = hashingSink0.hash();
      byteString4.equals(byteString1);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString4;
      byteStringArray0[1] = byteString3;
      byteStringArray0[2] = byteString4;
      byteStringArray0[3] = byteString3;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString3;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString3;
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=22]", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.utf8();
      assertNotNull(string0);
      
      String string1 = byteString0.toString();
      assertEquals("[hex=2c]", string1);
      
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      byteString2.EMPTY.indexOf(byteString0);
      ByteString byteString3 = new ByteString(byteArray0);
      boolean boolean0 = byteString3.EMPTY.startsWith(byteString0);
      assertFalse(boolean0);
      
      int int0 = byteString2.lastIndexOf(byteArray0, 7);
      assertEquals((-1), int0);
      assertTrue(byteString1.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byte[] byteArray0 = new byte[1];
      HashingSink.sha512(pipe_PipeSink0);
      byteArray0[0] = (byte)0;
      byteString0.startsWith(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString0.write(buffer0);
      byteString1.EMPTY.md5();
      Charset charset0 = Charset.defaultCharset();
      byteString1.EMPTY.string(charset0);
      byteString0.indexOf(byteString1, (int) (byte)0);
      byteString1.sha1();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[size=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)90;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.EMPTY.utf8 = "hi|X5gr+^3JI";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteString0.EMPTY.toAsciiUppercase();
      ByteString byteString2 = byteString0.sha256();
      byteString0.size();
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[hex=0b]");
      ByteString byteString3 = byteString0.toAsciiUppercase();
      byteString3.sha256();
      byteString2.size();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(575);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString4 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        HashingSink.hmacSha512(bufferedSink0, byteString4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      byteString0.EMPTY.utf8 = "";
      byteString0.endsWith(byteArray0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      HashingSink.sha512(pipe_PipeSink0);
      ByteString byteString1 = byteString0.sha256();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)127;
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.hmacSha1(byteString0);
      byteString1.indexOf(byteString2);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.hashCode();
      ByteString byteString4 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString4.substring((-1488), 797);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)67;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(pipe_PipeSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSink.sha512(pipe_PipeSink0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString2.toAsciiLowercase();
      int int0 = byteString3.indexOf(byteString0, (int) (byte) (-1));
      assertEquals((-1), int0);
      
      ByteString byteString4 = byteString2.substring((int) (byte)3);
      byteString1.indexOf(byteArray0);
      byteString4.endsWith(byteArray0);
      assertEquals(6, byteString4.size());
      
      byteString3.hmacSha1(byteString0);
      assertFalse(byteString0.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("s.limit == s.pos");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray0;
      PrintStream printStream0 = mockPrintStream0.format("s.limit == s.pos", objectArray0);
      byteString0.EMPTY.write(printStream0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      assertSame(byteString2, byteString1);
      
      ByteString byteString3 = ByteString.of(byteArray0);
      assertTrue(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString0.hmacSha1(byteString2);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString2);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      HashingSink.sha512(realBufferedSink0);
      byteString3.startsWith(byteArray0);
      Buffer buffer1 = new Buffer();
      ByteString byteString4 = byteString0.toAsciiLowercase();
      ByteString byteString5 = byteString1.hmacSha1(byteString4);
      ByteBuffer byteBuffer0 = byteString3.asByteBuffer();
      ByteString.of(byteBuffer0);
      Buffer buffer2 = new Buffer();
      GzipSink gzipSink1 = new GzipSink(gzipSink0);
      GzipSink gzipSink2 = new GzipSink(gzipSink1);
      HashingSink hashingSink2 = HashingSink.hmacSha1(buffer2, byteString5);
      Object object0 = new Object();
      hashingSink2.hash();
      byteString5.equals("delegate == null");
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" [QpXfcLR6>x^%+?<s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString1);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      HashingSink.sha512(realBufferedSink0);
      byteString2.startsWith(byteArray0);
      Buffer buffer1 = new Buffer();
      ByteString byteString3 = byteString0.toAsciiLowercase();
      byteString0.write(realBufferedSink0.buffer);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString3;
      byteStringArray0[1] = byteString2;
      hashingSink1.hash();
      byteString3.toString();
      byteString3.indexOf(byteArray0);
      byteString0.substring((int) (byte)0, (int) (byte)0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)11;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)11;
      byteArray1[8] = (byte)0;
      byteString1.rangeEquals(65533, byteArray1, (int) (byte)11, (int) (byte)0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1514), 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-1514 byteCount=101
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.hmacSha256(byteString0);
      byteString1.toString();
      String string0 = byteString1.toString();
      assertEquals("[hex=cc]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-4096));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4096
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.toString();
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString1);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      HashingSink.sha512(realBufferedSink0);
      byteString2.startsWith(byteArray0);
      Buffer buffer1 = new Buffer();
      byteString0.toAsciiLowercase();
      ByteString[] byteStringArray0 = new ByteString[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 255);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        ByteString.read(inputStream0, 122);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=cccccccccccccccccccccccccccccccccccccccc]", string0);
      
      ByteString byteString1 = byteString0.sha256();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=cc]", string0);
      
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      byteString1.asByteBuffer();
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString0);
      Object object0 = new Object();
      HashingSink hashingSink1 = HashingSink.sha256(buffer0);
      ByteString byteString3 = hashingSink1.hash();
      boolean boolean0 = byteString3.equals(hashingSink0);
      assertFalse(boolean0);
      
      byteString0.base64Url();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[1] = byteString3;
      byteStringArray0[2] = byteString0;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString4 = hashingSource0.hash();
      byteStringArray0[3] = byteString4;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString2;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString5 = realBufferedSource0.readByteString();
      byteString5.sha256();
      ByteString.encodeUtf8("AA==");
      int int0 = byteString4.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[2] = byteString0;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString1;
      Options.of(byteStringArray0);
      boolean boolean0 = byteString0.equals(byteString0);
      assertTrue(boolean0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=cc]", string0);
      
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=cc]", string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      byteString0.asByteBuffer();
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString0);
      Object object0 = new Object();
      HashingSink hashingSink1 = HashingSink.sha256(buffer0);
      ByteString byteString3 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink.sha256(buffer1);
      hashingSink1.hash();
      boolean boolean0 = byteString3.equals(byteArray0);
      assertFalse(boolean0);
      
      byteString1.base64Url();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString4 = realBufferedSource0.readByteString();
      byteString4.sha256();
      ByteString.encodeUtf8("eh`#vq7k'b$ktWDyK#");
      int int0 = byteString2.compareTo(byteString4);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      String string0 = byteString0.toString();
      assertEquals("[text=8]", string0);
      
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString1);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      HashingSink hashingSink2 = HashingSink.sha512(realBufferedSink0);
      boolean boolean0 = byteString2.startsWith(byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer1 = new Buffer();
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString[] byteStringArray0 = new ByteString[18];
      byteStringArray0[0] = byteString3;
      byteStringArray0[1] = byteString2;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString4 = options0.get((byte)0);
      byteString4.write(buffer0);
      byteString0.utf8();
      ByteString byteString5 = hashingSink2.hash();
      String string1 = byteString5.toString();
      assertEquals("[hex=cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc]", string1);
      
      int int0 = byteString5.indexOf(byteArray0);
      assertEquals(57, int0);
      
      byteString2.hmacSha512(byteString0);
      assertTrue(byteString1.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.toString();
      ByteString.encodeUtf8("AAsAAAA=");
      byteString0.sha256();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      ByteString.read(bufferedInputStream0, (byte)0);
      // Undeclared exception!
      try { 
        ByteString.codePointIndexToCharIndex((String) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=cc]", string0);
      
      ByteString byteString1 = byteString0.sha256();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = byteString2.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString0);
      Object object0 = new Object();
      HashingSink hashingSink1 = HashingSink.sha256(buffer0);
      ByteString byteString4 = hashingSink1.hash();
      byteString4.equals(hashingSink0);
      ByteString byteString5 = new ByteString(byteArray0);
      byteString5.base64Url();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      ByteString byteString6 = hashingSource1.hash();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString6;
      byteStringArray0[2] = byteString3;
      byteStringArray0[3] = byteString2;
      byteStringArray0[4] = byteString2;
      Options.of(byteStringArray0);
      ByteString byteString7 = hashingSource0.hash();
      byteString5.equals(object0);
      Options.of(byteStringArray0);
      byteBuffer0.clear();
      hashingSource1.hash();
      byteString1.asByteBuffer();
      ByteString byteString8 = ByteString.of(byteBuffer0);
      byteString8.EMPTY.asByteBuffer();
      ByteString byteString9 = hashingSink0.hash();
      boolean boolean0 = byteString9.equals(byteString3);
      assertFalse(boolean0);
      
      byteString4.toString();
      assertTrue(byteString4.equals((Object)byteString7));
  }
}
