/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:13:07 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2849.770471446833);
      float float0 = rationalNumber0.floatValue();
      assertEquals(2849.7705F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2739.272195096187));
      int int0 = rationalNumber0.intValue();
      assertEquals((-2739.2721950869127), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-2739), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-613.5724427507));
      long long0 = rationalNumber0.longValue();
      assertEquals((-613L), long0);
      assertEquals((-613.5724427557244), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483647L);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(173.0712);
      String string0 = rationalNumber0.toString();
      assertEquals("216339/1250 (173.071)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2472L, 2472L);
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2960.66528);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2,960.665", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(22.547943977456907);
      assertEquals(22.54794313369631, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(463L, (-2147483693L));
      int int0 = rationalNumber0.intValue();
      assertEquals(357913949, rationalNumber0.divisor);
      assertEquals((-2.1513551012788273E-7), rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483693L), (-2147483693L));
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(623L, 2147483671L);
      assertEquals(2.8964131773816937E-7, rationalNumber0.doubleValue(), 0.01);
      assertEquals(311, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483683L), (-2147483683L));
      assertEquals(1, rationalNumber0.numerator);
      
      RationalNumber.factoryMethod((-2147483683L), 1);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483683L));
      assertEquals(1, rationalNumber1.numerator);
      
      RationalNumber.valueOf(1267.4261954261954);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1382.5307931030247);
      assertEquals(27611905, rationalNumber2.numerator);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483658L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483658, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(676.89099);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-676.8909900097649), rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0E-8);
      assertEquals(1, rationalNumber2.numerator);
      
      RationalNumber.valueOf((-2.1474836173272061E9));
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(3047L, (-1L));
      assertEquals(1, rationalNumber3.divisor);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-2147483617));
      assertEquals((-2147483617), rationalNumber4.numerator);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 1849L);
      rationalNumber0.toDisplayString();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1,161,429.772", string0);
      
      rationalNumber0.floatValue();
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-1849));
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(Integer.MIN_VALUE, 956L);
      RationalNumber.valueOf(1849L);
      RationalNumber.valueOf(2480.073588022931);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1161429.7717685236);
      rationalNumber2.floatValue();
      String string1 = rationalNumber0.toString();
      assertEquals("-2147483648/-1849 (1,161,429.772)", string1);
      
      rationalNumber0.doubleValue();
      assertEquals((-1849), rationalNumber0.divisor);
      
      float float0 = rationalNumber3.floatValue();
      assertEquals(1161429.8F, float0, 0.01F);
      
      RationalNumber rationalNumber4 = rationalNumber1.negate();
      rationalNumber4.negate();
      RationalNumber.factoryMethod(1849L, (-2147483648L));
      RationalNumber.valueOf(3112.80239);
      rationalNumber4.toDisplayString();
      rationalNumber4.doubleValue();
      String string2 = rationalNumber4.toDisplayString();
      assertEquals("1849", string2);
      
      rationalNumber4.doubleValue();
      assertEquals((-1849L), rationalNumber1.longValue());
      
      long long0 = rationalNumber2.longValue();
      assertEquals((-2246321L), long0);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(25512517);
      assertEquals((byte)69, rationalNumber5.byteValue());
  }
}
