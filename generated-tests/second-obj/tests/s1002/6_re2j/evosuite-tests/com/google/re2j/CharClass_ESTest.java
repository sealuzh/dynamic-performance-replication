/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:06:16 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 65;
      intArray0[2] = 1122;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      charClass0.appendRange(1122, 1122);
      assertArrayEquals(new int[] {65, 0, 1122}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1651);
      intArray0[1] = (-1088);
      CharClass charClass0 = new CharClass(intArray0);
      String string0 = charClass0.toString();
      assertEquals("[0xfffff98d-0xfffffbc0]", string0);
      
      charClass0.appendLiteral(127199, 2548);
      assertArrayEquals(new int[] {(-1651), (-1088)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 66639;
      intArray0[1] = (-1386);
      intArray0[2] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1108810;
      intArray0[1] = 451;
      intArray0[2] = 315;
      intArray0[3] = 3;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.negateClass();
      assertArrayEquals(new int[] {0, 1108809, 4, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      int[] intArray0 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1108810;
      intArray0[2] = 315;
      intArray0[3] = 315;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.negateClass();
      charClass0.toArray();
      assertArrayEquals(new int[] {0, 1108809, 1, 314}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      charClass0.toString();
      charClass0.appendLiteral(127199, 0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][2];
      charClass0.appendTable(intArray0);
      int[] intArray1 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray1);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1239;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][4];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1239);
      // Undeclared exception!
      try { 
        charClass1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral((-1), (-1));
      int[] intArray0 = charClass1.toArray();
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(9000, 619);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2850;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(0, 1233);
      int[][] intArray1 = new int[0][7];
      charClass1.appendTable(intArray1);
      CharClass charClass2 = charClass1.appendFoldedRange(3, 76);
      CharGroup charGroup0 = null;
      int[][] intArray2 = new int[6][6];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      int[] intArray3 = new int[5];
      intArray3[0] = 3;
      intArray3[3] = 76;
      intArray2[4] = intArray3;
      intArray2[5] = intArray0;
      CharClass charClass3 = charClass1.appendNegatedTable(intArray2);
      charClass3.toArray();
      boolean boolean0 = false;
      charClass2.appendGroup(charGroup0, boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 2850;
      intArray0[2] = 1233;
      intArray0[3] = 68472;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(1233, 1233);
      int[] intArray1 = new int[8];
      intArray1[0] = 1233;
      intArray1[4] = 2850;
      int[] intArray2 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 2850, 1233, 68472, (-197), 0, 0, 0, 1232, 1233}, intArray2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(3045, (-92));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(2583, 849);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2083);
      intArray0[1] = 0;
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, (-2083));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-2083), 0}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 1213;
      intArray0[0] = 1213;
      intArray0[1] = 1213;
      intArray0[2] = 515;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendClass(intArray1[1]);
      CharClass charClass2 = charClass0.cleanClass();
      int int1 = 616;
      charClass2.appendRange(int0, int1);
      int int2 = (-1549);
      charClass2.appendRange(int2, intArray0[0]);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[4];
      intArray1[0] = 1881;
      intArray1[1] = 3095;
      intArray1[2] = 304;
      intArray1[3] = (-2649);
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(1783, 1783);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-689);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 618);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 289;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {289}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2850;
      intArray0[2] = 2850;
      intArray0[1] = 68456;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 68456, 2850, 0, (-197), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-197), 68456, 0, 68456, 2850, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(68456, 68456);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-197), 68456, 0, 68456, 2850, 0}, intArray0);
      assertNotNull(charClass2);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 68456;
      CharClass charClass3 = charClass2.appendFoldedRange(68456, 68456);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-197), 68456, 0, 68456, 2850, 0}, intArray0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2850;
      intArray0[1] = 1233;
      intArray0[3] = 0;
      intArray0[4] = (-197);
      int[][] intArray1 = new int[10][4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 1233, 0, 0, (-197), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1233, 1064);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1233, 0, 0, (-197), 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1233, 0, 0, (-197), 0}, intArray0);
      assertNotNull(charClass2);
      
      charClass1.appendTableWithSign(intArray1, (-197));
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2850;
      intArray0[2] = 1192;
      intArray0[3] = 2850;
      intArray0[4] = 2850;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2850, 1192, 2850, 2850, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1192, 1192);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2850, 1192, 2850, 2850, 0}, intArray0);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1192;
      int[][] intArray2 = new int[0][5];
      CharClass charClass2 = charClass0.appendTable(intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2850, 1192, 2850, 2850, 0}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(2850, 1192);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2850, 1192, 2850, 2850, 0}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2850, 1192, 2850, 2850, 0}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendRange(74867, (-1074));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2850, 74867, (-1074), 2850, 0}, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendTableWithSign(intArray2, 74867);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2850, 74867, (-1074), 2850, 0}, intArray0);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2850;
      intArray0[4] = 1233;
      intArray0[3] = 68472;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2850, 0, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-197), 68472, 0, 68472, 0, 2850}, intArray0);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1233;
      CharClass charClass2 = charClass1.appendFoldedRange(68472, 1113841);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-197), 1113841, 0, 68472, 0, 2850}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-197), 1113841, 0, 68472, 0, 2850}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.negateClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1113842, 1114111, 0, 68472, 0, 2850}, intArray0);
      assertNotNull(charClass4);
      
      int[][] intArray2 = new int[3][8];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      int[] intArray3 = charClass2.toArray();
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertArrayEquals(new int[] {1113842, 1114111, 0, 68472, 0, 2850}, intArray0);
      assertArrayEquals(new int[] {1113842, 1114111}, intArray3);
      assertNotNull(intArray3);
      
      charClass3.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, (-1004));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-1004));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendFoldedRange(8132, 8132);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 1114111, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 65;
      intArray0[2] = 1122;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {65, 0, 1122}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {65, 0, 1122}, intArray0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][2];
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = null;
      int int0 = (-773);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, (-773));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3859);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2850;
      intArray0[2] = 2850;
      int int0 = (-197);
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 2850, 2850, 0, (-197), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(2850, 2850);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2850, 2850, 0, (-197), 0}, intArray0);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2850;
      int int1 = 1572;
      CharClass charClass2 = charClass0.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2850, 2850, 0, (-197), 0}, intArray0);
      assertNotNull(charClass2);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1572;
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2850, 2850, 0, (-197), 0}, intArray0);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 1233;
      intArray0[3] = 68472;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 1233, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1233;
      int[][] intArray2 = new int[0][5];
      CharClass charClass1 = charClass0.appendTable(intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 1233, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(2052, 1233);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 1233, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-197), 0, 1233, 68472, 1233, 68472}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendLiteral((-197), 1572);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-197), 0, 1233, 68472, 1233, 68472}, intArray0);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1103881, (-2938));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2938);
      intArray0[1] = (-2938);
      intArray0[2] = 66639;
      intArray0[3] = 1103881;
      intArray0[4] = (-2938);
      intArray0[5] = 1103881;
      intArray0[6] = (-2938);
      intArray0[7] = 1103881;
      intArray0[8] = (-2938);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1088);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-1088)}, intArray0);
      assertNotNull(charClass0);
      
      int int0 = 127199;
      CharClass charClass1 = charClass0.appendFoldedRange(127199, 127199);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-1088)}, intArray0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 127199);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-3793), 1114111);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-3793), 1114111);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3793);
      intArray0[1] = 1114111;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-3793), 1114111}, intArray0);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3793);
      intArray1[1] = (-3793);
      intArray1[2] = (-3793);
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign(intArray1, (-1244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1088);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-1088)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1087), 1114111}, intArray0);
      assertNotNull(charClass1);
      
      String string0 = charClass0.toString();
      assertEquals("[0xfffffbc1-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {(-1087), 1114111}, intArray0);
      assertNotNull(string0);
      
      CharClass charClass2 = charClass0.appendLiteral(127199, (-1087));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-1087), 1114111}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 1233;
      intArray0[3] = 68472;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 1233, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1233, 1233);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 1232, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass1);
      
      intArray0[4] = 0;
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 1232, 68472, 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {1, 1231, 1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {1, 1231, 1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass6 = charClass5.negateClass();
      int int0 = (-2577);
      charClass6.appendRange(int0, intArray0[1]);
      charClass3.negateClass();
      charClass2.appendTable(intArray1);
      CharGroup charGroup0 = null;
      boolean boolean0 = false;
      charClass4.appendGroup(charGroup0, boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1233;
      intArray0[3] = 68472;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 1233, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1233, 1233);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 1232, 68472, (-197), 0}, intArray0);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1233;
      intArray0[4] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      int[][] intArray2 = new int[3][6];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      CharClass charClass2 = charClass1.negateClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1, 1231, 1, 1114111, 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      charClass2.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1238;
      intArray0[1] = 2850;
      intArray0[2] = 1233;
      intArray0[3] = 68472;
      intArray0[4] = (-197);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(1233, 1233);
      int[] intArray1 = new int[8];
      intArray1[0] = 1233;
      intArray0[4] = 1238;
      intArray1[2] = 1238;
      intArray1[3] = 1238;
      intArray1[4] = 2850;
      int[][] intArray2 = new int[3][6];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      CharClass charClass2 = charClass0.negateClass();
      charClass0.appendRange(1238, 1238);
      CharClass charClass3 = charClass1.appendNegatedTable(intArray2);
      CharClass charClass4 = charClass3.negateClass();
      charClass4.appendRange((-2577), 1237);
      charClass0.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass2.negateClass();
      charClass5.appendNegatedTable(intArray2);
      charClass3.appendTable(intArray2);
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
