/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:00:14 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.util.MethodLookupUtils;
import org.apache.commons.jxpath.util.TypeConverter;
import org.apache.commons.jxpath.util.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodLookupUtils_ESTest extends MethodLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) methodLookupUtils0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MethodLookupUtils.lookupMethod(class0, "o&S>*@`iBrFxt", objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "o&S>*@`iBrFxt", objectArray0);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      String string0 = "org.apache.commons.jxpath.util.TypeUtils";
      MethodLookupUtils.lookupStaticMethod(class0, "org.apache.commons.jxpath.util.TypeUtils", objectArray0);
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class2, "o&S>*@`iBrFxt", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) methodLookupUtils0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<String> class1 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class1, ".F>Ir&81PR&N4u)BZcH", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) methodLookupUtils0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class1, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "@";
      objectArray0[1] = (Object) class0;
      MethodLookupUtils.lookupStaticMethod(class0, "@", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "@", objectArray0);
      MethodLookupUtils.lookupMethod(class0, "@", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "@", objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupMethod(class3, "org.apache.commons.jxpath.util.TypeUtils", objectArray0);
      Class<Object> class4 = Object.class;
      MethodLookupUtils.lookupConstructor(class4, objectArray0);
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class4, objectArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "mZF&v+cjSw=K|b";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "mZF&v+cjSw=K|b";
      objectArray0[1] = (Object) "mZF&v+cjSw=K|b";
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) "mZF&v+cjSw=K|b";
      MethodLookupUtils.lookupStaticMethod(class0, "mZF&v+cjSw=K|b", objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class1, "mZF&v+cjSw=K|b", objectArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"mZF&v+cjSw=K|b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) methodLookupUtils0;
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      objectArray0[1] = (Object) class0;
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupStaticMethod(class2, "|y~", objectArray0);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      objectArray0[2] = (Object) methodLookupUtils0;
      objectArray0[3] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "~VKB_", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      MethodLookupUtils.lookupStaticMethod(class0, (String) null, objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "41(p<D3V<n_", objectArray0);
      Object[] objectArray1 = new Object[2];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, (String) null, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter0);
      TypeConverter typeConverter1 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[0];
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "q,O'lleWVC9&&U", objectArray0);
      MethodLookupUtils.lookupMethod(class0, (String) null, objectArray0);
      TypeUtils.setTypeConverter(typeConverter1);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) null;
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      objectArray1[1] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      TypeConverter typeConverter2 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter2);
      objectArray1[2] = (Object) methodLookupUtils0;
      objectArray1[3] = (Object) class0;
      objectArray1[4] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupMethod(class0, (String) null, objectArray1);
      Class<Integer> class2 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class2, (String) null, objectArray1);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupConstructor(class3, objectArray1);
      Class<Object> class4 = Object.class;
      Object[] objectArray2 = new Object[1];
      objectArray2[0] = (Object) class2;
      MethodLookupUtils.lookupStaticMethod(class4, "", objectArray2);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class4, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "=8hwLQ[n#Bt";
      objectArray0[2] = (Object) "=8hwLQ[n#Bt";
      MethodLookupUtils.lookupStaticMethod(class0, "=8hwLQ[n#Bt", objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "=8hwLQ[n#Bt", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupMethod(class2, "", objectArray0);
      Class<String> class3 = String.class;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) class3;
      Object object1 = new Object();
      objectArray1[1] = object1;
      MethodLookupUtils.lookupConstructor(class3, objectArray1);
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      MethodLookupUtils.lookupStaticMethod(class2, "", objectArray1);
      MethodLookupUtils.lookupMethod(class2, "", (Object[]) null);
      Class<String> class4 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class4, "", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) null;
      MethodLookupUtils.lookupMethod(class0, (String) null, objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, (String) null, objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupMethod(class1, "", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class2, "", objectArray0);
      Class<Integer> class3 = Integer.class;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) null;
      objectArray1[2] = (Object) class3;
      MethodLookupUtils.lookupConstructor(class3, objectArray1);
      Class<String> class4 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class4, objectArray1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class1, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "compareToIgnoreCase", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) methodLookupUtils0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) methodLookupUtils0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) methodLookupUtils0;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<String> class1 = String.class;
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "replaceAll";
      objectArray1[1] = (Object) class1;
      objectArray1[2] = (Object) "replaceAll";
      objectArray1[3] = (Object) "replaceAll";
      objectArray1[4] = (Object) class1;
      objectArray1[5] = (Object) class1;
      objectArray1[6] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      objectArray1[7] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      objectArray1[8] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      MethodLookupUtils.lookupStaticMethod(class1, "replaceAll", objectArray1);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupMethod(class2, "replaceAll", objectArray1);
      MethodLookupUtils.lookupMethod(class2, "replaceAll", objectArray1);
      MethodLookupUtils.lookupStaticMethod(class1, "replaceAll", objectArray1);
      Class<Integer> class3 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class3, "c}zy8^X", objectArray1);
      Class<String> class4 = String.class;
      MethodLookupUtils.lookupMethod(class4, "sn", objectArray1);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class3, "7@M7$gz,#O5", objectArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"replaceAll\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
      assertFalse(method0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "reverseBytes", objectArray0);
      assertFalse(method0.isBridge());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MethodLookupUtils.lookupConstructor(class0, (Object[]) null);
      Class<Integer> class1 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class1, "toString", (Object[]) null);
      Class<Integer> class2 = Integer.class;
      MethodLookupUtils.lookupMethod(class2, (String) null, (Object[]) null);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupStaticMethod(class3, "replaceAll", (Object[]) null);
      Class<Object> class4 = Object.class;
      MethodLookupUtils.lookupMethod(class4, "({h7X<=BpVRp4h", (Object[]) null);
      Class<Object> class5 = Object.class;
      MethodLookupUtils.lookupMethod(class5, "Ro&JS0x^sB#ZI6", (Object[]) null);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Method method0 = MethodLookupUtils.lookupMethod(class2, (String) null, (Object[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "notifyAll", objectArray0);
      assertFalse(method0.isBridge());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: valueOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: valueOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "concat";
      Class<String> class0 = String.class;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "concat", objectArray0);
      assertEquals("public java.lang.String java.lang.String.concat(java.lang.String)", method0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "notifyAll";
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class1, "getBytes", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: getBytes
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "`8[D%vOb@%eMO`?9w";
      Object object0 = new Object();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "compareTo", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: compareTo
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "trim";
      MethodLookupUtils.lookupMethod(class0, "trim", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      MethodLookupUtils.lookupMethod(class0, "trim", objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "trim", objectArray0);
      Class<String> class2 = String.class;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "valueOf";
      Object object0 = new Object();
      objectArray1[1] = object0;
      MethodLookupUtils.lookupMethod(class2, "valueOf", objectArray1);
      Method method0 = MethodLookupUtils.lookupStaticMethod(class2, "startsWith", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ", type=";
      objectArray0[1] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "compareTo", objectArray0);
      assertNotNull(method0);
      assertTrue(method0.isBridge());
  }
}
