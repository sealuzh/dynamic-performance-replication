/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:15:55 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2575);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer1);
      assertEquals(4L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe((-2152L));
      ByteString[] byteStringArray0 = new ByteString[3];
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      buffer0.readUtf8CodePoint();
      byteStringArray0[1] = byteStringArray0[0];
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(7L, buffer0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(992);
      ByteString byteString0 = ByteString.decodeHex("");
      buffer0.indexOfElement(byteString0, 1000000000000L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(338L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(3L, buffer0.size());
      
      byte[] byteArray0 = new byte[3];
      int int0 = realBufferedSource1.read(byteArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      buffer0.writeByte(992);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer0.read(realBufferedSink0.buffer, 8L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(16711680L);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10L);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(2575);
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0f0a0000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeShort(18);
      try { 
        realBufferedSource0.buffer.readUtf8LineStrict((long) 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=0012\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(1000000000000L);
      assertEquals(10L, buffer1.size());
      
      long long0 = realBufferedSource0.buffer.readHexadecimalUnsignedLong();
      assertEquals(1000000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(2301L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.flush();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.close();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeInt(1822);
      Buffer buffer2 = buffer1.clone();
      buffer2.writeUtf8CodePoint((byte) (-30));
      assertEquals(5L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      buffer0.writeLong(32L);
      assertEquals(1000000000000L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 999999999983L;
      buffer0.writeIntLe((-2741));
      assertEquals(999999999987L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = buffer0.writeAll(realBufferedSource0.buffer);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[5];
      Buffer buffer2 = buffer1.write(byteArray0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      long long0 = buffer0.writeAll(buffer1);
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(3);
      buffer0.snapshot(3);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      buffer0.write(byteArray0);
      buffer0.snapshot();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Expected leading [0-9] or '-' character but was %#x");
      long long0 = buffer0.size();
      assertEquals(51L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLongLe((-2152L));
      ByteString[] byteStringArray0 = new ByteString[3];
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      ByteString byteString1 = ByteString.EMPTY;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString((long) (byte)0);
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-2L));
      buffer0.readUtf8Line(0L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(6L);
      buffer0.readUtf8();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1112L);
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0004X", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1896L);
      short short0 = buffer0.readShortLe();
      assertEquals(6L, buffer0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(8192);
      short short0 = buffer0.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals((short)8192, short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((-5838));
      assertFalse(buffer0.exhausted());
      
      short short0 = buffer0.readShortLe();
      assertEquals((short) (-5838), short0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1896L);
      short short0 = buffer0.readShort();
      assertEquals(6L, buffer0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(32L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer0.readLongLe();
      assertEquals(2305843009213693952L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pipe pipe0 = new Pipe(1001L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(1001L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Segment segment0 = new Segment();
      buffer_UnsafeCursor0.buffer.head = segment0;
      long long0 = buffer1.readLong();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1342L));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer0.readLong();
      assertEquals((-4396920611197157377L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(255L);
      int int0 = buffer0.readIntLe();
      assertEquals(0, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(5);
      buffer0.writeLong(1L);
      int int0 = buffer0.readIntLe();
      assertEquals(5L, buffer0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(168);
      buffer1.writeShort(2971);
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer1.readIntLe();
      assertEquals((-1693734912), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1690L);
      int int0 = buffer0.readInt();
      assertEquals(0, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      buffer0.write(byteArray0);
      buffer0.readByteString();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(48);
      assertEquals(4L, buffer0.size());
      
      byte[] byteArray0 = buffer0.readByteArray();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(6L);
      byte byte0 = buffer0.readByte();
      assertEquals(7L, buffer0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeShortLe((-1908874352));
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte byte0 = realBufferedSource0.buffer.readByte();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((byte) (-112), byte0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer.writableSegment(27);
      byte[] byteArray0 = new byte[3];
      int int0 = realBufferedSource0.buffer.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      Buffer buffer1 = buffer0.write(byteArray0);
      int int0 = buffer1.read(byteArray0);
      assertTrue(buffer1.exhausted());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      Buffer buffer1 = buffer0.write(byteArray0);
      Buffer buffer2 = new Buffer();
      long long0 = buffer1.read(buffer2, (long) (byte)18);
      assertFalse(buffer2.exhausted());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      buffer0.writeByte(992);
      buffer0.emitCompleteSegments();
      assertEquals(1000000000001L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(2942L);
      buffer0.buffer();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((byte)0);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U_**;xT@J");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeTo((OutputStream) mockPrintStream0, (-1791L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1791
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(270);
      Buffer buffer0 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Buffer buffer1 = buffer0.writeTo((OutputStream) mockPrintStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 2125570549, 2125570549, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2125570549 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-1049));
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(0L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLong(0L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((byte)0);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write(byteArray0, 2103, (-812));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=2103 byteCount=-812
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte) (-30), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-30 byteCount=5
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)14, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=14 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      BufferedSink bufferedSink0 = buffer0.write((Source) gzipSource0, 0L);
      assertSame(bufferedSink0, buffer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Buffer buffer1 = buffer0.write(byteString0);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      buffer0.writeByte(992);
      // Undeclared exception!
      try { 
        buffer0.write(buffer0, (-1621L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=37
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer.skip(0L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require(0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request((-2628L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-1192L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((-1748L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1748
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readString(100000000L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer.readFully(buffer0, (long) 0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLongLe(8192L);
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer0, 8192L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, (long) (short)8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      Buffer buffer1 = buffer0.readFrom(inputStream0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString(0L);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString(100000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray(0L);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteArray((-687L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-687
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(593L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte) (-72), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-72 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte) (-39), (int) (byte)60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=-39 byteCount=60
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = realBufferedSink0.buffer.read(buffer0, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = buffer0.rangeEquals(100000000L, byteString0, (-3562), (-3562));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      ByteString byteString0 = ByteString.encodeUtf8("ITx\t=NI");
      boolean boolean0 = realBufferedSink0.buffer.rangeEquals(0L, byteString0, 1601, (-978));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe(270);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.encodeUtf8("Wc9\"Vecv:N");
      boolean boolean0 = buffer0.rangeEquals((long) 270, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      long long0 = buffer0.indexOfElement(byteString0, (long) (byte)0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOfElement((ByteString) null);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(2301L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, (-1903L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf((byte) (-96), (-1347L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1347 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)97, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, (-338L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-338 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.indexOf((byte)74);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = buffer0.hmacSha512(byteString0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte((-1152921504606846976L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1152921504606846976 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      boolean boolean0 = buffer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer0.copyTo(realBufferedSink0.buffer, (-1918L), 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1918 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(16L);
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, (-2273L), 16L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-2273 byteCount=16
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) byteArrayOutputStream0, 367L, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=367 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0, (long) (byte)0, 1000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1000000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(2149L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("sA_.L1*2s)4i>rO 1B");
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.copyTo((OutputStream) mockPrintStream0, (long) (byte) (-89), (long) (byte) (-61));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-89 byteCount=-61
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      try { 
        buffer0.writeAll(gzipSource0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(511L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 511L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=511
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (-4457L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=-4457 offset=0 byteCount=-4457
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8(3529L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=3529
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readString((-1548L), (Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1548
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (-1347L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer1 = pipe0.buffer;
      try { 
        buffer1.readFully(buffer0, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(3052L);
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 2L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(1589L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByteArray(1000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readAll((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, (-2147081496), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, 100, (-623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=100 byteCount=-623
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, 83L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(1589L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.decodeBase64("");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte(3196L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3196 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2575);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.close();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      try { 
        buffer1.copyTo(outputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      long long0 = realBufferedSource0.buffer.indexOf(byteString0, 317L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(3288);
      Buffer buffer1 = buffer0.writeIntLe(3288);
      long long0 = buffer1.indexOf((byte)0, 2L, 4L);
      assertEquals(6L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.indexOf((byte)112);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeIntLe(2575);
      long long0 = buffer1.indexOf((byte)0, 2L, 4L);
      assertEquals(2L, long0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)18, (long) (byte)18, (long) (byte)18);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)19, (-2650L), (-2650L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-2650 toIndex=-2650
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.write(buffer_UnsafeCursor0.buffer, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("E");
      byteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 113, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=113 byteCount=113
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(8L);
      try { 
        buffer0.skip(1809L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-72057594037927936L));
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(21);
      byte[] byteArray0 = new byte[2];
      try { 
        buffer1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.readFully(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1690L);
      try { 
        buffer1.readUtf8Line(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(0L, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = buffer0.writeTo((OutputStream) pipedOutputStream0, 0L);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) bufferedOutputStream0, 9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=9223372036854775807
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 1177L, (-3120L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pipe pipe0 = new Pipe(639L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.close();
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.resizeBuffer(4L);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor1.resizeBuffer((byte)0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(3154L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(6L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe((-2152L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.seek((byte)2);
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeIntLe((-1));
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      int int0 = buffer_UnsafeCursor1.seek((-1));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2628L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 4142L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=4142 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Pipe pipe0 = new Pipe(2301L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-1818));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1818
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(2575);
      buffer0.hashCode();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer1.writeInt(45);
      Buffer buffer3 = realBufferedSource0.buffer.clone();
      boolean boolean0 = buffer2.equals(buffer3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeInt(1822);
      boolean boolean0 = buffer1.equals(buffer0);
      assertEquals(4L, buffer1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      boolean boolean0 = buffer0.equals(buffer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-2238));
      buffer0.sha1();
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(992);
      buffer1.segmentSizes();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = buffer0.rangeEquals(0L, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.rangeEquals(15L, (ByteString) null, 2147462173, (-3171));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.rangeEquals(1896L, (ByteString) null, 13, 2112278998);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("data == null", charset0);
      boolean boolean0 = buffer0.rangeEquals((-1192L), byteString0, (-188), 2146590351);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      buffer0.writeByte(992);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0, 1000000000000L);
      assertEquals(1000000000001L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(30L);
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.indexOfElement(byteString0, (long) (byte)127);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOfElement((ByteString) null, (-1554L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeShort(18);
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = buffer0.md5();
      realBufferedSource0.buffer.indexOf(byteString0, 4L);
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(720575858631311L);
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOf(byteString0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1822);
      buffer0.indexOf((byte) (-30), 60L);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-16), 829L, (-3301L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=829 toIndex=-3301
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      // Undeclared exception!
      try { 
        buffer0.read(buffer0, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 1188L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1052);
      GzipSink gzipSink0 = new GzipSink(buffer0);
      gzipSink0.flush();
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      buffer_UnsafeCursor1.resizeBuffer(1000000000000L);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(8217);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(0L);
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(1000000000000000L);
      assertEquals(16L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(100000000000000000L);
      assertEquals(18L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000000L);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1000000000000L);
      assertEquals(13L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(10000000000000000L);
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(10000000000000000L, long0);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(99999999994L);
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4294967295L);
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(100000000000L);
      assertEquals(12L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(720575940379279L);
      assertEquals(15L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Pipe pipe0 = new Pipe(720575940379279L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong((-1000000L));
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10000000L);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-79L));
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10000L);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1030L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      try { 
        realBufferedSink0.buffer.write((Source) buffer0, 507L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.write((Source) null, (-1195L));
      assertSame(buffer0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2488L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(5L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 240, 240);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeString("}G]hQCo+6O6at", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("IO", 21, 21, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 21 > 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("#m#w&#$8q(|^@muO!", 65536, (-1580), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1580 < 65536
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("F_icYK;!SHo;", (int) (byte) (-1), 1218, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 1165, 1165, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(2640);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2135812541);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7f4de9bd
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(150);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 59, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 59 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("@`lm", 55296, 130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 130 < 55296
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("6~k<1*]g(JI+f@YvA70", (-2147483646), (-1370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2147483646
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, (-4456), (-4456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("newSize < 0: ");
      buffer0.write(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(30L);
      buffer1.readByteArray(1L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Pipe pipe0 = new Pipe(286L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe((-2152L));
      buffer0.readUtf8CodePoint();
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(6L, buffer1.size());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      buffer0.write(byteArray0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffcf)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1052);
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Pipe pipe0 = new Pipe(506L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2575);
      assertEquals(2L, buffer0.size());
      
      String string0 = buffer1.readUtf8LineStrict(65280L);
      assertEquals("\u000F", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict((-2675L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -2675
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeIntLe(2575);
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = realBufferedSink0.buffer.readUtf8Line();
      assertEquals("\u000F", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-1545L));
      String string0 = buffer1.readUtf8(2L);
      assertEquals(6L, buffer0.size());
      assertEquals("\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((-813));
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertEquals("\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.readAll((Sink) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("okio.ForwardingSink");
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      Buffer buffer1 = buffer0.writeInt(2575);
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.select(options0);
      assertEquals(4L, buffer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2575);
      ByteString[] byteStringArray0 = new ByteString[7];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(30L);
      Buffer buffer2 = buffer1.clone();
      buffer2.writableSegment(87);
      long long0 = buffer2.readHexadecimalUnsignedLong();
      assertEquals(2L, buffer0.size());
      assertEquals(30L, long0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("v(B[o'+FD})&p", charset0);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x76
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1L));
      assertEquals(16L, buffer0.size());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(30L);
      long long0 = buffer1.readDecimalLong();
      assertFalse(buffer0.exhausted());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-668L));
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x64
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      assertEquals(2L, buffer0.size());
      
      long long0 = buffer1.readDecimalLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1297L));
      long long0 = buffer1.readLong();
      assertEquals(8L, buffer0.size());
      assertEquals(7378697629483820646L, long0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 999999999983L;
      Buffer buffer1 = buffer0.writeShortLe(8);
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeIntLe(65280);
      buffer1.readInt();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 999999999983L;
      Buffer buffer1 = buffer0.writeShortLe(8);
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-11L));
      int int0 = buffer0.readInt();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-167772161), int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2L));
      assertEquals(2L, buffer0.size());
      
      short short0 = buffer1.readShort();
      assertEquals((short)11570, short0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-4374));
      short short0 = buffer0.readShort();
      assertEquals(2L, buffer0.size());
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      Buffer buffer1 = buffer0.writeByte(992);
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(1000000000000L, buffer1.size());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(3L);
      assertEquals(1L, buffer0.size());
      
      byte byte0 = buffer0.readByte();
      assertEquals((byte)51, byte0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)117, 51);
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer1.hmacSha256(byteString0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer0.readFrom(inputStream0, 215L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFrom((InputStream) pipedInputStream0, (-1035L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1035
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(100000000L);
      assertEquals(9L, buffer0.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer1.writeTo((OutputStream) byteArrayOutputStream0);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      Buffer buffer1 = buffer0.writeByte(992);
      try { 
        buffer1.readUtf8LineStrict((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 3L, (-78L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeShort(18);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer2 = realBufferedSource0.buffer.copyTo(outputStream0);
      assertEquals(2L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(3L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.require(100000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-8L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      
      buffer0.writeLongLe((-3121L));
      boolean boolean0 = buffer0.exhausted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.buffer();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      gzipSink0.flush();
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer0.readAll(gzipSink0);
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte) (-30));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeByte((-1));
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Pipe pipe0 = new Pipe(1589L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-1018L));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Pipe pipe0 = new Pipe(3955L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(10000000000000000L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha1(sink0);
      ByteString byteString0 = hashingSink0.hash();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      assertEquals(32, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.rangeEquals((-2628L), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString((-334L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-334
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      // Undeclared exception!
      buffer0.readFrom(inputStream0, 1L);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(".outputStream()");
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      assertSame(buffer0, bufferedSink0);
  }
}
