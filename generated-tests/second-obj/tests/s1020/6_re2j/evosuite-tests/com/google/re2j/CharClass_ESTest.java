/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:43:20 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(2656, 2656);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1568;
      intArray0[1] = (-1105604);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.appendLiteral(2, (-533));
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[5];
      intArray1[0] = 865;
      intArray1[1] = 865;
      intArray1[2] = 865;
      intArray1[3] = 865;
      intArray1[4] = 865;
      intArray0[0] = intArray1;
      charClass0.appendTable(intArray0);
      int[] intArray2 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray2);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1568;
      intArray0[1] = (-1105604);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-1105604)}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-1105604)}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-1105604), (-1105604));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, (-1105604)}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 872;
      intArray0[1] = 872;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {872, 872}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 8115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 8115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-2099), (-2099));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 66640;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][8];
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 955;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 955, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 8508;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {8508, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(8508, 8508);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertArrayEquals(new int[] {8508, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[11][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][2];
      CharClass charClass1 = charClass0.appendFoldedRange((-2485), 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0[0], 352);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 955;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 955, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(955, 955);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 955, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(955, 955);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 955, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][2];
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0[0]);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[0][2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 2239);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 8508;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {8508, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendNegatedClass(intArray0);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {8508, 0, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      CharClass charClass4 = charClass1.appendLiteral(8508, 8508);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass4.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 218;
      intArray0[1] = 218;
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[13];
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(66640, (-1183));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      charClass0.toArray();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 8507;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = new CharClass();
      CharClass charClass2 = charClass0.negateClass();
      int int0 = (-1959);
      charClass2.appendRange(8507, (-1959));
      charClass2.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral((-2110), (-2110));
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 8508;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.cleanClass();
      charClass0.appendLiteral(8508, (-8));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 872;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      charClass0.negateClass();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-109));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      charClass0.appendLiteral((-2110), (-2525));
      charClass1.cleanClass();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 872;
      intArray0[1] = 872;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.negateClass();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 1611;
      intArray0[2] = 1860;
      intArray0[3] = (-211);
      intArray0[5] = (-1012);
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      charClass0.appendFoldedRange(1983, 69733);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      CharClass charClass1 = charClass0.negateClass();
      int[] intArray0 = charClass1.toArray();
      CharClass charClass2 = charClass0.appendClass(intArray0);
      charClass2.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[4] = 8508;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass0.appendRange(8508, 8508);
      int[][] intArray1 = new int[2][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      charClass2.appendTable(intArray1);
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 8508;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.negateClass();
      charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.negateClass();
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 8508;
      intArray0[6] = 8508;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass0.appendTable(intArray1);
      int int1 = 857;
      int int2 = 66640;
      charClass2.appendClassWithSign(intArray1[0], int2);
      charClass0.negateClass();
      charClass3.appendClass(intArray0);
      int int3 = (-916);
      charClass3.appendFoldedRange(int1, int3);
      charClass1.appendRange(int0, int3);
      int int4 = 1814;
      charClass2.appendClassWithSign(intArray0, int4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 8507;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = new CharClass();
      CharClass charClass2 = charClass0.negateClass();
      CharClass charClass3 = charClass2.appendRange(8507, (-1959));
      charClass3.negateClass();
      charClass0.toString();
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      charClass1.appendNegatedTable(intArray1);
  }
}
