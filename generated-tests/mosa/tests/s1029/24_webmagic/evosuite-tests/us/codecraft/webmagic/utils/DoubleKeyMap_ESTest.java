/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:01:26 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.remove((Object) "", "");
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      doubleKeyMap0.remove("vOwNWN>mYmpAy-:TX");
      Integer integer0 = new Integer(2467);
      doubleKeyMap0.put("vOwNWN>mYmpAy-:TX", integer0, (Object) null);
      Integer integer1 = new Integer(2467);
      doubleKeyMap0.remove("vOwNWN>mYmpAy-:TX", integer1);
      doubleKeyMap0.put("vOwNWN>mYmpAy-:TX", (Integer) null, (Object) null);
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap2.get((Object) doubleKeyMap0, (Object) "vOwNWN>mYmpAy-:TX");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      doubleKeyMap0.remove("@Ek{");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("@Ek{", integer0, (Object) null);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.remove("@Ek{", integer1);
      doubleKeyMap0.put("", (Integer) null, (Object) null);
      Integer integer2 = new Integer(0);
      String string0 = "";
      doubleKeyMap0.remove("", integer0);
      Object object0 = new Object();
      doubleKeyMap0.put("", integer1, object0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<Integer, Object> map0 = doubleKeyMap0.newMap();
      Map<Object, Map<Object, Object>> map1 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map1, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap1.get((Object) hashMap0, (Object) null);
      HashMap<Object, Map<Integer, Object>> hashMap1 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(hashMap1, class0);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      hashMap1.put(hashMap0, map0);
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap2.put((Object) hashMap2, integer0, (Object) map1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer((-1519));
      Integer integer1 = new Integer((-1519));
      doubleKeyMap0.remove((Object) integer0, integer1);
      HashMap<String, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<String, Map<Object, Map<Object, String>>>();
      DoubleKeyMap<String, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<Object, String>>(hashMap0);
      Integer integer2 = new Integer((-1519));
      Integer integer3 = new Integer(198);
      doubleKeyMap0.put((Object) integer1, integer2, (Object) integer3);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>(0);
      doubleKeyMap1.put("", (Object) "", (Map<Object, String>) hashMap1);
      doubleKeyMap1.get("", (Object) "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
