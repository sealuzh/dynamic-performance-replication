/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:32:51 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.Component;
import wheel.components.ComponentCreator;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "i|1{zi^9", "println");
      Table table0 = new Table(checkbox0, "java.lang.String@0000000009");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i|1{zi^9";
      Component component0 = table0.area(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Zu5");
      Component component0 = table0.var();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "<?xml version='1.0'");
      TableRow tableRow0 = table0.tr();
      Hidden hidden0 = new Hidden(tableRow0, "5-", "5-");
      Radio radio0 = new Radio(hidden0, "<?xml version='1.0'", "<?xml version='1.0'");
      radio0.getEngine();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "e_v\"0Uc8i!", "e_v\"0Uc8i!");
      String string0 = textArea0.eval("e_v\"0Uc8i!");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(errorPage0, "div", actionExpression0);
      Component component0 = form0.div();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "^nFFaTv", "^nFFaTv");
      ComponentCreator componentCreator0 = radio0.create();
      assertNotNull(componentCreator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "mK;gW<a0Tl&BX", "mK;gW<a0Tl&BX");
      TextArea textArea0 = new TextArea(checkbox0, "', ", "mK;gW<a0Tl&BX");
      TextArea textArea1 = (TextArea)textArea0.addInternalRenderHint("', ");
      assertEquals("textarea", textArea1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "4iWDh}PTZu]w~-d$H", "4iWDh}PTZu]w~-d$H");
      List<RenderableComponent> list0 = checkbox0._getRenderableChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}");
      xmlEntityRef0._getActions();
      assertEquals("}", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock("");
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.passwordInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "<?xml version='1.0'");
      ActionExpression actionExpression0 = new ActionExpression("5-");
      actionExpression0.submissible(true);
      table0.form("<?xml version='1.0'", actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Form form0 = new Form("JsR$`w/|D]LO.faH");
      form0.el("JsR$`w/|D]LO.faH");
      assertEquals("JsR$`w/|D]LO.faH", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Component component0 = xmlEntityRef0.clasS("");
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      TableBlock tableBlock0 = new TableBlock(tableRow0, "tK0{Pw");
      Any any0 = tableBlock0.col();
      Component component0 = errorPage0.add(any0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TextInput textInput0 = new TextInput(table0, "", "");
      StandaloneComponent standaloneComponent0 = textInput0._getTopLevelComponent(true);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select((Component) null, "", "vcoH}d", "", stringSelectModel0, false);
      // Undeclared exception!
      try { 
        select0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("Could not write json array to output writer. Perhaps the writer has already been initialized?");
      TextInput textInput0 = new TextInput(form0, "j`vra}]rwA5", "OA!?mS3Nq&");
      // Undeclared exception!
      try { 
        form0.text(textInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.apache.commons.io.filefilter.PrefixFileFilter");
      // Undeclared exception!
      try { 
        xmlEntityRef0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("div");
      FileInput fileInput0 = new FileInput(form0, "div", "div");
      // Undeclared exception!
      try { 
        fileInput0.submit("div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Form form0 = new Form("5`R!3` ()A[bRQQ1D");
      // Undeclared exception!
      try { 
        form0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "java.lang.String@0000000005", "h5");
      NumberInput numberInput0 = new NumberInput(textInput0, "java.lang.String@0000000009", "java.lang.String@0000000009");
      ActionExpression actionExpression0 = new ActionExpression("h5");
      Form form0 = new Form(numberInput0, "javascript", actionExpression0);
      Link link0 = new Link(form0, "org.mvel.conversion.IntegerCH$10");
      Table table0 = new Table(numberInput0, "f*x[ms@");
      // Undeclared exception!
      try { 
        link0.remove((Component) table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Form form0 = new Form("wheel.components.Component");
      Double double0 = new Double((-289.85817201));
      // Undeclared exception!
      try { 
        form0.q((Object) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hr");
      Submit submit0 = new Submit(xmlEntityRef0, "hr", "java.lang.String@0000000007");
      Checkbox checkbox0 = new Checkbox(submit0, "java.lang.String@0000000007", "P#c'h,l");
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        checkbox0.label((Object) boolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Component component0 = block0.table();
      ElExpression elExpression0 = new ElExpression(" on the page.");
      // Undeclared exception!
      try { 
        component0.kbd((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression  on the page. in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("Av;)`&5[LpiI)p");
      // Undeclared exception!
      try { 
        form0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("g]l/)%4dJ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Form form0 = new Form("5r}U/e9Kzf/}&8*");
      // Undeclared exception!
      try { 
        form0.frame("5r}U/e9Kzf/}&8*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.fileInput("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "l& 1#h", "START_DOCUMENT");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        fileInput0.dfn((Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("base");
      // Undeclared exception!
      try { 
        xmlEntityRef0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form((String) null);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        form0.checkboxGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("n\u0006PR>>3>");
      // Undeclared exception!
      try { 
        xmlEntityRef0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "(C)Ljava/lang/Character;", "(C)Ljava/lang/Character;");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        fileInput0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Select select0 = new Select((Component) null, "/?S-/vewl5I`>", "cB(P5X|X@dJ-&#-JfB:", "/?S-/vewl5I`>", (ISelectModel) null, false);
      // Undeclared exception!
      try { 
        select0.addFirst((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, (Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Form form0 = new Form("INVOKEINTERFACE org/mvel/integration/VariableResolverFactory.getVariableResolver");
      form0.hashCode();
      assertEquals("INVOKEINTERFACE org/mvel/integration/VariableResolverFactory.getVariableResolver", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.getSubmittedForm();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tried to access a form, but none was submitted.
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "x){{x:b_>d6O$");
      Table table0 = new Table(block0, "object");
      TextInput textInput0 = new TextInput(table0, "java.lang.String@0000000004", "object");
      Link link0 = new Link(table0, textInput0);
      StandaloneComponent standaloneComponent0 = link0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "y|/([ WM|QnKe", "pJi%7HMzW");
      List<Component> list0 = checkbox0._getChildren();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("-`JVtg^,ZD");
      String[] stringArray0 = new String[6];
      Component component0 = xmlEntityRef0.attributes(stringArray0);
      assertEquals("-`JVtg^,ZD", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Form form0 = new Form("The list of suffixes must not be null");
      Checkbox checkbox0 = new Checkbox(form0, (String) null, "D");
      // Undeclared exception!
      try { 
        checkbox0.label((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "*V$KvV", "*V$KvV");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      errorPage0._applyFormat(tableBlock0);
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "java.lang.String@0000000005", "h5");
      NumberInput numberInput0 = new NumberInput(textInput0, "java.lang.String@0000000009", "java.lang.String@0000000009");
      ActionExpression actionExpression0 = new ActionExpression("h5");
      Form form0 = new Form(numberInput0, "javascript", actionExpression0);
      Link link0 = new Link(form0, "org.mvel.conversion.IntegerCH$10");
      link0.end();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "mK;gW<a0Tl&BX", "mK;gW<a0Tl&BX");
      TextArea textArea0 = new TextArea(checkbox0, "', ", "mK;gW<a0Tl&BX");
      // Undeclared exception!
      try { 
        textArea0.end("', ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression '', '.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "", "OPXpD<mz7R_8Lh_L-:");
      // Undeclared exception!
      try { 
        radio0.end("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.dateFormat("", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder();
      ElExpression elExpression0 = new ElExpression((String) null);
      Image image0 = new Image(errorPage0, stringBuilder0, elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      ElExpression elExpression0 = new ElExpression("Compiler");
      List<Component> list0 = component0.findAll(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get(")}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ')}'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.up(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "exZ}bt`(<)_-IRe", "exZ}bt`(<)_-IRe");
      Component component0 = checkbox0.up((-1));
      assertSame(checkbox0, component0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "m8:eL.63cL].3IwVka", "</U@fh*p1CnGgQO");
      Hidden hidden1 = new Hidden((Component) null, "m8:eL.63cL].3IwVka", "-WeX|JowV-F");
      boolean boolean0 = hidden0.equals(hidden1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      boolean boolean0 = errorPage0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      boolean boolean0 = errorPage0.equals("U");
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Table table0 = new Table(block0, ":RS7g.5+8 +6eX^{@_");
      TableBlock tableBlock0 = table0.colgroup();
      Any any0 = tableBlock0.col();
      assertEquals("Any_1", any0.getComponentId());
      
      table0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "JG@sHo<oenI%\"bR", "col");
      // Undeclared exception!
      try { 
        errorPage0.add(hidden0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "processing namespaces must be enabled on parser (or factory) to have possible namespaces declared on elements", "U");
      Checkbox checkbox0 = new Checkbox(submit0, "U", "5h]x");
      checkbox0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "tK0{Pw");
      table0._getVisibleForm(true);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Form form0 = new Form("x8}iLkvdK#`]]i?ZYNM");
      Radio radio0 = new Radio(form0, "Can't add components to a component that is not an instance of IContainer.", "Col component can be added only to a TableBlock.");
      Submit submit0 = new Submit(radio0, "No corresponding component found for end expression '", "t{aZP#:YG");
      Form form1 = submit0._getVisibleForm(false);
      assertNotNull(form1);
      assertEquals("x8}iLkvdK#`]]i?ZYNM", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("q2TR{NsNc^@(pD`L(Lh");
      Form form0 = new Form(errorPage0, "q2TR{NsNc^@(pD`L(Lh", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("q2TR{NsNc^@(pD`L(Lh");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "i|1{zi^9", "println");
      Table table0 = new Table(checkbox0, "java.lang.String@0000000009");
      TableBlock tableBlock0 = table0.tbody();
      assertTrue(tableBlock0._isGeneratedId());
      
      tableBlock0.id("samp");
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "u9am0\"MK", "jQ");
      // Undeclared exception!
      try { 
        submit0.id("p");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "x){{x:b_>d6O$");
      Table table0 = new Table(block0, "object");
      Table table1 = table0.renderHint("x){{x:b_>d6O$");
      String string0 = table1._classReferenceFromHints();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "gI", "vJ)By,i");
      Table table0 = new Table(checkbox0, "ZmB1IufRr[b78");
      table0.tr();
      Class<NumberInput> class0 = NumberInput.class;
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance("", class0);
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      // Undeclared exception!
      try { 
        table0.renderComponent(xmlSerializerWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("W{l");
      xmlEntityRef0._getAction();
      assertEquals("W{l", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "&oo7ttmC[ak ", "*A4dMA3eh~eW)g");
      String[] stringArray0 = new String[8];
      Component component0 = hidden0.attributes(stringArray0);
      assertSame(component0, hidden0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Form form0 = new Form("&gt;");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        form0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Form form0 = new Form((String) null);
      String[] stringArray0 = new String[0];
      Component component0 = form0.attributes(stringArray0);
      assertEquals("wheel_components_Form", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attributes((String[]) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.addInternalRenderHint("nn*stfX7r");
      Table table1 = table0.renderHint("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "PYTOqyY0}yF@nOs");
      TextInput textInput0 = new TextInput(tableBlock0, "93jZU^", "93jZU^");
      Table table0 = new Table(textInput0, "93jZU^");
      ActionExpression actionExpression0 = new ActionExpression("93jZU^");
      TableBlock tableBlock1 = table0.thead();
      TableBlock tableBlock2 = tableBlock1.renderHint(actionExpression0);
      assertTrue(tableBlock2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      Submit submit0 = new Submit(component0, "Compiler", "`d)$>u");
      ActionExpression actionExpression0 = new ActionExpression("Compiler");
      Form form0 = new Form(submit0, "/", actionExpression0);
      form0.code();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Any any0 = new Any(errorPage0, (CharSequence) null);
      StringBuffer stringBuffer0 = new StringBuffer("uY|Y-*");
      DateInput dateInput0 = new DateInput(any0, "UEr(ho@v", "UEr(ho@v", stringBuffer0);
      TextInput textInput0 = new TextInput(dateInput0, "ol", "[w.`V}77+R");
      // Undeclared exception!
      try { 
        textInput0.em((Object) "UEr(ho@v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "e_v\"0Uc8i!", "e_v\"0Uc8i!");
      // Undeclared exception!
      try { 
        textArea0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "H");
      Text text0 = new Text(table0, "H");
      // Undeclared exception!
      try { 
        text0.cite((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Q");
      Text text0 = new Text(table0, "Q");
      Checkbox checkbox0 = new Checkbox(text0, "Q", "Q");
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        checkbox0.del((Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Form form0 = new Form("org.mvel.MVEL");
      // Undeclared exception!
      try { 
        form0.h5((Object) "org.mvel.MVEL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "div", "div");
      // Undeclared exception!
      try { 
        checkbox0.dfn();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(errorPage0, "div", actionExpression0);
      Component component0 = form0.noscript();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Could not encode string '");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "HH!D&62!v_xC B%f2bU", "Ti(U#G");
      Calendar calendar0 = MockCalendar.getInstance();
      Label label0 = new Label(textInput0, calendar0);
      Block block0 = new Block(label0);
      Component component0 = block0.pre((Object) "HH!D&62!v_xC B%f2bU");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "wheel.components.Component", "wheel.components.Component");
      // Undeclared exception!
      try { 
        checkbox0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address((Object) null);
      Component component1 = errorPage0.addFirst(component0);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Form form0 = new Form("JsR$`w/|D]LO.faH");
      // Undeclared exception!
      try { 
        form0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "YYrha6-wBq>B;~EM", "YYrha6-wBq>B;~EM");
      TextArea textArea0 = new TextArea(numberInput0, " (text value=", "mHd#;");
      Radio radio0 = new Radio(numberInput0, " (text value=", "div");
      // Undeclared exception!
      try { 
        textArea0.p((Object) radio0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "http://xmlpull.org/v1/doc/features.html#xml-roundtrip", "http://xmlpull.org/v1/doc/features.html#xml-roundtrip");
      // Undeclared exception!
      try { 
        hidden0.a((Object) "http://xmlpull.org/v1/doc/features.html#xml-roundtrip");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "x){{x:b_>d6O$");
      Table table0 = new Table(block0, "object");
      TextInput textInput0 = new TextInput(table0, "java.lang.String@0000000004", "object");
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("x){{x:b_>d6O$");
      // Undeclared exception!
      try { 
        textInput0.label((Object) initialFieldValue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "", "P@r[#Q:");
      // Undeclared exception!
      try { 
        numberInput0.param("", "P@r[#Q:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.reset("s!@4C4~k=6C(f+:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Form form0 = new Form("var");
      // Undeclared exception!
      try { 
        form0.ol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "", "OPXpD<mz7R_8Lh_L-:");
      Component component0 = errorPage0.big((Object) radio0);
      ElExpression elExpression0 = new ElExpression("R>(Emjvr](`*kh5&2");
      // Undeclared exception!
      try { 
        component0.fileInput("first character in input was UNICODE noncharacter (0xFFFE)- input requires int swapping", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Form form0 = new Form("g]l/)%4dJ");
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        form0.strong((Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Form form0 = new Form("5r}U/e9Kzf/}&8*");
      form0.selectModel();
      assertEquals("5r}U/e9Kzf/}&8*", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("K0JiSN_lc)1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "name", "name");
      checkbox0._setParent((Component) null);
      assertEquals("name", checkbox0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "&oo7ttmC[ak ", "*A4dMA3eh~eW)g");
      hidden0._clear();
      assertEquals("input", hidden0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.TextInput");
      ElExpression elExpression0 = new ElExpression("wheel.components.TextInput");
      Link link0 = new Link(table0, elExpression0);
      Component component0 = table0.u((Object) link0);
      assertTrue(component0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "<?xml version='1.0'");
      Component component0 = table0.br();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "O6Jh14pNW$bG", "_q'j_jw$v_|'`@");
      // Undeclared exception!
      try { 
        numberInput0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Form form0 = new Form("D(q%1F+lrz;vo8Z");
      // Undeclared exception!
      try { 
        form0.rawText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("g]l/)%4dJ");
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("CHECKCAST java/lang/Short", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Form form0 = new Form("W(`A%@lA+7'\"+9O");
      // Undeclared exception!
      try { 
        form0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "nBr+]");
      // Undeclared exception!
      try { 
        table0.wrapSelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(errorPage0, "div", actionExpression0);
      NumberInput numberInput0 = new NumberInput(form0, "div", (String) null);
      Block block0 = new Block(numberInput0);
      FormElement formElement0 = block0.submit("U");
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "", "", "", stringSelectModel0, false);
      Text text0 = new Text(select0, errorPage0);
      Checkbox checkbox0 = new Checkbox(text0, "bD=):", "bD=):");
      // Undeclared exception!
      try { 
        checkbox0.link();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "java.lang.String@0000000009", "h3");
      // Undeclared exception!
      try { 
        checkbox0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, ".odCjxPj4e76e|r", ".ah8kY0");
      // Undeclared exception!
      try { 
        hidden0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[6];
      Component component0 = errorPage0.li();
      // Undeclared exception!
      try { 
        component0.message("!2Qe|+P71vo", (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Form form0 = new Form(errorPage0, "div", actionExpression0);
      NumberInput numberInput0 = new NumberInput(form0, "div", (String) null);
      Block block0 = new Block(numberInput0);
      Component component0 = block0.strike();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(form0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000008");
      NumberInput numberInput0 = new NumberInput(form0, "java.lang.String@0000000008", "java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        numberInput0.h1((Object) form0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      assertEquals("Block_2", component0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Form form0 = new Form("n6Ddd39lkWo");
      Checkbox checkbox0 = new Checkbox(form0, "n6Ddd39lkWo", "org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate");
      // Undeclared exception!
      try { 
        checkbox0.i();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "</fragment>");
      Table table0 = new Table(errorPage0, "</fragment>");
      TableBlock tableBlock0 = table0.thead();
      // Undeclared exception!
      try { 
        hidden0.dd((Object) tableBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "rb[%gORR~u=p", "rb[%gORR~u=p");
      // Undeclared exception!
      try { 
        textArea0.title("pi1||o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("', ");
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "', ", "', ", (ISelectModel) null, elExpression0);
      Checkbox checkbox0 = new Checkbox(radioGroup0, "', ", "', ");
      Table table0 = new Table(checkbox0, "', ");
      table0.hr();
      assertEquals("', ", table0.getComponentId());
      
      table0.id("N<M%B/u_IF]I4kKkf]");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Form form0 = new Form("n6Ddd39lkWo");
      Checkbox checkbox0 = new Checkbox(form0, "n6Ddd39lkWo", "org.xmlpull.v1.wrapper.classic.XmlPullParserDelegate");
      // Undeclared exception!
      try { 
        checkbox0.script();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.hidden((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "N+q{2-CS}Hpx", "N+q{2-CS}Hpx");
      // Undeclared exception!
      try { 
        textArea0.small((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "2+kh=xZA$n|7x", "2+kh=xZA$n|7x");
      Block block0 = new Block(textArea0, "2+kh=xZA$n|7x");
      MockDate mockDate0 = new MockDate((-148), (-3375), (-3375), 1, 4392);
      Text text0 = (Text)block0.htmlText(mockDate0);
      assertTrue(text0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0.isHtml());
      assertFalse(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("g]l/)%4dJ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.li((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Form form0 = new Form("@ d\"y:Y}pILT}gb`6q'");
      Checkbox checkbox0 = new Checkbox(form0, "strike", "-> a");
      // Undeclared exception!
      try { 
        checkbox0.h5();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("[Z3MRnL7gk`-w-o*");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "_%7#K}U JHV)", "_%7#K}U JHV)");
      // Undeclared exception!
      try { 
        checkbox0.bdo("[Z3MRnL7gk`-w-o*");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Invalid number format");
      Component component0 = block0.h3((Object) xmlEntityRef0);
      assertEquals("Invalid number format", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "]<B!#(_UdP:U%U5r6e", "'n_gB");
      // Undeclared exception!
      try { 
        checkbox0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Form form0 = new Form("^rMx");
      // Undeclared exception!
      try { 
        form0.numberInput("^rMx", (CharSequence) "^rMx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "~?}{!75_{%-(h)", "wheel_ErrorPage");
      // Undeclared exception!
      try { 
        textInput0.h4((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Form form0 = new Form("XMs:g>KU6,");
      // Undeclared exception!
      try { 
        form0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000007");
      // Undeclared exception!
      try { 
        form0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "rb[%gORR~u=p", "rb[%gORR~u=p");
      Table table0 = new Table(textArea0, "pi1||o");
      // Undeclared exception!
      try { 
        textArea0.span((Object) table0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Form form0 = new Form("K@3O\"-Dk &W5}%}0");
      // Undeclared exception!
      try { 
        form0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "", "java.lang.reflect");
      // Undeclared exception!
      try { 
        hidden0.b((Object) "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.buttonInput("bT{'\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("-`JVtg^,ZD");
      // Undeclared exception!
      try { 
        xmlEntityRef0.entity("'F.'@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "name", "name");
      // Undeclared exception!
      try { 
        checkbox0.passwordInput(")v;AZb+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("', ");
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "', ", "', ", (ISelectModel) null, elExpression0);
      Checkbox checkbox0 = new Checkbox(radioGroup0, "', ", "', ");
      Table table0 = new Table(checkbox0, "', ");
      TableBlock tableBlock0 = table0.tfoot();
      // Undeclared exception!
      try { 
        tableBlock0.encode(",gK7uqoe0lgG8)BzA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "^nFFaTv", "^nFFaTv");
      // Undeclared exception!
      try { 
        radio0.var((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "8gWwr9F.=q", "8gWwr9F.=q");
      // Undeclared exception!
      try { 
        hidden0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Byte byte0 = new Byte((byte)46);
      Component component0 = link0.text(byte0);
      Table table0 = new Table(component0, "java.lang.String@0000000009");
      Component component1 = table0.object();
      StandaloneComponent standaloneComponent0 = component1._getTopLevelComponent(false);
      assertTrue(component1._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "{(5cF$W", "{(5cF$W");
      Checkbox checkbox0 = new Checkbox(fileInput0, "{(5cF$W", "{(5cF$W");
      // Undeclared exception!
      try { 
        checkbox0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      Component component1 = component0.acronym();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address((Object) null);
      TextInput textInput0 = new TextInput(component0, "BPS", "BPS");
      Component component1 = errorPage0.tt((Object) textInput0);
      assertTrue(component1._isGeneratedId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.TextInput");
      TableBlock tableBlock0 = table0.tbody();
      // Undeclared exception!
      try { 
        tableBlock0.radio("Component container: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      Component component1 = errorPage0.remove(component0);
      assertEquals("wheel_ErrorPage", component1.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Form form0 = new Form("");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        form0.abbr((Object) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "java.lang.String@0000000008", "java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        radio0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "", "nJ]m+u4%qfT", "nJ]m+u4%qfT");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        dateInput0._setSubmitValue(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'nJ]m+u4%qfT'.
         //
         verifyException("wheel.components.DateInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" KRgJ(vw(2`)u'3");
      // Undeclared exception!
      try { 
        xmlEntityRef0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("K0JiSN_lc)1");
      String string0 = xmlEntityRef0.getComponentName();
      assertEquals("XmlEntityRef", string0);
      assertEquals("K0JiSN_lc)1", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Form form0 = new Form("4kRE");
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.base("O6Jh14pNW$bG");
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Form form0 = new Form("5-fy");
      // Undeclared exception!
      try { 
        form0.strike((Object) "5-fy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "PYTOqyY0}yF@nOs");
      Component component0 = tableBlock0.q((Object) "93jZU^");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Form form0 = new Form("5RD>L/DAtUjm}%'X");
      // Undeclared exception!
      try { 
        form0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      TextArea textArea0 = new TextArea(block0, "Invalid number format", (String) null);
      // Undeclared exception!
      try { 
        textArea0.del();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      Component component1 = component0.dt();
      assertEquals("Block_2", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.address();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Form form0 = new Form("input");
      // Undeclared exception!
      try { 
        form0.imageSubmit("input", "input");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Form form0 = new Form("'fXT+jz7tG%");
      // Undeclared exception!
      try { 
        form0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "<?xml version='1.0'");
      ActionExpression actionExpression0 = new ActionExpression("5-");
      Component component0 = table0.form("<?xml version='1.0'", actionExpression0);
      assertFalse(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Form form0 = new Form("t|ZfB");
      // Undeclared exception!
      try { 
        form0.form("MP*5G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      Component component0 = errorPage0.legend((Object) text0);
      // Undeclared exception!
      try { 
        component0.textarea("in comment after two dashes (--) next character must be > not ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, " ;*", " ;*");
      // Undeclared exception!
      try { 
        hidden0.samp((Object) " ;*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img((String) null, "$.(");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "<?xml version='1.0'");
      TableRow tableRow0 = table0.tr();
      Hidden hidden0 = new Hidden(tableRow0, "5-", "5-");
      Radio radio0 = new Radio(hidden0, "<?xml version='1.0'", "<?xml version='1.0'");
      // Undeclared exception!
      try { 
        radio0.numberInput("br");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("wheel.components.TableBlock@0000000003");
      // Undeclared exception!
      try { 
        tableBlock0.checkboxGroup("wheel.components.TableBlock@0000000003", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "exZ}bt`(<)_-IRe", "exZ}bt`(<)_-IRe");
      ElExpression elExpression0 = new ElExpression("Could not find component with id '");
      // Undeclared exception!
      try { 
        checkbox0.fileInput((String) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Form form0 = new Form("52, @0@xe%r:R.6 m:f");
      Checkbox checkbox0 = new Checkbox(form0, "52, @0@xe%r:R.6 m:f", "52, @0@xe%r:R.6 m:f");
      // Undeclared exception!
      try { 
        checkbox0.i((Object) checkbox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.fileInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setComponentId("(6(");
      assertEquals("div", errorPage0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Form form0 = new Form("!dRDTG");
      form0.getAttributes();
      assertEquals("!dRDTG", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "property name should not be null", "java.lang.String@0000000004");
      TextInput textInput0 = new TextInput(fileInput0, "java.lang.String@0000000014", "java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        textInput0.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Form form0 = new Form("strike");
      // Undeclared exception!
      try { 
        form0.checkbox("wheel_ErrorPage");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.util.ThisLiteral");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.blockquote();
      // Undeclared exception!
      try { 
        errorPage0.find("]^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ]^ on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<<<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "5h'{8nEW{%hr9-,An#", "5h'{8nEW{%hr9-,An#");
      Short short0 = new Short((short)37);
      // Undeclared exception!
      try { 
        numberInput0.ins((Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("Col component can be added only to a TableBlock.");
      Link link0 = new Link(block0, block0);
      // Undeclared exception!
      try { 
        link0.select("Col component can be added only to a TableBlock.", (ISelectModel) null, "Col component can be added only to a TableBlock.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      Component component1 = component0.p();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_2", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Form form0 = new Form("br");
      Checkbox checkbox0 = new Checkbox(form0, (String) null, "br");
      // Undeclared exception!
      try { 
        checkbox0.acronym((Object) form0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wheel.components.TextInput");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.h6();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("wheel.components.TextInput", table0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "xmlns", "pa_z`ixU+Z{><{JY");
      // Undeclared exception!
      try { 
        textArea0.s();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.requestFocus();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Form form0 = new Form("4kRE");
      // Undeclared exception!
      try { 
        form0.dateInput("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "|W", "|W");
      // Undeclared exception!
      try { 
        radio0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "div", "div");
      // Undeclared exception!
      try { 
        checkbox0.sup((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "expected <![CDATA[ for comment start", "rqo");
      // Undeclared exception!
      try { 
        checkbox0.small();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "PYTOqyY0}yF@nOs");
      TextInput textInput0 = new TextInput(tableBlock0, "93jZU^", "93jZU^");
      Table table0 = new Table(textInput0, "93jZU^");
      // Undeclared exception!
      try { 
        table0.frame("93jZU^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Component component0 = block0.table();
      ElExpression elExpression0 = new ElExpression("Compiler");
      component0.kbd((Object) elExpression0);
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "PYTOqyY0}yF@nOs");
      TextInput textInput0 = new TextInput(tableBlock0, "93jZU^", "93jZU^");
      Table table0 = new Table(textInput0, "93jZU^");
      Component component0 = table0.label();
      assertTrue(component0._isGeneratedId());
      assertEquals("93jZU^", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "java.lang.String@0000000008", "java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        fileInput0.map("java.lang.String@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn((Object) "java.lang.String@0000000009");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("g]l/)%4dJ");
      Component component0 = xmlEntityRef0.actionBinding("5u");
      assertEquals("g]l/)%4dJ", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "~l|7uP[:SyLY~J", "~l|7uP[:SyLY~J");
      // Undeclared exception!
      try { 
        checkbox0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Form form0 = new Form((String) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.h6(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Byte byte0 = new Byte((byte)46);
      Component component0 = link0.text(byte0);
      Short short0 = new Short((short)46);
      // Undeclared exception!
      try { 
        component0.h2((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "i|1{zi^9", "println");
      Component component0 = checkbox0.clasS("p|:/vyvX");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("println", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("Insensitive", (ISelectModel) null, "Insensitive");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Form form0 = new Form("n6Ddd39lkWo");
      // Undeclared exception!
      try { 
        form0.legend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Form form0 = new Form("!C]DbVfA+9&w");
      DateInput dateInput0 = new DateInput(form0, "!C]DbVfA+9&w", "only one colon is allowed in attribute name when namespaces are enabled", "!C]DbVfA+9&w");
      // Undeclared exception!
      try { 
        dateInput0.kbd();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuilder stringBuilder0 = new StringBuilder();
      TableRow tableRow0 = new TableRow(errorPage0);
      stringBuilder0.append((Object) tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Form form0 = new Form("wheel_ErrorPage");
      Integer integer0 = new Integer(48);
      // Undeclared exception!
      try { 
        form0.dt((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "_wrapper", "_wrapper");
      // Undeclared exception!
      try { 
        fileInput0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
