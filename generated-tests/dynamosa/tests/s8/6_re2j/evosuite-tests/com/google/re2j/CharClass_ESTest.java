/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 17:53:23 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 66640;
      intArray0[1] = 120514;
      intArray0[2] = 2272;
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = new CharClass();
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 1981);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {66640, 120514, 2272, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass1));
      assertNotNull(charClass5);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass5.appendRange(120514, 120514);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {66640, 120514, 2272, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass1));
      assertNotNull(charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass1);
      
      String string0 = charClass6.toString();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {66640, 120514, 2272, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass1));
      assertEquals("[0x10450-0x1d6c2 0x8e0-0x0 0x0 0x1d6c2]", string0);
      assertNotNull(string0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass4.cleanClass();
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass3));
      assertNotNull(charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      
      CharClass charClass8 = charClass7.appendLiteral(1981, 43463);
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass1));
      assertNotNull(charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass1);
      
      CharClass charClass9 = charClass7.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {66640, 120514, 2272, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass3));
      assertNotNull(charClass9);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass3);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral((-674), (-674));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1327;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int1 = (-1559);
      CharClass charClass1 = charClass0.appendFoldedRange((-1559), (-3337));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = (-1559);
      intArray2[2] = 4;
      intArray2[3] = 2272;
      intArray2[1] = (-1559);
      CharClass charClass5 = charClass1.appendTable(intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      
      // Undeclared exception!
      charClass4.appendFoldedClass(intArray2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1118;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1118}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1119, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1119, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      charClass2.appendFoldedRange(1118, 7019);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(539, 701);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendRange(675, 66640);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.negateClass();
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendRange(93, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendLiteral(0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 120514;
      intArray0[2] = 2272;
      intArray0[3] = 1947;
      intArray0[5] = 4;
      CharClass charClass2 = charClass1.appendLiteral(1947, (-789));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      String string0 = charClass2.toString();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(64335, 64335);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral((-888), (-45));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(64335, 64335);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendLiteral((-888), (-45));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      int[] intArray1 = charClass2.toArray();
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {64335, 64335, (-888), (-888)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 1131;
      intArray0[1] = 1131;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1131}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1132, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[3][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-1288));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      int int0 = (-938);
      int int1 = 0;
      CharClass charClass1 = charClass0.appendLiteral((-938), 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[3][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendLiteral((-938), (-938));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.negateClass();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 120432;
      int int1 = (-1);
      int int2 = (-1563);
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-5401), (-5401));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-5401);
      intArray0[1] = (-5401);
      intArray0[2] = 803;
      intArray0[3] = (-5401);
      intArray0[4] = (-5401);
      intArray0[5] = (-5401);
      intArray0[6] = (-1);
      intArray0[7] = (-5401);
      intArray0[8] = (-5401);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[26];
      intArray0[0] = 0;
      intArray0[1] = (-202);
      intArray0[2] = 4;
      intArray0[3] = 0;
      intArray0[4] = 65;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 3742;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(26, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendLiteral(0, 477);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass2.appendLiteral(401, 3742);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      
      int[][] intArray2 = new int[0][7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass5 = charClass4.appendNegatedTable(intArray2);
      assertEquals(26, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 947;
      intArray2[1] = 947;
      intArray2[2] = 616;
      intArray2[3] = 64335;
      intArray1[8] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(978, 978);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(978, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      intArray0[1] = 0;
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1327;
      int int0 = 3276;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1327;
      intArray1[1] = 0;
      CharClass charClass0 = new CharClass(intArray1);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray1);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange(43456, 1327);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass0.negateClass();
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass4);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass2.appendNegatedClass(intArray1);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass3.cleanClass();
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass6);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass5.negateClass();
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass7);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      
      String string0 = charClass7.toString();
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      
      CharClass charClass8 = charClass1.appendFoldedRange(32, (-1052));
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1327, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass8);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      
      int[][] intArray2 = new int[1][8];
      intArray2[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass6.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-3);
      CharClass charClass1 = charClass0.appendFoldedRange(3533, (-3));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray1, (-3));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-23);
      CharClass charClass1 = charClass0.appendLiteral((-23), (-23));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = 0;
      intArray0[1] = (-202);
      intArray0[2] = 4;
      intArray0[3] = 0;
      intArray0[4] = 65;
      intArray0[5] = 0;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(11, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1593), (-2));
      assertEquals(11, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(1114111, 65);
      assertEquals(11, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 93;
      int int0 = 1279;
      intArray0[1] = 1279;
      intArray0[2] = (-1336);
      int int1 = 93;
      intArray0[3] = 93;
      intArray0[4] = (-45);
      int int2 = (-1936);
      intArray0[5] = (-1936);
      intArray0[6] = (-2925);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {93, 1279, (-1336), 93, (-45), (-1936), (-2925)}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {93, 1279, (-1336), 93, (-45), (-1936), (-2925)}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 3910);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {93, 1279, (-1336), 93, (-45), (-1936), (-2925)}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int int3 = 1296;
      int int4 = 2060;
      CharClass charClass3 = charClass2.appendLiteral(1296, 2060);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {93, 1279, (-1336), 93, (-45), (-1936), (-2925)}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign(intArray0, 3910);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = 64;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-222);
      intArray0[1] = 1932;
      intArray0[2] = 459;
      int int0 = 539;
      intArray0[3] = 539;
      intArray0[4] = 2;
      intArray0[5] = 7531;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-222), 1932, 459, 539, 2, 7531, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2;
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 66640;
      intArray0[1] = 120514;
      intArray0[2] = 2272;
      intArray0[3] = 1947;
      intArray0[4] = (-1090);
      intArray0[5] = 120514;
      intArray0[6] = 120514;
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2272;
      intArray2[1] = 2272;
      intArray2[2] = 66640;
      intArray2[3] = (-1090);
      intArray2[4] = 74850;
      intArray1[1] = intArray2;
      CharClass charClass2 = charClass0.appendLiteral(459, 426);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 10;
      CharClass charClass1 = charClass0.appendRange(10, 10);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int1 = 866;
      CharClass charClass2 = charClass0.appendFoldedRange(866, 471);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 866;
      intArray0[1] = 471;
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {866, 471}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {866, 471}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.negateClass();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {866, 471}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      
      int[][] intArray1 = new int[1][4];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.appendClassWithSign(intArray0, 441);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      String string0 = charClass2.toString();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      int int0 = 64;
      CharClass charClass2 = charClass1.appendFoldedRange(64, 64);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendLiteral((-1), (-1));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass0.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(64335, 64335);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral((-888), 1114111);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendClassWithSign(intArray0, 65);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass0));
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass0);
      
      String string0 = charClass4.toString();
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass5));
      assertEquals("[0x0-0x10ffff 0xfffffc88]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass6);
      assertNotSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-576);
      intArray0[1] = 3276;
      intArray0[2] = 3276;
      intArray0[3] = 0;
      intArray0[4] = (-3);
      intArray0[5] = 0;
      intArray0[6] = (-1293);
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 3276, 3276, 0, (-3), 0, (-1293), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 3276, 3276, 0, (-3), 0, (-1293), 3276}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1293), 3276, (-576), 3276, (-3), 0, 3276, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendRange((-1293), (-3367));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1293), 3276, (-1293), (-3367), (-3), 0, 3276, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1293), 1114111, (-3366), (-4), (-3), 0, 3276, 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-3366), 1114111, (-1293), 1114111, (-3), 0, 3276, 0}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass1.negateClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-3366), 1114111, (-1293), 1114111, (-3), 0, 3276, 0}, intArray0);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      
      String string0 = charClass3.toString();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-3366), 1114111, (-1293), 1114111, (-3), 0, 3276, 0}, intArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass7 = charClass3.appendNegatedTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111, (-1293), 1114111, (-3), 0, 3276, 0}, intArray0);
      assertNotNull(charClass7);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3739;
      intArray0[1] = 5786;
      intArray0[2] = 1849;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3739, 5786, 1849, 0}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1327;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedRange(1327, 1326);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      int[] intArray1 = charClass3.toArray();
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1327, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass4 = charClass3.appendLiteral(9398, (-674));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, (-934));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-222);
      intArray0[0] = (-222);
      intArray0[1] = 1932;
      intArray0[2] = 459;
      int int1 = 539;
      intArray0[3] = 539;
      int int2 = 2;
      intArray0[4] = 2;
      intArray0[5] = 7531;
      int int3 = (-437);
      intArray0[6] = (-437);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-222), 1932, 459, 539, 2, 7531, (-437)}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      
      CharClass charClass3 = new CharClass();
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendLiteral(0, 63);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(charClass4);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.negateClass();
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass1));
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass1.appendLiteral(978, 0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass4));
      assertNotNull(charClass6);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      
      // Undeclared exception!
      charClass6.appendFoldedRange(0, 1830);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1740;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1650);
      intArray0[5] = 8189;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1740, 0, 0, (-1650), 8189}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1650), 8189, 0, 1740, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1650), 8189, 0, 1740, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1650), 1114111, 0, 1740, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1740;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1740, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1740, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(0, 1740);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1740, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      
      String string0 = charClass2.toString();
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[26];
      intArray0[0] = 0;
      intArray0[1] = (-187);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, 1678);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-2547));
      assertEquals(26, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass0.negateClass();
      assertEquals(26, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 499;
      intArray0[1] = 125;
      intArray0[2] = (-1);
      intArray0[3] = (-2392);
      intArray0[4] = 2911;
      intArray0[5] = 1072;
      intArray0[6] = 2696;
      intArray0[7] = 5866;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {499, 125, (-1), (-2392), 2911, 1072, 2696, 5866}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 498, (-2391), 2910, 1073, 2695, 5867, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral((-2391), 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 498, (-2391), 2910, 1073, 2695, 5867, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-222);
      intArray0[1] = 1932;
      intArray0[2] = 459;
      intArray0[3] = 539;
      intArray0[4] = 2;
      intArray0[5] = 7531;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-222), 1932, 459, 539, 2, 7531, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2;
      intArray2[1] = (-222);
      intArray2[2] = 539;
      intArray2[3] = 1991;
      intArray2[4] = (-437);
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-222), 1932, 459, 539, 2, 7531, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(4, 2211);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-222), 1932, 459, 539, 2, 7531, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      
      CharClass charClass3 = charClass0.appendRange(1991, (-222));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-222), 1932, 459, 539, 2, 7531, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.negateClass();
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-222), 1932, 459, 539, 2, 7531, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 66640;
      intArray0[1] = 120514;
      intArray0[2] = 2272;
      intArray0[3] = 1947;
      intArray0[4] = (-1090);
      intArray0[5] = 4;
      intArray0[6] = 74850;
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2272;
      intArray2[1] = 2272;
      intArray2[2] = 66640;
      intArray2[3] = (-1090);
      intArray2[4] = 74850;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      charClass0.appendFoldedRange(6247, 66640);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = new CharClass();
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendLiteral(63, (-635));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass1.negateClass();
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertNotNull(charClass5);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass5.appendLiteral((-3106), (-3106));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass3));
      assertNotNull(charClass6);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass3);
      
      CharClass charClass7 = charClass5.negateClass();
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass3));
      assertNotNull(charClass7);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      
      CharClass charClass8 = charClass3.negateClass();
      assertFalse(charClass3.equals((Object)charClass5));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass7));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass5));
      assertNotNull(charClass8);
      assertNotSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass7);
      assertSame(charClass3, charClass8);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass6);
      assertNotSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-315);
      intArray0[1] = 0;
      int int0 = 4287;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 4287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = (-1650);
      CharClass charClass2 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass1.appendLiteral(66639, 1003);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass0.appendLiteral(3780, 3780);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 5564;
      intArray0[2] = (-1232);
      int int1 = 4422;
      intArray0[3] = 4422;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 5564, (-1232), 4422}, intArray0);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-576);
      intArray0[7] = 3276;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 5;
      intArray0[5] = 0;
      intArray0[6] = (-1293);
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange((-1293), (-3367));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass1.negateClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      
      String string0 = charClass3.toString();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass7 = charClass3.appendNegatedTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-576), 0, 0, 0, 5, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass7);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1327;
      int int0 = 3276;
      intArray0[1] = 3276;
      intArray0[2] = (-158);
      intArray0[3] = 0;
      intArray0[4] = 32;
      intArray0[5] = 0;
      intArray0[6] = (-1293);
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 3276, (-158), 0, 32, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 3276, (-158), 0, 32, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 3276, (-158), 0, 32, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange((-1293), (-3367));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 3276, (-158), 0, 32, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 3276, (-158), 0, 32, 0, (-1293), 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1000;
      intArray0[0] = 1000;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1000}, intArray0);
      assertNotNull(charClass0);
      
      int int1 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1000}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(1000, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1000}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1000}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      // Undeclared exception!
      try { 
        charClass3.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(978, 978);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = (-3375);
      int int1 = 32;
      int int2 = 1446;
      CharClass charClass2 = null;
      try {
        charClass2 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(978, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass0.appendLiteral((-489), 63);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      int[][] intArray0 = new int[0][2];
      CharClass charClass6 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 66640;
      intArray0[1] = 3120;
      intArray0[2] = 0;
      intArray0[3] = 4;
      String string0 = CharClass.charClassToString(intArray0, (-2));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {66640, 3120, 0, 4}, intArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 3120);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[6][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 4;
      intArray2[1] = 1987;
      intArray2[2] = 3120;
      intArray2[3] = 3120;
      intArray2[4] = 4;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertEquals(6, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      int[][] intArray3 = new int[3][6];
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = intArray2;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 1987;
      intArray3[1] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray0));
      
      intArray5[0] = 4177;
      intArray5[1] = 3120;
      intArray5[2] = 0;
      intArray5[3] = 3120;
      intArray5[4] = (-2);
      intArray3[2] = intArray5;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray3, (-737));
      assertEquals(3, intArray3.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray3));
      assertNotNull(charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray3, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray3);
      
      CharClass charClass4 = charClass3.appendLiteral((-2), (-2));
      assertEquals(3, intArray3.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray3));
      assertNotNull(charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray3, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray3);
      
      // Undeclared exception!
      try { 
        charClass4.appendClassWithSign(intArray5, (-2393));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[26];
      intArray0[0] = 0;
      intArray0[1] = (-202);
      intArray0[2] = 4;
      intArray0[3] = 0;
      intArray0[4] = 65;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 3742;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(26, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendLiteral(0, 477);
      assertEquals(26, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 120514;
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1327;
      intArray0[1] = 3276;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1327, 3276, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][0];
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 66640;
      intArray0[1] = 120514;
      intArray0[2] = 2272;
      intArray0[3] = 1947;
      intArray0[4] = (-1090);
      intArray0[5] = 4;
      intArray0[6] = 74850;
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2272;
      intArray2[1] = 2272;
      intArray2[2] = 66640;
      intArray2[3] = (-1090);
      intArray2[4] = 74850;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      intArray0[7] = 0;
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {66640, 120514, 2272, 1947, (-1090), 4, 74850, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendLiteral(74850, 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {66640, 120514, 2272, 1947, (-1090), 4, 74850, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 66640;
      CharClass charClass2 = new CharClass(intArray0);
      charClass0.appendClassWithSign(intArray0, 66640);
      charClass0.appendFoldedRange((-770), 451);
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3058;
      intArray0[1] = 3876;
      intArray0[2] = 232;
      intArray0[3] = 0;
      intArray0[4] = (-2209);
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.appendClassWithSign(intArray0, 3876);
      assertArrayEquals(new int[] {0, 3057, (-2209), 1114111, (-2209), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 4;
      intArray0[0] = 4;
      int int1 = 412;
      intArray0[1] = 412;
      intArray0[2] = (-1088);
      intArray0[3] = 40;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(0, 4);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int int2 = (-849);
      // Undeclared exception!
      charClass2.appendTableWithSign(intArray1, (-849));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClassWithSign(intArray0, 0);
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      charClass1.negateClass();
      assertArrayEquals(new int[] {1, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      intArray0[1] = 1118;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 0);
      charClass2.toString();
      // Undeclared exception!
      charClass2.appendFoldedRange(1118, 7019);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      CharClass charClass1 = charClass0.appendLiteral(64335, 64335);
      CharClass.charClassToString(intArray0, (-487));
      charClass0.appendLiteral((-888), (-45));
      CharClass charClass2 = charClass1.appendRange((-45), 64335);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 591;
      intArray2[1] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = 0;
      intArray4[1] = 1112;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 1112;
      intArray5[1] = 1112;
      intArray5[2] = 591;
      intArray5[3] = 1112;
      intArray5[4] = 0;
      intArray5[5] = 591;
      intArray5[6] = 0;
      intArray5[7] = 6089;
      intArray5[8] = 0;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 6089);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toArray();
      CharClass charClass1 = charClass0.appendLiteral((-683), (-683));
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-222);
      int int0 = 1932;
      intArray0[1] = 1932;
      intArray0[2] = 459;
      intArray0[3] = 539;
      intArray0[4] = 2;
      intArray0[5] = 7531;
      int int1 = (-437);
      intArray0[6] = (-437);
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-202);
      intArray0[2] = 1480;
      intArray0[3] = 0;
      intArray0[4] = 65;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 3742;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      charClass1.appendClassWithSign(intArray0, 4135);
      assertArrayEquals(new int[] {0, (-202), 1480, 0, 65, 0, 0, 3742}, intArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.negateClass();
      intArray0[2] = 0;
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 391;
      CharClass charClass1 = charClass0.appendFoldedRange(391, 391);
      CharClass charClass2 = charClass1.negateClass();
      charClass2.cleanClass();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 391);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[26];
      intArray0[0] = 0;
      intArray0[1] = (-202);
      intArray0[2] = 4;
      intArray0[3] = 0;
      intArray0[4] = 65;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 3742;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange((-1593), (-2));
      CharClass charClass2 = charClass1.appendFoldedRange(1114111, 65);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass.charClassToString(intArray0, (-2313));
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1628);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendFoldedRange(42890, (-2313));
      // Undeclared exception!
      try { 
        charClass4.appendTableWithSign((int[][]) null, (-144));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1327;
      intArray0[1] = 3276;
      intArray0[2] = (-158);
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1293);
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      charClass2.appendLiteral(0, 0);
      charClass2.appendClassWithSign(intArray0, (-1948));
      assertArrayEquals(new int[] {1327, 3276, (-158), 0, 0, 0, (-1293), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      CharClass charClass1 = charClass0.appendClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      charClass1.appendClassWithSign(intArray0, 441);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(0, 0);
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass1.cleanClass();
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[3];
      charClass0.cleanClass();
      CharClass charClass1 = new CharClass(intArray0);
      charClass0.cleanClass();
      int int0 = 66639;
      CharClass charClass2 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[3];
      CharClass charClass1 = charClass0.cleanClass();
      int int0 = (-1650);
      CharClass charClass2 = new CharClass(intArray0);
      charClass0.cleanClass();
      charClass1.appendLiteral(66639, 1003);
      charClass0.appendLiteral(3780, 91);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2979);
      intArray0[1] = 0;
      intArray0[2] = 57344;
      intArray0[3] = 300;
      intArray0[4] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 4287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[8];
      CharClass charClass2 = charClass1.appendFoldedRange(64, 120432);
      CharClass charClass3 = charClass2.appendLiteral((-1), (-1563));
      charClass0.negateClass();
      CharClass charClass4 = charClass3.cleanClass();
      charClass2.negateClass();
      CharClass charClass5 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass6 = charClass5.appendLiteral(64, 120432);
      assertSame(charClass6, charClass4);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1327;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(2528, (-3528));
      charClass1.negateClass();
      CharClass charClass2 = new CharClass(intArray0);
      charClass2.cleanClass();
      CharClass charClass3 = charClass1.appendLiteral(921, 3635);
      CharClass charClass4 = charClass0.negateClass();
      charClass0.appendFoldedRange(2192, 0);
      charClass4.appendFoldedRange((-3528), 2192);
      CharClass charClass5 = charClass3.negateClass();
      assertSame(charClass0, charClass5);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 427;
      intArray0[1] = 1580;
      intArray0[2] = 0;
      intArray0[3] = (-3375);
      intArray0[4] = (-686);
      intArray0[5] = 4209;
      intArray0[6] = 32;
      intArray0[7] = 1446;
      intArray0[8] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(427, 0);
      CharClass charClass2 = charClass1.appendLiteral(4209, 0);
      assertSame(charClass1, charClass2);
  }
}
