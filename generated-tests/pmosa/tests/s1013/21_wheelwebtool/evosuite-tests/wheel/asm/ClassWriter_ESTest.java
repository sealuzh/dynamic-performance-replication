/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 02:03:33 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.time.Clock;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, 16777222);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(506);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@166f696e
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1327));
      int int0 = classWriter0.newClass("LocalVariableTable");
      assertEquals(2, int0);
      
      Double double0 = new Double(0.0);
      Double.max(1267.5889837879427, 1267.5889837879427);
      Double.sum(2, 2);
      int int1 = classWriter0.newConst(double0);
      assertEquals(3, int1);
      
      classWriter0.visitAnnotation("LocalVariableTable", true);
      Attribute attribute0 = new Attribute("LocalVariableTable");
      classWriter0.visitAttribute(attribute0);
      int int2 = classWriter0.newNameType("o)||hEx4WU[1yX*", "Yu");
      assertEquals(7, int2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("java/lang/Object", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(506);
      classWriter0.visitAnnotation("U!(yK]/", true);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("}qon6", "}qon6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '}qon6.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777219);
      Item item0 = classWriter0.newDouble(16777219);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212675);
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      classWriter0.visitOuterClass("org.apache.commons.io.IOCase", (String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(44);
      classWriter0.visitOuterClass("", "", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3552);
      classWriter0.newNameType("EnclosingMethod", "(Q:`G-2");
      classWriter0.addType("EnclosingMethod");
      classWriter0.visitEnd();
      classWriter0.lastMethod = null;
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(3552, "Qq", "Qq", "w~]MQu~[pT", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212675);
      classWriter0.addType("wheel.asm.Frame");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(506);
      Long long0 = new Long(2);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(489);
      classWriter0.newMethodItem("", "", "", true);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("5`1[7w=H|+.~@", "5`1[7w=H|+.~@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 5`1[7w=H|+/~@
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newLong(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">VJ7wK";
      stringArray0[1] = ">VJ7wK";
      stringArray0[2] = ">VJ7wK";
      stringArray0[3] = ">VJ7wK";
      stringArray0[4] = "";
      stringArray0[5] = ".%j5qD3:";
      stringArray0[6] = "";
      stringArray0[7] = ".%j5qD3:";
      classWriter0.visitMethod(0, "", ">VJ7wK", ".%j5qD3:", stringArray0);
      classWriter0.addUninitializedType("Label offset position has not been resolved yet", 18);
      classWriter0.visitInnerClass("T`pCT0", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "Ueg}$>3MP6a", 0);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("AT4x7:", "b.", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newLong(0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2403));
      classWriter0.toByteArray();
      String[] stringArray0 = new String[0];
      classWriter0.visit((-2403), (-2403), "Zc!Y?A1+;+", "XkS^f2c?p\"/0Iwj", (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-220);
      ClassWriter classWriter0 = new ClassWriter((-220));
      byte byte0 = (byte)0;
      classWriter0.toByteArray();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "Deprecated";
      stringArray0[2] = "Deprecated";
      stringArray0[3] = "Deprecated";
      stringArray0[4] = "Deprecated";
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        classWriter0.visit(166, (byte)0, "Deprecated", "Deprecated", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.visitInnerClass("", "EnclosingMethod", "", 32);
      classWriter0.visitInnerClass("", "", "", 32);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(252);
      Item[] itemArray0 = new Item[2];
      Item item0 = classWriter0.newFieldItem("Wy*d\"g)7", "", "");
      itemArray0[0] = item0;
      Item item1 = new Item();
      classWriter0.newField("", "", "");
      itemArray0[1] = item1;
      classWriter0.typeTable = itemArray0;
      Item item2 = classWriter0.newFloat(1.0F);
      assertFalse(item2.equals((Object)item1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(431);
      classWriter0.lastMethod = null;
      Item[] itemArray0 = new Item[7];
      Item item0 = classWriter0.newClassItem("SourceDebugExtension");
      itemArray0[0] = item0;
      Item item1 = classWriter0.newDouble((-1055.229316215286));
      itemArray0[1] = item1;
      ClassWriter classWriter1 = new ClassWriter(2);
      Item item2 = classWriter1.newLong(0L);
      itemArray0[2] = item2;
      Item item3 = classWriter1.newMethodItem("SourceDebugExtension", "", "", false);
      itemArray0[3] = item3;
      Item item4 = new Item();
      itemArray0[4] = item4;
      Item item5 = classWriter0.newDouble((-702.6966));
      itemArray0[5] = item5;
      Item item6 = classWriter1.newFloat((-1301.2043F));
      itemArray0[6] = item6;
      classWriter0.typeTable = itemArray0;
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-2713), ":Qt", ":Qt", "e#X8Z\"CT5?QBeG6", ":Qt");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newDouble(0.0);
      classWriter0.newFloat(1);
      classWriter0.version = 1;
      byte[] byteArray0 = new byte[4];
      classWriter0.visitAnnotation("Deprecated", false);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)51;
      String string0 = "SourceFile";
      String string1 = "=@GN(EWRTg";
      classWriter0.newMethod("SourceFile", "a[l#,C{4O@t9uQg|(K=", "=@GN(EWRTg", false);
      byteArray0[3] = (byte) (-46);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (byte) (-46), (byte)51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -38
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1002));
      classWriter0.visitSource("Insensitive", "Insensitive");
      classWriter0.addUninitializedType("Insensitive", 285);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Insensitive";
      stringArray0[1] = "";
      stringArray0[2] = "S`<";
      stringArray0[3] = "";
      stringArray0[4] = "";
      classWriter0.toByteArray();
      String string0 = "Q";
      classWriter0.newUTF8("Q");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("S`<", "0o{a{Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'S`<.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newFloat(1);
      classWriter0.version = 1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)51;
      byteArray0[2] = (byte)51;
      classWriter0.toByteArray();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Deprecated";
      // Undeclared exception!
      try { 
        classWriter0.visit(1, (byte)51, "Deprecated", "", "Deprecated", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(506);
      classWriter0.newInteger(506);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("}qon6", "}qon6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '}qon6.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2209);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Clock clock0 = MockClock.systemUTC();
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      MockClock.offset(clock0, duration0);
      classWriter0.newClass("LocalVariableTable");
      Double double0 = new Double(0.0);
      Double.max(0.0, (-1.0));
      Double.sum(0.0, 1267.5889837879427);
      classWriter0.newConst("LocalVariableTable");
      classWriter0.visitAnnotation("The wildcard array must not be null", true);
      Attribute attribute0 = new Attribute("V/*c^6F,T-51I,`");
      classWriter0.visitAttribute(attribute0);
      classWriter0.newNameType("`:", "o)||hEx4WU[1yX*");
      classWriter0.visitOuterClass("The wildcard array must not be null", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1002));
      classWriter0.visitSource("Insensitive", "Insensitive");
      classWriter0.addUninitializedType("Insensitive", 285);
      classWriter0.addUninitializedType("byte", 285);
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 819;
      ClassWriter classWriter0 = new ClassWriter(819);
      classWriter0.index = 819;
      String string0 = ">";
      classWriter0.visitOuterClass(">", ">", ">");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = ">";
      stringArray0[3] = "i89\"}N9}";
      stringArray0[4] = "i89\"}N9}";
      stringArray0[5] = ">";
      stringArray0[6] = "i89\"}N9}";
      stringArray0[7] = "Z'k";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 826, "i89\"}N9}", ">", ">", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1723));
      classWriter0.index = 1612;
      Item item0 = classWriter0.newDouble((-1723));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212675);
      String[] stringArray0 = new String[0];
      classWriter0.visit(285212675, 285212675, "", "wheel.asm.Frame", "wheel.asm.Frame", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(44);
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.compare(true, true);
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(1017);
      classWriter0.visitEnd();
      classWriter0.newField("n}FCJ*y()pe]h_(lHW", "", "n}FCJ*y()pe]h_(lHW");
      String string0 = "F$e";
      classWriter0.toByteArray();
      classWriter0.newMethod("F$e", "Insensitive", "SourceDebugExtension", true);
      String string1 = "Deprecated";
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter0.visit(1017, 2435, "", "Deprecated", (String) null, (String[]) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(5, (-872));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(506);
      Boolean boolean0 = new Boolean("}qon6");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(506, "}qon6", "}qon6", "}qon6", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2959);
      classWriter0.visitSource("n se\"L", (String) null);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("5(", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '5(.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1089));
      Type type0 = Type.CHAR_TYPE;
      classWriter0.newConstItem(type0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(256, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(506);
      classWriter0.visitSource((String) null, "Z>$");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1723));
      Item[] itemArray0 = new Item[8];
      Item item0 = classWriter0.newDouble(184.84966157);
      itemArray0[0] = item0;
      Item item1 = classWriter0.key3;
      itemArray0[1] = item1;
      Item item2 = classWriter0.newFloat((-1723));
      itemArray0[2] = item2;
      Item item3 = classWriter0.newClassItem("x9Z@|N8(nP`=U");
      itemArray0[3] = item3;
      Item item4 = classWriter0.newFloat((-1723));
      itemArray0[4] = item4;
      item3.strVal1 = "x9Z@|N8(nP`=U";
      Item item5 = new Item(41, item4);
      itemArray0[5] = item5;
      Item item6 = classWriter0.newInteger(41);
      itemArray0[6] = item6;
      Item item7 = classWriter0.newClassItem("Ua=fQh$D");
      itemArray0[7] = item7;
      classWriter0.typeTable = itemArray0;
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("aQt4th", "aQt4th");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'aQt4th.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1107));
      Item item0 = classWriter0.newInteger((-1107));
      Item item1 = classWriter0.newInteger((-1107));
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1107));
      Type type0 = Type.getReturnType("Synthetic");
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1107), "Synthetic", "O]?U<@K--PGmZ/#", "Synthetic", type0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(511);
      classWriter0.newLong(511);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "SourceFile";
      classWriter0.visit(511, 3717, "", (String) null, "SourceFile", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(511);
      Item item0 = classWriter0.newLong(511);
      Item item1 = classWriter0.newLong(511);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?B-N9T.");
      ClassWriter classWriter0 = new ClassWriter(44);
      int int0 = classWriter0.addType("EnclosingMethod");
      assertEquals(1, int0);
      
      classWriter0.newConst("EnclosingMethod");
      classWriter0.visitInnerClass("EnclosingMethod", "EnclosingMethod", (String) null, 1541);
      int int1 = classWriter0.newConst("EnclosingMethod");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      Item item0 = classWriter0.newDouble((-14));
      classWriter0.toByteArray();
      classWriter0.visitSource("RuntimeVisibleParameterAnnotations", "uFDZ%xF *M");
      Item item1 = classWriter0.newDouble((-14));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(8);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      Item item0 = classWriter0.newFloat(8);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      int int0 = classWriter0.newField("The filter must not be null", "The filter must not be null", "The filter must not be null");
      assertEquals(4, int0);
      
      classWriter0.addType("Invalid IOCase name: ");
      System.setCurrentTimeMillis(4);
      int int1 = classWriter0.addType("Invalid IOCase name: ");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      classWriter0.toByteArray();
      int int0 = classWriter0.addUninitializedType("", (-18));
      assertEquals(1, int0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = classWriter0.newClass("");
      assertEquals(2, int1);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "wheel.asm.Edge");
      byte[] byteArray0 = ClassWriter.TYPE;
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.CanWriteFileFilter", (-885));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classWriter0.newClass("");
      ClassWriter classWriter1 = new ClassWriter(2);
      // Undeclared exception!
      try { 
        classWriter1.getCommonSuperClass("", "wheel.asm.Edge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
      
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "S/=)";
      stringArray0[1] = "S/=)";
      stringArray0[2] = "i0'>N?Aeu+";
      stringArray0[3] = "S/=)";
      stringArray0[4] = "";
      stringArray0[5] = "i0'>N?Aeu+";
      classWriter0.visit((-4022), (-18), "i0'>N?Aeu+", "S/=)", "S/=)", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-4532);
      ClassWriter classWriter0 = new ClassWriter((-4532));
      Item item0 = new Item(80);
      classWriter0.toByteArray();
      String string0 = "InnerClasses";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      classWriter0.newFieldItem("", "InnerClasses", "(`)]8$=sqM:L23KlB");
      classWriter0.newField("", "InnerClasses", "(`)]8$=sqM:L23KlB");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      classWriter0.visitInnerClass("org.apache.commons.io.filefilter.CanWriteFileFilter", (String) null, "org.apache.commons.io.filefilter.CanWriteFileFilter", (-18));
      Item item0 = classWriter0.key3;
      classWriter0.toByteArray();
      classWriter0.addUninitializedType("", (-18));
      classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      classWriter0.addUninitializedType("", (-18));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
