/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:11:32 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("aF(u*CG9.*Rs(=IVRp");
      constantPoolGen0.lookupInteger(155);
      constantPoolGen0.toString();
      int int0 = constantPoolGen0.lookupDouble(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Long.BYTES;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(8, 3183);
      Constant[] constantArray0 = new Constant[21];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantMethodHandle0.toString();
      ConstantInteger constantInteger0 = new ConstantInteger(8);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int1 = Long.SIZE;
      constantPoolGen1.addDouble(1.0);
      int int2 = constantPoolGen1.lookupDouble(64);
      assertEquals(23, constantPoolGen1.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addClass("");
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(2);
      ObjectType objectType0 = iNSTANCEOF0.getLoadClassType(constantPoolGen0);
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-1513.6328843));
      int int0 = constantPoolGen0.lookupString("(Unknown attribute &[kN-P~f-iWc|5'&<init>");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1758, 1758);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1758, 1758);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupClass("2b`F[^!{g>b");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addInteger(1);
      constantPool0.copy();
      int int0 = constantPoolGen0.lookupLong((-1));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "&Y?Mjyu>Gkc;", "aF(u*CG9.*Rs(=IVRp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(31);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(31, 182);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-2167);
      String string0 = "R4M!#/0pJEy-{z";
      String string1 = "(Unknown attribute ";
      constantPoolGen0.lookupFieldref("R4M!#/0pJEy-{z", "R4M!#/0pJEy-{z", "(Unknown attribute ");
      constantPoolGen0.lookupString("R4M!#/0pJEy-{z");
      // Undeclared exception!
      try { 
        constantPoolGen0.addString("|DCzxUng#aWa,)n#^^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantInteger constantInteger0 = new ConstantInteger(21);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[5] = (Constant) constantInteger1;
      constantInteger1.setBytes(21);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("UGn-\"C{");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantString constantString0 = new ConstantString(249);
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(9, 917);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(9, 9);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1047.279991564));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-2021161078));
      constantArray0[0] = (Constant) constantDouble0;
      String string0 = "Z0GA{'tkLiDl}i\"P'uw#Z0GA{'tkLiDl}i\"P'uw#6^;";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Z0GA{'tkLiDl}i\"P'uw#Z0GA{'tkLiDl}i\"P'uw#6^;");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((-3459));
      constantArray0[2] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString((-2021161078));
      constantArray0[3] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(244);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      Constant.getComparator();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(244);
      int int0 = constantPoolGen0.addFloat(244);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[0] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      DADD dADD0 = new DADD();
      dADD0.consumeStack(constantPoolGen0);
      dADD0.getType(constantPoolGen0);
      constantPoolGen0.lookupClass("");
      constantPoolGen0.lookupFieldref("l|F", "", "8)LW;SU[:ep");
      constantPoolGen0.addFloat(0L);
      constantPoolGen0.addFloat(3);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(100, 100);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(100, 100);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantClass constantClass0 = new ConstantClass((-1189));
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addClass("");
      constantPoolGen0.addDouble((-1761.159981));
      constantPoolGen0.addInteger(3);
      constantPoolGen0.lookupMethodref("d|Iw", (String) null, "3>@G)/lZX*0$@Vdl#");
      constantPoolGen0.lookupFloat(618.0F);
      constantPoolGen0.lookupNameAndType((String) null, (String) null);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addFloat(3);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      DADD dADD0 = new DADD();
      DADD dADD1 = new DADD();
      constantPoolGen0.getConstant(5);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(73, 73);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" }, null);% }, null);");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(73, 73);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = Constants.ILLEGAL_OPCODE;
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addNameAndType("<illegal opcode>", "Invalid index index: ");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 3);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = Byte.BYTES;
      int int2 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 6)\n");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = Constants.CONSTRUCTOR_NAME;
      constantPoolGen0.addNameAndType("<init>", "<init>");
      constantPoolGen0.addMethodref("<init>", "<init>", "<init>");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      constantPoolGen0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantNameAndType cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2726, 2726);
      constantInterfaceMethodref0.copy();
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong(4680L);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "?5E_D8#ec|!(K";
      constantPoolGen0.addFieldref("?5E_D8#ec|!(K", "}NTIpYXX4sx{<W5,", "?5E_D8#ec|!(K");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFloat(2358.9963F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      DADD dADD0 = new DADD();
      DADD dADD1 = new DADD();
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1172));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1172
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      constantPoolGen0.addInteger(65536);
      constantPoolGen0.lookupInteger((-2021161078));
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.DECLARED;
      String string0 = "h";
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat(33.08F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(917);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(212);
      constantPoolGen0.setConstant(212, constantLong1);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[0] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      DADD dADD0 = new DADD();
      dADD0.getType(constantPoolGen0);
      constantPoolGen0.lookupLong(0L);
      constantPoolGen0.lookupClass("");
      constantPoolGen0.lookupFieldref("l|F", "", "8)LW;SU[:ep");
      int int0 = constantPoolGen0.addFloat(0L);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Double.SIZE;
      constantPoolGen0.lookupDouble(64);
      constantPoolGen0.addInteger((-1));
      constantPoolGen0.addInteger((-1));
      int int1 = new Integer((-1));
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((-126L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantDouble constantDouble0 = new ConstantDouble((-126L));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble((-126L));
      constantArray0[2] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger(256);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger(712);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("p", "p", "Unknown constant type ");
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addDouble(0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "<aVB2z";
      constantPoolGen0.addInterfaceMethodref("<aVB2z", "/0G {'tkLiDl}i\"P'uw", "/0G {'tkLiDl}i\"P'uw");
      ObjectType objectType0 = Type.OBJECT;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFloat(1.0F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Pattern.CANON_EQ;
      ConstantFloat constantFloat0 = new ConstantFloat(6);
      constantFloat0.clone();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantFloat0.clone();
      byte[] byteArray0 = new byte[0];
      BCELComparator bCELComparator1 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator1);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((byte) (-14), 2344);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: -14
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[23];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.toString();
      ConstantClass constantClass0 = new ConstantClass(2884);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2884
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat(2171.0F);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantPoolGen0.addLong(4611686018427387904L);
      constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
      constantPoolGen0.getSize();
      constantFloat0.clone();
      constantFloat0.setBytes(4);
      constantFloat0.setBytes(2171.0F);
      int int0 = Pattern.LITERAL;
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((byte) (-14), (byte) (-14));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: -14
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      int int0 = (-850);
      ConstantClass constantClass0 = new ConstantClass((-850));
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-850), (-850));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addDouble(813.101501237);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -850, reference_index = -850)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = Constants.CONSTRUCTOR_NAME;
      constantPoolGen0.addNameAndType("<init>", "<init>");
      constantPoolGen0.addString("<init>");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((String) null, "<init>", "<init>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addString("");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String string0 = ",#}`Z2_JAmT";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",#}`Z2_JAmT");
      constantPoolGen0.addString("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, (-1824));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5zP V");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      int int0 = Character.MAX_RADIX;
      constantPoolGen0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int1 = 1573;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1573, 36);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1573
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[21];
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantLong constantLong0 = new ConstantLong(3183);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantInteger constantInteger0 = new ConstantInteger(3183);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3816, (-1908874352));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.getFinalConstantPool();
      ConstantFloat constantFloat0 = new ConstantFloat(3183);
      constantFloat0.toString();
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3816
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3049, 3049);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3049
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = ",#}`Z2_JAmT";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",#}`Z2_JAmT");
      constantPoolGen0.addString(",#}`Z2_JAmT");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1973), 2);
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1973
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      ConstantString constantString0 = new ConstantString(2224);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantString1.clone();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2224
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "&";
      constantPoolGen0.lookupNameAndType("&", "&");
      int int0 = ObjectStreamConstants.baseWireHandle;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      String string1 = "Bogus";
      constantPoolGen1.lookupInterfaceMethodref("Bogus", "Bogus", (String) null);
      // Undeclared exception!
      try { 
        constantPool0.getConstant((-1390));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1390. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupDouble(1042.0);
      constantPoolGen0.lookupClass("l^*");
      constantPoolGen0.addUtf8("#%Invalid index index: ");
      ConstantLong constantLong0 = new ConstantLong((-3514L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong1;
      constantArray0[3] = (Constant) constantLong1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(244);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      constantPoolGen0.lookupInterfaceMethodref("b@p", ".:A[-mqxS1", "org.apache.bcel.generic.MethodGen");
      int int0 = constantPoolGen0.getSize();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      constantPoolGen0.getSize();
      constantPoolGen0.toString();
      constantPoolGen0.addInteger(256);
      constantPoolGen0.lookupMethodref((String) null, (String) null, "*,Z.nT");
      constantPoolGen0.lookupFloat((-1));
      constantPoolGen1.lookupDouble(1.0);
      constantPoolGen0.lookupDouble(2.0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.OBJECT;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2884, 2884);
      Constant[] constantArray0 = new Constant[21];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.toString();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addLong(0L);
      constantPoolGen1.toString();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("teMS\"Y|gtboG>E2 ov");
      constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen0);
      BasicType basicType0 = Type.BYTE;
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addLong(1L);
      constantPoolGen0.getConstant(254);
      constantPoolGen0.size = 254;
      constantPoolGen0.addFloat(254);
      constantPoolGen0.lookupDouble(254);
      constantPoolGen0.lookupLong(254);
      int int0 = constantPoolGen0.addLong(1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-998), (-998));
      ConstantFieldref constantFieldref0 = new ConstantFieldref(266, (-998));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
      assertEquals(256, constantPool2.getLength());
      
      int int0 = constantPoolGen1.lookupDouble((-176.5029472));
      assertEquals((-1), int0);
      assertEquals(3, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.addString("");
      constantPoolGen0.toString();
      constantPoolGen0.addMethodref("", "", "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger(5);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantPoolGen0.addInterfaceMethodref("", "a[};rUe5fJ^B%2W*9", "");
      assertEquals(9, constantPoolGen0.getSize());
      
      Constant.getComparator();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addFieldref("", "", "");
      constantPoolGen1.lookupFieldref("", "", "");
      int int0 = Byte.BYTES;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen3.addLong(2);
      constantPoolGen3.lookupNameAndType("", "");
      ConstantPool constantPool0 = constantPoolGen2.getConstantPool();
      constantPoolGen1.addString("");
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.adjustSize();
      assertEquals(6, constantPoolGen1.getSize());
  }
}
