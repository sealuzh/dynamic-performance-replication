/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:16:47 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.linear.LinearSystemSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      cCSMatrix0.columnMajorIterator();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 5);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      MockRandom mockRandom0 = new MockRandom(3014);
      CCSMatrix.random(5, 3014, 0.0, (Random) mockRandom0);
      cCSMatrix1.subtract((Matrix) cCSMatrix0);
      cCSMatrix0.toMatrixMarket();
      MatrixFactory<Matrix> matrixFactory0 = null;
      cCSMatrix0.to(matrixFactory0);
      int int1 = 1771;
      int int2 = (-805);
      CCSMatrix.zero(int1, int2, int0);
      CCSMatrix.zero(int1, int2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3368;
      int int1 = 543;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3368, 543);
      int int2 = 1620;
      MockRandom mockRandom0 = new MockRandom((-1L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(1620, 0.0, (Random) mockRandom0);
      Matrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      SparseMatrix.randomSymmetric(17, (double) 1620, (Random) mockRandom0);
      cCSMatrix0.each(matrixProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix0);
      cCSMatrix1.columnMajorIterator();
      cCSMatrix0.toColumnVector();
      int int3 = 0;
      cCSMatrix0.blankOfShape(int1, int3);
      cCSMatrix1.iteratorOrNonZeroColumns();
      int int4 = (-2295);
      cCSMatrix1.toRowVector();
      cCSMatrix0.blankOfShape(int2, int4);
      cCSMatrix1.iteratorOrNonZeroColumns();
      mockRandom0.nextFloat();
      cCSMatrix0.copyOfRows(int0);
      int int5 = 791;
      double double0 = (-1082.1736990007);
      cCSMatrix1.set(int0, int5, double0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      int int6 = 3903;
      cCSMatrix1.determinant();
      MatrixFunction matrixFunction0 = null;
      cCSMatrix1.updateAt(int6, int1, matrixFunction0);
      cCSMatrix0.nonZeroIteratorOfColumn(int4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)45;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(2, cCSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2721);
      cCSMatrix0.minInColumn(3);
      cCSMatrix0.set(3, 22, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setRow(0, 1.0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 48;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(48, 0, doubleArray0);
      CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 48;
      doubleArray2[2] = (double) 48;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 48;
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals(7, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 32;
      int int1 = 7;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 7, 32);
      DecimalFormat decimalFormat0 = new DecimalFormat("M?");
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      cCSMatrix0.setColumn(2, (double) 32);
      cCSMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.product();
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 23;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2412);
      double double0 = (-790.0);
      cCSMatrix0.setColumn(13, (-790.0));
      cCSMatrix0.toSparseMatrix();
      int int0 = 1775;
      cCSMatrix0.setColumn(int0, double0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 2515.571602446976;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray4[7] = (double) 0;
      doubleArray4[8] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 2515.571602446976;
      doubleArray5[5] = (-1012.11071986);
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-1012.11071986);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray6[5] = (double) 0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-1012.11071986);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 2515.571602446976;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 2515.571602446976;
      doubleArray8[2] = (-1012.11071986);
      doubleArray8[3] = (-1012.11071986);
      doubleArray0[7] = doubleArray8;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0.0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2164, 2164);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      DenseMatrix.constant(6, 6, 6);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("32");
      assertEquals(1, cCSMatrix1.cardinality());
      assertEquals(32.0, cCSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-3692));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3691
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(10, 10, 0);
      cCSMatrix0.product();
      int int1 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 0, matrixFunction0);
      int int2 = 9;
      Matrix matrix0 = cCSMatrix0.copyOfShape(0, 9);
      int int3 = 1757;
      int int4 = 0;
      // Undeclared exception!
      try { 
        Matrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(15);
      cCSMatrix0.setColumn(13, (double) 15);
      cCSMatrix0.copyOfColumns(13);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(494, 13, 1424.6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '494' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      DenseMatrix.constant(6, 6, 6);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix1 = new CCSMatrix(6, 6);
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.copyOfColumns(0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix2.rows());
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix2.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 5);
      MockRandom mockRandom0 = new MockRandom(3014);
      CCSMatrix.random(5, 3014, 0.0, (Random) mockRandom0);
      cCSMatrix0.copyOfRows(5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt((-1), (-2180), matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(2397.6612855481);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-5);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1771, 437);
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.eachNonZeroInColumn((byte)2, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(0);
      cCSMatrix0.transpose();
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      cCSMatrix1.max();
      // Undeclared exception!
      try { 
        DenseVector.fromCSV("Qv{z&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(17, 3236);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(17, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toBinary();
      cCSMatrix0.eachInColumn(5, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1167.476);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1379.1950186;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = (-1374);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 4105, 3);
      cCSMatrix0.nonZeroAt(13, 3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-1167.476);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1379.1950186;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = (-1374);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1374)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = (-2279);
      cCSMatrix0.getRow((-2279));
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 7, 32);
      DecimalFormat decimalFormat0 = new DecimalFormat("M?");
      decimalFormat0.setMinimumIntegerDigits(32);
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      int int0 = 2;
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int1 = (-730);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-730);
      cCSMatrix0.blank();
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 2;
      doubleArray0[0] = (-2759.440563454627);
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = (double) 15;
      cCSMatrix1.getRow((-1591));
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(15, 7, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(columnMajorMatrixIterator0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 29;
      intArray0[1] = 2;
      intArray0[2] = (-2052);
      intArray0[3] = (-3242);
      intArray0[4] = 6;
      intArray0[5] = 37;
      intArray0[6] = 29;
      intArray0[7] = (-2145645797);
      intArray0[8] = 1000;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '29' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-236), 1514, (double) (-236), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 2);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      String string0 = cCSMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n0 2 0\n", string0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(string0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2, 368);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(368, cCSMatrix1.columns());
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      cCSMatrix1.setAll((-1.0));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(736, cCSMatrix1.cardinality());
      assertEquals((-1.0), cCSMatrix1.min(), 0.01);
      assertEquals(368, cCSMatrix1.columns());
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(1771, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1771
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(13, 2, 13);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(13, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(13);
      assertEquals(13, cCSMatrix0.rows());
      assertEquals(26, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(13.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0.5, cCSMatrix1.density(), 0.01);
      assertEquals(2, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(2, 6);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(2, cCSMatrix1.cardinality());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.16666666666666666, cCSMatrix1.density(), 0.01);
      assertEquals(6, cCSMatrix1.columns());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.diagonal(6, 100.0);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(100.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.constant(6, 6, 6);
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(6, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(10, 10, 0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(10, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.product();
      assertEquals(0.0, double0, 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(10, cCSMatrix0.columns());
      
      int int1 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)Integer.MAX_VALUE).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 0, matrixFunction0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2.147483647E9, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.01, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(10, cCSMatrix0.columns());
      
      int int2 = 9;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(0, 9);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2.147483647E9, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.01, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(9, cCSMatrix1.columns());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      int int3 = 1757;
      int int4 = 0;
      // Undeclared exception!
      try { 
        Matrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 3674;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)100).when(vectorAccumulator0).accumulate();
      cCSMatrix0.toRowVector();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      cCSMatrix0.set(3674, 3674, 3674);
      int int1 = 2065;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int1);
      int int2 = 18;
      int int3 = (-127);
      int int4 = 13;
      int int5 = (-127);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(int5, vectorFunction0);
      int int6 = 1956;
      cCSMatrix0.nonZeroAt(int6, int5);
      Matrix.zero(int3, int4);
      double double0 = 100.0;
      MockRandom mockRandom0 = new MockRandom(int5);
      SparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int0, int2, int0);
      int int7 = 37;
      cCSMatrix2.swapRows(int0, int7);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int8 = (-1443);
      cCSMatrix2.minInColumn(int8);
      cCSMatrix1.max();
      double double1 = (-1167.476);
      cCSMatrix0.getOrElse(int5, int0, double1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 975;
      doubleArray0[2] = (double) 21;
      int[] intArray0 = new int[6];
      intArray0[0] = 21;
      intArray0[1] = 975;
      intArray0[2] = 975;
      intArray0[3] = 975;
      intArray0[4] = 21;
      intArray0[5] = 975;
      CCSMatrix cCSMatrix0 = new CCSMatrix(21, 975, 975, doubleArray0, intArray0, intArray0);
      assertEquals(975, cCSMatrix0.cardinality());
      assertEquals(0.047619047619047616, cCSMatrix0.density(), 0.01);
      assertEquals(975, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(21, cCSMatrix0.rows());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 975.0, 21.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {21, 975, 975, 975, 21, 975}, intArray0);
      assertNotNull(cCSMatrix0);
      
      double double0 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 7, 32);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("M?");
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("M?#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("-M?", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("M?", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("M?#", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      String string0 = cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n32 7 0\n", string0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("M?#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("-M?", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("M?", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("M?#", decimalFormat0.toPattern());
      assertNotNull(string0);
      
      cCSMatrix0.setColumn(2, (double) 32);
      assertEquals(32, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(32.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      
      double double0 = cCSMatrix0.max();
      assertEquals(32.0, double0, 0.01);
      assertEquals(32, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(32.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1167.476);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1379.1950186;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.8, cCSMatrix0.density(), 0.01);
      assertEquals((-1167.476), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int0 = (-2305);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(16, (-2305));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1167.476);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1379.1950186;
      int int0 = 1859;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1859);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "Index '";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromMatrixMarket(string0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldColumn(int0, vectorAccumulator1);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int0, int0);
      cCSMatrix1.multiply(matrix0);
      double double0 = 2.0;
      Matrix.diagonal(int0, double0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int1 = (-3261);
      cCSMatrix1.getOrElse(int0, int1, doubleArray0[1]);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      DenseMatrix.constant(6, 6, 6);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(1, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3674;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)100).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      int int1 = 29;
      cCSMatrix0.set(29, 29, 29);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2065);
      int int2 = 18;
      int int3 = 3598;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(3598, vectorFunction0);
      Matrix.zero((-127), 13);
      double double0 = 100.0;
      MockRandom mockRandom0 = new MockRandom(int3);
      SparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int0, int2, int0);
      int int4 = 37;
      cCSMatrix2.swapRows(int1, int4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int5 = (-1443);
      cCSMatrix2.minInColumn(int5);
      cCSMatrix1.max();
      double double1 = (-1167.476);
      cCSMatrix0.getOrElse(int3, int0, double1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)100).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      cCSMatrix0.set(29, 29, 29);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(29, 3674, 2065);
      int int0 = 13;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)29, (-18.93), (-747.22164325)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(3598, vectorFunction0);
      cCSMatrix1.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.euclideanNorm();
      assertEquals(2.8284271247461903, double0, 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(5418.89).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      cCSMatrix0.set(29, 29, 29);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2071);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      cCSMatrix0.sum();
      int int0 = 1;
      cCSMatrix0.minInColumn(int0);
      int int1 = 8;
      double double0 = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      double double1 = 100.0;
      cCSMatrix1.setAll(double1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 7, 32);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("$?");
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("$?#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-$?", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("$?", decimalFormat0.getPositivePrefix());
      assertEquals("$?#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      String string0 = cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n32 7 0\n", string0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("$?#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-$?", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("$?", decimalFormat0.getPositivePrefix());
      assertEquals("$?#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertNotNull(string0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = (double) 7;
      doubleArray1[2] = (double) 7;
      doubleArray1[3] = (double) 32;
      doubleArray1[0] = (double) 7;
      doubleArray1[5] = (double) 7;
      doubleArray1[6] = (double) 7;
      doubleArray1[7] = (double) 7;
      doubleArray1[8] = (double) 7;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.8888888888888888, cCSMatrix1.density(), 0.01);
      assertEquals(32.0, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(9, cCSMatrix1.columns());
      assertEquals(8, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(iterator0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)100).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      int int0 = 29;
      cCSMatrix0.set(29, 29, 29);
      int int1 = 2065;
      CCSMatrix.identity(2065);
      int int2 = (-127);
      int int3 = 13;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat("4&DS21wni");
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      cCSMatrix0.setColumn(2065, (-2759.440563454627));
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) int1;
      doubleArray1[1] = (double) int2;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int3;
      doubleArray1[4] = (double) int1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) int2;
      double double0 = (-743.8683026);
      doubleArray2[1] = double0;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 6, 6);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      MatrixOperation<Matrix> matrixOperation0 = ooPlaceMatricesMultiplication0.partiallyApply(denseMatrix0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      assertNotNull(matrixOperation0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      LinearSystemSolver linearSystemSolver0 = cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, linearSystemSolver0.equations());
      assertEquals(6, linearSystemSolver0.unknowns());
      assertNotNull(linearSystemSolver0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(6);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(6, cCSMatrix1.cardinality());
      assertEquals(6, cCSMatrix1.rows());
      assertEquals(0.16666666666666666, cCSMatrix1.density(), 0.01);
      assertEquals(6, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)100).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      cCSMatrix0.set(29, 29, 29);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2065);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cCSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = int0;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2734);
      cCSMatrix0.maxInColumn(13);
      CCSMatrix.zero(2734, 1961);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1409, 1961, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3674, 3674, 3674);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3674, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3674, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.maxInColumn(37);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3674, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3674, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 7, 32);
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(32);
      DecimalFormat decimalFormat0 = new DecimalFormat("M?");
      DecimalFormat decimalFormat1 = new DecimalFormat();
      cCSMatrix1.toMatrixMarket((NumberFormat) decimalFormat1);
      cCSMatrix1.setColumn(13, (double) 32);
      CCSMatrix.from2DArray((double[][]) null);
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int0);
      cCSMatrix2.max();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[4] = (-4106.9280191);
      doubleArray1[1] = (-1167.476);
      doubleArray1[2] = (-1.6513270716726045);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int0 = 32;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(32, 32, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 7, 32);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(32, cCSMatrix0.rows());
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(32);
      DecimalFormat decimalFormat0 = new DecimalFormat("M?");
      byte byte0 = (byte)45;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      cCSMatrix0.rank();
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)45;
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.sum();
      cCSMatrix1.minInColumn(byte0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 16);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(16, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int0 = 3065;
      MockRandom mockRandom0 = new MockRandom(16);
      assertNotNull(mockRandom0);
      
      CCSMatrix.random(16, 3065, 0.0, (Random) mockRandom0);
      Matrix matrix0 = cCSMatrix0.copyOfRows(16);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix0, matrix0, matrix0, cCSMatrix1);
      cCSMatrix0.iteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1167.476);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1379.1950186;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(5, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
      assertEquals((-1167.476), cCSMatrix0.min(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.8, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int0 = 2;
      double[] doubleArray2 = null;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(5, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
      assertEquals((-1167.476), cCSMatrix0.min(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(0.8, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(5, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        Matrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)100).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      byte byte0 = (byte)45;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-40);
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.sum();
      int int0 = 3;
      cCSMatrix1.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      int[] intArray0 = new int[6];
      intArray0[0] = 1765;
      intArray0[1] = 5;
      intArray0[2] = 3674;
      intArray0[3] = 5;
      intArray0[4] = 3674;
      intArray0[5] = 3674;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.maxInColumn(intArray0[5]);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(15);
      assertEquals(15, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.06666666666666667, cCSMatrix0.density(), 0.01);
      assertEquals(15, cCSMatrix0.columns());
      assertEquals(15, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.minInColumn(13);
      assertEquals(0.0, double0, 0.01);
      assertEquals(15, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.06666666666666667, cCSMatrix0.density(), 0.01);
      assertEquals(15, cCSMatrix0.columns());
      assertEquals(15, cCSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(32, 1405.8861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(2397.6612855481);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfShape(1, 1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      CCSMatrix cCSMatrix2 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertEquals(1, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(1.0, cCSMatrix2.density(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(1.0, cCSMatrix2.max(), 0.01);
      assertEquals(1, cCSMatrix2.rows());
      assertEquals(1, cCSMatrix2.columns());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(cCSMatrix2);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      int int0 = 13;
      cCSMatrix0.setColumn(13, (double) 32);
      cCSMatrix0.minInColumn(13);
      MockRandom mockRandom0 = new MockRandom((-496L));
      CCSMatrix.random(13, 32, 100.0, (Random) mockRandom0);
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      cCSMatrix0.setColumn(13, (double) 32);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2721);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[7] = 3;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(byteArray0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CCSMatrix.identity(32);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      cCSMatrix0.setColumn(13, 3674.0);
      cCSMatrix0.maxInColumn(13);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3674, 3674);
      cCSMatrix0.copyOfColumns(15);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)100).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(100, vectorAccumulator0);
      cCSMatrix0.set(29, 29, 29);
      CCSMatrix.identity(2065);
      int int0 = (-127);
      int int1 = 13;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1531.8905645350453, (double)3674, 100.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(3598, vectorFunction0);
      Matrix.zero(int0, int1);
      int int2 = 20;
      cCSMatrix0.copyOfRows(int2);
      int int3 = 283;
      double double0 = (-1736.7);
      cCSMatrix0.set(int3, int1, double0);
      int int4 = 1718;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int0, int4, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 23;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(23.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(23.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(4, cCSMatrix1.cardinality());
      assertEquals(2, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(23.0, cCSMatrix1.max(), 0.01);
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      cCSMatrix1.copyOfRows(1734);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(9, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(18, 2);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(18, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(18, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(501);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 501
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      assertEquals(0.07692307692307693, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(13, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(13, cCSMatrix0.cardinality());
      assertEquals(13, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(13);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(13, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(13, cCSMatrix1.rows());
      assertEquals(13, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.07692307692307693, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(15);
      assertEquals(15, cCSMatrix0.columns());
      assertEquals(0.06666666666666667, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(15, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(15, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)15, 2893.533435611, Double.POSITIVE_INFINITY, (-3631.0), 3033.6176657).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      assertEquals(225, cCSMatrix0.cardinality());
      assertEquals(15, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals((-3631.0), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(15, cCSMatrix0.rows());
      assertEquals(Double.POSITIVE_INFINITY, cCSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn((-983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -983
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 249;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(249, 249);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(90, vectorFunction0);
      cCSMatrix0.manhattanNorm();
      int int1 = 3;
      double double0 = cCSMatrix0.diagonalProduct();
      int int2 = 8;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRow(int2, vectorAccumulator0);
      cCSMatrix0.iteratorOfColumn(int1);
      int int3 = 722;
      cCSMatrix0.add(double0);
      cCSMatrix0.minInColumn(int3);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-89);
      byteArray0[0] = byte0;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      int int4 = 3937;
      cCSMatrix1.nonZeroIteratorOfColumn(int4);
      cCSMatrix1.nonZeroRowMajorIterator();
      SparseMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
      int int5 = 24;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int5, int0, matrixFunction0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      double double0 = (-1520.4);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1688, 1688, (-1520.4));
      assertEquals(1688, denseMatrix0.rows());
      assertEquals(1688, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(1688, denseMatrix0.rows());
      assertEquals(1688, denseMatrix0.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(1688, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CCSMatrix.block(cCSMatrix1, denseMatrix0, cCSMatrix1, denseMatrix0);
      int int0 = (-586);
      MockRandom mockRandom0 = new MockRandom(int0);
      CCSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(15);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(15, cCSMatrix0.columns());
      assertEquals(15, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(15, cCSMatrix0.cardinality());
      assertEquals(0.06666666666666667, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setColumn(13, (double) 15);
      assertEquals(15, cCSMatrix0.columns());
      assertEquals(0.1288888888888889, cCSMatrix0.density(), 0.01);
      assertEquals(15, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(15.0, cCSMatrix0.max(), 0.01);
      assertEquals(29, cCSMatrix0.cardinality());
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(13, 13, 13);
      assertEquals(13, denseMatrix0.rows());
      assertEquals(13, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      CCSMatrix.block(denseMatrix0, matrix0, matrix0, denseMatrix0);
      long long0 = 1000L;
      MockRandom mockRandom0 = new MockRandom(long0);
      int int0 = 15;
      double double0 = 1.0;
      CCSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      double[][] doubleArray0 = new double[0][4];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int int0 = 1592;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1592, 15, 1592);
      Matrix matrix0 = cCSMatrix0.divide((-1712.373184));
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.max();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix2 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix2, matrix1, matrix2, matrix0);
      int int1 = (-1592);
      cCSMatrix1.copyOfShape(int0, int1);
      long long0 = 151L;
      MockRandom mockRandom1 = new MockRandom(long0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(6, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(5, vectorFunction0);
      assertEquals(5, cCSMatrix0.cardinality());
      assertEquals(0.1388888888888889, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 6, 6);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(6, 6, 6);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(6, cCSMatrix1.columns());
      assertEquals(6, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.blankOfShape(5, 5);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertEquals(5, cCSMatrix0.cardinality());
      assertEquals(0.1388888888888889, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix2.density(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(5, cCSMatrix2.rows());
      assertEquals(5, cCSMatrix2.columns());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertNotNull(cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 6, 6);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(6, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(6, denseMatrix0.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(36, cCSMatrix1.cardinality());
      assertEquals(6, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(6, cCSMatrix1.rows());
      assertEquals(6.0, cCSMatrix1.max(), 0.01);
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(6, denseMatrix0.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(36, cCSMatrix1.cardinality());
      assertEquals(6, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(6, cCSMatrix1.rows());
      assertEquals(6.0, cCSMatrix1.max(), 0.01);
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(216.0, cCSMatrix2.max(), 0.01);
      assertEquals(6, cCSMatrix2.columns());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(1.0, cCSMatrix2.density(), 0.01);
      assertEquals(6, cCSMatrix2.rows());
      assertEquals(36, cCSMatrix2.cardinality());
      assertFalse(cCSMatrix2.isRowMajor());
      assertNotNull(cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 6, 6);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(6, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(6, 944.51);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(944.51, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(944.51, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(944.51, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, denseMatrix0.rows());
      assertEquals(6, denseMatrix0.columns());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(36, cCSMatrix1.cardinality());
      assertEquals(6, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(6.0, cCSMatrix1.max(), 0.01);
      assertEquals(6, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
