/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:46:53 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.util.Currency;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 4505;
      int int1 = 70;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2058.710484821);
      doubleArray0[1] = (double) 70;
      doubleArray0[2] = (double) 4505;
      doubleArray0[3] = (double) 4505;
      doubleArray0[4] = (double) 70;
      doubleArray0[5] = (double) 70;
      doubleArray0[6] = (double) 4505;
      doubleArray0[7] = (double) 70;
      doubleArray0[8] = (double) 70;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(4505, 70, doubleArray0);
      denseMatrix0.equals((Object) null);
      // Undeclared exception!
      try { 
        denseMatrix0.rotate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      double double0 = (-2009.7702246966);
      Double double1 = new Double((-2009.7702246966));
      linkedList0.remove((Object) double1);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.determinant();
      int int0 = 116;
      Integer integer0 = new Integer(116);
      linkedList0.add(integer0);
      matrix0.copyOfShape(3071, 3071);
      Locale locale0 = Locale.PRC;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("'\"`66Jfz[o[$1`?{p", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"'\"`66Jfz[o[$1`?{p\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.972972972972973;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 2406.145;
      doubleArray1[6] = 692.36221489;
      doubleArray1[7] = 8.881784197001252E-14;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1029.6875462;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.972972972972973;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 8.881784197001252E-14;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = 0.972972972972973;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 692.36221489;
      doubleArray3[1] = 2406.145;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 2406.145;
      doubleArray3[7] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 8.881784197001252E-14;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 0.972972972972973;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 692.36221489;
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double[][] doubleArray6 = new double[0][1];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray6);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 3787, (-3828), 3787, 3787);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 3787, -3828
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      int int0 = 1712;
      matrix0.setColumn(1712, 2734.94852548525);
      Matrix matrix1 = Matrix.zero(1712, 1);
      matrix0.trace();
      matrix0.sum();
      matrix1.iteratorOfColumn(1);
      int int1 = 1414;
      int int2 = 17;
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 17, 1414);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 17 rows and 1414 cols at 0, 0 in a 1712x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(8, 8);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Matrix matrix1 = sparseVector0.toRowMatrix();
      int int0 = 3;
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 3, 2468);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3 rows and 2468 cols at 0, 0 in a 8x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(37);
      Matrix matrix1 = matrix0.divide(37);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix2 = matrix1.transform(matrixFunction0);
      assertFalse(matrix2.equals((Object)matrix1));
      assertFalse(matrix2.equals((Object)matrix0));
      
      boolean boolean0 = matrix1.equals((Object) matrix0);
      assertFalse(boolean0);
      
      matrix0.getColumn(365);
      assertEquals(37, matrix0.rows());
      
      Matrix matrix3 = matrix1.multiplyByItsTranspose();
      assertFalse(matrix3.equals((Object)matrix2));
      assertEquals(0.02702702702702703, matrix1.max(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 365;
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 37;
      doubleArray0[3] = (double) 37;
      Matrix matrix4 = Matrix.from1DArray(37, 365, doubleArray0);
      assertEquals(365, matrix4.columns());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      Matrix matrix0 = Matrix.constant(0, 0, 0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 0, 0, 0, 1779, 13, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 1779
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1016;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1016, 1016);
      ooPlaceMatricesAddition0.ensureApplicableTo(denseMatrix0, denseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1016, 769.01359983);
      RowMajorSparseMatrix.diagonal(1016, 1016);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      matrix0.equals((Matrix) denseMatrix0, (double) 1016);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = null;
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2493.3516;
      doubleArray1[1] = 2029.51943;
      doubleArray1[2] = 2.0;
      double double0 = (-779.59714519);
      doubleArray1[3] = (-779.59714519);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix1 = SparseMatrix.from2DArray(doubleArray0);
      int int0 = (-3321);
      // Undeclared exception!
      try { 
        sparseMatrix1.insertRow((-3321), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(713, 713);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(4138, 713);
      ((Matrix)cRSMatrix0).ensureDimensionsAreCorrect(6, 3040);
      cRSMatrix0.iteratorOfColumn(3040);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 4138 rows and 713 cols at 0, 0 in a 713x713 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-79.852432721);
      doubleArray1[2] = 300.22001755;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 300.22001755;
      doubleArray2[1] = (-79.852432721);
      doubleArray2[2] = 300.22001755;
      doubleArray2[3] = 300.22001755;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-0.4375);
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-79.852432721);
      doubleArray3[1] = (-0.4375);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-0.4375);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-0.4375);
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Vector vector0 = Vector.constant(7, (-612.9651546));
      // Undeclared exception!
      try { 
        matrix0.insertRow(7, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, (-2860.62006509));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-2860.62006509);
      doubleArray0[2] = (-2860.62006509);
      doubleArray0[3] = (-2860.62006509);
      doubleArray0[4] = (double) 2;
      Matrix.diagonal(32, 32);
      doubleArray0[5] = (-2860.62006509);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(2, 2, doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, 3556, 2, 2, (-1270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2x-1270
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(2585, 2585);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2585;
      doubleArray0[1] = (double) 2585;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      matrix0.insertColumn(482, denseVector0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(37, 37, 37);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      matrix0.add((double) (-3206));
      // Undeclared exception!
      try { 
        Matrix.diagonal((-3206), 1211.501584);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1902, (-1998.763));
      int int0 = 4;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4, 4);
      int int1 = 622;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, 4, 622);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 4 rows and 622 cols at 0, 0 from a 4x4 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2581, 733);
      rowMajorSparseMatrix0.transpose();
      int int0 = 1182;
      int int1 = (-1988);
      rowMajorSparseMatrix0.copy();
      int int2 = (-1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows((-2322), 1182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2321
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(33, 0.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      matrix0.max();
      Matrix matrix1 = matrix0.divide(1.0);
      // Undeclared exception!
      try { 
        matrix1.getRow(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-966.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = 164.628392658;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.swapColumns((-2500), (-2500));
      assertEquals(1, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 62);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Matrix matrix1 = Matrix.identity(62);
      Integer integer0 = new Integer(7);
      sparseVector0.norm();
      hashMap0.put(integer0, integer0);
      matrix0.columnMajorIterator();
      Matrix matrix2 = matrix1.copyOfRows(62);
      matrix2.iterator();
      matrix2.equals(matrix0, 4.9E-324);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix1.foldColumns(vectorAccumulator0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(62, 8);
      Integer integer1 = new Integer(7);
      hashMap0.put(integer1, (Integer) null);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 8, 1376, (-92), (-92));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -92x-92
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1807);
      sparseMatrix0.trace();
      Matrix matrix0 = Matrix.identity(1807);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, (-3588), 1807, (-219), 1761, (-3588), 1830);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -3588x1830
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(544, 572.368);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) null, 2159, 9, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2159, 9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1935;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1935, (-1140.66));
      sparseMatrix0.blankOfRows(639);
      int int1 = 2196;
      // Undeclared exception!
      try { 
        sparseMatrix0.getRow((-1518));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1517
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("5,822.319");
      // Undeclared exception!
      try { 
        DenseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-0.4375);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-0.4375);
      doubleArray2[1] = (-0.4375);
      doubleArray2[2] = 4730.34;
      doubleArray2[3] = (-0.4375);
      doubleArray2[4] = (-0.4375);
      doubleArray2[5] = (-0.4375);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-0.4375);
      doubleArray3[1] = 4730.34;
      doubleArray3[2] = 4730.34;
      doubleArray3[3] = 4730.34;
      doubleArray3[4] = 4730.34;
      doubleArray3[5] = (-0.4375);
      doubleArray3[6] = (-0.4375);
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateColumn((-3605), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-3605' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(10, 10);
      Matrix matrix1 = matrix0.removeLastColumn();
      matrix0.determinant();
      matrix1.equals((Object) matrix0);
      int int0 = 1563;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.updateAt(10, 1563, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(11, 11);
      Locale locale0 = Locale.CANADA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      String string0 = rowMajorSparseMatrix0.toCSV(numberFormat0);
      assertEquals("1,100%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%\n    0%, 1,100%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%\n    0%,     0%, 1,100%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%\n    0%,     0%,     0%, 1,100%,     0%,     0%,     0%,     0%,     0%,     0%,     0%\n    0%,     0%,     0%,     0%, 1,100%,     0%,     0%,     0%,     0%,     0%,     0%\n    0%,     0%,     0%,     0%,     0%, 1,100%,     0%,     0%,     0%,     0%,     0%\n    0%,     0%,     0%,     0%,     0%,     0%, 1,100%,     0%,     0%,     0%,     0%\n    0%,     0%,     0%,     0%,     0%,     0%,     0%, 1,100%,     0%,     0%,     0%\n    0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%, 1,100%,     0%,     0%\n    0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%, 1,100%,     0%\n    0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%,     0%, 1,100%\n", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2, 2, 99.06094296266855);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-0.4375);
      doubleArray1[1] = 4573.0;
      doubleArray1[2] = (-626.450068026655);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-626.450068026655);
      doubleArray2[1] = (-626.450068026655);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-0.4375);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 4573.0;
      doubleArray3[3] = 4573.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-626.450068026655);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-0.4375);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 4573.0;
      doubleArray6[1] = 6185.0;
      doubleArray6[2] = 4573.0;
      doubleArray6[3] = (-626.450068026655);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 6185.0;
      doubleArray7[1] = (-626.450068026655);
      doubleArray7[2] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 4573.0;
      doubleArray8[1] = 4573.0;
      doubleArray8[2] = (-626.450068026655);
      doubleArray8[3] = (-0.4375);
      doubleArray8[4] = (-626.450068026655);
      doubleArray8[5] = (-0.4375);
      doubleArray8[6] = 6185.0;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertEquals(8, denseMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(10, 10);
      double double0 = matrix0.min();
      assertEquals(10, matrix0.rows());
      assertEquals(10, matrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(32, 262);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      int[] intArray0 = new int[5];
      intArray0[0] = 262;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 262;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 6;
      RowMajorSparseMatrix.zero(601, 601, 6);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(17, 17);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) null, 5, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 2119;
      int int1 = 540;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2119, 2119, 540);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.rotate();
      int[] intArray0 = new int[5];
      intArray0[0] = 2119;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix1, (-3009), (-3009), (-523), 578, 2119, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -523, 578
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2466);
      int int0 = (-1340);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn((-1340), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2465
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      ooPlaceMatricesMultiplication0.partiallyApply(denseMatrix0);
      sparseMatrix0.equals((Matrix) denseMatrix0, 847.6478);
      int int0 = 950;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(950, 950, 950);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.transpose();
      Vector vector0 = matrix0.toColumnVector();
      // Undeclared exception!
      matrix0.insertColumn(0, vector0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[22];
      intArray0[1] = 767;
      intArray0[3] = 767;
      Matrix matrix0 = Matrix.unit(767, 0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 9.0;
      doubleArray1[1] = (-966.0);
      doubleArray1[2] = 654.2203235408446;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 1737.33813227;
      doubleArray1[6] = (-1799.1961242);
      doubleArray1[7] = 5437.741111877407;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1737.33813227;
      doubleArray2[1] = (-1799.1961242);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 9.0;
      doubleArray2[4] = 5437.741111877407;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1799.1961242);
      doubleArray3[2] = 654.2203235408446;
      doubleArray3[3] = (-966.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-966.0);
      doubleArray4[1] = (-966.0);
      doubleArray4[2] = 1737.33813227;
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-1799.1961242);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 2255.599815746128;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = (-966.0);
      doubleArray6[6] = 1737.33813227;
      doubleArray6[7] = (-966.0);
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateRow(6, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 413;
      Matrix matrix0 = Matrix.constant(413, 413, 1443.6);
      double[][] doubleArray0 = new double[0][4];
      Matrix.from2DArray(doubleArray0);
      matrix0.iteratorOfRow(413);
      // Undeclared exception!
      matrix0.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1836, 633);
      // Undeclared exception!
      denseMatrix0.removeRow(4);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1311.748291083416);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1311.748291083416);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1311.748291083416);
      doubleArray3[1] = (-1311.748291083416);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1311.748291083416);
      doubleArray4[1] = (-1311.748291083416);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-1311.748291083416);
      doubleArray6[1] = (-1311.748291083416);
      doubleArray6[2] = (-1311.748291083416);
      doubleArray6[3] = (-1311.748291083416);
      doubleArray6[4] = (-1311.748291083416);
      doubleArray6[5] = (-1311.748291083416);
      doubleArray6[6] = (-1311.748291083416);
      doubleArray6[7] = (-1311.748291083416);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (-1311.748291083416);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = (-1311.748291083416);
      doubleArray9[1] = (-1311.748291083416);
      doubleArray9[2] = (-1311.748291083416);
      doubleArray9[3] = (-1311.748291083416);
      doubleArray9[4] = (-1311.748291083416);
      doubleArray9[5] = (-1311.748291083416);
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1022.839026707544;
      doubleArray1[2] = (-966.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (-966.0);
      doubleArray2[2] = (-966.0);
      doubleArray2[3] = 1022.839026707544;
      doubleArray2[4] = (-966.0);
      doubleArray2[5] = (-966.0);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 2229.0;
      doubleArray2[8] = 1022.839026707544;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-966.0);
      doubleArray3[1] = 2229.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-966.0);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 2229.0;
      doubleArray4[3] = (-966.0);
      doubleArray4[4] = 2229.0;
      doubleArray4[5] = (-966.0);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1022.839026707544;
      doubleArray5[1] = (-966.0);
      doubleArray5[2] = 1022.839026707544;
      doubleArray5[3] = 2229.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-966.0);
      doubleArray6[1] = 2229.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 1022.839026707544;
      doubleArray6[6] = (-966.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 1022.839026707544;
      doubleArray7[1] = 1022.839026707544;
      doubleArray7[2] = 2229.0;
      doubleArray7[3] = (-966.0);
      doubleArray7[4] = (-966.0);
      doubleArray7[5] = 2229.0;
      doubleArray7[6] = (-966.0);
      doubleArray7[7] = 1022.839026707544;
      doubleArray7[8] = 1022.839026707544;
      doubleArray0[6] = doubleArray7;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix1 = SparseMatrix.identity(681);
      sparseMatrix0.equals((Matrix) sparseMatrix1, 2463.351163002233);
      assertEquals(7, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(" ");
      Matrix matrix0 = denseMatrix0.blankOfColumns(470);
      assertEquals(470, matrix0.columns());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(6);
      DenseVector denseVector0 = DenseVector.unit(6);
      sparseVector0.toDenseVector();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.removeRow(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(33, 0.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      boolean boolean0 = matrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      
      matrix0.max();
      Matrix matrix1 = matrix0.divide(1.0);
      assertEquals(33, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(24);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector.fromMap(hashMap0, 0);
      Matrix matrix1 = matrix0.divide(24);
      Matrix matrix2 = Matrix.from1DArray(24, 24, (double[]) null);
      assertEquals(24, matrix2.columns());
      assertEquals(24, matrix2.rows());
      
      matrix1.hashCode();
      matrix0.add(matrix1);
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 2454;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2454);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int1 = 1685;
      DenseVector denseVector0 = DenseVector.constant(220, 1685);
      // Undeclared exception!
      columnMajorSparseMatrix0.insertRow(1685, denseVector0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(7);
      Matrix matrix1 = matrix0.copyOfShape(7, 7);
      matrix0.power(96);
      matrix0.equals((Object) matrix1);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 96;
      doubleArray1[1] = (double) 7;
      doubleArray1[2] = (double) 7;
      doubleArray1[3] = (double) 96;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 96;
      doubleArray2[1] = (double) 96;
      doubleArray2[2] = (double) 7;
      doubleArray2[3] = (double) 7;
      doubleArray2[4] = (double) 7;
      doubleArray2[5] = (double) 96;
      doubleArray2[6] = (double) 7;
      doubleArray2[7] = 2567.002656351881;
      doubleArray2[8] = 600.19543793;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 7;
      doubleArray3[1] = 2567.002656351881;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 600.19543793;
      doubleArray4[1] = 2567.002656351881;
      doubleArray4[2] = 2567.002656351881;
      doubleArray4[3] = (double) 96;
      doubleArray4[4] = 2567.002656351881;
      doubleArray4[5] = (double) 7;
      doubleArray4[6] = (double) 96;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 2567.002656351881;
      doubleArray6[1] = (double) 7;
      doubleArray6[2] = (double) 7;
      doubleArray6[3] = (double) 7;
      doubleArray6[4] = (double) 7;
      doubleArray6[5] = 2567.002656351881;
      doubleArray6[6] = 2567.002656351881;
      doubleArray6[7] = (double) 96;
      doubleArray6[8] = (double) 7;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 2567.002656351881;
      doubleArray7[1] = (double) 7;
      doubleArray7[2] = (double) 7;
      doubleArray7[3] = 2567.002656351881;
      doubleArray7[4] = 600.19543793;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (double) 7;
      doubleArray8[1] = 600.19543793;
      doubleArray8[2] = (double) 96;
      doubleArray8[3] = 600.19543793;
      doubleArray8[4] = 600.19543793;
      doubleArray0[7] = doubleArray8;
      Matrix matrix2 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix2.columns());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 0.5;
      doubleArray2[4] = 4.9E-324;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 100.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 4.9E-324;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(0, matrix0.columns());
      
      int int0 = matrix0.rank();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1495;
      double double0 = 1.0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(4, 1495, 1.0);
      int int1 = 2670;
      Matrix matrix0 = denseMatrix0.blankOfShape(4, 2670);
      // Undeclared exception!
      matrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-2737.210298403811);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Vector vector0 = Vector.unit(1935);
      // Undeclared exception!
      try { 
        sparseMatrix0.setRow(1940, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1935. Should be: 8.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn(2394, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-3737.1709422);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-3737.1709422);
      doubleArray2[3] = (-3737.1709422);
      doubleArray2[4] = (-3737.1709422);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.minInRow(696);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '696' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(6, 0, doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapColumns(6, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 3;
      doubleArray3[1] = (double) 3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 3;
      doubleArray4[1] = (double) 3;
      doubleArray4[2] = (double) 3;
      doubleArray4[3] = (double) 3;
      doubleArray4[4] = (double) 3;
      doubleArray4[5] = (double) 3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 3;
      doubleArray5[1] = (double) 3;
      doubleArray5[2] = (double) 3;
      doubleArray5[3] = (double) 3;
      doubleArray5[4] = (double) 3;
      doubleArray5[5] = (double) 3;
      doubleArray5[6] = (double) 3;
      doubleArray5[7] = (double) 3;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      matrix0.kroneckerProduct(denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.set(3, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      Vector vector0 = Vector.zero(587);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(594, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 587. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(5, 184, 5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.updateColumn(183, vectorFunction0);
      assertEquals(184, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-885.2);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1855.969496233123);
      doubleArray1[4] = (-864.6313173);
      doubleArray1[5] = (-2414.30990707502);
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 602.3;
      doubleArray1[8] = 1389.047;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      String string0 = denseMatrix0.toString();
      assertEquals("1.000 -885.200 0.000 -1855.969 -864.631 -2414.310 1.000 602.300 1389.047\n", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1850, 1850);
      // Undeclared exception!
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 4.9E-324;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-174.6455945);
      doubleArray1[3] = 0.964;
      doubleArray1[4] = (-1571.203);
      doubleArray1[5] = (-937.3909763015515);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 4.9E-324;
      doubleArray2[2] = (-174.6455945);
      doubleArray2[3] = (-174.6455945);
      doubleArray2[4] = (-1571.203);
      doubleArray2[5] = 0.964;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 4.9E-324;
      doubleArray3[1] = 2566.093357335006;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-174.6455945);
      doubleArray3[4] = 4.9E-324;
      doubleArray3[5] = (-1142.28588);
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      boolean boolean0 = matrix0.equals((Object) doubleArray3);
      assertFalse(boolean0);
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 4);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      double double0 = matrix0.diagonalProduct();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 696.0;
      doubleArray0[1] = 61.0;
      doubleArray0[2] = (-634.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2296.5);
      doubleArray0[5] = 131.4710745;
      doubleArray0[6] = 1651.196182;
      doubleArray0[7] = 293.467;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.columns();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      Matrix matrix2 = matrix0.removeFirstRow();
      assertEquals(7, matrix2.rows());
      assertFalse(matrix0.equals((Object)matrix1));
      assertEquals(8, matrix2.columns());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 2495;
      Matrix matrix0 = Matrix.diagonal(2495, (-1831.9317312005828));
      // Undeclared exception!
      matrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1807);
      sparseMatrix0.trace();
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(8);
      columnMajorSparseMatrix0.product();
      SparseMatrix.diagonal(1235, 170.666381895);
      columnMajorSparseMatrix0.setRow(5, (double) 5);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.forEach(consumer0);
      numberFormat0.setMinimumIntegerDigits(5);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      NumberFormat.getPercentInstance();
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1553));
      numberFormat0.setMaximumIntegerDigits(5);
      fieldPosition0.setBeginIndex(5);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      Currency currency0 = decimalFormatSymbols0.getCurrency();
      currency0.getSymbol(locale0);
      numberFormat0.setCurrency(currency0);
      // Undeclared exception!
      try { 
        numberFormat0.format(object0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 200.0683486002;
      doubleArray1[1] = (-0.4375);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-0.4375);
      doubleArray2[1] = (-0.4375);
      doubleArray2[2] = (-0.4375);
      doubleArray2[3] = (-0.4375);
      doubleArray2[4] = 781.112470330103;
      doubleArray2[5] = 200.0683486002;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom();
      matrix0.iteratorOfRow(2594);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(17, 1922, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      columnMajorSparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(648, 648);
      double double0 = rowMajorSparseMatrix0.maxInColumn(629);
      assertEquals(648.0, double0, 0.01);
      assertEquals(0.0015432098765432098, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1159;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1159);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int1 = (-1);
      sparseVector0.isZeroAt((-1));
      matrix0.iterator();
      matrix0.swapRows(1532, 1532);
      // Undeclared exception!
      try { 
        matrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1942.23;
      doubleArray1[1] = (-1300.850963);
      doubleArray1[2] = 1960.9555099889863;
      doubleArray1[3] = (-2803.8513364338155);
      doubleArray1[4] = (-2130.687878482585);
      doubleArray1[5] = 1347.641887347113;
      doubleArray1[6] = 885.90021;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1960.9555099889863;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.minInColumn(2940);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1089L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(30, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateColumn(37, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(30);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.shuffle();
      // Undeclared exception!
      try { 
        matrix1.sliceTopLeft(253, 1814);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '30' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2499L);
      mockRandom0.nextLong();
      mockRandom0.longs(2499L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(10, mockRandom0);
      denseMatrix0.columnMajorIterator();
      denseMatrix0.multiplyByItsTranspose();
      assertEquals(10, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(4);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.sliceTopLeft(4, 4);
      int int0 = 121;
      sparseVector0.toColumnMatrix();
      int int1 = 2;
      Matrix.zero(121, 2);
      // Undeclared exception!
      try { 
        matrix0.getRow(121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(298, 298);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(298, 298);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.slice(298, 181, 298, 2476);
      assertEquals(0, matrix1.rows());
      assertEquals(2295, matrix1.columns());
      assertEquals(0.003355704697986577, columnMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2);
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfRows(2);
      assertEquals(0.5, columnMajorSparseMatrix0.density(), 0.01);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      assertEquals(0.5, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(737, 737);
      // Undeclared exception!
      denseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 10;
      Matrix matrix0 = Matrix.zero(10, 10);
      matrix0.toRowVector();
      int int1 = (-3231);
      // Undeclared exception!
      try { 
        matrix0.get((-3231), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-589.819835);
      doubleArray1[1] = (-277.26521157745003);
      doubleArray1[2] = 1304.82113149;
      doubleArray1[3] = 100.0;
      doubleArray1[4] = 978.404152;
      doubleArray1[5] = 0.75;
      doubleArray1[6] = 9.0;
      doubleArray1[7] = 1681.0935844419243;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transformRow((-535), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-535' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 8;
      double double0 = (-520.59);
      Matrix matrix0 = Matrix.constant(8, 8, (-520.59));
      matrix0.rank();
      Matrix matrix1 = matrix0.power(8);
      int int1 = 1653;
      // Undeclared exception!
      try { 
        matrix1.sliceTopLeft((-855), 1653);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-855][0..1653].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 1902);
      Matrix matrix0 = sparseMatrix0.divide((-4117.72));
      assertEquals(1902, matrix0.columns());
      assertEquals(2, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1043.0;
      doubleArray1[1] = (-1642.9283475379);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.removeLastColumn();
      Matrix matrix1 = matrix0.multiply(1244.313272829689);
      assertEquals(1, matrix1.rows());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = locale0.stripExtensions();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale1);
      String string0 = matrix0.mkString(numberFormat0);
      assertNotSame(matrix0, matrix1);
      assertEquals("1\u00A0043 -1\u00A0643\n", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 7;
      Matrix matrix0 = Matrix.diagonal(7, 841.49);
      int int1 = 4233;
      double double0 = (-611.0);
      int int2 = (-2147478623);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight((-2147478623), 4233);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-2147478623..7][4233..7].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 31;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(31);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 182.18;
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 182.18;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 2654.073160986;
      doubleArray4[7] = Double.POSITIVE_INFINITY;
      doubleArray4[8] = (-908.22045368627);
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.copyOfColumns(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      matrix0.setAll(10);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(10, 10, (double) 10, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(606, 606);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      matrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(633);
      MockRandom mockRandom0 = new MockRandom(1108L);
      Matrix.random(463, 4, mockRandom0);
      // Undeclared exception!
      matrix0.mkString("YIb!@q^w5:2h(fGhN", "YIb!@q^w5:2h(fGhN");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1470.6232;
      doubleArray1[5] = 1002.1548112848174;
      doubleArray1[6] = (-44.68648);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-44.68648);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 1433.26173351;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 5267.456;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 1002.1548112848174;
      doubleArray7[7] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.power((-2105));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2105.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1428.271355);
      doubleArray1[1] = (-241.5111135141648);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-810.17);
      doubleArray1[4] = (-805.2200235098);
      doubleArray1[5] = (-474.59906);
      doubleArray1[6] = (-162.870287);
      doubleArray1[7] = (-1735.86043096);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-162.870287);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-162.870287);
      doubleArray4[1] = (-474.59906);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-162.870287);
      doubleArray4[4] = (-810.17);
      doubleArray4[5] = (-1735.86043096);
      doubleArray4[6] = (-805.2200235098);
      doubleArray4[7] = (-162.870287);
      doubleArray4[8] = (-805.2200235098);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-805.2200235098);
      doubleArray6[1] = (-810.17);
      doubleArray6[2] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-162.870287);
      doubleArray7[1] = (-805.2200235098);
      doubleArray7[2] = (-162.870287);
      doubleArray7[3] = (-805.2200235098);
      doubleArray7[4] = (-474.59906);
      doubleArray7[5] = 100.0;
      doubleArray7[6] = (-810.17);
      doubleArray7[7] = (-1.0);
      doubleArray7[8] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (-810.17);
      doubleArray8[1] = (-1.0);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = (-162.870287);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = (-1.0);
      doubleArray9[1] = (-162.870287);
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(9, matrix0.rows());
      assertEquals(8, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(37, mockRandom0);
      matrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom(8);
      mockRandom0.nextGaussian();
      Matrix matrix0 = Matrix.random(8, 8, mockRandom0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      Matrix matrix1 = null;
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 8);
      sparseVector0.max();
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeColumn(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1619.2105546);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.964;
      doubleArray2[3] = (-2260.0606974);
      doubleArray2[4] = 1099.0529724687212;
      doubleArray2[5] = 337.301092977;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.964;
      doubleArray3[2] = (-1619.2105546);
      doubleArray3[3] = 1099.0529724687212;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 337.301092977;
      doubleArray4[1] = (-2260.0606974);
      doubleArray4[2] = 0.964;
      doubleArray4[3] = (-1619.2105546);
      doubleArray4[4] = 1099.0529724687212;
      doubleArray4[5] = 0.964;
      doubleArray4[6] = 0.964;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 337.301092977;
      doubleArray5[1] = 337.301092977;
      doubleArray5[2] = 1099.0529724687212;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-1619.2105546);
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 667;
      Matrix matrix0 = Matrix.identity(667);
      // Undeclared exception!
      matrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 2581);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Integer integer0 = new Integer(2581);
      hashMap0.replace(integer0, integer0);
      // Undeclared exception!
      try { 
        matrix0.sum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-2147092412);
      int int1 = (-1932735282);
      // Undeclared exception!
      try { 
        Matrix.zero((-2147092412), (-1932735282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2147092412x-1932735282
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 6;
      // Undeclared exception!
      try { 
        Matrix.zero((-748), 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(863, 0.0);
      // Undeclared exception!
      try { 
        matrix0.get(863, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '863' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(863, 0.0);
      assertEquals(0.0011587485515643105, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 318.6;
      doubleArray1[1] = (-1628.358168);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 318.6;
      doubleArray2[1] = (-1628.358168);
      doubleArray2[2] = 318.6;
      doubleArray2[3] = 318.6;
      doubleArray2[4] = 318.6;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn((-1840700268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      int int0 = 112;
      DenseMatrix.constant(615, 112, 615);
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      denseMatrix0.toMatrixMarket(numberFormat0);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 615;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 615;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 615;
      doubleArray2[1] = (double) 112;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(1, 199.92460716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1064;
      Matrix matrix0 = Matrix.constant(1064, 1064, 0.0);
      int int1 = (-3459);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(1064, (-3459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..1064][0..-3459].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 1752;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1752, 1752);
      denseMatrix0.toColumnVector();
      int int1 = 2165;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(2165, 2165, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 3;
      Matrix matrix0 = Matrix.unit(3, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
      int int1 = Integer.MAX_VALUE;
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        matrix0.copyOfShape(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = Integer.MAX_VALUE;
      Random random0 = null;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(Integer.MAX_VALUE, 4402.424192137, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 6;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(7, 6);
      sparseMatrix0.maxInRow(6);
      // Undeclared exception!
      try { 
        sparseMatrix0.trace();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1845.36746221755);
      doubleArray3[3] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1845.36746221755);
      doubleArray4[1] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-1.0);
      doubleArray7[2] = 0.0;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInRow(1075);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromCSV("w# TIaOe226i`NH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(0);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).ensureDimensionsAreCorrect(0, (-1769));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1769
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(17, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 32;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(0, 0, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("org.la4j.Matrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        linkedList1.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("7R9DBe27/=iWy1)GFVQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = (-1031);
      int int1 = 2451;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.random((-1031), 2451, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 2481;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2481, 1667, 2481);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1668' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.determinant();
      Matrix matrix1 = rowMajorSparseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        matrix1.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SparseVector.zero(2486, 2472);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-1973);
      // Undeclared exception!
      try { 
        Matrix.identity((-1973));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1757);
      doubleArray0[1] = (double) (-3724);
      doubleArray0[2] = (double) (-3724);
      doubleArray0[3] = (double) (-3724);
      doubleArray0[4] = (double) (-3724);
      doubleArray0[5] = (double) (-3724);
      doubleArray0[6] = (-36.113);
      doubleArray0[7] = (double) (-1757);
      doubleArray0[8] = (-0.4375);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1757), (-3724), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1757x-3724
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(8, 8);
      matrix0.manhattanNorm();
      matrix0.product();
      Matrix matrix1 = matrix0.blankOfColumns(8);
      SparseMatrix sparseMatrix0 = matrix1.toSparseMatrix();
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      NumberFormat.getIntegerInstance(locale0);
      numberFormat0.setMinimumFractionDigits(8);
      numberFormat0.setParseIntegerOnly(true);
      sparseMatrix0.mkString(numberFormat0, " from a ", " from a ");
      matrix0.max();
      Matrix matrix2 = matrix0.transpose();
      Matrix matrix3 = matrix0.blank();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      matrix0.to(matrixFactory0);
      sparseMatrix0.norm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix3.transformRow(2, vectorFunction0);
      matrix0.iterator();
      Matrix matrix4 = matrix3.blankOfShape(8, 8);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix2.non(matrixPredicate0);
      sparseMatrix0.hashCode();
      matrix3.power(8);
      matrix4.getRow(2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(1697, 1697, (-1239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1239.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1827);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1827, 2017, 0.0, (Random) mockRandom0);
      mockRandom0.nextFloat();
      mockRandom0.nextDouble();
      // Undeclared exception!
      columnMajorSparseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, (-2656.575));
      columnMajorSparseMatrix0.min();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("This vector can't grow up.");
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.toMatrixMarket((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }
}
