/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:03:41 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.math.BigInteger;
import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.value.ValueLong;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N2C`cd]u");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aA", defaultDBTable0, (-2271), "aA");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("AA", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("{3rOp*13l,5", stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("{3rOp*13l,5");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4I|cVOW_]1sp_VY+", (DBTable) null, 1924, "4I|cVOW_]1sp_VY+");
      StringBuilder stringBuilder0 = new StringBuilder("FOREIGN KEY ");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append("delete");
      StringBuilder stringBuilder3 = stringBuilder2.insert(6, 97);
      StringBuilder stringBuilder4 = stringBuilder3.append(true);
      StringBuilder stringBuilder5 = stringBuilder4.append((double) 6);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder5);
      assertEquals("FOREIG97N KEY  and nulldeletetrue6.04I|CVOW_]1SP_VY+", stringBuilder5.toString());
      assertEquals("FOREIG97N KEY  and nulldeletetrue6.04I|CVOW_]1SP_VY+", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "", "SELECT * FROM ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.normalize("[sS", false);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("Ulkv ]~tQ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      boolean boolean0 = SQLUtil.isDDL("create table ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("^A ^9y.q~]bJhptM");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^A ^9y.q~]bJhptM";
      stringArray0[1] = "^A ^9y.q~]bJhptM";
      stringArray0[2] = "^A ^9y.q~]bJhptM";
      stringArray0[3] = "^A ^9y.q~]bJhptM";
      stringArray0[4] = "^A ^9y.q~]bJhptM";
      stringArray0[5] = "^A ^9y.q~]bJhptM";
      stringArray0[6] = "^A ^9y.q~]bJhptM";
      stringArray0[7] = "^A ^9y.q~]bJhptM";
      stringArray0[8] = "^A ^9y.q~]bJhptM";
      String string0 = SQLUtil.leftJoin("^A ^9y.q~]bJhptM", stringArray0, " (", "^A ^9y.q~]bJhptM", stringArray0);
      assertEquals("left join  ( as ^A ^9y.q~]bJhptM on ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM and ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM = ^A ^9y.q~]bJhptM.^A ^9y.q~]bJhptM", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("{3rOp*13l,5", stringBuilder0);
      assertEquals("{3rOp*13l,5", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.removeComments("dropmaterialized view]m,");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dropmaterialized view]m,";
      String string0 = SQLUtil.renderColumnListWithTableName("U$E%Ey@.K;ivuD!bb$(", stringArray0);
      assertEquals("U$E%Ey@.K;ivuD!bb$(.dropmaterialized view]m,", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table null", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.removeComments("select into");
      DBSchema dBSchema0 = new DBSchema("select into");
      DBPackage dBPackage0 = new DBPackage("select into", dBSchema0);
      String string1 = "";
      String string2 = "a`4l=g@a(n!";
      DBSequence dBSequence0 = new DBSequence("", "a`4l=g@a(n!", "org.firebirdsql.jca.FBXid");
      BigInteger bigInteger0 = ValueLong.MAX;
      dBSequence0.setMinValue(bigInteger0);
      String string3 = "";
      dBSequence0.setStart(bigInteger0);
      dBSequence0.setDoc("");
      dBSchema0.getTables();
      dBSchema0.addSequence(dBSequence0);
      dBPackage0.setName("");
      SQLUtil.typeAndName(dBPackage0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.substituteMarkers("org.apache.derby.impl.sql.compile.VarbitConstantNode", "org.apache.derby.impl.sql.compile.VarbitConstantNode", "org.apache.derby.impl.sql.compile.VarbitConstantNode");
      SQLUtil.mutatesDataOrStructure("org.apache.derby.impl.sql.compile.VarbitConstantNode");
      String[] stringArray0 = new String[3];
      String string0 = "SUBQUERIES[";
      stringArray0[0] = "SUBQUERIES[";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.VarbitConstantNode";
      stringArray0[2] = "'org.apache.derby.impl.sql.compile.VarbitConstantNode'";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesStructure("org.apache.derby.impl.sql.compile.VarbitConstantNode");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(1280L);
      boolean boolean0 = SQLUtil.isDML("insert");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop table");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("fmc'");
      Boolean boolean0 = Boolean.TRUE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.removeComments("Qt@[!");
      assertEquals("Qt@[!", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeh < / -  byp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) null);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) stringBuilder0);
      SQLUtil.addOptionalCondition("{3rOp*13l,5", stringBuilder3);
      assertEquals("null0null0 or {3rOp*13l,5", stringBuilder3.toString());
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectfmc'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("yjm[iKz#<RG]w'Te");
      String string0 = SQLUtil.renderValue("yjm[iKz#<RG]w'Te");
      assertEquals("'yjm[iKz#<RG]w'Te'", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" (");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" (");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " (";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE  ( = ' ('", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "unique constraint constraint";
      SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray1);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesStructure("");
      String string0 = "org.apache.derby.impl.store.raw.data.AllocExtent";
      HsqlProperties hsqlProperties0 = new HsqlProperties("org.apache.derby.impl.store.raw.data.AllocExtent");
      hsqlProperties0.setProperty("org.apache.derby.impl.store.raw.data.AllocExtent", "");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("^A ^9y.q~]bJhptM");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^A ^9y.q~]bJhptM";
      stringArray0[1] = "^A ^9y.q~]bJhptM";
      stringArray0[2] = "^A ^9y.q~]bJhptM";
      stringArray0[3] = "^A ^9y.q~]bJhptM";
      stringArray0[4] = "^A ^9y.q~]bJhptM";
      stringArray0[5] = "^A ^9y.q~]bJhptM";
      stringArray0[6] = "^A ^9y.q~]bJhptM";
      boolean boolean0 = SQLUtil.isQuery("^A ^9y.q~]bJhptM");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^E^{a}*>[ASG1Ie{>B";
      SQLUtil.renderColumnListWithTableName("^E^{a}*>[ASG1Ie{>B", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      CompositeDBObject<DBSequence> compositeDBObject0 = (CompositeDBObject<DBSequence>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^E^{a}*>[ASG1Ie{>B");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "kX/*N}Hn]Un\">{;%";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kX/*N}Hn]Un\">{;%");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "kX/*N}Hn]Un\">{;%", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2), 548L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.isQuery(", but is null.");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "fMC'";
      stringArray0[2] = "CREATE INDEX";
      stringArray0[3] = "fMC'";
      stringArray0[4] = "fMC'";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "fMC'";
      stringArray0[4] = "fMC'";
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[8], "fMC'", stringArray0);
      assertEquals("null as fMC' on null.null = fMC'.null and null.fMC' = fMC'.fMC' and null.CREATE INDEX = fMC'.CREATE INDEX and null.fMC' = fMC'.fMC' and null.fMC' = fMC'.fMC' and null.null = fMC'.null and null.null = fMC'.null and null.fMC' = fMC'.fMC' and null.null = fMC'.null", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "qlZ7Spc";
      SQLUtil.removeComments("qlZ7Spc");
      NameSpec nameSpec0 = NameSpec.NEVER;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte) (-109);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(rowOutputBinary0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      String string1 = "drop materialized viewfmc'";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) outputStreamWriter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "qlZ7Spc";
      PrintWriter printWriter0 = mockPrintWriter0.printf("drop materialized viewfmc'", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.firebirdsql.gds.GDSException";
      stringArray0[1] = null;
      stringArray0[2] = "Cp,J^wC=";
      stringArray0[3] = "N";
      stringArray0[4] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Cp,J^wC=", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.ownerDotComponent(dBTable0);
      assertEquals("N", string0);
      
      boolean boolean0 = SQLUtil.isQuery("callfmc'");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-381368117), ".9'u^l");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("N", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("N .9'U^L(2) NULL", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("org.firebirdsql.gds.GDSException");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.firebirdsql.gds.GDSException");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j&[";
      stringArray0[1] = "org.firebirdsql.gds.GDSException";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ".9'u^l", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (j&[, org.firebirdsql.gds.GDSException)", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("SEVERITY");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(false);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " WHERE ";
      stringArray0[1] = "alter table2ez0^{^t20gf<ogij";
      stringArray0[2] = " WHERE ";
      stringArray0[3] = " WHERE ";
      stringArray0[4] = " WHERE ";
      SQLUtil.join(" or ", " WHERE ", stringArray0, " NOT NULL", "truncate2ez0^{^t20gf<ogij", stringArray0);
      DBSchema dBSchema0 = new DBSchema(" or ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a", dBSchema0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter index2ez0^{^t20gf<ogij", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append(0.0);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(46, (CharSequence) stringBuilder2, 1553, 379);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 46
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = " (";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" (");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" (");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" (");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize(",");
      DBDataType dBDataType0 = DBDataType.getInstance((-516), " (");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("<");
      String string0 = "w\"pS[/jU\\|q)wLIZ|";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("call", true, "call", "NOWAIT");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("<", stringBuilder0);
      int int0 = (-1740);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1740), " AND ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1740
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "orgwapache.derby.impl.sq";
      SQLUtil.parseColumnTypeAndSize("orgwapache.derby.impl.sq");
      String string1 = "&!m)";
      boolean boolean0 = false;
      SQLUtil.normalize("&!m)", false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("orgwapache.derby.impl.sq", "&!m)", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("orgwapache.derby.impl.sq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'orgwapache.derby.impl.sq'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "{{@k)\"WrBw,V=x;y";
      stringArray0[2] = "{{@k)\"WrBw,V=x;y";
      stringArray0[3] = " DEFAULT ";
      stringArray0[4] = "5g";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ( DEFAULT , {{@k)\"WrBw,V=x;y, {{@k)\"WrBw,V=x;y,  DEFAULT , 5g)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "K'SJHMpG=*BkON";
      stringArray0[1] = "create materialized view";
      stringArray0[2] = "c|-s,fw";
      stringArray0[3] = "operation=";
      stringArray0[4] = "<r";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "qirYO]%";
      SQLUtil.normalize("qirYO]%", true);
      String string1 = "C9kiu^?";
      String[] stringArray0 = new String[16];
      stringArray0[0] = "qirYO ] %";
      DBSchema dBSchema0 = new DBSchema("C9kiu^?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("C9kiu^?", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "C9kiu^?", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      int int0 = (-1015);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1015), (float) (-1015));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1015
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "call";
      boolean boolean0 = true;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("call", true, "call", "NOWAIT");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.parseColumnTypeAndSize("NOWAIT");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize(".*(", true);
      assertEquals(".* (", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("orgwapache.derby.impl.sq");
      SQLUtil.normalize("orgwapache.derby.impl.sq", false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("orgwapache.derby.impl.sq", "orgwapache.derby.impl.sq", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("orgwapache.derby.impl.sq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'orgwapache.derby.impl.sq'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = FBConnectionProperties.BLOB_BUFFER_SIZE_PROPERTY;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("blobBufferSize", false, "blobBufferSize", "blobBufferSize");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      String string2 = SQLUtil.removeComments("truncateupdate_rule");
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.normalize("drop materialized view]m,", true);
      String string0 = TypeId.ARRAY_NAME;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer(90058);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = new Integer(90058);
      SQLUtil.normalize("selectfmc'", true);
      String string0 = SQLUtil.removeComments("create table");
      assertEquals("create table", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("insert");
      String string0 = SQLUtil.normalize("</-bYk", true);
      assertEquals("< / -  bYk", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RH(MPf>8eL");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select";
      stringArray0[1] = "RH(MPf>8eL";
      stringArray0[2] = null;
      stringArray0[3] = "select";
      stringArray0[4] = "select intothrowifmissingparms";
      stringArray0[5] = "RH(MPf>8eL";
      stringArray0[6] = null;
      stringArray0[7] = "select intothrowifmissingparms";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      String string1 = SQLUtil.removeComments("A:J*,gKgwnc:Uot\"Du");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/Bp&_O,EcIy\"O~", (DBTable) null, (-2), "]");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-781), "]");
      Integer integer0 = new Integer((-781));
      Integer integer1 = new Integer(22);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("]", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("/Bp&_O,EcIy\"O~, ]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SEVERITY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      jdbcClob jdbcClob0 = new jdbcClob("SEVERITY");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "- 0";
      stringArray0[4] = "SEVERITY";
      stringArray0[5] = "- 0";
      stringArray0[6] = "- 0";
      stringArray0[7] = "SEVERITY";
      stringArray0[8] = "SEVERITY";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.normalize("/m", true);
      SQLUtil.parseColumnTypeAndSize("/ m");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/m");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBDataType.getInstance((-181812637), "create table");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.normalize("N1/P(\"^kK61VH+", false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("N1 / P (\"^kK61VH+\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: N1 / P (\"^kK61VH+\"
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SEVERITY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("X4 Hmuj0(J)h(G]ro");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      VersionNumber versionNumber0 = VersionNumber.valueOf("}?b2");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" NULL", "ne+R/$Q:qJ9;xLk", versionNumber0);
      defaultDatabase0.getTable("s8#rmj+8fKv+UNQ-(u", false);
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9=_J4&77", (DBTable) null, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("9=_J4&77");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(90093, "X4 Hmuj0(J)h(G]ro");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X4 Hmuj0(J)h(G]ro", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("X4 Hmuj0(J)h(G]ro X4 HMUJ0(J)H(G]RO(0) NULL", string0);
      
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string1 = SQLUtil.renderColumnNames(list0);
      assertEquals("X4 Hmuj0(J)h(G]ro", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.normalize("X Hmu{j0(J)h(^B", true);
      SQLUtil.normalize("1M /*i^yz]`S%_k", false);
      String string0 = LogToFile.TEST_MAX_LOGFILE_NUMBER;
      assertNull(string0);
  }
}
