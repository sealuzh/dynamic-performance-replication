/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:18:19 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(8, 1);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2031);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1422, "H6", "H6", "H6", "H6");
      Attribute attribute0 = new Attribute("H6");
      fieldWriter0.visitAttribute(attribute0);
      Attribute attribute1 = attribute0.next;
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "3I5*.u7(", "3I5*.u7(", "ConstantValue", "3I5*.u7(");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-15));
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-2391), "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value 1969-12-17
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "J@vxKth\"#|cR5e<c", "", "&iYL~T@B*", "&iYL~T@B*");
      Attribute attribute0 = new Attribute("Synthetic");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4015), "?9g!A-#t!22", "?9g!A-#t!22", "?9g!A-#t!22", "?9g!A-#t!22");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4015), "?9g!A-#t!22", "?9g!A-#t!22", "3I5*.u7(", "?9g!A-#t!22");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("3I5*.u7(", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter", "", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      classWriter0.invalidFrames = true;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "Mjv#pT cXM.^M@", ";|BDYn<~4t", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4015), "[lEYk@hZ+", "[lEYk@hZ+", "3I5*.u7(", "[lEYk@hZ+");
      fieldWriter0.visitAnnotation("fWr=Uc Y<6j", false);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      ByteVector byteVector0 = new ByteVector(496);
      ByteVector byteVector1 = byteVector0.put11(2, 496);
      byteVector1.put11(2, 2);
      ByteVector byteVector2 = byteVector1.putLong(1);
      byteVector2.putShort(2779);
      ByteVector byteVector3 = byteVector2.putShort(169);
      classWriter0.version = 2779;
      byteVector2.putUTF8("+F{,{]la(y");
      ByteVector byteVector4 = byteVector3.putUTF8("");
      fieldWriter0.put(byteVector4);
      fieldWriter0.getSize();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c", "J@vxKtkAn|cz5K<c");
      fieldWriter0.visitAnnotation("J@vxKtkAn|cz5K<c", true);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12((-15), 1);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      fieldWriter0.visitAnnotation("b^", true);
      ByteVector byteVector0 = new ByteVector(496);
      ByteVector byteVector1 = byteVector0.put11(2, 496);
      ByteVector byteVector2 = byteVector1.putLong(1);
      ByteVector byteVector3 = new ByteVector(1);
      ByteVector byteVector4 = byteVector2.putShort(169);
      ByteVector byteVector5 = byteVector4.putUTF8("");
      fieldWriter0.put(byteVector5);
      fieldWriter0.getSize();
      byteVector2.put12(2, (-2));
      fieldWriter0.put(byteVector4);
      assertSame(byteVector4, byteVector0);
  }
}
