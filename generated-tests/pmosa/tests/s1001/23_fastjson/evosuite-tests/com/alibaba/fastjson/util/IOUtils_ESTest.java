/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:29:23 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.isValidJsonpQueryParam("");
      byte byte0 = (byte)63;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)63, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8((char[]) null, 67, 67, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.stringSize(107);
      byte byte0 = (byte)28;
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = 'y';
      charArray0[2] = '@';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)28, (-2490), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2491
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("B/?");
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64(">U");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.decodeBase64("1gI}rYY@zfGxmq");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      IOUtils.close(pipedWriter0);
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("utf8 decode error, ", false);
      IOUtils.close(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 3, 101, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = 'M';
      charArray0[2] = 'n';
      charArray0[3] = 'l';
      charArray0[4] = '4';
      charArray0[5] = 'u';
      charArray0[6] = '&';
      charArray0[7] = 'j';
      int int0 = 5;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)68;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 5, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("9`");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 16, 4, iOUtils0.specicalFlags_doubleQuotes);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'k';
      charArray0[2] = '.';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2205L), (-1842), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1843
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.stringSize((-1971));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(1L, (-1063), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1064
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = IOUtils.stringSize(826);
      assertEquals(3, int0);
      
      boolean boolean0 = IOUtils.firstIdentifier('r');
      assertTrue(boolean0);
      
      int int1 = IOUtils.stringSize(0);
      assertEquals(1, int1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'a';
      charArray0[5] = 'r';
      charArray0[6] = 'r';
      charArray0[7] = 'T';
      charArray0[8] = 'r';
      IOUtils.getChars(10L, 3, charArray0);
      assertArrayEquals(new char[] {'r', '1', '0', 'r', 'a', 'r', 'r', 'T', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      int int0 = IOUtils.stringSize((int) (byte)63);
      assertEquals(2, int0);
      
      IOUtils.getStringProperty("TS*>Q`q3H5DYYaa+|i");
      boolean boolean1 = IOUtils.firstIdentifier('G');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.stringSize((-237L));
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-4980L), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      IOUtils.getChars(0L, 1, charArray0);
      assertArrayEquals(new char[] {'0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char char0 = '\"';
      IOUtils.firstIdentifier('\"');
      IOUtils.isIdent('\"');
      char char1 = '@';
      IOUtils.isIdent('@');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-35);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'H';
      charArray0[2] = 'r';
      charArray0[3] = '\"';
      int int0 = IOUtils.decodeUTF8(byteArray0, 3973, (byte) (-64), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.JSONException");
      IOUtils iOUtils0 = new IOUtils();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-772));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char char0 = '>';
      IOUtils.firstIdentifier('>');
      String string0 = "";
      IOUtils.isValidJsonpQueryParam("");
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      char char1 = '~';
      charArray0[3] = '~';
      char char2 = '-';
      charArray0[4] = '-';
      int int0 = 146;
      int int1 = (-178);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 146, (-178));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -33
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.decodeBase64("^6");
      IOUtils.isIdent('2');
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '2';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2868), 32, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.getChars(255, 255, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 254
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.stringSize(128);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("Eq}Sx");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(1519L);
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'H';
      charArray0[2] = 'E';
      charArray0[3] = 't';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '-';
      charArray0[7] = 'U';
      // Undeclared exception!
      try { 
        IOUtils.getChars(4, 108, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 107
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2378, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = '';
      IOUtils.isValidJsonpQueryParam("");
      IOUtils.stringSize(20);
      // Undeclared exception!
      try { 
        IOUtils.getChars(56320, 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null, 54, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.decodeBase64("9`", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      StringReader stringReader0 = new StringReader("?Vi(_m");
      String string0 = IOUtils.readAll(stringReader0);
      assertEquals("?Vi(_m", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils.decodeBase64("9`");
      Charset charset0 = IOUtils.UTF8;
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("/]q");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.firstIdentifier('~');
      IOUtils.firstIdentifier('~');
      IOUtils.decodeBase64("UTF-8");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("UTF-8");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.unmappableCharacterAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.firstIdentifier('M');
      IOUtils.firstIdentifier('V');
      String string0 = "Eq}Sx";
      byte[] byteArray0 = IOUtils.decodeBase64("Eq}Sx");
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      charArray0[8] = 'V';
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      IOUtils.stringSize(1);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 3118, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3116
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("uq}x");
      char[] charArray0 = new char[8];
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("51l-6OWQ4T%g");
      assertFalse(boolean0);
      
      int int0 = IOUtils.stringSize(2);
      assertEquals(1, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.JSONException", 2, 3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-10)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("utf8 decode error, ", 2, 6);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-35), (byte)121}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " u^k`q:G&u%Bt");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " u^k`q:G&u%Bt");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 1, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.firstIdentifier('~');
      IOUtils.firstIdentifier('\'');
      String string0 = "com.alibaba.fastjson.util.UTF8Decoder";
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '\'';
      charArray0[2] = '~';
      charArray0[3] = '\'';
      charArray0[4] = '~';
      charArray0[5] = 'V';
      charArray0[6] = '~';
      charArray0[7] = 'V';
      IOUtils.decodeUTF8(byteArray0, 57, (-2147483645), charArray0);
      IOUtils.stringSize(57);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 244);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 243
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = IOUtils.stringSize(0);
      IOUtils.firstIdentifier('M');
      boolean boolean0 = IOUtils.firstIdentifier('V');
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[6] = 'M';
      charArray0[8] = 'V';
      IOUtils.stringSize(1);
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = IOUtils.stringSize((-1L));
      assertTrue(int1 == int0);
      
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, 0, 1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      char[] charArray0 = new char[20];
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-41);
      char[] charArray0 = new char[2];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 46, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("h");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      IOUtils.stringSize((-177));
      byte[] byteArray0 = IOUtils.decodeBase64("$yb98Ud/:N");
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-65), (byte)124, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-4)}, byteArray0);
      
      int int0 = IOUtils.stringSize((long) 1);
      assertEquals(1, int0);
      
      IOUtils.loadPropertiesFromFile();
      char[] charArray1 = new char[9];
      charArray1[0] = 's';
      charArray1[1] = 's';
      charArray1[2] = 'c';
      charArray1[3] = 's';
      charArray1[4] = 's';
      charArray1[5] = '/';
      charArray1[7] = 's';
      charArray1[8] = 's';
      byte[] byteArray1 = IOUtils.decodeBase64(charArray1, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils.isIdent('\u00DB');
      int int0 = IOUtils.stringSize((-516L));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\u00DB';
      charArray0[1] = '\u00DB';
      IOUtils.getChars(1, 1, charArray0);
      assertArrayEquals(new char[] {'1', '\u00DB'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.firstIdentifier('M');
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)51;
      IOUtils.decodeUTF8(byteArray0, 1, (-548), charArray0);
      IOUtils.stringSize((int) (byte)51);
      IOUtils.decodeBase64("*MLPdW^e");
      IOUtils.getChars(1, 1, charArray0);
      IOUtils.isIdent('h');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readAll(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 102, 30);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("]0q}ux");
      char[] charArray0 = new char[3];
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      String string0 = IOUtils.getStringProperty("V]vx");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)14;
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '8';
      charArray0[2] = '%';
      charArray0[3] = 't';
      charArray0[4] = '-';
      charArray0[5] = '7';
      charArray0[6] = 'N';
      IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)1, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)113, (int) (byte)122, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 121
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      charArray0[7] = '~';
      IOUtils.getChars((byte)4, (int) (byte)4, charArray0);
      assertArrayEquals(new char[] {'~', '~', '\u0000', '4', '~', '~', '~', '~'}, charArray0);
      
      int int0 = IOUtils.stringSize((-32));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.firstIdentifier('\u00FA');
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)50, (int) (byte)50, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '-';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-117), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("1E[?C~GT\"$", 4, 4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-15), (byte) (-109)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = IOUtils.stringSize(1158L);
      assertEquals(4, int0);
      
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[10];
      charArray0[4] = 'G';
      charArray0[7] = 'c';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 4, 4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-36)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'Q';
      charArray0[2] = 'n';
      charArray0[3] = 'M';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 2, 2);
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[7];
      charArray0[0] = '\u009F';
      charArray0[1] = '\u009F';
      charArray0[2] = '\u009F';
      charArray0[3] = '\u009F';
      charArray0[4] = '\u009F';
      charArray0[5] = '\u009F';
      charArray0[6] = '\u009F';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-26);
      IOUtils.encodeUTF8(charArray0, 2, 2, byteArray0);
      IOUtils.firstIdentifier('R');
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) (byte) (-12), 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[7];
      charArray0[0] = '\u009F';
      charArray0[1] = '\u009F';
      charArray0[4] = '\u009F';
      charArray0[3] = '\u009F';
      charArray0[4] = '\u009F';
      charArray0[6] = '\u009F';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-26);
      IOUtils.encodeUTF8(charArray0, 2, 2, byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("UTF-8", (-2509), (int) (byte) (-62));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)0;
      byteArray0[1] = (byte) (-22);
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 46, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', 'K'}, charArray0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-6);
      byteArray0[1] = (byte) (-16);
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 46, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'K'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8(byteArray0, (byte)0, 6, charArray0);
      IOUtils.stringSize((long) (byte) (-22));
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("b(FJc=");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-15), (byte)73}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u010C');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.isIdent('\u0109');
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = IOUtils.isIdent('\u0109');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 1, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[6];
      charArray0[5] = '=';
      charArray0[2] = '=';
      charArray0[1] = '=';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("read string from reader error");
      assertFalse(boolean0);
  }
}
