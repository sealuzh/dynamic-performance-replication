/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:12:50 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), 1.606402579334297, 1.606402579334297, 1.606402579334297, 1.606402579334297).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-54.11315385907224), mnStrategy0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnUserParameterState0.setLimits(0, 0.5, (double) 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.606402579334297, 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-54.11315385907224), 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549), (-1034.9052549), (-1034.9052549), (-1034.9052549), (-1034.9052549)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 10.3066354;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianNCycles(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.3066354, mnStrategy0, 0);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.3066354, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-1034.9052549);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549), (-1034.9052549), (-1034.9052549), (-1034.9052549), (-1034.9052549)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianNCycles(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.3066354, mnStrategy0, 0);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 10.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.params();
      int[] intArray0 = new int[1];
      mnUserParameterState0.fix(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1529.0), mnStrategy0, 10.0);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 1288490189);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), 10.0, 10.0, 10.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1034.9052549308406);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianGradientNCycles(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1034.9052549308406), mnStrategy0, 0);
      int[] intArray0 = new int[4];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1034.9052549308406), 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 3);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1034.9052549308406), 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), 10.0, 10.0, 10.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-54.11315385907224);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-54.11315385907224), mnStrategy0, 0);
      int[] intArray0 = new int[1];
      mnStrategy0.setHighStrategy();
      intArray0[0] = 0;
      mnUserParameterState0.setLimits(0, 0.5, (double) 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), 10.0, 10.0, 10.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.3910312939182148;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.3910312939182148, mnStrategy0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnUserParameterState0.setLimits(0, 0.5, (double) 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.3910312939182148, 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), 10.0, 10.0, 10.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-54.11315385907224);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-54.11315385907224), mnStrategy0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnUserParameterState0.setLimits(0, 0.5, (double) 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 5.0, 10354.052549308406, 5.0, 5.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 6);
      int[] intArray0 = new int[3];
      intArray0[1] = 6;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 6, mnStrategy0, 0.5);
      MnCross mnCross1 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 6, 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 5.0, 10354.052549308406, 5.0, 5.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      double double0 = 0.5;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 3);
      int[] intArray0 = new int[3];
      intArray0[1] = 3;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[1];
      mnUserParameterState0.fix(0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, 34.34367660852471, (-1539.2307558), 0.5, 2335.9889686672695).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 34.34367660852471);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-1539.2307558), 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 34.34367660852471;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[1];
      mnUserParameterState0.fix(0);
      mnStrategy0.setGradientNCycles(2602);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, 34.34367660852471, 2335.9889686672695, 0.5, 2335.9889686672695).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 34.34367660852471);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0.5, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), 10.0, 10.0, 10.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5.3579044926830095, mnStrategy0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnUserParameterState0.setLimits(0, 0.5, (double) 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 5.3579044926830095, 0);
      mnUserParameterState0.setLowerLimit(0, 10.0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 6.700000000000001, 2);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), 10.0, 10.0, 10.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1034.9052549308406);
      doubleArray0[1] = (-1034.9052549308406);
      doubleArray0[2] = 10.306635440648975;
      doubleArray0[3] = 10.306635440648975;
      doubleArray0[4] = 10.306635440648975;
      doubleArray0[5] = 10.306635440648975;
      doubleArray0[6] = 10.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, 10.306635440648975);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnUserParameterState0.setLimits(0, (-1586.49806965), 9.969336455935103);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-1586.49806965), 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 1166.8304440108036;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 2.0, 2.0, 1166.8304440108036, 1166.8304440108036).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 0);
      int[] intArray0 = new int[4];
      mnUserParameterState0.setLimits(0, 0.5, 0.05);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-826.1358190947), 0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.5;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[1];
      mnUserParameterState0.fix(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(293.3265307, (double)1288490189, 0.5, (-4.432221375999203E9), (-4.432221375999203E9)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, 10.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0, 1288490189);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.5, 100);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 10.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      mnStrategy0.setHessianStepTolerance(1288490189);
      int[] intArray0 = new int[1];
      mnUserParameterState0.fix(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.3066354, mnStrategy0, 3.7);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-190.97848227862), 1288490189);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.10000000000000003, mnStrategy0, (-460.2292216009905));
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, (-405));
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1034.9052549308406), (-12.035927996383833), (-12.035927996383833), (-12.035927996383833), (-12.035927996383833)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1034.9052549308406);
      doubleArray0[1] = (-1034.9052549308406);
      doubleArray0[2] = 10.306635440648975;
      doubleArray0[3] = 10.306635440648975;
      doubleArray0[4] = 10.306635440648975;
      doubleArray0[5] = 10.306635440648975;
      doubleArray0[6] = (-12.035927996383833);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, 10.306635440648975);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnUserParameterState0.setLimits(0, (-1586.49806965), 9.969336455935103);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-1586.49806965), 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameterState0.params();
      int[] intArray0 = new int[1];
      mnUserParameterState0.fix(0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, 10.0, (-1539.2307558), 0.5, 2335.9889686672695).when(fCNBase1).valueOf(any(double[].class));
      mnUserParameterState0.setPrecision((-2.709498230969656E20));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-1.0), mnStrategy0, 10.0);
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2335.9889686672695, mnStrategy0, (-3456.65078210781));
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-0.5), 0);
  }
}
