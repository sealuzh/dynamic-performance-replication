/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:10:33 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.matchStat = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("efFrror", 2586);
      String string0 = jSONScanner0.scanString('2');
      assertNull(string0);
      assertEquals(2586, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.compatibleWithJavaBean", 0);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : pos 0, json : fastjson.compatibleWithJavaBean
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?j{");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      int int0 = jSONReaderScanner0.scanInt('n');
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      jSONReaderScanner0.nextToken();
      char char0 = '9';
      jSONReaderScanner0.scanInt('9');
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = 'h';
      charArray0[3] = 'Z';
      charArray0[4] = 'd';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2);
      jSONScanner0.scanDate('h');
      Locale locale0 = new Locale("|[Dr-eRc7");
      jSONScanner0.setLocale(locale0);
      jSONScanner0.getCurrent();
      jSONScanner0.stringVal();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((String) null, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '.';
      charArray0[0] = '.';
      charArray0[1] = 'M';
      charArray0[2] = 'l';
      char char1 = 'v';
      charArray0[3] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 50900, 50900);
      jSONReaderScanner0.close();
      jSONReaderScanner0.sbuf = charArray0;
      JSONScanner jSONScanner0 = new JSONScanner("TOt6GwTm<;~9,", (-1037));
      jSONReaderScanner0.isRef();
      Class<Object> class0 = Object.class;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1037), "5D[HFh_5\"/xTv", 931, 0, 917, 50900, 0, 1270, 1270, 3119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week 1270
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('i');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal ref, ");
      jSONReaderScanner0.close();
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[4];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = '{';
      charArray1[3] = '{';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      charArray0[0] = '{';
      charArray0[1] = 'o';
      char char0 = 'Z';
      jSONReaderScanner0.scanLong('Z');
      jSONReaderScanner0.token = 3598;
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanLong('s');
      int int0 = jSONReaderScanner0.scanInt('s');
      assertEquals(0, int0);
      
      jSONReaderScanner0.isEOF();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")E,oIgL{,'\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isEOF();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.UTF8Decoder");
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'Z';
      charArray0[2] = 'r';
      charArray0[3] = '^';
      charArray0[4] = 'P';
      charArray0[5] = 'q';
      charArray0[6] = '9';
      jSONScanner0.matchField(charArray0);
      char char0 = 'T';
      jSONScanner0.scanString('T');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null");
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      jSONScanner0.nextIdent();
      char char0 = 'l';
      charArray0[1] = 'l';
      char char1 = '2';
      int int0 = 45380;
      SymbolTable symbolTable0 = new SymbolTable(45380);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("error parse null", 45380, 45380, 1121);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?r{");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.subString(245, 40);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119);
      char char0 = 'E';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanLong('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,\"");
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanType(")E,oIgL{,\"");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanDecimal('0');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      jSONScanner0.scanDecimal('F');
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('9');
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertTrue(jSONReaderScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")E,oIgL{,'\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Feature feature0 = Feature.AllowSingleQuotes;
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      Feature feature0 = Feature.UseObjectArray;
      jSONScanner0.config(feature0, false);
      Feature feature1 = Feature.IgnoreNotMatch;
      boolean boolean0 = jSONScanner0.isEnabled(feature1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-739));
      jSONReaderScanner0.nextToken();
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF:trror");
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[4];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = '{';
      charArray1[3] = '{';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      charArray0[1] = 'o';
      char char0 = 'Z';
      jSONReaderScanner0.scanLong('Z');
      jSONReaderScanner0.token = 3598;
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONLexerBase.readString(charArray0, 7);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 7);
      jSONScanner0.resetStringPosition();
      charArray0[0] = '2';
      charArray0[1] = 't';
      charArray0[2] = 'Y';
      charArray0[3] = ',';
      charArray0[4] = 'M';
      charArray0[5] = 'a';
      charArray0[6] = '#';
      charArray0[7] = 'D';
      charArray0[8] = 'Q';
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. o
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.UTF8Decoder");
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      char char0 = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'r';
      charArray0[3] = '^';
      charArray0[4] = 'P';
      charArray0[5] = 'q';
      charArray0[6] = '9';
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.util.UTF8Decoder");
      jSONScanner1.scanDecimal('L');
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")'&IE4rEmti\"](");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanType(")'&IE4rEmti\"](");
      jSONReaderScanner0.isEOF();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char char0 = 'o';
      char char1 = 'Z';
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'o';
      char char2 = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      charArray0[6] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 4458);
      char char3 = 'k';
      jSONReaderScanner0.scanLong('k');
      JSONLexerBase.readString(charArray0, 3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error");
      jSONReaderScanner0.scanType("syntax error");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('5');
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char char0 = '3';
      JSONScanner jSONScanner0 = new JSONScanner("", (-2827));
      jSONScanner0.scanType("}>~sP7,yqU#2");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = 'W';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1437831566));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner1 = new JSONScanner("MapSortField", 258);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner2 = new JSONScanner("");
      jSONScanner2.bp = 3073;
      jSONScanner2.close();
      jSONScanner0.scanDouble('(');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanString();
      jSONScanner0.nextTokenWithColon();
      jSONScanner0.integerValue();
      jSONScanner0.getFeatures();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.sub_chars(3958, 13);
      jSONReaderScanner0.putChar('y');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H`^x{#::$#\"f9F7#", 9995);
      Feature feature0 = Feature.CustomMapDeserializer;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(9995, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.isEOF();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.scanBoolean('{');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}>~sP7,yqU#2");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 9980, 3435);
      jSONReaderScanner1.matchField(charArray0);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nX&");
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.setToken(2187);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ij6");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('Y');
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^HU85");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setToken((-3184));
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = jSONReaderScanner0.scanType((String) null);
      assertEquals((-2), int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = jSONReaderScanner0.scanDouble('E');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanDouble('G');
      jSONReaderScanner0.scanLong('s');
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(47, 47, 47, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      double double0 = jSONReaderScanner0.scanDouble('a');
      assertEquals(0.0, double0, 0.01);
      
      long long0 = jSONReaderScanner0.scanLong('s');
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanDouble('a');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(19, 12, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,'\"");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('9');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken((-4002));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('0');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.getTimeZone();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?r{");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanUUID('O');
      assertEquals('r', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.isEOF();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")E,oIgL{,'\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.charAt(120);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('f');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match f - ), info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('s');
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,'\"");
      jSONReaderScanner0.scanInt('u');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.scanInt('9');
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('}');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.stringVal();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.getTimeZone();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 'A');
      jSONReaderScanner0.scanString('A');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'r';
      charArray0[3] = 't';
      charArray0[4] = 'H';
      charArray0[5] = 'N';
      SymbolTable symbolTable0 = new SymbolTable(2529);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 172, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,'\"");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('6');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.token();
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 160);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      char char0 = '%';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('%');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      char[] charArray0 = new char[1];
      char char0 = ':';
      charArray0[0] = ':';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal(':');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S7J/Oe^-b");
      jSONReaderScanner1.nextToken();
      jSONReaderScanner1.isEOF();
      assertEquals(18, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,'\"");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanInt(' ');
      jSONReaderScanner0.isBlankInput();
      assertEquals('E', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanLong('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?j{");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextToken();
      assertEquals('j', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 53, 512);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.integerValue();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-739));
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('c');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONLexerBase.isWhitespace('1');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ex7ge7", (-717));
      boolean boolean0 = jSONReaderScanner0.isEnabled(84, 84);
      assertEquals((-717), jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uclosed.str.lb1it");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('m');
      jSONReaderScanner0.scanBoolean('R');
      assertEquals('.', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isRef();
      boolean boolean1 = jSONReaderScanner0.scanBoolean('8');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,'\"");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'T');
      assertEquals('E', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONLexerBase.isWhitespace('b');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 102);
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, 'b');
      assertEquals(102, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      SymbolTable symbolTable0 = new SymbolTable(95);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 1004);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('5');
      assertEquals(55555, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6~-|cG9MwS'N4#:7-ZE");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('n');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[Vs\"`F1", (-1643));
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString(',');
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      jSONScanner0.scanFloat(',');
      charArray0[3] = ',';
      charArray0[4] = ',';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.info();
      assertEquals((-1643), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,'\"");
      jSONReaderScanner0.scanFloat('n');
      jSONReaderScanner0.nextToken();
      assertEquals(11, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h<<x%");
      jSONReaderScanner0.scanFloat('y');
      jSONReaderScanner0.nextToken();
      assertEquals('<', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0015';
      charArray0[1] = '\u0015';
      charArray0[2] = '\u0015';
      charArray0[3] = 'w';
      charArray0[4] = ')';
      charArray0[5] = '\u0015';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 490, 490);
      jSONReaderScanner0.nextToken();
      assertEquals(')', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[Ut-@:(-~w~A`L2");
      jSONReaderScanner0.nextToken();
      assertEquals('U', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[Ut-@:(-~w~A`L2", (-3038));
      assertEquals((-3038), jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("\"R2J!]@OBV@pI2D*");
      char char0 = 'w';
      // Undeclared exception!
      try { 
        jSONScanner0.scanUUID('w');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 46);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" parse null");
      jSONReaderScanner0.scanUUID(')');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextToken();
      assertEquals('a', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "8K0";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8K0", 903);
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '0';
      charArray0[2] = '^';
      charArray0[3] = '~';
      charArray0[4] = '`';
      jSONReaderScanner0.info();
      charArray0[5] = 'm';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1652);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-739));
      jSONReaderScanner0.scanDecimal('3');
      jSONReaderScanner0.scanDate('3');
      assertEquals((-739), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("JOXj2|k%4>X6Igr");
      jSONReaderScanner0.scanDate('6');
      jSONReaderScanner0.indexOf('j', 95);
      jSONReaderScanner0.nextToken();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('e');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("$cw8q=EApbe", 2341);
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      SymbolTable symbolTable0 = new SymbolTable(2341);
      jSONScanner0.scanEnum(class0, symbolTable0, 'U');
      assertEquals(2341, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+$HsTs<^", 10);
      jSONReaderScanner0.scanUUID(';');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.isBlankInput();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      charArray0[5] = ';';
      charArray0[6] = ')';
      charArray0[7] = ';';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 't');
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NotWriteRootClassName", 0);
      jSONScanner0.nextToken(333);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 21, json : NotWriteRootClassName
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONLexerBase.isWhitespace('b');
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2775);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"-\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = '1';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      char[] charArray1 = new char[4];
      charArray1[0] = '1';
      charArray1[1] = '1';
      charArray1[2] = '1';
      charArray1[3] = '1';
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.JSONException", 0);
      SymbolTable symbolTable0 = new SymbolTable(20);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(149, 46);
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PrettyFormat", 6);
      jSONScanner0.sp = 6;
      jSONScanner0.nextToken(6);
      boolean boolean0 = jSONScanner0.isEnabled((-1875), 1368);
      assertEquals('r', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.nextToken(78);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 9, json : unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 ha5A/-wQWmA'l");
      char[] charArray0 = new char[4];
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanBoolean('V');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('o');
      char[] charArray0 = new char[0];
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      jSONReaderScanner0.scanDecimal('Y');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8!,i3Mcyvd]Cy(64+r");
      long long0 = jSONReaderScanner1.scanLong('Y');
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1&IE4rEmti](");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanBoolean('Y');
      SymbolTable symbolTable0 = new SymbolTable(87);
      jSONReaderScanner0.scanLong('Q');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-1071), 87, 87, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('o');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 2586);
      jSONScanner0.scanString('k');
      jSONScanner0.scanStringArray((Collection<String>) null, '4');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      jSONReaderScanner0.scanInt(']');
      jSONReaderScanner0.close();
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[6] = ']';
      charArray0[7] = ']';
      charArray0[8] = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,'\"");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, ',');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanInt('G');
      assertEquals(',', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PrettyFormat", 11);
      jSONScanner0.nextToken(11);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - r, info : pos 1, json : PrettyFormat
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*X)kd5lqivdVah");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not close json text, token : ");
      jSONReaderScanner0.scanLong('T');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanDate('c');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      jSONReaderScanner0.scanDate('e');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 6;
      JSONScanner jSONScanner0 = new JSONScanner("PrettyFormat", 6);
      jSONScanner0.nextToken(6);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - r, info : pos 1, json : PrettyFormat
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'D';
      charArray0[2] = 'T';
      charArray0[3] = 'F';
      charArray0[4] = 'C';
      charArray0[5] = ' ';
      charArray0[6] = '!';
      charArray0[7] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2220, 2220);
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2220, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T_Zz7", (-78));
      jSONScanner0.nextToken((-78));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - _, info : pos 1, json : T_Zz7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8'");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("falsGe");
      jSONReaderScanner0.scanFloat('Q');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanType("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?uj{");
      SymbolTable symbolTable0 = new SymbolTable(133);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'c');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = '!';
      charArray0[2] = 'D';
      charArray0[3] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3173);
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")'&IE4rEmti\"](");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(")'&IE4rEmti\"](");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'yetnw");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'yetnw");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(dtT");
      jSONReaderScanner0.nextToken();
      assertEquals('d', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+),/S@2H<p1K1\"@0)eE");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S7J");
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner1.nextToken();
      long long0 = jSONReaderScanner1.longValue();
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.features = 0;
      char[] charArray0 = new char[0];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 941);
      jSONReaderScanner0.scanBoolean('R');
      assertEquals(941, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.integerValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.indexOf('g', 2163);
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanInt('$');
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'E';
      charArray0[2] = 'h';
      charArray0[3] = '7';
      charArray0[4] = 'h';
      charArray0[5] = 'E';
      charArray0[6] = 'h';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-o{meU~1Fg^`:5 !@%$");
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'h';
      charArray0[2] = 'n';
      charArray0[3] = '7';
      charArray0[4] = 'h';
      charArray0[0] = 'h';
      charArray0[6] = 'h';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^HU85");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "efFrror";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "^HU85";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken();
      JSONScanner.charArrayCompare("^HU85", (-1), charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(109);
      SymbolTable symbolTable1 = new SymbolTable(1063);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-695));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x6._%F");
      jSONReaderScanner0.scanString('5');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "new");
      jSONReaderScanner0.scanUUID('^');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[7] = '^';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanString('N');
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("I6tuiR", 0);
      jSONReaderScanner1.nextToken((-1309));
      char char0 = ';';
      jSONReaderScanner1.scanDecimal(';');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('S');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match S - 6, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1309));
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanBoolean('S');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1275, 1986);
      jSONReaderScanner0.scanDecimal('$');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner1.scanInt('\\');
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1309));
      char char0 = ';';
      jSONReaderScanner0.scanDecimal(';');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('S');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match S - 6, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+),/S@2H<p1K1\"@0)eE");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S7J");
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner0.scanDouble('$');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(2742);
      jSONReaderScanner1.addSymbol(2742, 2742, 77, symbolTable0);
      assertEquals(18, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      charArray0[7] = '2';
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17, 59);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.isEnabled((-310), (-310));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('2');
      assertEquals(59, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-OG@b");
      jSONReaderScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      jSONReaderScanner0.scanDate('>');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-OG@b");
      jSONReaderScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")E,oIgL{,\"");
      jSONReaderScanner0.ch = '4';
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'B';
      charArray0[2] = '4';
      charArray0[3] = ',';
      charArray0[4] = '4';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = ',';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 128, 84);
      jSONReaderScanner1.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken();
      char[] charArray1 = new char[7];
      charArray1[0] = 'B';
      charArray1[1] = 'o';
      charArray1[2] = '4';
      charArray1[3] = 'o';
      charArray1[4] = 'B';
      charArray1[5] = 'o';
      charArray1[6] = '4';
      JSONScanner.charArrayCompare(")E,oIgL{,\"", 3927, charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 27);
      jSONReaderScanner0.scanDecimal('`');
      jSONReaderScanner0.scanDate('r');
      assertEquals(27, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+),/S@2H<p1K1\"@0)eE");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S7J");
      jSONReaderScanner1.stringDefaultValue = "S7J";
      char[] charArray0 = new char[0];
      jSONReaderScanner1.next();
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner0.scanDouble('$');
      jSONReaderScanner1.scanDecimal('$');
      assertEquals('J', jSONReaderScanner1.getCurrent());
      
      jSONReaderScanner0.scanDate('Y');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 27);
      jSONReaderScanner0.scanString('e');
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nX&");
      char char0 = '\\';
      jSONReaderScanner0.scanDouble('\\');
      jSONReaderScanner0.scanFloat('\\');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")'&IE4rEmti\"](");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner.charArrayCompare("", 10, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(")'&IE4rEmti\"](");
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1309));
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanBoolean('S');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanBoolean(',');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanString('R');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      assertEquals(3, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^HU85");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanString('R');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'D';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-1289), (-1289), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1309));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("I6tuiR", 110, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e-OG@b");
      jSONReaderScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SymbolTable symbolTable0 = new SymbolTable(40);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertEquals(333L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'+ZsEBCP'F*[=aiSGl");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // '+ZsEBC
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'");
      jSONReaderScanner0.scanString('+');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanDouble('I');
      jSONReaderScanner0.scanFloat('*');
      jSONReaderScanner0.scanDate('*');
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '+';
      charArray0[2] = '*';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e-OG@b");
      jSONReaderScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      jSONReaderScanner0.scanDate('>');
      JSONScanner jSONScanner0 = new JSONScanner("e-OG@b", (-1));
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.isRef();
      jSONScanner0.scanInt('*');
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = ')';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 26);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.isEnabled((-2242), 0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('P');
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rHU85");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "efFrror";
      JSONScanner jSONScanner0 = new JSONScanner("rHU85");
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextToken(4);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "efFrror";
      JSONScanner jSONScanner0 = new JSONScanner("rHU85");
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextToken(4);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'&IE4rEmti](");
      jSONReaderScanner0.scanNumber();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IgnoreAutoType");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dCgaip!YP#5-", 25);
      jSONScanner0.nextToken(5);
      jSONScanner0.token();
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '3';
      charArray0[2] = 'h';
      charArray0[3] = 'H';
      charArray0[4] = 'G';
      charArray0[5] = 't';
      charArray0[6] = 'h';
      charArray0[7] = 'w';
      charArray0[8] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, 25);
      jSONReaderScanner0.bytesValue();
      char[] charArray1 = new char[6];
      charArray1[0] = 'w';
      charArray1[1] = 'H';
      charArray1[2] = 'H';
      charArray1[3] = 'B';
      charArray1[4] = 'w';
      charArray1[5] = 'h';
      jSONScanner0.copyTo(5, 1, charArray1);
      assertEquals('C', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.nextToken(36);
      jSONReaderScanner0.scanDecimal('j');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.isEOF();
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = 'i';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextToken(36);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'");
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFloat('y');
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = 'p';
      charArray1[1] = 'H';
      charArray1[2] = '+';
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.scanLong('y');
      SymbolTable symbolTable0 = new SymbolTable(4290);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1302));
      SymbolTable symbolTable0 = new SymbolTable(127);
      jSONReaderScanner0.scanLong('[');
      SymbolTable symbolTable1 = new SymbolTable(127);
      SymbolTable symbolTable2 = new SymbolTable(119);
      assertFalse(symbolTable2.equals((Object)symbolTable1));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      int int0 = 40;
      JSONScanner jSONScanner0 = new JSONScanner("new", 40);
      jSONScanner0.nextToken(15);
      char[] charArray0 = new char[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", 66);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'M';
      charArray1[1] = 'h';
      charArray1[2] = 'h';
      charArray1[3] = 'Q';
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 1025, 52);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('C');
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(109);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'S');
      jSONReaderScanner0.scanLong('S');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-3904), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanBoolean('|');
      SymbolTable symbolTable0 = new SymbolTable(26085);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(1425);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.charAt(2308);
      JSONScanner jSONScanner0 = new JSONScanner("new");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0);
      jSONScanner0.scanStringArray(list0, '\u0000');
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(125, 0, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+)'&IE4rEmTi\"](");
      jSONReaderScanner0.nextIdent();
      assertEquals(')', jSONReaderScanner0.getCurrent());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanInt('1');
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("By72u2`nOvX}-");
      jSONReaderScanner0.scanDate('V');
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.features = 0;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.sp = 1580;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.isEOF();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("i\">R 5ztJ;S", (-1));
      jSONScanner0.charAt(2540);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'");
      jSONReaderScanner0.isEOF();
      SymbolTable symbolTable0 = new SymbolTable(1057);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'H');
      jSONReaderScanner0.scanInt('+');
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.nextToken();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(89L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1302));
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDecimal(';');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.TIMESTAMP");
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'W';
      charArray0[2] = '[';
      charArray0[3] = '\'';
      charArray0[4] = '&';
      charArray0[5] = 'H';
      charArray0[6] = '+';
      charArray0[7] = '\\';
      charArray0[8] = 'x';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("XbHd,q5ms$:M[<", 32);
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1302));
      jSONReaderScanner0.isEOF();
      SymbolTable symbolTable0 = new SymbolTable(125);
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, ';');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", ");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("setter not found, class ", (-1750));
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      charArray0[5] = ';';
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 51);
      jSONReaderScanner3.nextToken();
      assertEquals(24, jSONReaderScanner3.token());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(66);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'f';
      charArray0[2] = 'V';
      charArray0[3] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6", 0);
      jSONReaderScanner1.skipWhitespace();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner2.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray0, 4069);
      jSONReaderScanner4.scanString('*');
      JSONReaderScanner jSONReaderScanner5 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner5.nextToken();
      assertEquals(989, jSONReaderScanner5.getFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1&pE4rEmti](");
      char[] charArray0 = new char[7];
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = 'X';
      charArray0[4] = ')';
      charArray0[5] = '|';
      charArray0[6] = '';
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1&pE4rEmti](");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanInt('&');
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(3, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}>~sP7,yqU#2");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.longValue();
      String string0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDecimal('C');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.pos());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanNumber();
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "e yO#+4Tv/(`<~RWIS6";
      objectArray0[2] = (Object) "e yO#+4Tv/(`<~RWIS6";
      objectArray0[3] = (Object) "e yO#+4Tv/(`<~RWIS6";
      objectArray0[4] = (Object) null;
      jSONReaderScanner0.lexError("e yO#+4Tv/(`<~RWIS6", objectArray0);
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.integerValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unclosed");
      jSONReaderScanner0.indexOf('g', 2163);
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.putChar('g');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6tuiR");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("6tuiR");
      char char0 = 'e';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('e');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6tuiR");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("6tuiR");
      char char0 = 'e';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('e');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"6A", 91);
      jSONReaderScanner1.isEOF();
      char char0 = 'H';
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      jSONReaderScanner1.scanSymbolWithSeperator(symbolTable0, ',');
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"6A", 0);
      jSONReaderScanner1.isEOF();
      char char0 = 'H';
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      jSONReaderScanner1.scanSymbolWithSeperator(symbolTable0, '>');
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(109);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'S');
      jSONReaderScanner0.scanInt('o');
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.longValue();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '|';
      charArray0[2] = '-';
      Locale locale0 = Locale.ITALY;
      locale0.getDisplayLanguage();
      Locale.forLanguageTag("iso8601");
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.scanLong('y');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"obo,Zbk'-C:r8-@`A", (-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"6A", 91);
      jSONReaderScanner1.isEOF();
      char char0 = 'H';
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 0, (-4442));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 'A');
      jSONReaderScanner0.scanInt('%');
      jSONReaderScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'");
      jSONReaderScanner1.scanUUID('y');
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '+';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'", 13);
      jSONReaderScanner0.scanString('f');
      jSONReaderScanner0.nextToken();
      char[] charArray1 = new char[0];
      jSONReaderScanner1.scanFieldLong(charArray1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e yO#+4Tv/(`<~RWIS6");
      jSONReaderScanner0.scanFloat('z');
      JSONScanner jSONScanner0 = new JSONScanner("e yO#+4Tv/(`<~RWIS6", 83);
      jSONScanner0.nextToken(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("WriteMapNullValue");
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((char[]) null, 49, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~T0%W7-Sgu0E`S_:?", 2178);
      jSONScanner0.nextToken(12);
      jSONScanner0.tokenName();
      MockDate mockDate0 = new MockDate();
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      charArray0[3] = '1';
      charArray0[4] = '@';
      charArray0[5] = '1';
      charArray0[6] = 'k';
      jSONScanner0.scanFieldFloatArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.scanUUID('b');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1302));
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.isEOF();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I6tuiR");
      jSONReaderScanner0.nextToken((-1302));
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.isEOF();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I6tuiR");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'");
      jSONReaderScanner1.scanUUID('y');
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '+';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("89l{YGM Zqw%'MP>+&'", 13);
      jSONReaderScanner0.scanString('f');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner1.nextToken(13);
      jSONReaderScanner2.nextToken();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new", 41);
      jSONReaderScanner0.scanDate('x');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanInt('x');
      jSONReaderScanner0.stringDefaultValue();
      jSONScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_xhUV{ LAo>{");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_xhUV{ LAo>{");
      jSONReaderScanner1.nextIdent();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dgEDY7*y");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDecimal('b');
      jSONReaderScanner0.nextToken(18);
      SymbolTable symbolTable0 = new SymbolTable(93);
      jSONReaderScanner0.intValue();
      System.setCurrentTimeMillis((-1));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 66;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      jSONReaderScanner0.scanDecimal('c');
      int int1 = 10;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3 a5A/-wQWmA'l");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      jSONReaderScanner0.scanDouble('Y');
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      charArray0[8] = 'Y';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.scanBoolean('d');
      jSONReaderScanner1.scanDate('Y');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.scanDouble('/');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.scanInt('B');
      jSONReaderScanner0.scanBoolean('/');
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONReaderScanner0.scanDate('/');
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'B';
      charArray0[2] = '/';
      charArray0[3] = 'K';
      charArray0[4] = 'B';
      charArray0[5] = '/';
      charArray0[6] = 'B';
      jSONReaderScanner0.matchField(charArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner0 = new JSONScanner("WriteNonStringValueAsString");
      jSONReaderScanner0.scanDate('r');
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.putChar('r');
      jSONReaderScanner0.scanDate('\"');
      char[] charArray1 = new char[5];
      charArray1[0] = '\"';
      charArray1[1] = '\"';
      charArray1[2] = 'r';
      charArray1[3] = '\"';
      charArray1[4] = 'r';
      jSONReaderScanner0.matchField(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1), 93);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
