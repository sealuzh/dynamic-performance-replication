/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:52:13 GMT 2018
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.functions.supportVector.RegSMO;
import weka.classifiers.functions.supportVector.RegSMOImproved;
import weka.classifiers.meta.MultiClassClassifier;
import weka.core.Instances;
import weka.core.TechnicalInformation;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegSMO_ESTest extends RegSMO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.globalInfo();
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      
      regSMO0.setOptions((String[]) null);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.getRevision();
      assertEquals("8034", string0);
      
      regSMO0.getOptions();
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.wrapUp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      double[] doubleArray0 = new double[7];
      regSMO0.m_alphaStar = doubleArray0;
      regSMO0.m_alpha = doubleArray0;
      int int0 = regSMO0.secondChoiceHeuristic((byte)57);
      assertEquals((-1), int0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      double[] doubleArray0 = new double[5];
      regSMO0.m_SVM = null;
      regSMO0.m_nEvals = (int) (byte)83;
      doubleArray0[1] = (double) (byte)83;
      regSMO0.m_eps = (-2.0934115383063565);
      regSMO0.m_alpha = doubleArray0;
      regSMO0.m_C = (double) (byte)83;
      doubleArray0[0] = 83.0;
      doubleArray0[4] = (double) 1;
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      regSMO0.secondChoiceHeuristic((byte)8);
      try { 
        regSMO0.examineExample(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      boolean boolean0 = regSMO0.findOptimalPointOnLine((-1293), (-1293), (-1293), (-1293), (-1293), (-1293), (-1293), (-1293), 0.0, 0.0, (-1293));
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      String string0 = regSMOImproved0.epsilonTipText();
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.takeStep((-134), 111, (-134), 111, (-134));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        regSMO0.buildClassifier((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      regSMOImproved0.setEpsilon(1);
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine((-1345), (-1345), 16, 16, (-1345), 16, (-1345), 3, 3, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2147014476, 2147014476, 1.0E-12, 1.0E-12, 2147014476, 1.0E-12, (-1751.2092375905165), 1075.0766991777573, 1075.0766991777573, 1075.0766991777573, 1075.0766991777573);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      double[] doubleArray0 = new double[16];
      regSMO0.m_alpha = doubleArray0;
      SMOreg sMOreg0 = regSMO0.m_SVM;
      Random.setNextRandom(1);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 46.9999999953, 2174.7992058, 46.9999999953, 0, 2174.7992058, 0, 0, 0, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-1293), (-1293), (-1293), (-1293), (-1293), (-1293), (-1293), (-1293), 37.09710428919945, 37.09710428919945, (-1293));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Random.setNextRandom((-2146237588));
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-2146237588), 3427.892365986622, (-2146237588), (-2146237588), 1805, (-2146237588), 4.7950068188697E-8, (-2146237588), (-2146237588), 467.0304767535, (-2146237588));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertNotNull(regSMOImproved0);
      
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(475, 2267.5, 475, 475, 85, 85, 1.0E-12, 85, 475, 2267.5, 2267.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(526, 526, 526, 432.98701728037776, 526, 1.739674050218738, (-298.71), 1.739674050218738, 17.26797849896244, 17.26797849896244, 432.98701728037776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(526, 526, 526, 526, 526, 526, (-298.71), 526, 17.26797849896244, 17.26797849896244, 526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertNotNull(regSMO0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(85, (-1002.23605586573), 1075.076699178, 1075.076699178, 1744, 1.0E-12, 0.01, 85, (-10.0), 1744, 85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[9];
      String string0 = regSMOImproved0.toString();
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(0, 47, 3, 1.7976931348623157E308, 0, (-1490.4368083), 1962.5, 1962.5, (-1001.7328596486823), 1834.1034, 3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2334.0493349568387;
      doubleArray0[2] = 1.0E-6;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";7");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-2608), 1.0E-6, (-2608), 1.0E-6, (-2608), 1.0E-6, 2334.0493349568387, 925, 1.0E-12, 1.0E-6, (-449.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertNotNull(regSMOImproved0);
      
      int int0 = (-1230);
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine((-1230), 4, (-2059.368978788), 1.7976931348623157E308, (-1230), (-2059.368978788), 3294.21842, 1.0, 1618.90004960682, 99.0, (-45.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(34, 36.65282429, 36.65282429, 34, 4477, 36.65282429, 36.65282429, 4477, 4477, 36.65282429, (-1997.0992574374));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertNotNull(regSMO0);
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertNotNull(enumeration0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(96, 96, 2411.29948677207, 2411.29948677207, 96, 96, 96, 4.5, 1412.3658948587633, 4.5, 4.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      RegSMO regSMO0 = new RegSMO();
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2227, 2227, 1.0, 2227, 125, 2227, 2227, 2227, 6.9980597377126E-8, 2227, 2227);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2227, 2227, 1.0, 509.352022361154, 125, 2227, 509.352022361154, 509.352022361154, 6.9980597377126E-8, 509.352022361154, 2227);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(373, (-498.84413814636525), 3, (-2.0), (-3145), 0.0, 0.0, (-498.84413814636525), 296.8009676, 3, 1903.2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2334.0493349568387;
      doubleArray0[2] = 1.0E-6;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";7");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-2608), 653.672666266, (-2608), 1.0E-6, (-2608), 1.0E-6, 2334.0493349568387, 925, 1.0E-12, 1.0E-6, (-449.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 1.0E-12;
      int int0 = 925;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(925, 662.8417220849551, 925, 1.0E-12, 925, 1.0E-12, 0.0, 925, 1.0E-12, 1.0E-12, (-449.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (-1208.1913021);
      regSMO0.m_alpha = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      double double0 = regSMO0.getEpsilon();
      assertEquals(1.0E-12, double0, 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic((-2594));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (byte)83;
      regSMO0.m_eps = (-2.0934115383063565);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-2.0934115383063565), regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-2.0934115383063565), regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_C = (double) (byte)83;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-2.0934115383063565), regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      doubleArray0[0] = (double) 1;
      doubleArray0[4] = (double) 1;
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-2.0934115383063565), regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      int int0 = regSMO0.secondChoiceHeuristic((byte)8);
      assertEquals(0, int0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-2.0934115383063565), regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      String string0 = regSMO0.globalInfo();
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-2.0934115383063565), regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertNotNull(regSMO0);
      
      Puk puk0 = new Puk();
      assertEquals(0, puk0.numEvals());
      assertEquals("Turns on the output of debugging information.", puk0.debugTipText());
      assertEquals(1.0, puk0.getOmega(), 0.01);
      assertEquals("The Omega value.", puk0.omegaTipText());
      assertEquals("The size of the cache (a prime number), 0 for full cache and -1 to turn it off.", puk0.cacheSizeTipText());
      assertEquals(250007, puk0.getCacheSize());
      assertEquals(0, puk0.numCacheHits());
      assertFalse(puk0.getDebug());
      assertEquals("Puk kernel", puk0.toString());
      assertEquals("The Sigma value.", puk0.sigmaTipText());
      assertEquals(1.0, puk0.getSigma(), 0.01);
      assertEquals("Turns time-consuming checks off - use with caution.", puk0.checksTurnedOffTipText());
      assertFalse(puk0.getChecksTurnedOff());
      assertNotNull(puk0);
      
      regSMO0.m_kernel = (Kernel) puk0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, puk0.numEvals());
      assertEquals("Turns on the output of debugging information.", puk0.debugTipText());
      assertEquals(1.0, puk0.getOmega(), 0.01);
      assertEquals("The Omega value.", puk0.omegaTipText());
      assertEquals("The size of the cache (a prime number), 0 for full cache and -1 to turn it off.", puk0.cacheSizeTipText());
      assertEquals(250007, puk0.getCacheSize());
      assertEquals(0, puk0.numCacheHits());
      assertFalse(puk0.getDebug());
      assertEquals("Puk kernel", puk0.toString());
      assertEquals("The Sigma value.", puk0.sigmaTipText());
      assertEquals(1.0, puk0.getSigma(), 0.01);
      assertEquals("Turns time-consuming checks off - use with caution.", puk0.checksTurnedOffTipText());
      assertFalse(puk0.getChecksTurnedOff());
      assertFalse(regSMO0.m_kernel.getDebug());
      assertEquals("Turns on the output of debugging information.", regSMO0.m_kernel.debugTipText());
      assertFalse(regSMO0.m_kernel.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", regSMO0.m_kernel.checksTurnedOffTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(42, 925, (-947.56385966678), (-947.56385966678), 925, (-449.0), 0.0, 925, 925, 925, 349.50718);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1.0E-12;
      int int0 = (-2621);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-2621), 653.672666266, (-2621), 1.0E-12, (-2621), (-1009.05846154), 0.0, 925, 1.0E-12, 1.0E-12, (-449.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(526, 526, 526, 526, 526, 1.739674050218738, (-298.71), 1.739674050218738, 17.26797849896244, 17.26797849896244, 526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertNotNull(regSMO0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(925, (-1906.903828561456), 0.0, 0.0, 779, (-1009.05846), 925, 0.0, 925, 925, 925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2334.0493349568387;
      doubleArray0[2] = 1.0E-6;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-2608), 653.672666266, (-2608), 1.0E-6, (-2608), (-1009.05846), 2334.0493349568387, 925, 1.0E-12, 1.0E-6, (-449.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[20];
      regSMOImproved0.m_alpha = doubleArray0;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      
      SMOreg sMOreg0 = regSMOImproved0.m_SVM;
      assertNull(sMOreg0);
      
      regSMOImproved0.m_b = (double) 2;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      
      regSMOImproved0.m_alphaStar = doubleArray0;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(2, 2, 2422.9329, 2, 2, 47.0, 2, 2.3559725188335476, 1, 3486.581383035241, 14297.353568472568);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertNotNull(regSMOImproved0);
      
      regSMOImproved0.setEpsilonParameter(2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(2.0, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 8;
      regSMOImproved0.m_alpha = doubleArray0;
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(2.0, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      regSMOImproved0.m_target = regSMOImproved0.m_alpha;
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(2.0, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      String string0 = File.separator;
      assertEquals("/", string0);
      assertNotNull(string0);
      
      try { 
        regSMOImproved0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertNotNull(regSMO0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-P";
      stringArray0[1] = "^AVK:'kCxZ%";
      stringArray0[2] = "   * Performs a batch filtering of the buffered data, if any available.\n";
      stringArray0[3] = "*\"~";
      try { 
        regSMO0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 8;
      regSMOImproved0.m_alpha = doubleArray0;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      int int0 = 2483;
      regSMOImproved0.m_iLow = 2483;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      regSMOImproved0.m_target = doubleArray1;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      try { 
        regSMOImproved0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertFalse(regSMOImproved0.modelBuilt());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[20];
      regSMOImproved0.m_alpha = doubleArray0;
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertFalse(regSMOImproved0.modelBuilt());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      
      SMOreg sMOreg0 = regSMOImproved0.m_SVM;
      assertNull(sMOreg0);
      
      regSMOImproved0.m_b = (double) 2;
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertFalse(regSMOImproved0.modelBuilt());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      
      regSMOImproved0.m_alphaStar = doubleArray0;
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertFalse(regSMOImproved0.modelBuilt());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      
      boolean boolean0 = regSMOImproved0.m_bUseVariant1;
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(2, 1.0E-4, 2422.9329, 2.147483647E9, 2, 47.0, 2.147483647E9, 2.3559725188335476, 1, 3486.581383035241, 14297.353568472568);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[26];
      String string0 = Instances.ARFF_DATA;
      assertEquals("@data", string0);
      assertNotNull(string0);
      
      doubleArray0[0] = (double) 8;
      regSMOImproved0.m_alpha = doubleArray0;
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      SMOreg sMOreg0 = new SMOreg();
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertFalse(sMOreg0.getDebug());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertNotNull(sMOreg0);
      
      regSMOImproved0.m_alphaStar = doubleArray0;
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(1, 8, 2, 4.0, 0, 0, 14298.139017247362, 4, 2, 4.0, 14298.139017247362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertNotNull(regSMO0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(250007, (-1002.051631868952), 1075.0766991777582, 1075.0766991777582, 1376, 1.0E-12, 0.01, 1.0E-12, (-10.0), 1376, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = 46.9999999953;
      regSMO0.m_alpha = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      SMOreg sMOreg0 = regSMO0.m_SVM;
      assertNull(sMOreg0);
      
      Random.setNextRandom(1);
      regSMO0.setEpsilon(46.9999999953);
      assertEquals(46.9999999953, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 46.9999999953, 2174.7992058, 46.9999999953, 0, 2174.7992058, 0, 0, 46.9999999953, 2, (-531.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[9];
      String string0 = regSMO0.toString();
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-44), 47, 2676.296034, 1.7976931348623157E308, (-44), (-104.49200966059769), 1.7976931348623157E308, 1.7976931348623157E308, (-1001.7328596486823), 47, 3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[20];
      regSMOImproved0.m_alpha = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      
      SMOreg sMOreg0 = regSMOImproved0.m_SVM;
      assertNull(sMOreg0);
      
      regSMOImproved0.m_b = (double) 2;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      
      regSMOImproved0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      
      boolean boolean0 = regSMOImproved0.m_bUseVariant1;
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(2, 1.0E-4, 2422.9329, 2, 2, 47.0, 2, 2.3559725188335476, 1, 3486.581383035241, 14297.353568472568);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[5];
      regSMO0.m_alpha = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      
      SMOreg sMOreg0 = regSMO0.m_SVM;
      assertNull(sMOreg0);
      
      int int0 = regSMO0.takeStep((-4284), (-4284), 46.9999999953, 0, (-1362.8659297549686));
      assertEquals(0, int0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      
      Classifier classifier0 = AbstractClassifier.makeCopy((Classifier) null);
      assertNull(classifier0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, (-567.6701136), 0, 1, (-4284), 46.9999999953, 0, (-895.92819566592), 99.5684102626, 1.0, 1927.67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertNotNull(regSMOImproved0);
      
      TechnicalInformation technicalInformation0 = regSMOImproved0.getTechnicalInformation();
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(TechnicalInformation.Type.INPROCEEDINGS, technicalInformation0.getType());
      assertTrue(technicalInformation0.hasAdditional());
      assertNotNull(technicalInformation0);
      
      regSMOImproved0.m_nInstances = 2;
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      
      try { 
        regSMOImproved0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMOImproved", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertNotNull(regSMO0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2076.139);
      doubleArray0[2] = (-2076.139);
      doubleArray0[3] = (-889.975689149194);
      doubleArray0[4] = (-1.0);
      doubleArray0[2] = (-241.7);
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray1 = new double[23];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Random forest not built yet");
      assertFalse(boolean0);
      
      doubleArray1[2] = (double) (byte)25;
      doubleArray1[1] = (double) (byte)57;
      regSMO0.m_eps = (double) (byte)57;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(57.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alpha = doubleArray1;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(57.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alpha = doubleArray1;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(57.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      doubleArray0[0] = (double) (byte)25;
      doubleArray1[0] = 57.0;
      doubleArray1[4] = (-2107.746517);
      doubleArray1[4] = (double) 0;
      regSMO0.m_C = 57.0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(57.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(57.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      int int0 = regSMO0.secondChoiceHeuristic((byte)57);
      assertEquals(0, int0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(57.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 3;
      regSMOImproved0.m_alpha = doubleArray0;
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      
      SMOreg sMOreg0 = new SMOreg();
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertNotNull(sMOreg0);
      
      regSMOImproved0.m_alphaStar = doubleArray0;
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      
      regSMOImproved0.setEpsilon(3.0);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(3.0, regSMOImproved0.getEpsilon(), 0.01);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      
      boolean boolean0 = regSMOImproved0.findOptimalPointOnLine(1, 4, 2, 3.0, 0, 0, 14298.139017247362, 4, 2, 3.0, 14298.139017247362);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertFalse(boolean0);
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(3.0, regSMOImproved0.getEpsilon(), 0.01);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[7];
      regSMOImproved0.m_alpha = doubleArray0;
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      
      SMOreg sMOreg0 = regSMOImproved0.m_SVM;
      assertNull(sMOreg0);
      
      regSMOImproved0.m_alphaStar = regSMOImproved0.m_alpha;
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      
      boolean boolean0 = regSMOImproved0.m_bUseVariant1;
      assertTrue(boolean0);
      
      double double0 = (-293.234514095);
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(1, 14291.354333897028, 0.0, 47.0, 0, (-293.234514095), 14291.354333897028, 47.0, (-32.443914749126066), 0.30685281900000005, 61.91712927891948);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(3, RegSMOImproved.I0);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 3;
      regSMOImproved0.m_alpha = doubleArray0;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SMOreg sMOreg0 = regSMOImproved0.m_SVM;
      assertNull(sMOreg0);
      
      regSMOImproved0.m_alphaStar = doubleArray0;
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      
      regSMOImproved0.setEpsilon(3.0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(3, RegSMOImproved.I0);
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(3.0, regSMOImproved0.getEpsilon(), 0.01);
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1, regSMOImproved0.getSeed());
      
      byte byte0 = (byte) (-87);
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(1, 1.0, 1.00009999989999, 16.0, 0, (-293.234514095), 14291.354333897028, 16, 0.693147181, 2, 63.67419691345154);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RegSMOImproved regSMOImproved0 = new RegSMOImproved();
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      assertNotNull(regSMOImproved0);
      
      double[] doubleArray0 = new double[26];
      String string0 = Instances.ARFF_DATA;
      assertEquals("@data", string0);
      assertNotNull(string0);
      
      doubleArray0[0] = (double) 8;
      regSMOImproved0.m_alpha = doubleArray0;
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SMOreg sMOreg0 = new SMOreg();
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertFalse(sMOreg0.getDebug());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertNotNull(sMOreg0);
      
      regSMOImproved0.m_alphaStar = doubleArray0;
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals(1.0E-12, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      regSMOImproved0.setEpsilon(8.0);
      assertEquals(4, RegSMOImproved.I1);
      assertEquals(16, RegSMOImproved.I3);
      assertEquals(1, RegSMOImproved.I0a);
      assertEquals(2, RegSMOImproved.I0b);
      assertEquals(3, RegSMOImproved.I0);
      assertEquals(8, RegSMOImproved.I2);
      assertEquals("tolerance parameter used for checking stopping criterion b.up < b.low + 2 tol", regSMOImproved0.toleranceTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMOImproved0.epsilonParameterTipText());
      assertEquals(0.001, regSMOImproved0.getTolerance(), 0.01);
      assertEquals("Seed for random number generator.", regSMOImproved0.seedTipText());
      assertEquals((-1), regSMOImproved0.getCacheHits());
      assertEquals(1, regSMOImproved0.getSeed());
      assertFalse(regSMOImproved0.modelBuilt());
      assertEquals(0.001, regSMOImproved0.getEpsilonParameter(), 0.01);
      assertEquals(0, regSMOImproved0.getKernelEvaluations());
      assertEquals(8.0, regSMOImproved0.getEpsilon(), 0.01);
      assertEquals("set true to use variant 1 of the paper, otherwise use variant 2.", regSMOImproved0.useVariant1TipText());
      assertTrue(regSMOImproved0.isUseVariant1());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMOImproved0.epsilonTipText());
      
      // Undeclared exception!
      try { 
        regSMOImproved0.findOptimalPointOnLine(1, 8, 2, 4.0, 0, 0, 14298.139017247362, 4, 2, 4.0, 14298.139017247362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }
}
