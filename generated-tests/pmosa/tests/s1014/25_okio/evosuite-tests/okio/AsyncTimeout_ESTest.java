/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:15:30 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Deflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(3757L);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.deadlineNanoTime(65536L);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      asyncTimeout0.exit(false);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      Source source0 = null;
      asyncTimeout0.source((Source) null);
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      MockIOException mockIOException1 = new MockIOException("Expected leading [0-9a-fA-F] character but was 0x", iOException0);
      asyncTimeout0.exit((IOException) mockIOException1);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.timedOut();
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      mockIOException0.getSuppressed();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.enter();
      asyncTimeout0.timeout(1000000L, timeUnit0);
      pipe0.sinkClosed = true;
      Source source0 = asyncTimeout0.source(pipe_PipeSource0);
      asyncTimeout0.enter();
      pipe0.sourceClosed = true;
      asyncTimeout0.source(source0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Timeout timeout0 = asyncTimeout0.timeout(10000000000000000L, timeUnit0);
      assertNotNull(timeout0);
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout0, asyncTimeout0);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(9223372036854775807L, asyncTimeout0.timeoutNanos());
      assertEquals(9223372036854775807L, timeout0.timeoutNanos());
      assertFalse(timeout0.hasDeadline());
      
      Timeout timeout1 = asyncTimeout0.deadlineNanoTime(3757L);
      assertNotNull(timeout1);
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout1, timeout0);
      assertSame(timeout1, asyncTimeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(9223372036854775807L, asyncTimeout0.timeoutNanos());
      assertEquals(9223372036854775807L, timeout1.timeoutNanos());
      assertTrue(timeout1.hasDeadline());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(9223372036854775807L, asyncTimeout0.timeoutNanos());
      
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      Timeout timeout0 = asyncTimeout0.clearTimeout();
      assertNotNull(timeout0);
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout0, asyncTimeout0);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(timeout0.hasDeadline());
      assertEquals(0L, timeout0.timeoutNanos());
      
      Timeout timeout1 = asyncTimeout0.deadlineNanoTime(65536L);
      assertNotNull(timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertSame(timeout1, timeout0);
      assertSame(timeout1, asyncTimeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertEquals(0L, timeout1.timeoutNanos());
      assertTrue(timeout1.hasDeadline());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      AsyncTimeout.awaitTimeout();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      long long0 = 0L;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      assertNull(asyncTimeout1);
      
      Timeout timeout0 = asyncTimeout0.deadlineNanoTime(65536L);
      assertNotNull(timeout0);
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout0, asyncTimeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertTrue(timeout0.hasDeadline());
      assertEquals(0L, timeout0.timeoutNanos());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      asyncTimeout0.exit(false);
      assertSame(asyncTimeout0, timeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        asyncTimeout0.deadline(0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: 0
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      long long0 = 0L;
      Timeout timeout0 = asyncTimeout0.clearTimeout();
      assertNotNull(timeout0);
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout0, asyncTimeout0);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(timeout0.hasDeadline());
      assertEquals(0L, timeout0.timeoutNanos());
      
      Timeout timeout1 = asyncTimeout0.deadlineNanoTime(65536L);
      assertNotNull(timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertSame(timeout1, timeout0);
      assertSame(timeout1, asyncTimeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertTrue(timeout1.hasDeadline());
      assertEquals(0L, timeout1.timeoutNanos());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      asyncTimeout0.exit(false);
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        asyncTimeout0.deadline(0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: 0
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      long long0 = 0L;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      assertNotNull(asyncTimeout1);
      assertSame(asyncTimeout0, asyncTimeout1);
      assertSame(asyncTimeout1, asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertFalse(asyncTimeout1.hasDeadline());
      assertEquals(0L, asyncTimeout1.timeoutNanos());
      
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(65536L);
      assertNotNull(asyncTimeout2);
      assertSame(asyncTimeout0, asyncTimeout2);
      assertSame(asyncTimeout0, asyncTimeout1);
      assertSame(asyncTimeout2, asyncTimeout1);
      assertSame(asyncTimeout2, asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertTrue(asyncTimeout0.hasDeadline());
      assertTrue(asyncTimeout2.hasDeadline());
      assertEquals(0L, asyncTimeout2.timeoutNanos());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, asyncTimeout2);
      assertSame(asyncTimeout0, asyncTimeout1);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertTrue(asyncTimeout0.hasDeadline());
      
      AsyncTimeout.awaitTimeout();
      long long1 = (-1190L);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(long1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1190
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      Timeout timeout0 = asyncTimeout0.deadlineNanoTime(65536L);
      assertNotNull(timeout0);
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout0, asyncTimeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertTrue(timeout0.hasDeadline());
      assertEquals(0L, timeout0.timeoutNanos());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
      assertTrue(asyncTimeout0.hasDeadline());
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      
      try { 
        asyncTimeout0.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      asyncTimeout0.enter();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      IOException iOException0 = asyncTimeout0.exit((IOException) null);
      assertNull(iOException0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      Pipe pipe0 = new Pipe(1777000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[0];
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertNotNull(bufferedSink0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Sink sink0 = asyncTimeout0.sink(bufferedSink0);
      assertNotNull(sink0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Source source0 = asyncTimeout0.source(buffer0);
      assertNotNull(source0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }
}
