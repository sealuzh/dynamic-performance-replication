/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:47:59 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.MatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iteratorOfColumn(32);
      cRSMatrix0.subtract((double) 32);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(6, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6);
      // Undeclared exception!
      try { 
        CRSMatrix.random(6, 6, (double) 6, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      cRSMatrix0.iteratorOfNonZeroRows();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(2);
      CRSMatrix.random(0, 1000, (double) 232, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-2089443548), 56, (-3887.2136876557242));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2089443548' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(570, 0);
      MockRandom mockRandom0 = new MockRandom(570);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(942, Double.NEGATIVE_INFINITY);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(sparseMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1487);
      cRSMatrix0.nonZeroAt(6, 17);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1854;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1854;
      doubleArray0[1] = 1084.2571681826;
      doubleArray0[2] = (double) 1854;
      doubleArray0[3] = (double) 1854;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(99L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(2, 2, 0.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.setAll((-52.0));
      assertEquals(4, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(boolean0);
      
      MatrixIterator matrixIterator0 = cRSMatrix0.nonZeroIterator();
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(matrixIterator0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-911));
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-911), 1746.937, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -911x-911
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(13, 28, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(51, 51, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-452.86);
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.sum();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-1353), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, (-4182.449816696966));
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals((-4182.449816696966), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, denseMatrix0, denseMatrix0);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals((-4182.449816696966), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals((-4182.449816696966), cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastColumn();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals((-4182.449816696966), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals((-4182.449816696966), cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(2, cRSMatrix1.cardinality());
      assertEquals((-4182.449816696966), cRSMatrix1.min(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      int int1 = 1659;
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(1659);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 58;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(58, 1289.3683540544282);
      cRSMatrix0.nonZeroRowMajorIterator();
      Matrix matrix0 = cRSMatrix0.blankOfShape(2669, 58);
      cRSMatrix0.minInRow(48);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = 1289.3683540544282;
      SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.toColumnVector();
      matrix0.getColumn(48);
      matrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, matrix0);
      int int1 = (-1);
      SparseMatrix.identity(int1);
      cRSMatrix1.max();
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix1.eachInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 6;
      double double0 = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(6, 1.0, (Random) mockRandom0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.7, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -462
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      MatrixIterator matrixIterator0 = cRSMatrix0.iterator();
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(matrixIterator0);
      
      String string0 = cRSMatrix0.toCSV((NumberFormat) null);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(string0);
      assertEquals("", string0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(6, 1014, 1014);
      CRSMatrix.zero(32, 32);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 46;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(46, 1.0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1437.787539, (-1.0), (double)46, (-1.0), (-1.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      long long0 = 0L;
      double double0 = 435.459101153387;
      mockRandom0.nextBoolean();
      SparseMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      long long1 = (-144L);
      mockRandom0.longs(long0, long1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-43);
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      byteArray0[2] = byteArray0[1];
      byte byte2 = (byte)43;
      byteArray0[3] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-41);
      byteArray0[5] = byte4;
      byte byte5 = (byte) (-69);
      byteArray0[6] = byte5;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(46, 1.0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction1);
      long long0 = 0L;
      mockRandom0.nextBoolean();
      SparseMatrix.randomSymmetric(46, 435.459101153387, (Random) mockRandom0);
      long long1 = (-144L);
      mockRandom0.longs(long0, long1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-43);
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-28);
      byteArray0[2] = byte2;
      byte byte3 = (byte)43;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-41);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-69);
      byteArray0[6] = byte6;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2934;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfRows(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.multiplyByItsTranspose();
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2893;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2893;
      doubleArray0[4] = (double) 1;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      cRSMatrix0.getColumn(1604);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(4, 28, 26);
      cRSMatrix1.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1513);
      double double0 = (-430.28336679);
      cRSMatrix0.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(1513, vectorProcedure0);
      double double1 = new Double(double0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      CRSMatrix.zero((int) byte0, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(58, 1289.3683540544282);
      cRSMatrix0.manhattanNorm();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.blankOfShape(2669, 4);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 559;
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) (byte) (-40);
      doubleArray0[2] = (double) 559;
      doubleArray0[3] = (double) 559;
      doubleArray0[6] = (double) (byte) (-40);
      doubleArray0[7] = (double) (byte) (-40);
      doubleArray0[8] = (double) (byte) (-40);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(559, (byte) (-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 559x-40
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, (-4182.449816696966));
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, denseMatrix0, denseMatrix0);
      int int0 = 31;
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(13, (-4182.449816696966));
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(13, 13);
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      double double0 = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-452.86);
      doubleArray1[6] = 1216.9723592729;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-452.86);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 1.0;
      int int0 = 2;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 0, doubleArray1);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(954, Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(2, vectorProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(2634, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom(int0);
      CRSMatrix.random(int0, int1, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(559, 0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(559);
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-43);
      int[] intArray0 = new int[0];
      cRSMatrix1.select(intArray0, intArray0);
      cRSMatrix0.rowMajorIterator();
      String string0 = "";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 559;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(41, 41);
      int int1 = 3;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(3, 3);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2934;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2934);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2934;
      doubleArray0[2] = (double) 2934;
      doubleArray0[3] = (double) (byte) (-40);
      doubleArray0[4] = (-2871.90347817883);
      doubleArray0[5] = (double) 2934;
      doubleArray0[6] = (double) 1115;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      ooPlaceOuterProduct0.partiallyApply(sparseVector0);
      cRSMatrix0.getOrElse(13, 1992, Double.NEGATIVE_INFINITY);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      SparseVector sparseVector1 = SparseVector.fromCollection((Collection<? extends Number>) null);
      ooPlaceOuterProduct1.apply(sparseVector0, sparseVector1);
      int int1 = 53;
      int int2 = 91;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int1, int2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Double double0 = new Double(46);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(46);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(46);
      cRSMatrix0.getRow(8);
      Matrix matrix0 = cRSMatrix0.multiply((Matrix) cRSMatrix1);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      cRSMatrix1.maxInRow(1149);
      int int0 = 48;
      double double1 = (-276.7432674865);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int0, double1);
      MockRandom mockRandom1 = new MockRandom();
      int int1 = 36;
      cRSMatrix1.getColumn(int1);
      cRSMatrix0.max();
      CRSMatrix cRSMatrix3 = CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, matrix0);
      SparseMatrix.block(cRSMatrix3, cRSMatrix2, cRSMatrix1, cRSMatrix0);
      int int2 = 0;
      RowMajorSparseMatrix.zero(int2, int2);
      SparseMatrix.identity(int2);
      matrix0.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix3.eachInRow(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, (-4182.449816696966));
      columnMajorSparseMatrix0.divide((-567.22525484634));
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      cRSMatrix0.multiplyByItsTranspose();
      DenseMatrix.from1DArray(1, 1, (double[]) null);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      int int0 = 291;
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(3054, 53, (-1779.600595969593));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3054' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      CRSMatrix cRSMatrix0 = new CRSMatrix((byte)0, (byte)0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector1 = SparseVector.fromMap(hashMap0, (byte)0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector1);
      matrix0.multiply((Vector) sparseVector0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("T<w2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColumnMajorSparseMatrix.diagonal(1, (-4173.578176148621));
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, (-4173.578176148621));
      int int0 = 42;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 3054;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 42;
      doubleArray0[1] = (double) 42;
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(42, 1307, doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      // Undeclared exception!
      try { 
        SparseMatrix.block(denseMatrix1, denseMatrix0, denseMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 46;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(58, 1289.3683540544282);
      cRSMatrix0.nonZeroRowMajorIterator();
      Matrix matrix0 = cRSMatrix0.blankOfShape(2669, 58);
      double double0 = cRSMatrix0.minInRow(46);
      matrix0.minInRow(58);
      cRSMatrix0.setAll(1289.3683540544282);
      cRSMatrix0.set(46, (-2606), 2669);
      cRSMatrix0.min();
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(int0, int0, double0, (Random) mockRandom0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      cRSMatrix0.blank();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      Matrix matrix0 = cRSMatrix0.subtract(Double.POSITIVE_INFINITY);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(matrix0, denseMatrix0, matrix0, cRSMatrix1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[2] = 1;
      cRSMatrix2.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        SparseVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(19);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(19, 1402.189046);
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      cRSMatrix0.nonZeroRowMajorIterator();
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 19;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[6] = 4;
      intArray0[7] = 4;
      matrix0.select(intArray0, intArray0);
      String string0 = "`<bv!tUOE4";
      CRSMatrix.fromMatrixMarket(string0);
      MatrixProcedure matrixProcedure0 = null;
      matrix0.each(matrixProcedure0);
      int int0 = 8;
      int int1 = (-1434);
      cRSMatrix1.blankOfShape(int0, int1);
      CRSMatrix.fromMatrixMarket(string0);
      int int2 = 339;
      cRSMatrix1.minInRow(int2);
      cRSMatrix1.nonZeroRowMajorIterator();
      int int3 = 0;
      CRSMatrix cRSMatrix2 = new CRSMatrix(intArray0[0], int3);
      int int4 = 406;
      cRSMatrix0.nonZeroIteratorOfRow(int4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(1);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cRSMatrix0.subtract((double) 1);
      CRSMatrix cRSMatrix3 = CRSMatrix.block(basic2DMatrix0, denseMatrix0, basic2DMatrix0, cRSMatrix2);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[2] = 1;
      cRSMatrix3.select(intArray0, intArray0);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray1, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      cRSMatrix0.blankOfRows(1115);
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      byte byte0 = (byte)13;
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      CRSMatrix.fromBinary(byteArray0);
      int int0 = 5969;
      CRSMatrix.zero(int0, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 46;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(46, 1.0, (Random) mockRandom0);
      double double0 = (-4.163771438216074);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(46, 37);
      int int1 = 54;
      double double1 = new Double((-4.163771438216074));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(46);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, cRSMatrix0, cRSMatrix1);
      int int2 = (-3458);
      int int3 = (-1004);
      int int4 = 1053;
      RowMajorSparseMatrix.identity(int4);
      columnMajorSparseMatrix0.maxInRow(int3);
      cRSMatrix2.getRow(int2);
      cRSMatrix2.getOrElse(int1, int0, double0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      CRSMatrix.random(2, 476, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(58, 1289.3683540544282);
      cRSMatrix0.nonZeroRowMajorIterator();
      Matrix matrix0 = cRSMatrix0.blankOfShape(2669, 58);
      cRSMatrix0.minInRow(46);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = 1289.3683540544282;
      SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      CRSMatrix cRSMatrix1 = new CRSMatrix(2904, 2922);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix1);
      int int0 = (-3);
      int int1 = 2;
      cRSMatrix2.getOrElse(int0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      CRSMatrix cRSMatrix0 = new CRSMatrix((byte)0, (byte)0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 46;
      MockRandom mockRandom0 = new MockRandom();
      double double0 = new Double(46);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(46, 1.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(46);
      cRSMatrix0.getRow(8);
      Matrix matrix0 = cRSMatrix0.multiply((Matrix) cRSMatrix1);
      Matrix matrix1 = matrix0.rotate();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 46;
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.max();
      CRSMatrix cRSMatrix2 = new CRSMatrix(intArray0[0], int0);
      Matrix matrix2 = cRSMatrix2.subtract(matrix1);
      CRSMatrix cRSMatrix3 = CRSMatrix.block(matrix2, matrix0, matrix1, matrix1);
      cRSMatrix3.max();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 39;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(48, 39);
      cRSMatrix0.toRowMajorSparseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = NumberFormat.getInstance((Locale) null);
      cRSMatrix0.mkString(numberFormat0);
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
      int int1 = 60;
      cRSMatrix0.minInRow(int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(450);
      Matrix matrix0 = cRSMatrix0.blankOfRows(1000);
      matrix0.divide(1832.05516882);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(439, vectorAccumulator0);
      int int0 = (-6);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal((-6), (-4403.0852350761));
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix1.foldRows(vectorAccumulator1);
      cRSMatrix1.removeFirstRow();
      int int1 = 33;
      DenseMatrix.from1DArray(int0, int1, doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      matrix0.max();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(99L);
      CRSMatrix.random(2, 2, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll(9.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 559;
      MockRandom mockRandom0 = new MockRandom();
      byte byte0 = (byte) (-40);
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) (byte) (-40);
      doubleArray0[2] = (double) 559;
      DenseMatrix.from1DArray(26, 559, doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int1 = 1145;
      CRSMatrix cRSMatrix0 = new CRSMatrix(559, 1145, 26);
      cRSMatrix0.maxInRow(2);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((byte) (-40), (-678.0231));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.multiplyByItsTranspose();
      Matrix matrix0 = cRSMatrix0.blankOfColumns(1);
      CRSMatrix.block(matrix0, cRSMatrix0, matrix0, cRSMatrix0);
      cRSMatrix0.setAll(0L);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("/]S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 46;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 58;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(58, 1289.3683540544282);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(8, vectorFunction0);
      int int2 = (-2327);
      Matrix matrix1 = cRSMatrix0.blankOfShape(58, (-2327));
      int int3 = (-1968526676);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int3, int2, int1);
      cRSMatrix1.minInRow(int0);
      int int4 = (-1422);
      cRSMatrix0.minInRow(int4);
      cRSMatrix1.nonZeroRowMajorIterator();
      CRSMatrix cRSMatrix2 = new CRSMatrix(int3, int4);
      CRSMatrix.block(cRSMatrix1, matrix0, matrix0, matrix1);
      cRSMatrix2.max();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 46;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 58;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(58, 1289.3683540544282);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)58, 1610.015, (double)58, 1289.3683540544282, (-2522.267)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(8, vectorFunction0);
      int int2 = (-2327);
      cRSMatrix0.blankOfShape(58, (-2327));
      int int3 = (-1968526676);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int3, int2, int1);
      cRSMatrix1.minInRow(int0);
      int int4 = (-1422);
      cRSMatrix0.minInRow(int4);
      cRSMatrix1.nonZeroRowMajorIterator();
      int int5 = 7;
      double double0 = (-549.9);
      CRSMatrix.diagonal(int5, double0);
      String string0 = ")6nfchykJJ\\+";
      CRSMatrix.fromMatrixMarket(string0);
      matrix0.rowMajorIterator();
      matrix0.getColumn(int5);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1881.7216726722754;
      doubleArray1[1] = (-2451.22894);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Matrix.constant(1146, 1146, 0.0);
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-500), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -500x32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2934, 2934, 3);
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix0.set(3, (-1148), 2371.8193138596866);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1148' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(29, 1.0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 2382;
      CRSMatrix cRSMatrix1 = CRSMatrix.random(2382, 2933, (-3559.3568641896863), (Random) mockRandom0);
      int int1 = (-2061584301);
      int int2 = (-2611);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInColumn(int2, vectorProcedure0);
      int int3 = (-1);
      int int4 = 10;
      cRSMatrix1.minInRow(int4);
      int int5 = 48;
      int int6 = 3985;
      CRSMatrix.identity(int6);
      cRSMatrix1.nonZeroRowMajorIterator();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.is(matrixPredicate0);
      int[] intArray0 = new int[7];
      intArray0[0] = int3;
      intArray0[1] = int5;
      intArray0[2] = int6;
      intArray0[3] = int2;
      intArray0[4] = int0;
      intArray0[5] = int1;
      intArray0[6] = int0;
      cRSMatrix0.select(intArray0, intArray0);
      String string0 = "";
      CRSMatrix.fromMatrixMarket(string0);
      double double0 = 0.09;
      CRSMatrix.randomSymmetric(int6, double0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 2934;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2934);
      int int1 = 2893;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int2 = 1149;
      double double0 = cRSMatrix0.maxInRow(1149);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1149, 3854);
      cRSMatrix1.sum();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = double0;
      cRSMatrix0.getColumn(int2);
      cRSMatrix1.max();
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int1, int1);
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[1] = doubleArray2;
      int int3 = 0;
      CRSMatrix cRSMatrix3 = new CRSMatrix(int3, int0);
      int int4 = (-3404);
      int int5 = 1132;
      CRSMatrix.from1DArray(int5, int4, doubleArray1[0]);
      int int6 = (-156);
      int int7 = 823;
      cRSMatrix2.blankOfShape(int6, int7);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(29, 1.0, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.removeLastColumn();
      cRSMatrix0.getRow(8);
      Matrix matrix1 = cRSMatrix0.multiply(matrix0);
      matrix1.set(8, 1, (-52.0));
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix.random(8, 1, 1.0, (Random) mockRandom0);
      cRSMatrix0.getColumn(29);
  }
}
