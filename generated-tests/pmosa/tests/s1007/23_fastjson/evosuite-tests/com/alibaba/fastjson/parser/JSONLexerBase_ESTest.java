/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:36:11 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}B0{WVI]m9C1vS,!", 0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '?';
      charArray0[2] = '{';
      SymbolTable symbolTable0 = new SymbolTable(16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 0, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[]yTTyT4s-v~JENB1=");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('z');
      jSONReaderScanner0.scanBoolean('i');
      jSONReaderScanner0.sp = 3968;
      jSONReaderScanner0.info();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.getLocale();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('p');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.scanTrue();
      jSONScanner0.sp = 2092;
      int int0 = Calendar.DAY_OF_WEEK_IN_MONTH;
      jSONScanner0.nextToken();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.scanString('Y');
      jSONScanner0.isBlankInput();
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('j');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b9%CGoqYpBTVwOH1", 3680);
      jSONScanner0.stringVal();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.scanNumber();
      jSONScanner0.scanInt('u');
      jSONScanner0.intValue();
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanString('1');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = 'u';
      charArray0[7] = '1';
      charArray0[8] = 'u';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.stringDefaultValue = "";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-4536), 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NAHl+m");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('H');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONScanner0.config(feature0, false);
      jSONScanner0.intValue();
      jSONScanner0.scanFloat('!');
      assertEquals(733, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[1] = '\u0000';
      JSONScanner jSONScanner0 = new JSONScanner("6QM*g|");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 6, info : pos 0, json : 6QM*g|
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 94);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Si@?jhD|7fzE");
      jSONScanner0.nextToken(4662);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. @
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanTrue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 'R');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanFloat('!');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '$';
      charArray0[2] = 'a';
      charArray0[3] = 'J';
      charArray0[4] = '#';
      charArray0[5] = '\'';
      charArray0[6] = 'e';
      charArray0[7] = 'q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, Integer.MAX_VALUE);
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VK+opvBF,");
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, 'L');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'Y';
      charArray0[2] = '=';
      charArray0[3] = '';
      charArray0[4] = '-';
      charArray0[5] = 'l';
      charArray0[6] = 'A';
      charArray0[7] = 'd';
      charArray0[8] = 'p';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2);
      jSONScanner0.scanInt('#');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, '[');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.putChar('K');
      Number number0 = jSONScanner0.integerValue();
      assertEquals(62, number0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      jSONScanner0.matchField(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2248);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 87);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      jSONReaderScanner0.scanFloat('v');
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('v', 'S', ' ', 'G', 'G', 'S');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      float float0 = jSONScanner0.scanFloat('!');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",mQ<>I6U%S$2c.vn1Hh", 3680);
      jSONScanner0.stringVal();
      jSONScanner0.scanNumber();
      jSONScanner0.scanInt('9');
      jSONScanner0.intValue();
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanString('G');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",mQ<>I6U%S$2c.vn1Hh");
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '9';
      charArray0[3] = 'W';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.sub_chars(0, 0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('M');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 58);
      jSONReaderScanner0.scanLong('_');
      assertEquals(58, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("OrderedField", (-611));
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Feature feature0 = Feature.SupportNonPublicField;
      jSONScanner0.config(feature0, false);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) hashSet0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e{mDk.yai7)", 0);
      char[] charArray0 = new char[9];
      jSONScanner0.scanNumber();
      jSONScanner0.scanInt('u');
      jSONScanner0.intValue();
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanString('u');
      assertEquals(524288, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p>0a%~J{9");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      long long0 = jSONReaderScanner0.scanLong('v');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'E';
      charArray0[2] = '+';
      charArray0[3] = '#';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'd';
      charArray1[1] = '#';
      jSONScanner0.scanFieldDouble(charArray1);
      charArray1[3] = 'E';
      charArray1[4] = '#';
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONScanner0.scanFieldBigInteger(charArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) charArray1;
      objectArray0[2] = (Object) jSONScanner0;
      jSONScanner0.lexError("%_`mTTueN#Q?f", objectArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(97);
      Locale locale0 = Locale.CHINA;
      jSONScanner0.setLocale(locale0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals(8, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      float float0 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFloat('\"');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0$WoxtDZjQ7R");
      JSONScanner jSONScanner1 = new JSONScanner("yCw/v?tTpCu9%6vv&V");
      float float0 = jSONScanner0.scanFloat('\"');
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      jSONScanner0.matchField2(charArray0);
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[19];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = '+';
      charArray0[3] = '#';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      float float0 = jSONScanner0.scanFloat('{');
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(43);
      JSONScanner jSONScanner0 = new JSONScanner("3f]^Sd", (-3376));
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'i');
      assertEquals((-3376), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[SlJ!TbQ!MF}O");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.sp = 0;
      jSONScanner0.charAt(87);
      jSONScanner0.info();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(91);
      jSONScanner0.scanEnum(class0, symbolTable0, '^');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.skipWhitespace();
      boolean boolean0 = jSONScanner0.isBlankInput();
      boolean boolean1 = jSONScanner0.isRef();
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[SlJ!TbQ!MF}O");
      jSONScanner0.intValue();
      jSONScanner0.sp = 0;
      jSONScanner0.scanFloat('N');
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(2751);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("iF", 0, 47, 70, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.intValue();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.setLocale(locale0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'b';
      charArray0[2] = 's';
      charArray0[3] = ',';
      charArray0[4] = 'k';
      charArray0[5] = 'Q';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("@Vf0]of-rn", (-3457), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/-NOI4~9=Fk|F/E");
      // Undeclared exception!
      try { 
        jSONScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanUUID('X');
      jSONScanner0.scanFloat('@');
      jSONScanner0.getLocale();
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '@';
      charArray0[2] = 'X';
      charArray0[3] = '@';
      charArray0[4] = '@';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.skipWhitespace();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.intValue();
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      SymbolTable symbolTable0 = new SymbolTable(83);
      jSONScanner0.scanFieldStringArray(charArray0, 0, symbolTable0);
      jSONScanner0.scanFloat('w');
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-4585));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9seBigDecimal");
      jSONScanner0.nextToken(18);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bp = 1974;
      char char0 = 'X';
      // Undeclared exception!
      jSONScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('Z');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.locale = locale0;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      char char0 = 'v';
      jSONScanner0.scanDouble('v');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(120);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nahl");
      char char0 = 'l';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      JSONScanner jSONScanner0 = new JSONScanner("illegal stat, textLength is zero", 1934);
      SymbolTable symbolTable0 = new SymbolTable(1065);
      jSONScanner0.scanSymbol(symbolTable0, 'r');
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-175), 123, 1934, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U6t+p4l`FXG_/rp", 87);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '#';
      charArray0[2] = 'F';
      charArray0[3] = 'S';
      charArray0[4] = 'w';
      charArray0[5] = 'l';
      charArray0[6] = 't';
      charArray0[7] = '\\';
      charArray0[8] = 'Q';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.next();
      jSONScanner0.setToken(87);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '!';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = '|';
      charArray0[5] = 's';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.intValue();
      jSONScanner0.scanUUID('p');
      Integer integer0 = new Integer(0);
      jSONScanner0.getLocale();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.scanUUID('u');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      float float0 = jSONScanner0.scanFloat('q');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.scanDecimal(',');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.", (-2732));
      jSONScanner0.scanFieldDecimal(charArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2732), "3f]IS.");
      jSONScanner0.nextToken((-2732));
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9Mdm", 2969);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      MockDate mockDate0 = new MockDate(2969, (-1), 2969, 'n', (-1));
      assertEquals("Wed Jan 20 13:59:00 GMT 4877", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[1] = '\u0000';
      charArray0[2] = '+';
      charArray0[3] = 'x';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.timeZone = timeZone0;
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanIdent();
      jSONScanner0.scanFloat('x');
      char char0 = jSONScanner0.next();
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals('+', char0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      jSONScanner0.putChar(']');
      charArray0[1] = '{';
      jSONScanner0.scanFieldBoolean(charArray0);
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.putChar('V');
      Number number0 = jSONScanner0.integerValue();
      assertEquals(62, number0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.nextToken(163);
      SymbolTable symbolTable0 = new SymbolTable(41);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : `pos 1, json : 6`=m
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.intValue();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'y');
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.next();
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('>');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 9 ");
      jSONScanner0.nextToken(2552);
      SymbolTable symbolTable0 = new SymbolTable(16);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K*");
      SymbolTable symbolTable0 = new SymbolTable(56);
      symbolTable0.addSymbol("AH=-OE", 0, 0, 56, true);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals('*', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      String string0 = jSONScanner0.tokenName();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals("Unknown", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d^S\"FH+Z#D");
      jSONReaderScanner0.scanString('F');
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ^
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.intValue();
      char char0 = '!';
      jSONScanner0.scanFloat('!');
      SymbolTable symbolTable0 = new SymbolTable(43);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('?');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ", 2762);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('%');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(463);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ',');
      jSONScanner0.nextToken(8);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.intValue();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, '}');
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("", 48);
      jSONScanner1.next();
      assertEquals(48, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken((-1963));
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.getLocale();
      Integer integer0 = new Integer(50);
      jSONScanner0.nextToken();
      float float0 = jSONScanner0.scanFloat('k');
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.scanLong('k');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('$');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TfZMv=@", (-2147483646));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSONReaderScanner0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "TfZMv=@";
      objectArray0[4] = (Object) "TfZMv=@";
      objectArray0[5] = (Object) "-S*[RVH";
      objectArray0[6] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("-S*[RVH", objectArray0);
      jSONReaderScanner0.scanInt('H');
      jSONReaderScanner0.scanString('4');
      jSONReaderScanner0.info();
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '?';
      charArray0[6] = '4';
      charArray0[7] = '4';
      charArray0[8] = '=';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UseBigDecimal");
      int int0 = jSONReaderScanner0.scanInt('|');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("G2-%ha ", 3271);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[5];
      char char0 = 'I';
      charArray0[0] = 'I';
      charArray0[1] = 'L';
      charArray0[2] = 'r';
      charArray0[3] = '2';
      charArray0[4] = '^';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Feature feature0 = Feature.CustomMapDeserializer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*A,yaERfFJL", 1762);
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'l';
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanDate('?');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.scanType("true");
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      jSONScanner0.scanFieldFloat(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONScanner0.intValue();
      jSONScanner0.charAt(0);
      int int0 = jSONScanner0.token();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, 8);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanIdent();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONScanner.checkDate('U', 'u', 'h', 'K', 'K', 'u', (-4394), (-4283));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", (-1240));
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("* g54H2m|_");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.skipWhitespace();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 3271;
      JSONScanner jSONScanner0 = new JSONScanner("G2-%ha ", 3271);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.nextToken(100);
      jSONScanner0.decimalValue(false);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.getCurrent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.resetStringPosition();
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(71);
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      char[] charArray0 = new char[8];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      Integer integer0 = new Integer(0);
      SymbolTable symbolTable0 = new SymbolTable(840);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'J');
      jSONScanner0.scanString('J');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Calendar.DAY_OF_YEAR;
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 6);
      float float0 = new Integer('!');
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '!';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.putChar('.');
      jSONScanner0.floatValue();
      char char0 = JSONLexer.EOI;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      jSONScanner0.nextToken();
      jSONScanner0.floatValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      JSONScanner jSONScanner1 = new JSONScanner("not match ");
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      SymbolTable symbolTable0 = new SymbolTable(71);
      jSONScanner0.scanEnum(class0, symbolTable0, 'y');
      jSONScanner0.isEnabled(93, 93);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X\"[M'!pIR>K");
      jSONScanner0.scanString();
      boolean boolean0 = jSONScanner0.isEnabled(207, 207);
      assertTrue(boolean0);
      
      jSONScanner0.resetStringPosition();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(110);
      int int0 = Calendar.NARROW_STANDALONE;
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '\"';
      charArray0[2] = 'Y';
      charArray0[3] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 40);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit");
      jSONScanner0.nextToken(8);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. .
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'oSz/*o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.intValue();
      jSONScanner0.scanType("6`=m");
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115, 15);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.nextToken(14);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. c
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nulI");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = ']';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scan new error");
      charArray0[2] = 'j';
      jSONScanner0.scanFieldString(charArray0);
      float float0 = jSONScanner0.scanFloat('!');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}_H#fM");
      jSONScanner0.nextToken(62);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SvA2=U!XF)Q");
      jSONScanner0.nextToken(2);
      int int0 = jSONScanner0.intValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(42172, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NAHl+m");
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'L';
      charArray0[2] = 'G';
      charArray0[3] = 'r';
      charArray0[4] = 'f';
      charArray0[5] = ';';
      charArray0[6] = ',';
      charArray0[7] = 'e';
      charArray0[8] = 'H';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken(78);
      int int0 = jSONScanner0.intValue();
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(32000, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.nextToken(15);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '3';
      charArray0[2] = '@';
      charArray0[3] = '^';
      charArray0[4] = 'P';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 1323, (-1173));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("A");
      jSONScanner0.scanBoolean('n');
      jSONScanner0.nextToken(20);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      JSONScanner jSONScanner1 = new JSONScanner("not match ");
      SymbolTable symbolTable0 = new SymbolTable(1210);
      jSONScanner1.scanSymbolWithSeperator(symbolTable0, 'q');
      assertEquals((-1), jSONScanner1.matchStat);
      
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*A,yaERfFJL", 1762);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('?');
      assertEquals(1762, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "#$>BkbO);LR*";
      int int0 = 101;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#$>BkbO);LR*", 101);
      char char0 = '';
      jSONReaderScanner0.scanDate('');
      int int1 = 4;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      BigDecimal bigDecimal0 = new BigDecimal((long) '&');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 4, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONScanner jSONScanner1 = new JSONScanner("3f]IS.");
      jSONScanner1.close();
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(2, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{`ma");
      jSONScanner0.nextToken(0);
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = 'Y';
      charArray0[2] = 'A';
      charArray0[3] = 'y';
      charArray0[4] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84, 2628);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.nextToken(4);
      int int0 = jSONScanner0.intValue();
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(118);
      int int0 = jSONScanner0.intValue();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.SHORT_STANDALONE;
      Integer integer0 = new Integer(32769);
      jSONScanner0.scanString('.');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.SHORT_STANDALONE;
      jSONScanner0.scanFloat('G');
      jSONScanner0.scanString('.');
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'd');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.nextToken(16);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sgi0jd5");
      jSONScanner0.nextToken(118);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(* g54H2m>|_");
      jSONScanner0.nextToken(16);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.scanDecimal('|');
      jSONScanner0.intValue();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONScanner0.isEnabled(feature0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextToken(18);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      int int0 = Calendar.LONG;
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '#';
      charArray0[2] = 'M';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 2, 'O');
      assertEquals(79, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.nextToken(2);
      int int0 = jSONScanner0.intValue();
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$zCX");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(51068);
      jSONScanner0.scanStringArray(linkedHashSet0, 'D');
      int int0 = Calendar.NARROW_STANDALONE;
      jSONScanner0.scanDecimal('K');
      int int1 = jSONScanner0.intValue();
      assertEquals(0, int1);
      
      jSONScanner0.scanBoolean('K');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.scanStringArray(linkedHashSet0, 'E');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'k';
      charArray0[2] = 'Y';
      charArray0[3] = '-';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken(4);
      int int0 = jSONScanner0.intValue();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">EJ0Ob+KD=");
      jSONScanner0.nextToken(4);
      assertEquals('E', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = Calendar.NARROW_STANDALONE;
      jSONScanner0.scanDecimal('K');
      JSONScanner jSONScanner1 = new JSONScanner("nul");
      int int1 = jSONScanner1.intValue();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'x';
      charArray0[2] = '<';
      charArray0[3] = '6';
      charArray0[4] = 'n';
      charArray0[5] = '';
      charArray0[6] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2191, 2191);
      double double0 = jSONReaderScanner0.scanDouble('');
      assertEquals(2191, jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = Calendar.SHORT_FORMAT;
      JSONScanner jSONScanner0 = new JSONScanner("6=m");
      boolean boolean0 = jSONScanner0.isEnabled(0, 0);
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NAHl+m");
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'L';
      charArray0[2] = 'G';
      charArray0[3] = 'r';
      charArray0[4] = 'f';
      charArray0[5] = ';';
      charArray0[6] = ',';
      charArray0[7] = 'e';
      jSONScanner0.scanIdent();
      charArray0[8] = 'H';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken(78);
      jSONScanner0.intValue();
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@x;");
      JSONScanner jSONScanner1 = new JSONScanner("@x;");
      jSONScanner1.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ;
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SvA2=U!XF)Q");
      jSONScanner0.putChar(':');
      Number number0 = jSONScanner0.integerValue();
      assertEquals((short)0, number0);
      
      jSONScanner0.isEOF();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken(9);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "3f]IS.";
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONScanner jSONScanner1 = new JSONScanner("3f]IS.", 17);
      jSONScanner0.nextToken(17);
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner(";");
      jSONScanner0.nextIdent();
      int int0 = 160;
      int int1 = 1879;
      int int2 = (-2892);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mCnloQ?8KdlGaA-k7)");
      SymbolTable symbolTable0 = new SymbolTable(160);
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'Q';
      charArray0[2] = 'h';
      charArray0[3] = '(';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 94, (-2892), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K*");
      jSONScanner0.putChar('[');
      jSONScanner0.putChar(' ');
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      char char0 = ':';
      jSONScanner0.putChar(':');
      jSONScanner0.putChar(':');
      jSONScanner0.integerValue();
      jSONScanner0.intValue();
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      char char1 = '\'';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(743);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 0, json : syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'b';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("");
      jSONScanner1.nextToken(10);
      assertEquals(20, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      JSONLexerBase.isWhitespace('K');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, (-165));
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("* g54H2m|_");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$z");
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '`';
      charArray0[4] = 'h';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = 'X';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken(2);
      int int0 = jSONScanner0.intValue();
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3f]IS.");
      jSONReaderScanner0.scanInt('t');
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9seBigDecimal");
      int int0 = jSONReaderScanner0.scanInt('|');
      assertEquals(9, int0);
      
      jSONReaderScanner0.subString(1586, 1586);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.putChar(':');
      jSONScanner0.integerValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("syntax error");
      jSONScanner1.scanFieldDouble(charArray0);
      jSONScanner0.nextToken(51);
      int int0 = jSONScanner0.intValue();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax");
      jSONScanner0.scanInt('m');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TeeSet");
      jSONScanner0.close();
      jSONScanner0.nextToken(14);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$zCX");
      jSONScanner0.nextToken(5);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. z
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" jp))*#9I=Cxdq.L|", 13);
      jSONReaderScanner0.charAt(13);
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      charArray0[7] = 'q';
      charArray0[8] = 'q';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('x');
      jSONReaderScanner0.subString(1586, 0);
      jSONScanner0.bytesValue();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      double double0 = jSONReaderScanner0.scanDouble('w');
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      jSONReaderScanner0.scanInt('.');
      jSONReaderScanner0.sub_chars(0, 45);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(71);
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 9 ");
      jSONScanner0.scanDecimal('I');
      int int0 = Calendar.ALL_STYLES;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('I');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match I - 9, info : pos 1, json :  9 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[1] = 'K';
      charArray0[2] = 'P';
      charArray0[3] = 'd';
      charArray0[4] = 'I';
      charArray0[5] = 'x';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1585), (-1585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      JSONScanner jSONScanner1 = new JSONScanner("not match ");
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 9 ");
      jSONScanner0.nextToken();
      jSONScanner0.floatValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state.  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(6, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K*");
      jSONScanner0.sp = 103;
      BigDecimal bigDecimal0 = new BigDecimal((int) '[');
      jSONScanner0.putChar('[');
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nahl");
      jSONScanner0.sp = 12;
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken(19);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(* gX4H2m>|6_");
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. *
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3/]IS.");
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'z';
      charArray0[2] = 'o';
      charArray0[3] = 'j';
      charArray0[4] = 'w';
      charArray0[5] = '8';
      charArray0[6] = 'M';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[7] = 'P';
      charArray0[8] = '_';
      jSONScanner0.scanDate('7');
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanDecimal('\u0082');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(0);
      int int0 = Calendar.SUNDAY;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".X#b6nZp");
      jSONScanner0.nextToken((-86));
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[0];
      int int0 = 78;
      int int1 = 8;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, 8);
      jSONReaderScanner0.scanDouble('\\');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$zCX");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(179);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9 ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken((-828));
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 9 ");
      jSONScanner0.nextToken();
      jSONScanner0.floatValue();
      int int0 = jSONScanner0.matchStat();
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 9 ");
      jSONScanner0.nextToken(4);
      int int0 = Calendar.SUNDAY;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6`=m", 39);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('h');
      assertEquals(39, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6", (-1449109851));
      jSONReaderScanner0.scanUUID('}');
      jSONReaderScanner0.scanDate('/');
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = 'f';
      charArray0[5] = '/';
      charArray0[6] = '/';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(40, charArray0, (-1449109851), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9I");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken(78);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 9 ");
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'v';
      charArray0[2] = '^';
      charArray0[3] = ')';
      charArray0[4] = ']';
      charArray0[5] = '^';
      charArray0[6] = '_';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.nextToken(7);
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'\"-Ta5>+KyYIQXLcd:");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-2256));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanUUID('y');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kYAVNTtFI`/;4mwb", 71);
      jSONScanner0.nextToken(71);
      SymbolTable symbolTable0 = new SymbolTable(40);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 47);
      jSONReaderScanner0.scanDouble('i');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "EOF";
      objectArray0[1] = (Object) "EOF";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "null";
      jSONReaderScanner0.lexError("null", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6`=m", 47);
      double double0 = jSONReaderScanner0.scanDouble('i');
      assertEquals(6.0, double0, 0.01);
      
      JSONScanner jSONScanner0 = new JSONScanner("6`=m", 47);
      assertEquals(47, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax");
      jSONScanner0.nextToken(11);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'w';
      charArray0[2] = 'c';
      charArray0[3] = 'F';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanDecimal('6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('V');
      jSONScanner0.scanDecimal('n');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"", 16);
      // Undeclared exception!
      try { 
        jSONScanner0.scanUUID('T');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '6';
      JSONScanner jSONScanner0 = new JSONScanner("]gf,ig");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5)IQK;(#");
      jSONScanner0.nextToken();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "5)IQK;(#";
      objectArray0[1] = (Object) "5)IQK;(#";
      jSONScanner0.lexError("}I)$M?{_0pcLCk-", objectArray0);
      jSONScanner0.nextToken(0);
      jSONScanner0.close();
      assertEquals('I', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("read string from reader error");
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0082';
      charArray0[1] = '\u0082';
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("!", 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!");
      jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("read string from reader error");
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6 .m");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6 .m");
      jSONReaderScanner0.scanDouble('c');
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 6, info : pos 0, json : 6 .m
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6`=m");
      jSONScanner0.nextToken(6);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      boolean boolean0 = JSONScanner.checkDate('4', '4', '4', '', '', 'c', 0, (-2259));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@type");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, 8);
      JSONScanner jSONScanner0 = new JSONScanner("BtMA9[/=v", 8);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.setTimeZone((TimeZone) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteDateUseDateFormat", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "WriteDateUseDateFormat";
      objectArray0[1] = (Object) "WriteDateUseDateFormat";
      objectArray0[2] = (Object) "WriteDateUseDateFormat";
      objectArray0[3] = (Object) "wOi{}T&nl1";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) jSONReaderScanner0;
      objectArray0[6] = (Object) "WriteDateUseDateFormat";
      objectArray0[7] = (Object) "WriteDateUseDateFormat";
      objectArray0[8] = (Object) jSONScanner0;
      jSONReaderScanner0.lexError("wOi{}T&nl1", objectArray0);
      jSONReaderScanner0.scanDate('G');
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '\\';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.charAt(110);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o`H5fM");
      jSONScanner0.scanType("o`H5fM");
      jSONScanner0.nextToken();
      jSONScanner0.isRef();
      int int0 = Calendar.ALL_STYLES;
      jSONScanner0.charAt(13);
      jSONScanner0.scanUUID('\u001A');
      jSONScanner0.nextToken(13);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nu@");
      int int0 = Calendar.HOUR;
      jSONScanner0.scanDecimal('K');
      JSONScanner jSONScanner1 = new JSONScanner("YMb0>M!.cgM\"]=C", 10);
      int int1 = jSONScanner1.intValue();
      assertEquals(0, int1);
      assertEquals(10, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3f]IS.");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDecimal('p');
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[9];
      jSONScanner0.matchField(charArray0);
      int int0 = Calendar.SATURDAY;
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONScanner0.scanSymbol(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax", 1747);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.timeZone = null;
      jSONReaderScanner0.scanFieldLong(charArray0);
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[1] = '.';
      charArray0[2] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanDecimal('6');
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TfZMv=@", (-2147483646));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[Hy#\"XpNyna");
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2147483646));
      jSONScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner1.scanFieldInt(charArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3f]IS.");
      jSONReaderScanner0.scanLong('Y');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3f]IS.");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.skipWhitespace();
      jSONReaderScanner0.stringVal();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      jSONScanner0.nextToken();
      jSONScanner0.scanBoolean('T');
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'V';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("null", 0);
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      int int0 = (-1481);
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader(pipedReader0, (-1481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("null", 0);
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      int int0 = (-1481);
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader(pipedReader0, (-1481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 47);
      jSONReaderScanner0.tokenName();
      JSONScanner jSONScanner0 = new JSONScanner("Unknown", 0);
      jSONScanner0.nextToken(0);
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = Calendar.FEBRUARY;
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 46);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("n|Z6", 0);
      jSONReaderScanner1.scanDate('f');
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax");
      String string0 = "new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 718);
      jSONReaderScanner0.lexError("\"}9H", (Object[]) null);
      jSONReaderScanner0.scanDate('E');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nehl", 47);
      jSONReaderScanner0.scanDouble('i');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "EOF";
      objectArray0[1] = (Object) "EOF";
      Object object0 = new Object();
      objectArray0[2] = (Object) "EOF";
      objectArray0[3] = (Object) "nehl";
      jSONReaderScanner0.lexError("nehl", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nehl", 47);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'P';
      charArray0[2] = 'j';
      charArray0[3] = 'V';
      charArray0[4] = 'I';
      charArray0[5] = 'n';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanLong('T');
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EOF");
      jSONReaderScanner0.scanInt('v');
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3f]IS.");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken((-1));
      char[] charArray1 = new char[8];
      charArray1[0] = 's';
      charArray1[1] = ')';
      charArray1[2] = ';';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      charArray1[3] = 'Q';
      charArray1[4] = '@';
      charArray1[5] = '$';
      charArray1[6] = ':';
      charArray1[7] = 'R';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 2718);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanFloat('U');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'U';
      jSONScanner0.scanFieldFloatArray(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[0];
      int int0 = 13;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = 'v';
      jSONReaderScanner0.scanString(';');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      String string0 = "}}&'haK,&~T/hA`d";
      jSONReaderScanner0.lexError("}}&'haK,&~T/hA`d", (Object[]) null);
      jSONReaderScanner0.scanDate('X');
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.", (-2732));
      jSONScanner0.scanFieldDecimal(charArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3678080, "sebigdecimal");
      jSONScanner0.setTimeZone((TimeZone) null);
      JSONScanner jSONScanner1 = new JSONScanner("!S!A", (-2732));
      char[] charArray1 = new char[5];
      charArray1[0] = 'U';
      charArray1[1] = '0';
      charArray1[2] = '<';
      charArray1[3] = '.';
      charArray1[4] = ']';
      jSONScanner1.scanFieldUUID(charArray1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.nextIdent();
      jSONScanner0.scanString();
      jSONScanner0.skipWhitespace();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nehl", 1645);
      JSONScanner jSONScanner0 = new JSONScanner("nehl");
      JSONScanner jSONScanner1 = new JSONScanner("Bqh,7+pKjX?M:Yp0T[", 46);
      jSONScanner1.putChar(':');
      jSONScanner1.integerValue();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V~EWv$G&?$", 9);
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '$';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3f]IS.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3f]IS.");
      jSONReaderScanner0.scanLong('R');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-Y>", 0);
      jSONReaderScanner1.scanDate('R');
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = '8';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      jSONReaderScanner0.scanFieldUUID(charArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K*");
      jSONScanner0.putChar('[');
      jSONScanner0.scanInt('[');
      jSONScanner0.skipComment();
      jSONScanner0.nextToken((-136));
      jSONScanner0.isRef();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nehl");
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '#';
      charArray0[2] = 'h';
      charArray0[3] = 'N';
      charArray0[4] = 'z';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1645);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("TzkG6W\"P4mg#U");
      jSONScanner0.nextToken(672);
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(* g54H2m>|_", 43);
      jSONScanner0.scanInt('v');
      jSONScanner0.skipComment();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 3435);
      jSONReaderScanner0.scanLong('N');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      char char0 = '.';
      jSONReaderScanner0.scanInt('.');
      jSONReaderScanner0.sub_chars(18, 45);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(0, 26, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 3435);
      jSONReaderScanner0.scanLong('N');
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, 'L');
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6TJ=J/QAnHkSJ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Integer integer0 = new Integer('m');
      jSONReaderScanner0.scanLong('m');
      Integer integer1 = new Integer((-1533));
      jSONReaderScanner0.scanInt('m');
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6`=m", 2969);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 39, 39);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 584);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZoneId.getAvailableZoneIds();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 8);
      jSONReaderScanner0.scanDate('V');
      jSONReaderScanner0.scanDouble('V');
      jSONScanner0.token();
      jSONReaderScanner0.scanFloat('V');
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.skipWhitespace();
      jSONScanner0.isBlankInput();
      jSONScanner0.scanUUID('e');
      BigDecimal bigDecimal0 = new BigDecimal(1052);
      jSONScanner0.putChar('[');
      jSONScanner0.longValue();
      jSONScanner0.scanBoolean('[');
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";,~\"+ac%z");
      jSONReaderScanner0.scanInt(')');
      jSONReaderScanner0.sub_chars(3, 45);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":*k8", 2969);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 3435);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFloat('Y');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDecimal('i');
  }
}
