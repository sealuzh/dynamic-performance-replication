/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:12:35 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "", "", "");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("", false);
      System.setCurrentTimeMillis(30);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(149);
      classWriter0.newFieldItem("", "", "Insensitive");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "y&u*JpEZE',F6*z", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("The prefix must not be null", true);
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "M[X)z1", "org.apache.commons.io.IOCase");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1550), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "NS:kTb", (Object) null);
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.put11(1, 131072);
      ByteVector byteVector2 = byteVector0.putLong(23L);
      fieldWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1550), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "NS:kTb", (Object) null);
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putByte(1);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2273));
      classWriter0.threshold = (-2273);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classWriter0.addType("Synthetic");
      ClassWriter classWriter1 = new ClassWriter(384);
      MethodWriter methodWriter0 = classWriter1.firstMethod;
      classWriter0.firstMethod = null;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 512, "@QV!'1d", "@QV!'1d", "wheel.asm.Type", "Synthetic");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-2273), "/]\rzYR+N/(d8F<S", "/]\rzYR+N/(d8F<S", "Signature", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(149);
      classWriter0.newFieldItem("", "", "Insensitive");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "y&u*JpEZE',F6*z", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 1, "The prefix must not be null", "", "$%3YSVC:Z<", mockMinguoDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@1e4185ef
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(149);
      classWriter0.newInteger(2);
      classWriter0.newFieldItem("", "", "Insensitive");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "y&u*JpEZE',F6*z", "E");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAnnotation("The prefix must not be null", true);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      classWriter0.visitSource("daq~0KeH*Ip?>", "RuntimeInvisibleAnnotations");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "NS:kTb", (Object) null);
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Signature";
      stringArray0[1] = "NS:kTb";
      stringArray0[2] = "Signature";
      stringArray0[3] = "Signature";
      stringArray0[4] = "o;WOb^2=>XX";
      stringArray0[5] = "";
      classWriter0.visit((-16), (-16), "Signature", "NS:kTb", "", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1550), "NS:kTb", "NS:kTb", "NS:kTb", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putByte(1275);
      fieldWriter0.put(byteVector1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("NS:kTb", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, ",~=?", ",~=?", (String) null, ",~=?");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }
}
