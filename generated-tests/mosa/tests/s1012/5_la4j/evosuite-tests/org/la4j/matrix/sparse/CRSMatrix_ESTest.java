/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:35:47 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("^rDBZ[7&mx-K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(95, 95, 1.0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(2320, 2, (double) 2, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2036, 2036);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(4, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[7];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 527.345092995;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17, 17);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(14, 14, 14);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(14, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(14, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      cRSMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(927, 0, (-126.2234), (java.util.Random) mockRandom0);
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)37;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 12;
      CRSMatrix cRSMatrix0 = new CRSMatrix(12, 12);
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(12, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5705.545590084);
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 2040, doubleArray0);
      cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("No rows or columns selected.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[5];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[3] = (-2541);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.toSparseMatrix();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformColumn(0, vectorFunction1);
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      int int0 = 0;
      int int1 = 13;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(0, 13);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(251, 0, 0);
      RowMajorSparseMatrix.zero(13, 4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      cRSMatrix0.setAll(32);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix1.setAll((-308.63065015751886));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(17, 10);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(32, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 328, 4);
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(22);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, (-3600.938274669729));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2165;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2165, 2354);
      RowMajorSparseMatrix.zero(2165, 2744, 828);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(17, vectorAccumulator0);
      cRSMatrix0.transformRow(16, (VectorFunction) null);
      double double0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(22);
      cRSMatrix0.getColumn(22);
      int[] intArray0 = new int[1];
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.transpose();
      cRSMatrix0.divide(30.0);
      cRSMatrix1.minInRow(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2624);
      int int0 = 936;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.getRow(int0);
      cRSMatrix0.blankOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      CRSMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(285, 285);
      cRSMatrix0.copyOfColumns(4);
      cRSMatrix0.swapColumns((-2531), 4);
      NumberFormat numberFormat0 = null;
      cRSMatrix0.toMatrixMarket(numberFormat0);
      cRSMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1601, 1601);
      cRSMatrix0.getColumn(3497);
      cRSMatrix0.blank();
      cRSMatrix0.min();
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.set(1601, (-125), 1074.369975421994);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      CRSMatrix.zero(2040, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2243, (-21));
      cRSMatrix1.min();
      cRSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      cRSMatrix0.rank();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
          CRSMatrix cRSMatrix0 = CRSMatrix.zero(22, 22, 22);
          ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
          cRSMatrix0.toColumnMajorSparseMatrix();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(2, 2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17, 17);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInColumn(16, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(4, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumn(0, vectorAccumulator0);
      Matrix.unit(2081, 1781);
      cRSMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        matrix0.maxInRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      int int1 = 400;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(400, 32);
      CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = 1611.2930591798;
      CRSMatrix.diagonal(int0, double0);
      int int2 = 2115;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int1, int2);
      cRSMatrix2.toDenseMatrix();
      CRSMatrix cRSMatrix3 = new CRSMatrix();
      cRSMatrix2.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3498, 3498, 2);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 100.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 100.0;
      doubleArray2[1] = 100.0;
      doubleArray2[2] = 100.0;
      doubleArray2[3] = 100.0;
      doubleArray2[4] = 100.0;
      doubleArray2[5] = 100.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.mkString("r-96", "r-96");
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
      int int0 = (-1387);
      cRSMatrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3498, 3498, 2);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1767, 3498);
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8);
      cRSMatrix0.setAll(0);
      cRSMatrix0.copyOfShape(8, 32);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(32, 32);
      cRSMatrix1.rowMajorIterator();
      CRSMatrix.zero(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8);
      cRSMatrix0.setAll(3);
      Matrix matrix0 = cRSMatrix0.copyOfShape(3, 32);
      matrix0.mkString("$SMWwT`M=W/|XTZp1", "$SMWwT`M=W/|XTZp1");
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(2996, 2996, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(2, 1.0, (java.util.Random) mockRandom0);
      cRSMatrix0.rank();
      cRSMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(2131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2131
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(0, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(0, vectorFunction1);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.max();
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix((-1075), 1195);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1075x1195
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(15, 15, 15);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(15, Double.NEGATIVE_INFINITY);
      sparseMatrix0.manhattanNorm();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      ((CRSMatrix) sparseMatrix0).rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3498, 3498, 2);
      Matrix.unit(2, 2);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3498, 3498);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3498;
      CRSMatrix cRSMatrix2 = new CRSMatrix(2120, 2975, 2146, doubleArray0, (int[]) null, (int[]) null);
      cRSMatrix1.eachNonZeroInRow(2991, (VectorProcedure) null);
      String string0 = "^/Iv.m'w{f1Iu8";
      CRSMatrix cRSMatrix3 = CRSMatrix.fromCSV(string0);
      cRSMatrix3.min();
      cRSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2354, 32);
      cRSMatrix0.minInRow(32);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(32);
      cRSMatrix1.setAll(2354);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.max();
      cRSMatrix0.min();
      int int0 = 1195;
      int int1 = (-1075);
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix((-1075), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1075x6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      matrix0.toColumnMajorSparseMatrix();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.minInRow(8);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2354, 32);
      cRSMatrix0.transformRow(32, (VectorFunction) null);
      cRSMatrix0.min();
  }
}
