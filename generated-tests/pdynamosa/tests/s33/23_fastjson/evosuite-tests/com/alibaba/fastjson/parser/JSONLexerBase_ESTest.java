/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:42:40 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 't';
      charArray0[2] = 'n';
      charArray0[3] = 'W';
      charArray0[4] = 'Z';
      charArray0[5] = '|';
      charArray0[6] = 'r';
      charArray0[7] = ':';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.next();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = 'z';
      charArray0[3] = 'N';
      charArray0[4] = 'p';
      charArray0[5] = 'm';
      charArray0[6] = 'Z';
      charArray0[7] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 92);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('Z', '2', '3', 'g', 'Z', ' ');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "error parse new";
      int int0 = 1420;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new", 1420);
      jSONReaderScanner0.close();
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3RV]NhnzTxzr");
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(0);
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new5");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan new error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = 'C';
      charArray0[2] = 'M';
      charArray0[3] = '/';
      charArray0[4] = 'k';
      char char0 = '3';
      charArray0[5] = '3';
      charArray0[6] = 'n';
      charArray0[7] = 'N';
      int int0 = 48;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48);
      jSONReaderScanner0.ch = '6';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char char0 = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6kxCss]", (-169));
      char char1 = '8';
      int int0 = (-1615);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('8');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 1324);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hashCode");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".?YmVCb|Am$");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      assertEquals('Y', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      JSONScanner jSONScanner0 = new JSONScanner("true", (-1));
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      SymbolTable symbolTable0 = new SymbolTable('$');
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'C');
      charArray0[1] = 'C';
      charArray0[2] = 'S';
      charArray0[3] = '*';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNotNull(string0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.indexOf('q', 889);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextToken(0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-3517);
      JSONScanner jSONScanner0 = new JSONScanner("<", (-3517));
      char char0 = ';';
      jSONScanner0.scanLong(';');
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-3517), 6);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanTrue();
      jSONReaderScanner0.isBlankInput();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PRx.VmnW%V'W");
      JSONScanner jSONScanner0 = new JSONScanner("PRx.VmnW%V'W", (-2012));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("boekdB;KHbO<M&zh@RN");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - b, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(18);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1130);
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '>';
      charArray0[2] = '$';
      charArray0[3] = ']';
      charArray0[4] = 'n';
      SymbolTable symbolTable0 = new SymbolTable(1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.resetStringPosition();
      JSONScanner jSONScanner0 = new JSONScanner("hh+)?]lI3%");
      jSONScanner0.nextToken(0);
      jSONScanner0.stringDefaultValue();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ee~URG&");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(2021);
      jSONReaderScanner0.nextToken(2021);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '%');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.stringDefaultValue = "() QPb";
      jSONReaderScanner0.isBlankInput();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('#');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      jSONReaderScanner0.scanFloat('9');
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '~';
      charArray0[2] = 'W';
      charArray0[3] = 'J';
      charArray0[4] = 'A';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-336), charArray0, (-336), (-336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanTrue();
      jSONReaderScanner0.scanBoolean('1');
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nyf+yJ");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken(0);
      jSONScanner0.isEOF();
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\" ");
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = ']';
      charArray0[2] = '(';
      charArray0[3] = 'f';
      charArray0[4] = 'r';
      charArray0[5] = 'z';
      charArray0[6] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1088, (-2340));
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      assertEquals(']', jSONReaderScanner0.getCurrent());
      
      jSONScanner0.scanDecimal('[');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-1929));
      jSONReaderScanner0.putChar('A');
      assertEquals((-1929), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, 'x');
      jSONScanner0.longValue();
      jSONScanner0.nextToken((-1));
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse false", 45);
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!uav");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S,1OoCvv|S)7p=W");
      jSONScanner0.nextToken(13);
      assertEquals(18, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S,1OoCvv|S)7p=W", 110);
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'B';
      charArray0[2] = 'j';
      charArray0[3] = ':';
      charArray0[4] = 'd';
      charArray0[5] = '\"';
      charArray0[6] = 'A';
      charArray0[7] = 'V';
      jSONReaderScanner0.charArrayCompare(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, (-1989));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("crkWG3*KGN(y50\"d", objectArray0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+");
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", 55);
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '3';
      charArray0[2] = '^';
      charArray0[3] = 't';
      charArray0[4] = 'a';
      charArray0[5] = ';';
      charArray0[6] = 'J';
      charArray0[7] = 'w';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.stringDefaultValue = "@zv{5f";
      jSONScanner0.nextToken(13);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0EE){09T");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanNumber();
      assertEquals('E', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("EOF error");
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '*';
      charArray0[2] = 'D';
      jSONReaderScanner1.scanFieldString(charArray0);
      jSONReaderScanner1.putChar('h');
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yY{");
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '3';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextIdent();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(771, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanDate('M');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*(w)1*q");
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(3, (-910), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BrowserSecure", 99);
      jSONScanner0.pos();
      SymbolTable symbolTable0 = new SymbolTable(715);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*(w)1*q");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.features = 1308;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('i');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match i - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w:jfb\"`%bTV~");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('q');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("w:jfb\"`%bTV~", 72);
      jSONReaderScanner1.putChar('(');
      assertEquals(72, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      jSONReaderScanner0.features = 683;
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanBoolean('2');
      jSONReaderScanner0.nextToken();
      assertEquals(')', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDate('{');
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Rv");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isEOF();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1720374349), (-1720374349));
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\\u");
      jSONReaderScanner0.np = 11;
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, number0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S,1OWoCvv|S)pz1:W");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S,1OWoCvv|S)pz1:W");
      jSONReaderScanner1.nextToken();
      assertEquals(18, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '\"');
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", (-1));
      jSONScanner0.nextToken((-1));
      assertEquals('c', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nV`m^3");
      jSONReaderScanner0.nextIdent();
      Locale locale0 = Locale.forLanguageTag("*Fx(/&S`gS0'5v8/;");
      jSONReaderScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m");
      jSONScanner0.scanType("m");
      jSONScanner0.setToken(Integer.MIN_VALUE);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.sp = 5909;
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'y';
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDate(charArray1);
      jSONScanner0.matchField(charArray1);
      jSONScanner0.longValue();
      jSONScanner0.isEOF();
      jSONScanner0.scanFieldInt(charArray1);
      char[] charArray2 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "!uav";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!uav");
      int int0 = (-2276);
      jSONReaderScanner0.np = (-2276);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!uav");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!uav");
      jSONReaderScanner0.scanBoolean(')');
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7'");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set");
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('7', char0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanBoolean(']');
      jSONReaderScanner0.isBlankInput();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.getCurrent();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("CustomMapDeserializer");
      jSONReaderScanner0.scanDate('-');
      jSONReaderScanner0.scanBoolean(':');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lv8(5 =");
      jSONReaderScanner0.scanLong('A');
      Locale locale0 = Locale.KOREA;
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1Xsh");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("v<2");
      jSONReaderScanner0.putChar(' ');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"v\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("-Uuy}bcp){#>Dm", objectArray0);
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '>';
      charArray0[2] = 'w';
      charArray0[3] = 'h';
      charArray0[4] = 'L';
      charArray0[5] = 'i';
      charArray0[6] = 'P';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.nextToken(0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      jSONReaderScanner0.lexError((String) null, objectArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`:|YoWoOE1Ec6K$4");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(844);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '3');
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      jSONReaderScanner0.putChar('x');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("scan true error");
      jSONReaderScanner0.scanDate('r');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("false", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanType((String) null);
      assertEquals((-2), int0);
      
      jSONScanner0.scanFalse();
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONScanner jSONScanner0 = new JSONScanner("new", 39);
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      charArray0[2] = '{';
      charArray0[3] = '#';
      char char0 = '*';
      charArray0[4] = '*';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDouble('j');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new5");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      char[] charArray0 = new char[2];
      char char0 = 'D';
      charArray0[0] = 'D';
      char char1 = 'o';
      charArray0[1] = 'o';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(40, 40, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 3635);
      jSONReaderScanner1.nextToken();
      int int0 = jSONReaderScanner1.matchStat();
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanIdent();
      charArray0[0] = '/';
      charArray0[1] = 'k';
      charArray0[2] = '_';
      charArray0[3] = 'z';
      charArray0[4] = 'x';
      charArray0[5] = 'V';
      charArray0[6] = 'N';
      charArray0[7] = 'w';
      charArray0[8] = 'v';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.integerValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.token());
      
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.config(feature0, false);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(')', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "create instance error";
      int int0 = (-3399);
      JSONScanner jSONScanner0 = new JSONScanner("create instance error", (-3399));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(439, (-1468));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1468
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'A';
      charArray0[2] = 'a';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E209T");
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\" ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z", 19);
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'o';
      charArray0[2] = '0';
      charArray0[3] = 'K';
      charArray0[4] = 'f';
      charArray0[5] = 'Y';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.bytesValue();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray1);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jSONReaderScanner0.setLocale(locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      jSONReaderScanner0.scanStringArray(list1, 'o');
      assertEquals(4194323, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '5');
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      JSONScanner jSONScanner0 = new JSONScanner("kB+Is1{xlS]TL", 45);
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.scanDouble('h');
      assertEquals('+', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PRx.VmnW%V'W");
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = '[';
      charArray0[2] = 'c';
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("PRx.VmnW%V'W", (-2));
      boolean boolean0 = jSONReaderScanner0.scanBoolean('6');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("crT3*+JA=K@r");
      jSONReaderScanner0.next();
      jSONReaderScanner0.putChar('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"c\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PRx.VmnW%V'W");
      JSONScanner jSONScanner0 = new JSONScanner("PRx.VmnW%V'W", 0);
      jSONReaderScanner0.nextToken(35);
      jSONReaderScanner0.scanBoolean('6');
      assertEquals('R', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$(xZ5S{xnY");
      char char0 = 'Q';
      jSONReaderScanner0.charAt(69);
      jSONReaderScanner0.scanBoolean('Q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. $
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qLaMp;v3xKZ&rV5M");
      int int0 = 34;
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'a';
      charArray0[2] = '<';
      charArray0[3] = '*';
      charArray0[4] = '0';
      charArray0[5] = 'j';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      jSONReaderScanner0.subString(34, 57);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('&');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match & - q, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ew");
      jSONReaderScanner0.nextToken();
      assertEquals('w', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. w
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "false";
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.getCurrent();
      jSONScanner0.scanDecimal('f');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3RV]NhnzTxzr", (-1896));
      char char0 = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3RV]NhnzTxzr", (-1896));
      Locale locale0 = Locale.KOREAN;
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('P');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      assertEquals(8, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'n';
      charArray0[2] = '@';
      charArray0[3] = ']';
      charArray0[4] = 'X';
      charArray0[5] = 'R';
      charArray0[6] = '~';
      JSONScanner.charArrayCompare("R", 2075, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("6S+>g2KW2E1", 2075);
      jSONScanner0.token();
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'H';
      charArray0[2] = 'f';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char char0 = '6';
      SymbolTable symbolTable0 = new SymbolTable(78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'v');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i[Z~w]Ln?T", 1624);
      jSONScanner0.features = 0;
      jSONScanner0.pos = 83;
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - [, info : pos 1, json : i[Z~w]Ln?T
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken((-319));
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(702);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 4318);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('6');
      jSONReaderScanner0.putChar('6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'R';
      charArray0[2] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^kz<v'/m;HDYp", (-2164));
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      int int0 = 1994;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1994);
      jSONReaderScanner0.scanInt('5');
      jSONReaderScanner0.close();
      jSONReaderScanner0.ch = '5';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yY{");
      jSONReaderScanner0.nextToken((-9));
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.pos();
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";Boee6qJ", 1);
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      jSONScanner0.isRef();
      charArray0[1] = 'y';
      charArray0[2] = '<';
      charArray0[3] = ',';
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jSONScanner0.locale = locale0;
      charArray0[4] = 'Y';
      locale0.getDisplayVariant();
      charArray0[5] = '9';
      charArray0[6] = 'N';
      charArray0[7] = '=';
      locale0.getScript();
      charArray0[8] = 'b';
      jSONScanner0.scanFieldString(charArray0);
      locale0.getUnicodeLocaleAttributes();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^m[", 34);
      jSONReaderScanner0.next();
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONScanner0.nextToken();
      assertEquals(24, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'W';
      charArray0[2] = 'A';
      JSONScanner jSONScanner0 = new JSONScanner("{u\"?z_`DiixNyCV8-");
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      int int0 = (-214748364);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-4205));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.sbuf = null;
      jSONReaderScanner0.eofPos = (-1080);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0EE){09T");
      jSONScanner0.nextToken(12);
      jSONScanner0.info();
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("dyH@~dnhZ`q", 18);
      jSONReaderScanner0.scanBoolean('2');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(zf,wr`QQ)vS");
      jSONReaderScanner0.nextToken();
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('9');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      char[] charArray0 = new char[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undeZinRd");
      jSONReaderScanner0.scanIdent();
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(7577783592L, number0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aUeSf");
      JSONScanner jSONScanner0 = new JSONScanner("aUeSf", 0);
      jSONReaderScanner0.nextToken(16);
      jSONReaderScanner0.scanBoolean('&');
      int int0 = jSONReaderScanner0.pos();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanUUID('u');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '^';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'q';
      charArray0[5] = ',';
      charArray0[6] = 'n';
      jSONScanner0.scanFieldDouble(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 108);
      jSONReaderScanner0.nextToken((-313));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'R';
      charArray0[2] = 'p';
      charArray0[3] = 'C';
      charArray0[4] = 'F';
      charArray0[5] = 'm';
      charArray0[6] = '|';
      charArray0[7] = 'H';
      charArray0[8] = '%';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n]gp%^`XAVHr");
      jSONScanner0.bytesValue();
      jSONScanner0.setToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('Z');
      jSONScanner0.scanLong('E');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lv8(5 =");
      SymbolTable symbolTable0 = new SymbolTable(46);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'c');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 40);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 46);
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      jSONReaderScanner0.scanFieldString(charArray0);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ew");
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '>';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. w
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanBoolean(',');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextToken(3715);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}dD(0SWr6?");
      jSONReaderScanner0.features = 58;
      jSONReaderScanner0.setToken(226);
      jSONReaderScanner0.nextToken();
      assertEquals('d', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S,1OoCvv|S)7pz,:=W");
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '>';
      charArray0[2] = 'f';
      charArray0[3] = 'q';
      charArray0[4] = '_';
      charArray0[5] = '0';
      charArray0[6] = 'f';
      charArray0[7] = '$';
      charArray0[8] = '+';
      int int0 = 708;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 708);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      char[] charArray0 = new char[7];
      jSONScanner0.longValue();
      charArray0[0] = 'v';
      charArray0[1] = 'c';
      charArray0[2] = 'S';
      charArray0[3] = 'g';
      charArray0[4] = 'z';
      charArray0[5] = '7';
      charArray0[6] = ')';
      jSONScanner0.scanFieldSymbol(charArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-1096), 72);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.scanInt('`');
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.isEOF();
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      int int0 = jSONScanner0.scanType("_Bn%tvSksMb`BkLqb@x");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '^';
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      jSONReaderScanner0.skipWhitespace();
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 111, 0);
      jSONReaderScanner1.nextIdent();
      assertEquals(18, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('U');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = '&';
      charArray0[0] = '&';
      charArray0[1] = 'T';
      charArray0[2] = 'z';
      charArray0[3] = '/';
      charArray0[4] = 'H';
      charArray0[5] = '&';
      charArray0[6] = 'J';
      charArray0[7] = '.';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      jSONScanner0.nextToken(2);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'");
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      jSONReaderScanner0.scanUUID('2');
      jSONScanner0.scanFieldSymbol(charArray0);
      charArray0[0] = '8';
      charArray0[1] = '.';
      charArray0[2] = 'T';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      jSONScanner0.features = 41;
      JSONLexerBase.isWhitespace('\u001E');
      char char0 = jSONScanner0.next();
      assertEquals('U', char0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lv8(5 =");
      jSONReaderScanner0.scanInt('(');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('M');
      jSONReaderScanner0.isBlankInput();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S,1OoCvv|S)7p=W");
      jSONScanner0.stringDefaultValue = "DHeuCG}Z<=gC$";
      JSONScanner jSONScanner1 = new JSONScanner("S,1OoCvv|S)7p=W", 0);
      JSONScanner jSONScanner2 = new JSONScanner("fh_I#%/A6=U", (-1280));
      // Undeclared exception!
      try { 
        jSONScanner2.nextToken((-1361));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NL");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'W';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = '+';
      charArray0[5] = '=';
      charArray0[6] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2123);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[7];
      charArray0[3] = 'd';
      charArray0[1] = 'Q';
      charArray0[2] = '&';
      charArray0[3] = '5';
      charArray0[4] = '2';
      charArray0[5] = 'T';
      charArray0[6] = '+';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanDate('d');
      jSONReaderScanner0.scanDate('M');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-565), 3257);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 12);
      jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('5');
      assertEquals(12, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tr5");
      JSONScanner jSONScanner0 = new JSONScanner("tr5");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FS");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanUUID('^');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      jSONReaderScanner0.putChar('N');
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDate('Z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(952);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFloat('c');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!uav");
      char[] charArray0 = new char[7];
      jSONReaderScanner0.token();
      charArray0[0] = 'C';
      charArray0[1] = '$';
      charArray0[2] = '^';
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "t9lz", 0, 0, (-1719), 0, 0, (-1340), 0, (-1719), 3771, 928, 15);
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      charArray0[3] = 'G';
      charArray0[4] = '.';
      charArray0[5] = 'L';
      charArray0[6] = 'a';
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aUeSf");
      JSONScanner jSONScanner0 = new JSONScanner("aUeSf", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ':';
      charArray0[2] = '3';
      charArray0[3] = '5';
      charArray0[4] = '{';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('&');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0EE){09T");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isEnabled(34, 34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lv8(5 =");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[0];
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z;gn\"(1zxvH");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pYtjWao$Q");
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.getCalendar();
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'r';
      charArray0[2] = 'H';
      charArray0[3] = 'r';
      charArray0[4] = '/';
      charArray0[5] = '\"';
      charArray0[6] = 'W';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1568, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("h4n", objectArray0);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undezinrfd");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanNullOrNew();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!uav");
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = ':';
      charArray0[2] = 'Y';
      charArray0[3] = 'F';
      charArray0[4] = '!';
      charArray0[5] = 'X';
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - !, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'T';
      charArray0[2] = 'Y';
      charArray0[3] = 'N';
      charArray0[4] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1041, 1041);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanUUID('N');
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, 'a');
      int int0 = 172;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDate('J');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "true";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanBoolean('x');
      jSONReaderScanner0.sp = 13;
      jSONReaderScanner0.matchStat = 3194;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      jSONReaderScanner0.scanDecimal('/');
      jSONReaderScanner0.nextIdent();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S,1OoCvv|S)7p=W");
      StringReader stringReader0 = new StringReader("B'l");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3RV]NhnzTxzr", (-1896));
      jSONScanner0.scanUUID('p');
      jSONScanner0.nextToken(88);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, (-1012));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lv8(5 =");
      jSONReaderScanner0.setToken((-2363));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gMR)paOR@K|1v#TRQEb@");
      jSONReaderScanner0.scanFloat('s');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanBoolean('Z');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(240);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '2');
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      boolean boolean0 = JSONScanner.charArrayCompare("I1?Zby", 240, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new5");
      jSONReaderScanner0.scanFloat('x');
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("}Z'", (-1));
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = '?';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      charArray0[8] = 'x';
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONScanner0.scanFieldStringArray(charArray0, (-1), symbolTable0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDecimal('p');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("newY5");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('a');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char char0 = 'P';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(";C@t:<FB_oiO0SbaK>d", 39);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.charAt(66);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('H');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/v}SG");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r");
      int int0 = jSONReaderScanner0.scanInt('5');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      String string0 = jSONScanner0.scanString('|');
      assertNull(string0);
      
      jSONScanner0.scanLong('5');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$(xZ5S{xnY");
      char char0 = 'Q';
      jSONReaderScanner0.charAt(69);
      jSONReaderScanner0.scanBoolean('Q');
      jSONReaderScanner0.info();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6-u;0` ");
      JSONScanner jSONScanner0 = new JSONScanner("6-u;0` ", 0);
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken(0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'U';
      charArray0[2] = 'l';
      charArray0[3] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 1680);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('H');
      jSONReaderScanner0.scanDouble('H');
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      jSONScanner0.nextToken((-1));
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '4';
      charArray0[2] = 'z';
      charArray0[3] = '@';
      charArray0[4] = '6';
      charArray0[5] = '+';
      charArray0[6] = 'W';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 214);
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner1.scanFieldFloatArray(charArray0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner1.config(feature0, false);
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      char[] charArray0 = new char[7];
      jSONScanner0.longValue();
      charArray0[0] = 'v';
      charArray0[1] = 'c';
      charArray0[2] = 'S';
      charArray0[3] = 'g';
      charArray0[4] = 'z';
      charArray0[5] = '7';
      charArray0[6] = ')';
      jSONScanner0.scanFieldSymbol(charArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-1096), 72);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.scanInt('`');
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.isEOF();
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      mockGregorianCalendar0.setTimeInMillis((-2));
      jSONScanner0.scanType("_Bn%tvSksMb`BkLqb@x");
      boolean boolean0 = jSONScanner0.isEnabled(2048);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("h4n");
      jSONScanner0.nextToken(22);
      jSONScanner0.scanDecimal('o');
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";|j|\"V^5n%jv7WK[H[m");
      jSONScanner0.nextToken(16);
      assertEquals(24, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(16);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", actual ");
      JSONScanner jSONScanner0 = new JSONScanner(", actual ");
      jSONScanner0.nextToken(0);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%3");
      JSONScanner jSONScanner0 = new JSONScanner("0f+(BK^i~:0Tc8");
      jSONScanner0.nextToken(108);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getLocale();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x>a");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 2 - x, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3RV]NhnzTxzr", (-1896));
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = ',';
      charArray0[2] = '!';
      charArray0[3] = 'r';
      charArray0[4] = '`';
      charArray0[5] = '}';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-417));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("bLJ4 I");
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = 'b';
      charArray0[4] = 'U';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      jSONScanner2.nextToken(19);
      assertEquals(20, jSONScanner2.token());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'D';
      charArray0[2] = 'C';
      charArray0[3] = 'P';
      charArray0[4] = ';';
      charArray0[5] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1789);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('A');
      jSONReaderScanner0.indexOf('@', 83);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&@tukB");
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = 's';
      charArray0[3] = '(';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = 'A';
      charArray0[7] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 230);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("'", (-1434));
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-900));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.timeZone = null;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanFloat('^');
      jSONReaderScanner0.putChar('');
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      jSONReaderScanner0.nextToken();
      double double0 = jSONReaderScanner0.scanDouble('Q');
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      StringReader stringReader0 = new StringReader("\u0000");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.nextToken();
      assertTrue(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "-Uy}/cp){#>Dm";
      JSONScanner jSONScanner0 = new JSONScanner("-Uy}/cp){#>Dm");
      jSONScanner0.scanDecimal('!');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '\"';
      charArray0[2] = '/';
      charArray0[3] = '}';
      charArray0[4] = 'g';
      charArray0[5] = 't';
      charArray0[6] = 'c';
      charArray0[7] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2106);
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1067));
      assertTrue(boolean0);
      
      jSONReaderScanner0.getCalendar();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.getISOLanguages();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.scanType("-Uuy}bcp){#>Dm");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tre");
      char char0 = '\'';
      jSONReaderScanner0.scanDouble('\'');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.stringDefaultValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new5");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n]gp%^`XAVEr");
      jSONScanner0.bytesValue();
      jSONScanner0.setToken(0);
      jSONScanner0.scanDecimal('c');
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'o';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanLong('E');
      SymbolTable symbolTable0 = new SymbolTable(3203);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'c');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.isEnabled(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f");
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = ')';
      charArray0[2] = 'G';
      charArray0[3] = '~';
      charArray0[4] = 'W';
      charArray0[5] = 'o';
      charArray0[6] = '>';
      charArray0[7] = 'P';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2011, 2011);
      jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.ch = '~';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&@tukB");
      jSONScanner0.isRef();
      jSONScanner0.indexOf('&', 1649);
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 60);
      jSONReaderScanner0.nextTokenWithChar('&');
      jSONReaderScanner0.scanIdent();
      PipedReader pipedReader0 = new PipedReader(60);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(pipedReader0, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanInt('`');
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.matchStat();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0E){09T");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.nextToken();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.token = (-318);
      jSONReaderScanner0.scanInt('C');
      jSONReaderScanner0.scanFloat('P');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new5");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan new error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AEE?X?mD9,` _!e\"H");
      jSONReaderScanner0.nextToken();
      assertEquals('E', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fase", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S");
      jSONScanner0.nextToken(12);
      assertEquals(18, jSONScanner0.token());
      
      jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a(\"ps0X.%");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'P';
      charArray0[2] = 'e';
      charArray0[3] = 'a';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('a');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!uav");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.nextToken(13);
      char char0 = jSONScanner0.next();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      SymbolTable symbolTable0 = new SymbolTable(59);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'f');
      jSONReaderScanner0.longValue();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken(0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("neW5");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My'>nmw(j+E0:");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(2863);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '`');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'S';
      charArray0[2] = 'H';
      charArray0[3] = '-';
      charArray0[4] = '>';
      jSONReaderScanner0.hasSpecial = true;
      charArray0[5] = '>';
      charArray0[6] = '&';
      charArray0[7] = '1';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.nextToken();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      SymbolTable symbolTable0 = new SymbolTable(614);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, 978, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isBlankInput();
      SymbolTable symbolTable0 = new SymbolTable(2387);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '$');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3RV]NhnzTxzr", (-1896));
      jSONScanner0.nextToken(88);
      assertEquals(2, jSONScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('W');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match W - R, info : pos 1, json : 3RV]NhnzTxzr
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('z', 'z', 'z', '1', 'z', 'z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[1];
      char char0 = '\"';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("trut");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i[Z~w]Ln?T", 1624);
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      
      jSONScanner0.indexOf(':', 1624);
      jSONScanner0.lexError("i[Z~w]Ln?T", (Object[]) null);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1624, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      jSONReaderScanner0.nextToken();
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.isRef();
      assertEquals(')', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanString('C');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner0 = new JSONScanner("", 70);
      String string0 = jSONScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      int int0 = jSONScanner0.scanType("");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      
      jSONReaderScanner0.next();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      long long0 = jSONReaderScanner0.scanLong('M');
      assertEquals(0L, long0);
      
      jSONReaderScanner0.putChar('l');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j");
      jSONScanner0.nextToken(12);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nSew");
      char char0 = '_';
      jSONReaderScanner0.scanDate('_');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7!^D", (-2718));
      jSONScanner0.getCalendar();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2718), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanString('f');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanLong('=');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("j");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(101);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'g');
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanString('j');
      jSONReaderScanner0.ch = 'x';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. x
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(110);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanLong('(');
      jSONReaderScanner0.nextIdent();
      assertEquals(9, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":j");
      jSONReaderScanner0.nextToken();
      assertEquals(17, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      charArray0[2] = '_';
      charArray0[3] = '#';
      charArray0[4] = '$';
      charArray0[5] = '\"';
      charArray0[6] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1240, 78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. |
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&@tukB");
      jSONScanner0.isRef();
      jSONScanner0.indexOf('&', 1649);
      jSONScanner0.lexError("&@tukB", (Object[]) null);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanLong('>');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-2147483647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PRx.VmnW%V'W");
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 't';
      charArray0[2] = 'A';
      charArray0[3] = '@';
      charArray0[4] = '`';
      charArray0[5] = '@';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 634);
      jSONScanner0.nextToken((-1896));
      jSONScanner0.scanUUID('\'');
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("illega str", (-220), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PRx.VmnW%V'W");
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 't';
      charArray0[2] = 'A';
      char char0 = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "`L3-HYs2H2'V,]T}]a";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`L3-HYs2H2'V,]T}]a");
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'K';
      charArray0[2] = '-';
      charArray0[3] = 'u';
      charArray0[4] = '*';
      charArray0[5] = ',';
      charArray0[6] = 'D';
      charArray0[7] = '!';
      charArray0[8] = '[';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wj");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[7n", 0);
      jSONReaderScanner1.nextToken();
      assertEquals('7', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_");
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.timeZone = null;
      jSONReaderScanner0.putChar('');
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      char[] charArray0 = new char[5];
      char char0 = '^';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 26, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info ^ ");
      jSONReaderScanner0.nextToken();
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('H');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X\"6I-c0");
      Feature feature0 = Feature.UseObjectArray;
      jSONScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", 50);
      jSONScanner0.info();
      assertEquals(50, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i[Z~w]Ln?T", 1624);
      jSONScanner0.features = (-1658);
      jSONScanner0.pos = 83;
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-214748364));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - [, info : pos 1, json : i[Z~w]Ln?T
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'B');
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      charArray0[7] = 'B';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", 0);
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F'<*");
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '~';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'n';
      charArray0[5] = 'G';
      jSONReaderScanner0.scanBoolean('F');
      charArray0[6] = '\'';
      charArray0[7] = '?';
      charArray0[8] = '&';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.setToken(18);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ew");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#ODm");
      jSONReaderScanner0.nextToken(48);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`L3-HYs2H2'V,]T}]a");
      jSONReaderScanner0.sp = 6;
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lv8(5 =");
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'r';
      charArray0[3] = 'v';
      charArray0[4] = 'o';
      charArray0[5] = 'E';
      charArray0[6] = '6';
      charArray0[7] = 'l';
      SymbolTable symbolTable0 = new SymbolTable(76);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 93);
      jSONReaderScanner1.isBlankInput();
      assertEquals(93, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hashCode");
      jSONReaderScanner0.scanFloat('Z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%");
      jSONReaderScanner0.putChar('c');
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0EE){09T");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"0E\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\" ", 581);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('i');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("G.2:|mIo1q?iC", 15);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'j');
      jSONScanner0.hasSpecial = false;
      jSONScanner0.nextToken(1255);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PP|H`b(VnRix[");
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 't';
      charArray0[2] = 'P';
      charArray0[3] = ' ';
      charArray0[4] = 'x';
      charArray0[5] = 'T';
      charArray0[6] = 'B';
      charArray0[7] = 'E';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char[] charArray1 = new char[9];
      jSONReaderScanner0.setLocale((Locale) null);
      charArray1[0] = 'm';
      charArray1[1] = '\'';
      char[] charArray2 = new char[1];
      charArray2[0] = 'K';
      jSONReaderScanner0.scanFieldDecimal(charArray2);
      charArray1[2] = 'K';
      charArray1[3] = '=';
      charArray1[4] = '7';
      charArray1[5] = '0';
      charArray1[6] = 'o';
      charArray1[7] = 'w';
      charArray1[8] = '4';
      jSONReaderScanner0.scanFieldString(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      jSONScanner0.nextToken(0);
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals('U', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(2379);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n]ew");
      jSONReaderScanner0.scanUUID('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!uav", 2302);
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'z');
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      SymbolTable symbolTable0 = new SymbolTable(3715);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3RV]NhnzTxzr");
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      charArray0[0] = '?';
      charArray0[1] = '#';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.nextToken((-2));
      jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('M');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match M - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zUrGwyo$c");
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = '>';
      charArray0[2] = 'P';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setToken(13);
      assertEquals('U', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tue");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      jSONReaderScanner0.nextIdent();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Zic,f,WM(EV[k@g");
      Feature feature0 = Feature.UseBigDecimal;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FS");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "FS";
      objectArray0[1] = (Object) "FS";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      jSONReaderScanner0.lexError("FS", objectArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      assertTrue(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("rT8BvP>/R`X");
      jSONScanner0.isEOF();
      jSONScanner0.scanLong('8');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+2:-<Q64I");
      jSONScanner0.nextToken();
      jSONScanner0.scanString('_');
      jSONScanner0.nextToken(702);
      assertEquals(2, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r.kK~(G)K)xM");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]bgVpHavj|~qFq0", (-238));
      jSONScanner0.isEOF();
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('t');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match t - }, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("YZ.");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.skipWhitespace();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '{';
      charArray0[2] = 'H';
      int int0 = 1649;
      int int1 = 91;
      JSONScanner jSONScanner0 = new JSONScanner("Jj{C'2dk$Y%>MM5uPHd", 91);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      assertEquals(11, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "-Uuy}b\\cp){#>Dm";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wJ])wx5R3A>[JL.^dr9");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      assertEquals(2, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'");
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'm';
      charArray0[2] = '\\';
      SymbolTable symbolTable0 = new SymbolTable(103);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-2047), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isRef();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, '(');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDecimal('g');
      boolean boolean0 = jSONReaderScanner0.isEnabled(1, 1);
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "undefined";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '`';
      charArray0[2] = '$';
      charArray0[3] = 'C';
      charArray0[4] = '8';
      charArray0[5] = '|';
      charArray0[6] = ' ';
      charArray0[7] = 'J';
      charArray0[8] = 't';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-4193));
      jSONScanner0.scanISO8601DateIfMatch();
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanStringArray(collection0, ' ');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowComment");
      int int0 = jSONReaderScanner0.scanInt('m');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      jSONScanner0.nextToken(0);
      assertEquals('U', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.isEnabled(1289, 1042);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FS");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, '4');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDate('v');
      jSONReaderScanner0.close();
      assertEquals('S', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char char0 = '6';
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '6';
      int int0 = 85;
      SymbolTable symbolTable0 = new SymbolTable(1871);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 85, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!uav{if]P3[`l");
      char char0 = '\\';
      jSONReaderScanner0.scanDouble('\\');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.scanUUID('D');
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('2');
      jSONReaderScanner0.subString(101, 101);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0E){09T");
      jSONReaderScanner0.scanLong('r');
      jSONReaderScanner0.nextToken();
      assertEquals(')', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 512);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEOF();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":j");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('H');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mcpLk/fT%iJ $OL");
      jSONReaderScanner0.scanString('L');
      jSONReaderScanner0.scanDecimal('L');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'x';
      charArray0[2] = ']';
      charArray0[3] = ':';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm");
      jSONScanner0.scanBoolean(':');
      jSONScanner0.nextToken((-2));
      boolean boolean0 = jSONScanner0.isEnabled(981);
      assertEquals(2, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#ODm");
      Locale locale0 = Locale.FRENCH;
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!uav");
      JSONLexerBase.readString((char[]) null, 0);
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      jSONReaderScanner0.timeZone = timeZone0;
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      jSONScanner0.getLocale();
      boolean boolean0 = JSONLexerBase.isWhitespace('a');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t)ruh");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      JSONScanner jSONScanner0 = new JSONScanner("-Uuy}bcp){#>Dm", 648);
      jSONScanner0.nextToken((-1840785675));
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h4n");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("9");
      jSONReaderScanner1.nextToken();
      assertEquals(2, jSONReaderScanner1.token());
      
      double double0 = jSONReaderScanner0.scanDouble('L');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = '4';
      charArray0[2] = 'N';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = 'Q';
      charArray0[6] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 702, (-1296));
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextIdent();
      assertEquals(')', jSONReaderScanner0.getCurrent());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\" ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'I';
      charArray0[2] = '5';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '\'';
      charArray0[2] = '{';
      charArray0[3] = '=';
      charArray0[4] = 'X';
      charArray0[5] = 'W';
      charArray0[6] = 'C';
      charArray0[7] = 'R';
      charArray0[8] = '(';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0EE){09T");
      Locale locale0 = Locale.ROOT;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.nextToken();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('E', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("0EE){09T", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      long long1 = jSONScanner0.scanFieldLong(charArray0);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iW2>");
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('m');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yy");
      jSONReaderScanner0.nextIdent();
      int int0 = jSONReaderScanner0.token();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDecimal('h');
      charArray0[0] = 'X';
      charArray0[1] = '-';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      SymbolTable symbolTable0 = new SymbolTable(11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      JSONScanner jSONScanner0 = new JSONScanner("BrowserSecure");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      JSONScanner jSONScanner0 = new JSONScanner("TODO", (-1752));
      jSONScanner0.ch = '1';
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1842181517));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r");
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      jSONReaderScanner0.scanUUID('9');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Uuy}bcp){#>Dm");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '!';
      charArray0[2] = '#';
      charArray0[3] = 'L';
      charArray0[4] = ']';
      charArray0[5] = 'K';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S,1OoCvv|S)7p=W");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "S,1OoCvv|S)7p=W";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "S,1OoCvv|S)7p=W";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "";
      jSONReaderScanner0.lexError("", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
