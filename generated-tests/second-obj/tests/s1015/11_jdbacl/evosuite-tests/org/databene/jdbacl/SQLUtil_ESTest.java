/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:49:33 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.function.UnaryOperator;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.compile.NodeFactory;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.ContainerComponent;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.command.ddl.CreateTableData;
import org.h2.command.dml.RunScriptCommand;
import org.h2.engine.Mode;
import org.h2.engine.Session;
import org.h2.table.Table;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("deleteh_vcn)esa");
      CompositeDBObject<DefaultDatabase> compositeDBObject0 = (CompositeDBObject<DefaultDatabase>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FBBlob.SEGMENTED;
      Random.setNextRandom(21);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rUE~";
      String string0 = LanguageConnectionContext.CONTEXT_ID;
      String[] stringArray1 = new String[9];
      String string1 = SQLUtil.leftJoin("rUE~", stringArray0, "rUE~", "rUE~", stringArray1);
      assertEquals("left join rUE~ as rUE~ on rUE~.rUE~ = rUE~.null", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.isDML("g_S9\"Or.7{N L!");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?$3L\"6?|Z/Rz}zW+fR");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?$3L\"6?|Z/Rz}zW+fR";
      stringArray0[1] = "?$3L\"6?|Z/Rz}zW+fR";
      stringArray0[2] = "?$3L\"6?|Z/Rz}zW+fR";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "?$3L\"6?|Z/Rz}zW+fR";
      objectArray0[1] = (Object) "?$3L\"6?|Z/Rz}zW+fR";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = NodeFactory.MODULE;
      String string1 = FBConnectionProperties.USER_NAME_PROPERTY;
      DBDataType dBDataType0 = DBDataType.getInstance(72, "drop index");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CEILING", defaultDBTable0, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DROP INDEX(0)", string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("?6@M+MlE=r0I");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("SYSXPLAIN_STATEMENTS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(lTmF", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deleteh_vcn", defaultDBTable0, 868, "SYSXPLAIN_STATEMENTS");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.removeComments("?6@M+MlE=r0I");
      String string1 = SQLUtil.substituteMarkers("deleteh_vcn SYSXPLAIN_STATEMENTS NULL", "?6@M+MlE=r0I", "?6@M+MlE=r0I");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "VM5cd^XqH]-PX_3m";
      stringArray1[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES null(, , )", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = Dependable.SCHEMA;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "- ";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rUE~";
      String[] stringArray1 = new String[9];
      SQLUtil.substituteMarkers("|K4kyY#", "42Z33.U", "rUE~");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop tableaq:shfsgg*q<j7es@x";
      stringArray0[1] = "lock mode";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("drop tableaq:shfsgg*q<j7es@x = 'drop tableaq:shfsgg*q<j7es@x' AND lock mode = 'lock mode'", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0G,Ky)");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("D9*+I|+", true, "0G,Ky)", "into");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT D9*+I|+ ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("\"M--|gmu$v(oC<D", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.removeComments("\"M--|gmu$v(oC<D");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeDBObject<DBUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("43X33.U", compositeDBObject0);
      tableContainer0.getSchema();
      DBTrigger dBTrigger0 = new DBTrigger("43X33.U", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(dBTrigger0);
      tableContainer0.getTable("89|7X454$ju");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("43X33.U", (DBTable) null, (-1890219495), "Fn%cSM oTao%DM'c:");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.renderValue("}wE<@`RA;B\"");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = Mode.REGULAR;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select * from ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("HELP", true, "/WH7:wI=5o76$", "HELP");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("select * from ", defaultDBTable0);
      String[] stringArray0 = new String[12];
      stringArray0[0] = "CONSTRAINT HELP CHECK HELP";
      stringArray0[1] = "REGULAR";
      DBCatalog dBCatalog0 = new DBCatalog();
      tableContainer0.getSchema();
      // Undeclared exception!
      try { 
        dBCatalog0.addSchema((DBSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("?6@M+MlE=r0I");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?6@M+MlE=r0I";
      CompositeDBObject<TableContainer> compositeDBObject0 = (CompositeDBObject<TableContainer>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Hi(ts*r-", compositeDBObject0);
      tableContainer0.getSchema();
      tableContainer0.setName("1a79aNZ");
      DBTrigger dBTrigger0 = new DBTrigger((String) null, (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("1a79aNZ", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("tKwUM<S=U]p4");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1a79aNZ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 1a79aNZ PRIMARY KEY (?6@M+MlE=r0I, , , , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'GLOBAL'");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'GLOBAL'";
      stringArray0[1] = "'GLOBAL'";
      stringArray0[2] = "!7,7vz";
      DBDataType.getInstance((-434), ">`rd#>PV3v");
      String string0 = SQLUtil.substituteMarkers("!7,7vz", " NULL", "!7,7vz");
      assertEquals("!7,7vz", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'GLOBAL'", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ('GLOBAL', 'GLOBAL', !7,7vz, , )", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "updateg_s9\"or.7{n l!";
      stringArray0[1] = null;
      stringArray0[2] = "g_s9\"o";
      stringArray0[3] = null;
      stringArray0[4] = "(";
      stringArray0[5] = "updateg_s9\"or.7{n l!";
      stringArray0[6] = null;
      stringArray0[7] = "}jANs{L!";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("updateg_s9\"or.7{n l!", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      SQLUtil.normalize("VM5cd^XqH]-PX_3m", true);
      defaultDBTable0.setName(")g$XB,rd|");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      DBDataType dBDataType0 = DBDataType.getInstance(2845, "xK");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")g$XB,rd|", defaultDBTable0, dBDataType0);
      String string0 = SchemaDescriptor.SA_USER_NAME;
      StringReader stringReader0 = new StringReader("deletetlwj,?zo<ax/lg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("- 0", defaultDBTable0, (-113502596), "mX}9@");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.isQuery("?6@M+MlE=r0I");
      Boolean boolean0 = new Boolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBDataType.getInstance(1168, "?6@M+MlE=r0I");
      SQLUtil.normalize("(ts*-", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?6@M+MlE=r0I");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("?6@M+MlE=r0I", defaultDBTable0, 468, "(ts * -");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (ts * -
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "I&l;\"6L%";
      stringArray0[1] = "I&l;\"6L%";
      SQLUtil.innerJoin("I&l;\"6L%", stringArray0, "1`vn,;`J", "1`vn,;`J", stringArray0);
      SQLUtil.renderColumnListWithTableName("I&l;\"6L%", stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("1`vn,;`J");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("select", true);
      assertEquals("select", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("-- page ", false);
      SQLUtil.isQuery("-- page ");
      SQLUtil.removeComments("u }Eev5d(HNnCa.");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("call");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, "alter index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize("select", true);
      assertEquals("select", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("calldeleteh_vcn)esa");
      TriggerDescriptor triggerDescriptor0 = new TriggerDescriptor();
      String string1 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container calldeleteh_vcn)esa", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "executedeleteh_vcn)esa");
      boolean boolean0 = SQLUtil.isProcedureCall("ru\"2g~.#zpMBN");
      boolean boolean1 = SQLUtil.isDDL("create materialized view");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "VM5cd^XqH]-PX_3m";
      String string0 = SQLUtil.normalize("VM5cd^XqH]-PX_3m", true);
      assertEquals("VM5cd ^ X  qH ] - PX_3m", string0);
      
      DBDataType.getInstance(2830, "xK");
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "updateg_s9\"or.7{n l!";
      stringArray0[2] = "g_s9\"o";
      stringArray0[3] = null;
      stringArray0[4] = "(";
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("updateg_s9\"or.7{n l!", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "VM5cd^XqH]-PX_3m";
      stringArray0[1] = null;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "VM5cd^XqH]-PX_3m";
      stringArray1[2] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      Boolean boolean0 = new Boolean(true);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      System.setCurrentTimeMillis((-1028));
      DBSchema dBSchema0 = new DBSchema((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "dele";
      stringArray0[2] = "dele";
      stringArray0[3] = "select";
      SQLUtil.isQuery("select");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "55'^z", "select");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK select", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null", string1);
      
      boolean boolean1 = SQLUtil.isDML("\"PK.OGgji]Z5Gv}ml");
      assertFalse(boolean1 == boolean0);
      
      String string2 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Cp1250", (DBCatalog) null);
      DBTrigger dBTrigger0 = new DBTrigger("Cp1250", dBSchema0);
      dBTrigger0.setActionType("Cp1250");
      dBTrigger0.setTriggerBody("Cp1250");
      SQLUtil.ownerDotComponent(dBTrigger0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cp1250";
      stringArray0[1] = "Cp1250.Cp1250";
      stringArray0[2] = "Cp1250.Cp1250";
      stringArray0[3] = "Cp1250.Cp1250";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      System.setCurrentTimeMillis((-1028));
      DBSchema dBSchema0 = new DBSchema("select");
      boolean boolean1 = SQLUtil.isQuery("isNull");
      assertFalse(boolean1 == boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "dele", "isNull");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK isNull", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("select", string1);
      
      String string2 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = Page.DIAG_BYTES_RESERVED;
      SQLUtil.parseColumnTypeAndSize("bytesReserved");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("notEquals");
      DBDataType dBDataType0 = DBDataType.getInstance((-47), "NCLOB");
      Integer integer0 = new Integer((-47));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("notEquals", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBSchema dBSchema0 = new DBSchema("bytesReserved");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "}wE<@`RA;B\"";
      SQLUtil.renderValue("}wE<@`RA;B\"");
      SQLUtil.removeComments("'}wE<@`RA;B\"'");
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean0 = true;
      SQLUtil.normalize("'}wE<@`RA;B\"'", true);
      String string1 = Mode.REGULAR;
      String string2 = ",";
      String string3 = " IS NOT NULL ";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint(",", false, " IS NOT NULL ", " ADD ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderValue("}wE<@`RA;B\"");
      SQLUtil.removeComments("'}wE<@`RA;B\"'");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'}wE<@`RA;B\"'");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}wE<@`RA;B\"", false, stringArray0);
      String string0 = "!tkff";
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("!tkff", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "'}wE<@`RA;B\"'", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.parseColumnTypeAndSize("*K{fc[,");
      String string0 = TypeId.SQLXML_NAME;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "deletehn~s_cn";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("*K{fc[,");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      SQLUtil.renderValue((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder("null");
      SQLUtil.addRequiredCondition("deletehn~s_cn = 'deletehn~s_cn'", stringBuilder0);
      assertEquals("null and deletehn~s_cn = 'deletehn~s_cn'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("S3.u;KH-e}O[/p@-", true);
      assertEquals("S3.u ; KH - e } O [ / p @ -", string0);
      
      String string1 = FBConnectionProperties.PASSWORD_PROPERTY;
      StringBuilder stringBuilder0 = new StringBuilder(81);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",a";
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(",a = ',a'", string2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "MI@qk]Y(.AW{jM");
      TableContainer tableContainer0 = new TableContainer("q^0hVI");
      tableContainer0.setDoc("l*{#Kp~");
      stringBuilder0.append((-1974L));
      String string0 = SQLUtil.normalize("ML%EppdX4^O9]Hk,b", false);
      assertEquals("ML % EppdX4 ^ O9 ] Hk, b", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "drop materialized viewcreate materialized view";
      SQLUtil.mutatesDataOrStructure("drop materialized viewcreate materialized view");
      VersionNumber versionNumber0 = VersionNumber.valueOf("[#d");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("42621", "rPqS.%'Et2 ?r|Ykszy", versionNumber0);
      TableContainer tableContainer0 = new TableContainer("drop materialized viewcreate materialized view", defaultDatabase0);
      tableContainer0.getTable("_k");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[#d";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("cF;OKGCG", false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = Table.SYSTEM_TABLE;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SYSTEM TABLE");
      stringBuilder0.append(false);
      SQLUtil.addOptionalCondition("1ya:leT`qu|S", stringBuilder0);
      assertEquals("SYSTEM TABLEfalse or 1ya:leT`qu|S", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "N>7";
      SQLUtil.renderColumnListWithTableName("N>7", stringArray0);
      DBDataType.getInstance((-681), "execute");
      Integer integer0 = new Integer(4130);
      Integer integer1 = new Integer((-392));
      DBSchema dBSchema0 = new DBSchema("N>7");
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.innerJoin("N>7", stringArray0, "org.postgresql.core.v3.ConnectionFactoryImpl$UnsupportedProtocolException", "m_UEU]z{x", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("N>7", stringBuilder0);
      assertEquals("N>7", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String string0 = Dependable.TABLE_PERMISSION;
      SQLUtil.normalize("{Vd-$3D(FeNbDgTQe", false);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-1069));
      PipedReader pipedReader0 = new PipedReader();
      boolean boolean2 = new Boolean(true);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = SQLUtil.normalize("(ts*-", false);
      assertEquals("(ts * -", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.removeComments("(ts*-");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "u!G6D1J71!:$0g@qDX";
      SQLUtil.isDDL("u!G6D1J71!:$0g@qDX");
      StringBuilder stringBuilder0 = new StringBuilder(263);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("u!G6D1J71!:$0g@qDX", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-67), (float) 263);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -67
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("?6@M+MlE=r0I");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      Boolean boolean1 = new Boolean(false);
      TableContainer tableContainer0 = new TableContainer(stringArray0[0], (CompositeDBObject<? extends DBObject>) null);
      DBDataType dBDataType0 = DBDataType.getInstance(1115, "eOdCx$*fDL>Am");
      Integer integer0 = new Integer((-6615));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "?6@M+MlE=r0I");
      tableContainer0.setDoc(stringArray0[0]);
      stringBuilder0.append((-2503L));
      String string0 = SQLUtil.normalize("(ts*-", false);
      assertEquals("(ts * -", string0);
      
      DBSchema dBSchema0 = new DBSchema("(ts*-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("L%H_6x.a9feLq_]gs-", dBSchema0);
      Integer integer1 = new Integer((-6615));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("AC*NaV6J7", defaultDBTable0, dBDataType0, integer1, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EODCX$*FDL>AM(-6615,-6615)", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.isQuery("select");
      DBSchema dBSchema0 = new DBSchema("select");
      SQLUtil.isQuery("isNull");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "dele", "isNull");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("selectdeleteh_cn)esa", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBObject dBObject0 = null;
      defaultDBTable0.isIdentical((DBObject) null);
      SQLUtil.isQuery("selectdeleteh_cn)esa");
      LinkedList<ContainerComponent> linkedList0 = new LinkedList<ContainerComponent>();
      Integer integer0 = new Integer(13);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.normalize("lL+<@M;b.;U`\"f~ol|", true);
      SQLUtil.removeComments("lL+<@M;b.;U`\"f~ol|");
      String string0 = "gP>L\\\\r7$-<~A";
      SQLUtil.isProcedureCall("gP>L\\r7$-<~A");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lL+<@M;b.;U`\"f~ol|");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "lL+<@M;b.;U`\"f~ol|";
      stringArray0[1] = "lL + < @ M ; b.; U ` \"f~ol|\"";
      stringArray0[2] = "lL + < @ M ; b.; U ` \"f~ol|\"";
      stringArray0[3] = "deleteh_cn";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'lL+<@M;b.;U`\"f~ol|' has no foreign key with the columns (lL+<@M;b.;U`\"f~ol|, lL + < @ M ; b.; U ` \"f~ol|\", lL + < @ M ; b.; U ` \"f~ol|\", deleteh_cn)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("?6@M+MlE=r0I");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("?6@M+MlE=r0I", true);
      assertEquals("? 6 @ M + MlE = r0I", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer((-2044));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "? 6 @ M + MlE = r0I";
      stringArray0[1] = "exec)=o9>od[vpn'_]oh3";
      stringArray0[2] = "drop table";
      stringArray0[3] = "? 6 @ M + MlE = r0I";
      stringArray0[4] = "exec)=o9>od[vpn'_]oh3";
      stringArray0[5] = "?6@M+MlE=r0I";
      stringArray0[6] = "exec)=o9>od[vpn'_]oh3";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "? 6 @ M + MlE = r0I", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"? 6 @ M + MlE = r0I\" UNIQUE (? 6 @ M + MlE = r0I, exec)=o9>od[vpn'_]oh3, drop table, ? 6 @ M + MlE = r0I, exec)=o9>od[vpn'_]oh3, ?6@M+MlE=r0I, exec)=o9>od[vpn'_]oh3)", string1);
      
      String string2 = SQLUtil.renderColumnListWithTableName("exec)=o9>od[vpn'_]oh3", stringArray0);
      assertEquals("exec)=o9>od[vpn'_]oh3.? 6 @ M + MlE = r0I, exec)=o9>od[vpn'_]oh3.exec)=o9>od[vpn'_]oh3, exec)=o9>od[vpn'_]oh3.drop table, exec)=o9>od[vpn'_]oh3.? 6 @ M + MlE = r0I, exec)=o9>od[vpn'_]oh3.exec)=o9>od[vpn'_]oh3, exec)=o9>od[vpn'_]oh3.?6@M+MlE=r0I, exec)=o9>od[vpn'_]oh3.exec)=o9>od[vpn'_]oh3", string2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "eOdCx$*fDL>Am";
      DBDataType.getInstance(733, "/*");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.parseColumnTypeAndSize("alter tablen>u");
      SQLUtil.isProcedureCall("call");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.isQuery("?6@M+MlE=r0I");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "oI");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[0];
      SQLUtil.mutatesStructure("execute- ?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumns();
      UnaryOperator.identity();
      String string0 = SQLUtil.removeComments("BLOB");
      assertEquals("BLOB", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "!1";
      SQLUtil.mutatesDataOrStructure("select");
      String string1 = "alter index";
      SQLUtil.removeComments("alter index");
      String string2 = "alter indexdeleteh_vcn)esa";
      String string3 = "B3\"#8O>>5";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B3\"#8O>>5");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "N>7";
      SQLUtil.renderColumnListWithTableName("N>7", stringArray0);
      MockFile mockFile0 = new MockFile(",B&r", ",B&r");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "N>7");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments(" on ");
      CreateTableData createTableData0 = new CreateTableData();
      StringBuilder stringBuilder0 = new StringBuilder(42);
      String string0 = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_STRING;
      stringBuilder0.append((CharSequence) "A");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" on ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getPrimaryKeyConstraint();
      boolean boolean0 = SQLUtil.isProcedureCall("A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.isQuery("?6@M+MlE=r0I");
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("SYSXPLAIN_STATEMENTS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(lTmF", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("{cd", "SYSXPLAIN_STATEMENTS");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = Dependable.FILE;
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Random.setNextRandom(868);
      Session session0 = new Session();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("{cd", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments(" on ");
      CreateTableData createTableData0 = new CreateTableData();
      StringBuilder stringBuilder0 = new StringBuilder(42);
      String string0 = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_STRING;
      stringBuilder0.append((CharSequence) "A");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " on ", false, (String[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-193891511), "d'~x{V,IEc{P;P@o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4l|[g<K6lmR9yruS";
      SQLUtil.normalize("4l|[g<K6lmR9yruS", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(188);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execdeleteh_vcn)esa", 12345);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(") :~)p0Sl{", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      defaultDBTable0.setName("4l|[g<K6lmR9yruS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "cM1yR 7Ea*MXA[^cW\\|";
      File file0 = MockFile.createTempFile("cM1yR 7Ea*MXA[^cW|", "cM1yR 7Ea*MXA[^cW|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("- 0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("|*/C", false);
      assertEquals("| */ C", string0);
      
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      StringBuilder stringBuilder0 = new StringBuilder(2936);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "| */ C";
      stringArray0[1] = "|*/C";
      stringArray0[2] = "|*/C";
      stringArray0[3] = "|*/C";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(| */ C, |*/C, |*/C, |*/C)", string1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.renderValue("}wE<@`RA;B\"");
      SQLUtil.isQuery("}wE<@`RA;B\"");
      TableContainer tableContainer0 = new TableContainer("'}wE<@`RA;B\"'");
      String string0 = Mode.REGULAR;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName("}wE<@`RA;B\"");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("HELP", false, "'}wE<@`RA;B\"'", "HELP");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("REGULAR", defaultDBTable0, (-224), " and ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execdeleteh_cnesa");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string1 = Dependable.FILE;
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedReader pipedReader0 = new PipedReader();
      ArrayList<DefaultDBColumn> arrayList0 = new ArrayList<DefaultDBColumn>();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[REGULAR :  AND ]", vector0.toString());
      
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execdeleteh_cnesa", false, stringArray0);
      String string2 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT execdeleteh_cnesa UNIQUE (, , , )", string2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLUtil.renderValue("}wE<@`RA;B\"");
      SQLUtil.isQuery("}wE<@`RA;B\"");
      TableContainer tableContainer0 = new TableContainer("/.)CSlDAQW81.Fr0");
      String string0 = Mode.REGULAR;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName("}wE<@`RA;B\"");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("HELP", false, "'}wE<@`RA;B\"'", "HELP");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("REGULAR", defaultDBTable0, (-224), " and ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execdeleteh_cnesa");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = Dependable.FILE;
      mockPrintWriter0.print("HELP");
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      byte[] byteArray0 = new byte[3];
      mockPrintWriter0.append('\\');
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedReader pipedReader0 = new PipedReader();
      ArrayList<DefaultDBColumn> arrayList0 = new ArrayList<DefaultDBColumn>();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execdeleteh_cnesa", false, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '}wE<@`RA;B\"' has no foreign key with the columns (, , , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderValue("}wE<@`RA;B\"");
      SQLUtil.removeComments("'}wE<@`RA;B\"'");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'}wE<@`RA;B\"'");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}wE<@`RA;B\"", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("!tkff", false, dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("- 0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }
}
