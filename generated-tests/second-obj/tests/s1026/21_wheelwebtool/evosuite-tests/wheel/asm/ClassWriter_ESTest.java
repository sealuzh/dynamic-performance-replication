/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:14:06 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.visitField(27, "Deprecated", "Deprecated", "Deprecated", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@abc2e0
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 19);
      Item item0 = classWriter0.newFloat(2596.7947F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2695));
      classWriter0.visitAnnotation("vIBX1L$:wHeV ", false);
      classWriter0.visitSource("vIBX1L$:wHeV ", "vIBX1L$:wHeV ");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-537));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      classWriter0.newConst("SourceDebugExtension");
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4398);
      classWriter0.index = 4398;
      classWriter0.visitEnd();
      Item item0 = classWriter0.newLong(4398);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(252);
      classWriter0.newMethod("f\",!``p7$", "f\",!``p7$", "f\",!``p7$", true);
      // Undeclared exception!
      try { 
        classWriter0.newField("f\",!``p7$", "f\",!``p7$", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      classWriter0.visitOuterClass("SourceDebugExtension", "A6Fd", "SourceDebugExtension");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter((-1587));
      int int0 = classWriter0.addUninitializedType("EnclosingMethod", (-1587));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(3298);
      classWriter0.visitSource((String) null, "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Frame.FLOAT;
      ClassWriter classWriter0 = new ClassWriter(16777218);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newField("Deprecated", (String) null, "N0}A@q^<t<eym%`P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String string0 = "InnerClasses";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        classWriter0.newMethod("", (String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        classWriter0.newConst(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@1b4acc64
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1013);
      Item item0 = classWriter0.newFloat(1361.92F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1417));
      Float float0 = new Float((-3335.61F));
      classWriter0.newConstItem(float0);
      String string0 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^q]X&LzN@";
      stringArray0[1] = "L:@3pjKe7>VU^X";
      stringArray0[2] = "wheel.asm.ClassWriter";
      // Undeclared exception!
      try { 
        classWriter0.visit((-1417), (-1417), (String) null, "wheel.asm.ClassWriter", "L:@3pjKe7>VU^X", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long((-789L));
      ClassWriter classWriter0 = new ClassWriter((-2535));
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = null;
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1368);
      Integer integer0 = new Integer(10);
      int int0 = classWriter0.newConst(integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2338);
      classWriter0.visitInnerClass("", "", (String) null, 2338);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3298);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 38);
      classWriter0.visitSource((String) null, (String) null);
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = null;
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 0);
      classWriter0.toByteArray();
      String string1 = "zDN";
      String string2 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        classWriter0.newField("`HCs", (String) null, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2005));
      int int0 = (-2010);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-2010), (String) null, "wheel.asm.Frame", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(512);
      classWriter0.visit(512, 14, ";", ";", ";", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3647);
      String[] stringArray0 = new String[0];
      classWriter0.visit(3647, 3647, "EnclosingMethod", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3298);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newDouble(3298);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newLong(1L);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      Item[] itemArray0 = new Item[3];
      itemArray0[1] = item0;
      Item item2 = classWriter0.key3;
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      
      itemArray0[2] = item2;
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("'<!f");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("'<!f", "crm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class ''<!f.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777216);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newNameType("PrrBmN{WF$`zA", "PrrBmN{WF$`zA");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newFieldItem("PrrBmN{WF$`zA", "PrrBmN{WF$`zA", "PrrBmN{WF$`zA");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      classWriter0.visitSource("iz}H \";{$l\"w~nbb!TY", "mG;^XVx\"LQ^Y+");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(267386850);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass("", "", "", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L:@3pjKe7>VU^X";
      classWriter0.visit(1, 59, "L:@3pjKe7>VU^X", "L:@3pjKe7>VU^X", "L:@3pjKe7>VU^X", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-985));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      classWriter0.lastMethod = null;
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int1 = Frame.FLOAT;
      assertEquals(16777218, int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray2 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3298);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      Item item1 = new Item();
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      Item[] itemArray0 = new Item[15];
      itemArray0[0] = item0;
      itemArray0[1] = item0;
      Item item2 = new Item(3298);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("'<!f");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item3 = classWriter0.key3;
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item2));
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      assertNotSame(item3, item2);
      
      int int1 = classWriter0.addType("'<!f");
      assertEquals(1, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(3298, (-577));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3298
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("", "", "K!DVp");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-980);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-980));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.key;
      assertNotNull(item0);
      
      String[] stringArray0 = null;
      String string0 = "8+/?yQq`kac=L\".";
      int int1 = 84;
      String string1 = "4*<g";
      classWriter0.visit(84, 84, "4*<g", "float", "8+/?yQq`kac=L\".", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int2 = 184;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(184, (-980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-976));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newClassItem("[_9xz,2s>}4!");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[1];
      int int0 = classWriter0.newNameType("The arra of prefixes must no be null", "[_9xz,2s>}4!");
      assertEquals(4, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      stringArray0[0] = "[_9xz,2s>}4!";
      classWriter0.visit((-1553), 3234, "[_9xz,2s>}4!", "[_9xz,2s>}4!", "0w&`m", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = new Item(1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      item1.strVal2 = "[_9xz,2s>}4!";
      item1.longVal = (long) 3234;
      Item item2 = new Item((-1553), item1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertFalse(item0.equals((Object)item1));
      assertFalse(item1.equals((Object)item0));
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      
      int int1 = Frame.UNINITIALIZED;
      assertEquals(25165824, int1);
      assertFalse(int1 == int0);
      
      int int2 = classWriter0.addType("The arra of prefixes must no be null");
      assertEquals(1, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("[_9xz,2s>}4!", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(17);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.key;
      assertNotNull(item0);
      
      String string0 = "8+/?yQq`kac=L\".";
      classWriter0.visit(2018, 17, "8+/?yQq`kac=L\".", (String) null, "8+/?yQq`kac=L\".", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(24, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-993));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      classWriter0.lastField = null;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      int int1 = classWriter0.newConst(character0);
      assertEquals(1, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1025));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.key;
      assertNotNull(item0);
      
      String string0 = "8+/?yQq`kac=L\".";
      classWriter0.visit((-985), (-590), "8+/?yQq`kac=L\".", "8+/?yQq`kac=L\".", (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = "value ";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("$b(CHo+Qm>7@X", "value ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '$b(CHo+Qm>7@X.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1522));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource("F~<A", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(2266);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(389, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", (String) null, (Object) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(fieldVisitor0);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 2, 2266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34276
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(20);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Double double0 = new Double(3425.89035);
      assertEquals(3425.89035, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = classWriter0.newConst(double0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-993));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      boolean boolean1 = ClassReader.FRAMES;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      String string2 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = ClassReader.WRITER;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      System.setCurrentTimeMillis((-2967L));
      classWriter0.visitOuterClass("org.apache.commons.io.filefilter.FalseFileFilter", "wheel.asm.ClassWriter", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3298);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Integer integer0 = new Integer(3298);
      assertEquals(3298, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = classWriter0.newConst(integer0);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newDouble(3298);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newLong(1L);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      Item[] itemArray0 = new Item[4];
      itemArray0[0] = item0;
      itemArray0[1] = item0;
      Item item2 = classWriter0.newInteger(3298);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      
      int int1 = Character.BYTES;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      item0.strVal2 = "\"#<~B";
      Double double0 = new Double(3298);
      assertEquals(3298.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = Character.getName(3298);
      assertEquals("KANNADA VOWEL SIGN VOCALIC L", string0);
      assertNotNull(string0);
      
      Item item3 = new Item(1073, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item3);
      assertFalse(item0.equals((Object)item1));
      assertFalse(item0.equals((Object)item2));
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3595));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Short short0 = new Short((short)54);
      assertEquals((short)54, (short)short0);
      assertNotNull(short0);
      
      int int0 = Short.compare((short)1679, (short)28);
      assertEquals(1651, int0);
      
      int int1 = classWriter0.newConst(short0);
      assertEquals(1, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = Type.BOOLEAN;
      assertEquals(1, int0);
      
      classWriter0.visitOuterClass("F([065\"~.H[Kz72", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("SourceDebugExtension");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      classWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Item item0 = classWriter0.newConstItem("");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newClassItem("");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      Item item2 = classWriter0.newClassItem("");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertSame(item2, item1);
      assertNotSame(item2, item0);
      
      classWriter0.threshold = 10;
      item2.next = item1;
      FieldVisitor fieldVisitor0 = classWriter0.visitField(10, "", "", (String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(fieldVisitor0);
      
      int int0 = classWriter0.addUninitializedType("G/w,", 10);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newConst(item2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@9
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1716);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Item item0 = classWriter0.newConstItem(byte0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = new Item(1716);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      int int0 = Frame.VALUE;
      assertEquals(16777215, int0);
      
      int int1 = Short.SIZE;
      assertEquals(16, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3298);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 38);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = null;
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      classWriter0.visitInnerClass("", (String) null, (String) null, 267386880);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newUTF8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-4963));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[_9x>zl,2s>}4!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Double double0 = new Double(0.75);
      assertEquals(0.75, (double)double0, 0.01);
      assertNotNull(double0);
      
      Type type0 = Type.FLOAT_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newDouble((-5357.779301818));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newDouble((-5357.779301818));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3279);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newLong(1L);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item[] itemArray0 = new Item[3];
      classWriter0.typeTable = itemArray0;
      ClassWriter classWriter1 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      String string0 = "ih{0-JlmkKZL";
      int int0 = classWriter0.addUninitializedType("ih{0-JlmkKZL", 2);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      int int1 = classWriter0.addUninitializedType("'0p4^3Mh| GNX[!zS", 3279);
      assertEquals(2, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      assertNotSame(classWriter0, classWriter1);
      
      int int2 = classWriter0.addUninitializedType("|iO", (-20));
      assertEquals(3, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(classWriter0, classWriter1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      int int3 = classWriter0.newUTF8("|iO");
      assertEquals(3, int3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertNotSame(classWriter0, classWriter1);
      
      int int4 = classWriter0.newClass("|iO");
      assertEquals(4, int4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertNotSame(classWriter0, classWriter1);
      
      boolean boolean0 = Boolean.logicalOr(false, true);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        classWriter1.getMergedType((-20), 337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-980));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = classWriter0.invalidFrames;
      assertFalse(boolean0);
      
      Item item0 = classWriter0.newLong(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      double double0 = Double.max((-980), (-1525));
      assertEquals((-980.0), double0, 0.01);
      
      Type type0 = Type.DOUBLE_TYPE;
      assertEquals(6, Type.FLOAT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertNotNull(type0);
      assertEquals(2, type0.getSize());
      assertEquals(8, type0.getSort());
      
      classWriter0.version = 8;
      Item[] itemArray0 = new Item[7];
      itemArray0[4] = item0;
      item0.set(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      itemArray0[2] = item0;
      itemArray0[3] = itemArray0[0];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-85);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-43), (byte) (-99), (byte) (-43), (byte) (-85)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      Item item1 = new Item();
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      itemArray0[6] = item0;
      classWriter0.typeTable = itemArray0;
      int int0 = Float.BYTES;
      assertEquals(4, int0);
      
      Item item2 = new Item(3);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      
      Item item3 = classWriter0.newFloat(5);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item1));
      assertNotSame(item3, item2);
      assertNotSame(item3, item0);
      assertNotSame(item3, item1);
      
      String string0 = File.separator;
      assertEquals("/", string0);
      assertNotNull(string0);
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(3868, "", "", "", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-980));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockHijrahDate", string0);
      assertNotNull(string0);
      
      String string1 = "SourceDebugExtension";
      classWriter0.visitSource("n!W2fM?a<G+(8", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(8, (-3587));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-992));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      boolean boolean1 = ClassReader.SIGNATURES;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      
      classWriter0.visitSource((String) null, "Upl0>;N$0j");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2224, 2224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(47);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Item item0 = classWriter0.newFieldItem("", "", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      Item item1 = classWriter0.newFieldItem("", "", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertSame(item1, item0);
      
      int int0 = Frame.ARRAY_OF;
      assertEquals(268435456, int0);
      
      Double double0 = new Double(47);
      assertEquals(47.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        Type.getType("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("wheel.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-537));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(26);
      assertEquals(26, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = classWriter0.newConst(integer0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      String string0 = "value ";
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Item item1 = classWriter0.newFloat(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      Item item2 = classWriter0.newFloat(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item0);
      assertSame(item2, item1);
      
      Class<Boolean> class0 = Boolean.class;
      Type type0 = Type.getType(class0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      
      String string1 = type0.getClassName();
      assertEquals("java.lang.Boolean", string1);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(12, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-980));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = new Item(2);
      assertNotNull(item0);
      
      String string0 = "8+/?yQq`kac=L\".";
      classWriter0.visit((-1800), (-1800), "4*<=8vg", "4*<=8vg", "8+/?yQq`kac=L\".", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(7, (-980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-992));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class1);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      String string2 = Type.getInternalName(class1);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      int int1 = classWriter0.addUninitializedType("java/lang/Object", (-992));
      assertEquals(1, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(int1 == int0);
      
      int int2 = Character.MAX_RADIX;
      assertEquals(36, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      Item item0 = classWriter0.newFloat(1179);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      int int3 = classWriter0.addUninitializedType("java/lang/Object", (-992));
      assertEquals(1, int3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      byte[] byteArray2 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "@_Gq{Wx#iFB<MTQ", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-992);
      ClassWriter classWriter0 = new ClassWriter((-992));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classWriter0.visitAttribute(attribute0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classWriter0.lastMethod = null;
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class1);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = "wheel.asm.ClassWriter";
      String string2 = classWriter0.getCommonSuperClass("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-992);
      ClassWriter classWriter0 = new ClassWriter((-992));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.invalidFrames = true;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      boolean boolean1 = ClassReader.SIGNATURES;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate");
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-980));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Item item0 = classWriter0.newLong(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.key3;
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      double double0 = Double.max((-3341.464), (-1525));
      assertEquals((-1525.0), double0, 0.01);
      
      Double double1 = new Double((-1525));
      assertEquals((-1525.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-980));
      assertEquals((-980.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Type type0 = Type.DOUBLE_TYPE;
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertNotNull(type0);
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      
      int int0 = classWriter0.newNameType("", "");
      assertEquals(4, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item2 = classWriter0.newMethodItem("", "", "", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Item item3 = classWriter0.newMethodItem("", "", "", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      assertSame(item3, item2);
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      
      Class<Object> class0 = Object.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(28, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3279);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      Item item1 = classWriter0.newLong(1L);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Item item2 = classWriter0.newLong(1L);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item0);
      assertSame(item2, item1);
      
      item0.set(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(item0.equals((Object)item2));
      assertFalse(item0.equals((Object)item1));
      assertNotSame(item0, item2);
      assertNotSame(item0, item1);
      
      int int0 = 83;
      Item item3 = classWriter0.key;
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item2));
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      assertNotSame(item3, item2);
      
      int int1 = Type.BOOLEAN;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string0 = "^";
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(3279, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-980));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      item0.set(49);
      double double0 = Double.max((-980), (-1525));
      assertEquals((-980.0), double0, 0.01);
      
      Double double1 = new Double((-980));
      assertEquals((-980.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertNotNull(type0);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      
      classWriter0.version = 8;
      Item[] itemArray0 = new Item[11];
      itemArray0[0] = item0;
      itemArray0[1] = item0;
      itemArray0[2] = item0;
      itemArray0[3] = item0;
      itemArray0[4] = item0;
      Item item1 = new Item();
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      itemArray0[5] = item1;
      Item item2 = classWriter0.key;
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      
      item0.next = item2;
      item1.strVal1 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = Frame.CHAR;
      assertEquals(16777227, int0);
      
      Item item3 = new Item((-1183));
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item0));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      item0.set((-1.0F));
      assertFalse(item0.equals((Object)item1));
      assertFalse(item0.equals((Object)item3));
      assertFalse(item0.equals((Object)item2));
      assertNotSame(item0, item1);
      assertNotSame(item0, item3);
      assertNotSame(item0, item2);
      
      Item item4 = new Item();
      assertNotNull(item4);
      assertFalse(item4.equals((Object)item2));
      assertFalse(item4.equals((Object)item0));
      assertFalse(item4.equals((Object)item3));
      assertFalse(item4.equals((Object)item1));
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      Class<Double> class0 = Double.class;
      Type type1 = Type.getType(class0);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
      assertEquals(10, type1.getSort());
      assertEquals(1, type1.getDimensions());
      assertEquals(1, type1.getSize());
      assertNotSame(type1, type0);
      
      String string0 = type1.toString();
      assertEquals("Ljava/lang/Double;", string0);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertNotNull(string0);
      assertFalse(type1.equals((Object)type0));
      assertEquals(10, type1.getSort());
      assertEquals(1, type1.getDimensions());
      assertEquals(1, type1.getSize());
      assertNotSame(type1, type0);
      
      int int1 = classWriter0.newConst(type1);
      assertEquals(2, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertFalse(type1.equals((Object)type0));
      assertFalse(int1 == int0);
      assertEquals(10, type1.getSort());
      assertEquals(1, type1.getDimensions());
      assertEquals(1, type1.getSize());
      assertNotSame(type1, type0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("RuntimeInvisibleAnnotations");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-992));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate");
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      String string2 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-992));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-992), 16777218);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-985));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      classWriter0.lastMethod = null;
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      Class<Integer> class1 = Integer.class;
      String string0 = Type.getInternalName(class1);
      assertEquals("java/lang/Integer", string0);
      assertNotNull(string0);
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      String string1 = "wheel.asm.ClassWriter";
      String string2 = classWriter0.getCommonSuperClass("java/lang/Integer", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Insensitive");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-993));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class1);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      classWriter0.index = 119;
      String string2 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");
      assertEquals("java/lang/Object", string2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = ClassReader.WRITER;
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      classWriter0.visitSource("java/lang/Object", "java/lang/Object");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-993), 16777218);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-993));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      String string0 = Type.getInternalName(class1);
      assertEquals("java/time/chrono/ChronoLocalDate", string0);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/time/chrono/ChronoLocalDate");
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(classWriter0, classWriter1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      Class<Integer> class2 = Integer.class;
      String string2 = Type.getInternalName(class2);
      assertEquals("java/lang/Integer", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean3 = ClassReader.WRITER;
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      int int0 = Frame.FLOAT;
      assertEquals(16777218, int0);
      
      classWriter0.visitSource("java/lang/Object", "NK=f(b1M");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      
      ClassWriter classWriter2 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      
      // Undeclared exception!
      try { 
        classWriter2.getMergedType(5, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
