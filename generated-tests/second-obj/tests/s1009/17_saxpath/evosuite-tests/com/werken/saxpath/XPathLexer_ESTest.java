/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:44:37 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")p<qBr$");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token2.toString();
      assertEquals("[ (3) (<)", string0);
      
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (23) ())", string1);
      
      token1.toString();
      String string2 = token1.toString();
      assertEquals("[ (15) (p)", string2);
      assertEquals("p", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.and();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer2.getPreviousToken();
      xPathLexer1.and();
      Token token6 = xPathLexer2.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}hZz+`B|A.AEu@E<ZX");
      xPathLexer0.setXPath("a) (");
      Token token0 = xPathLexer0.plus();
      assertEquals("a", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(")", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p'%qVC+eBwXL");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("p", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IO4G~L0Zm/q.6GU");
      xPathLexer0.consume(1);
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.consume(47);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath("SNc!'cn+dIB");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.not();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("@J");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('1');
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('w');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Qx");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Qx", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("did");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      Token token1 = xPathLexer1.identifier();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}h_z+`B|A.AEu@E<ZX");
      xPathLexer0.setXPath(") (");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B_<n7E>(");
      Token token0 = xPathLexer0.comma();
      assertEquals("B", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("_", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("<", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("n", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("7", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(">", token5.getTokenText());
      assertEquals(9, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(", Fb^W@3~OX'DH%3");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SYBnX.[Tc$5Lu/J");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("SYBnX.", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(16);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('-');
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(20, int0);
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('-');
      assertFalse(boolean1 == boolean0);
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(17, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":@I;");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".s3iPST($Npk:+Am");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P_7z^GC}m*z[");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (P)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("_7z^GC}m*z[", token1.getTokenText());
      
      xPathLexer0.setXPath("^&");
      int int0 = xPathLexer0.endPosition();
      assertEquals(2, int0);
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("^&", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar(' ');
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!8c+dIB");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("SN", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("c", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("!", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (30) (8)", string0);
      
      Token token4 = xPathLexer0.colon();
      String string1 = token4.toString();
      assertEquals("[ (18) (c)", string1);
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      token3.toString();
      xPathLexer0.endPosition();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("d", token6.getTokenText());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("I", token7.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.consume((-983));
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals("8", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6D^70N9,HY!i)!");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('*');
      assertFalse(boolean0);
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(14, int0);
      
      Token token0 = xPathLexer0.number();
      assertEquals("6", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("SN", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("c", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      int int0 = xPathLexer0.currentPosition();
      xPathLexer0.and();
      Token token5 = xPathLexer0.comma();
      assertEquals("'", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      int int1 = xPathLexer0.endPosition();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xUt+.2kyZ");
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (3) (x)", string0);
      
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("Ut", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.and();
      boolean boolean0 = xPathLexer0.isIdentifierChar('Y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("did");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      Token token1 = xPathLexer1.at();
      xPathLexer0.leftParen();
      xPathLexer1.or();
      xPathLexer1.star();
      token0.toString();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("[ (5) (d)");
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kxcW#ol%5 77S>z*");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.dollar();
      xPathLexer1.operatorName();
      xPathLexer1.setXPath("[ (20) (k)");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2D5NdOWw+o*%F");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.dollar();
      xPathLexer0.doubleColon();
      xPathLexer2.operatorName();
      xPathLexer2.mod();
      xPathLexer2.relationalOperator();
      xPathLexer1.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.div();
      XPathLexer xPathLexer7 = new XPathLexer("");
      assertFalse(xPathLexer7.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "6qSQs*T-";
      XPathLexer xPathLexer0 = new XPathLexer("6qSQs*T-");
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      String string1 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zI2dI0$6[/k");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("zI2dI0", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("$", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = new Token(1, "<SCE|p*oU+Od'K1", 1, 13);
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("aXGVB.5(hCoe{$<");
      xPathLexer1.operatorName();
      xPathLexer0.pipe();
      String string0 = xPathLexer1.getXPath();
      assertEquals("aXGVB.5(hCoe{$<", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`>]dWEqPf");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("`>]dWEqPf", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("d", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u=eo;`{");
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.slashes();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.not();
      token1.toString();
      token2.toString();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("m}wcpjxO;kK");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("m}wcpjxO;kK");
      String string0 = "iE/G$";
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U.<");
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hsF?yQ\"V,oVbD<!A y");
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "h^[Qs*T-";
      XPathLexer xPathLexer0 = new XPathLexer("h^[Qs*T-");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      String string1 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5");
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("3\"s|K");
      xPathLexer0.isIdentifierStartChar('\\');
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(17);
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.isIdentifierStartChar('\\');
      xPathLexer0.at();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gd=tK28");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("gd", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("K28", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".4oWP%k[XSa(");
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer(".4oWP%k[XSa(");
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer1.setXPath(")5p/nveo.h");
      assertEquals(")5p/nveo.h", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#[1\"z71 f3)hi&9");
      xPathLexer0.setXPath("#[1\"z71 f3)hi&9");
      xPathLexer0.colon();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.consume(539);
      assertEquals("#[1\"z71 f3)hi&9", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "#7\":0e>{,;:ap+ed$";
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("#7\":0e>{,;:ap+ed$");
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@J");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.leftParen();
      xPathLexer1.mod();
      xPathLexer1.nextToken();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?zxc!5cocj5h3");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      xPathLexer0.getPreviousToken();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9~& O&j(x>>WrmAkQ");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer1.setXPath("");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("EBBPQ(PJbb");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.mod();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.endPosition();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals("9", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token1 = xPathLexer9.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer7.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer9.and();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
      
      xPathLexer3.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("& O&j(x>>WrmAkQ", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L<.XNGK$^p4NC");
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-omjkC3v5~t");
      xPathLexer0.setXPath("9pD(Ii.Yp]H");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.comma();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L<.XNGK$^p4NC");
      XPathLexer xPathLexer1 = new XPathLexer("L<.XNGK$^p4NC");
      xPathLexer1.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zUL'*~@j?j8*$R");
      xPathLexer0.or();
      Token token0 = xPathLexer0.pipe();
      assertEquals("z", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("UL", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("Y>6 jJ;Qx7\"");
      xPathLexer1.setXPath("Y>6 jJ;Qx7\"");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.getPreviousToken();
      Token token0 = xPathLexer2.at();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("did");
      xPathLexer0.setXPath("(f3[.7,\";\"|");
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("did");
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("uH(4pK}");
      xPathLexer3.plus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer3.operatorName();
      xPathLexer4.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer5.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer4.notEquals();
      xPathLexer1.and();
      Token token0 = xPathLexer4.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|[s(_rs;S}");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(17, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.div();
      Token token1 = xPathLexer0.not();
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.consume();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("O#baO|l}Z!Z9Yf,J8p");
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer1.dollar();
      xPathLexer0.or();
      xPathLexer1.setXPath("O#baO|l}Z!Z9Yf,J8p");
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")p<qBr$");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token2.toString();
      assertEquals("[ (3) (<)", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (23) ())", string1);
      
      token1.toString();
      String string2 = token1.toString();
      assertEquals("[ (15) (p)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("B", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.and();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("r$", token6.getTokenText());
      
      xPathLexer2.getPreviousToken();
      xPathLexer1.and();
      Token token7 = xPathLexer2.comma();
      assertEquals(32, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath(".=o+<hafFW-io,");
      xPathLexer1.dots();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      Token token2 = xPathLexer1.rightParen();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kxcW#ol%5 77S>z*");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token1 = xPathLexer1.star();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("L0");
      xPathLexer2.rightParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":@I;");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.comma();
      Token token0 = xPathLexer1.star();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zUL'*~@j?j8*$R");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("zUL", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("'", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("did");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.mod();
      Token token1 = xPathLexer1.whitespace();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      token0.toString();
      xPathLexer1.operatorName();
      xPathLexer0.and();
      xPathLexer3.and();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("[ (2) (d)");
      xPathLexer0.and();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer1.leftParen();
      xPathLexer4.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")p<d");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      
      token0.toString();
      Token token2 = xPathLexer0.leftBracket();
      String string0 = token2.toString();
      assertEquals("[ (3) (<)", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (23) ())", string1);
      
      token1.toString();
      String string2 = token1.toString();
      assertEquals("[ (15) (p)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("aXGVB.5(hCoe{$<");
      Token token7 = xPathLexer0.nextToken();
      assertEquals("aXGVB.5(hCoe{$<", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer0.comma();
      assertEquals("a", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("./4oWP%k[XSa(");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B_<n7E>(");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("_", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("n", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("E", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#S&IDn.w");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("S", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      xPathLexer1.setXPath("");
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("I", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("Dn.w", token6.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer4.rightParen();
      assertEquals(2, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(",`sz");
      xPathLexer1.nextToken();
      xPathLexer0.operatorName();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.consume(8);
      assertNotSame(xPathLexer1, xPathLexer2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z");
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.consume((-4583));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      Token token2 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.nextToken();
      xPathLexer0.consume((-751));
      xPathLexer0.endPosition();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("kxcW#ol%5 77S>z*");
      xPathLexer1.nextToken();
      xPathLexer1.consume(1);
      assertEquals("kxcW#ol%5 77S>z*", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Ks3iPST~$Npk:+Am");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.plus();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.nextToken();
      token3.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (K)", string0);
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("PS", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.setXPath("kz@x");
      xPathLexer0.and();
      String string1 = token3.toString();
      assertEquals("[ (-1) (PST~$Npk:+Am)", string1);
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer2.div();
      xPathLexer0.or();
      String string2 = token1.toString();
      assertEquals("[ (5) (s)", string2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#[1\"z71 f3)hi&9");
      xPathLexer0.setXPath("#[1\"z71 f3)hi&9");
      xPathLexer0.colon();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.consume(539);
      assertEquals("#[1\"z71 f3)hi&9", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'11");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("'", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("11", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?|bF)d]j.ay76@y");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("?|bF)d]j.ay76@y", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.dots();
      assertEquals("?", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.at();
      assertEquals("|", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Ks3iPST~$Npk:+Am");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      token0.toString();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")p<qBr$");
      xPathLexer0.not();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.at();
      xPathLexer0.not();
      Token token2 = xPathLexer0.nextToken();
      Token token3 = xPathLexer0.star();
      token1.toString();
      token2.toString();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zI2dI0$6[/k");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("zI2dI0", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("$", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("[", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.minus();
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer4.consume();
      Token token6 = xPathLexer4.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p5sLqi~{N8b2]h");
      Token token0 = xPathLexer0.star();
      assertEquals("p", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("s", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.colon();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("~", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~\"Hr/");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.minus();
      assertEquals("\"", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("~\"Hr/");
      xPathLexer3.and();
      Token token2 = xPathLexer3.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer2.div();
      Token token4 = xPathLexer2.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer3.consume();
      Token token5 = xPathLexer0.slashes();
      assertEquals(12, token5.getTokenType());
      assertEquals("r/", token5.getTokenText());
      
      Token token6 = xPathLexer2.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer3.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("H", token8.getTokenText());
      
      xPathLexer3.operatorName();
      Token token9 = xPathLexer2.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer2.star();
      assertEquals(20, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-omjkC3V~t");
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L<.XNGK$^p4NC");
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"wHWQsRP>;Jkv9g");
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(91);
      assertNotSame(xPathLexer1, xPathLexer0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zUL'*~@j?j8*$R");
      xPathLexer0.or();
      Token token0 = xPathLexer0.pipe();
      assertEquals("z", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("+$:I8P8f");
      XPathLexer xPathLexer2 = new XPathLexer("zUL'*~@j?j8*$R");
      XPathLexer xPathLexer3 = new XPathLexer("bB2H`V#KV*");
      Token token1 = xPathLexer2.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("z", token1.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.mod();
      XPathLexer xPathLexer5 = new XPathLexer("~]U3");
      XPathLexer xPathLexer6 = new XPathLexer("bB2H`V#KV*");
      Token token2 = xPathLexer6.leftParen();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token3 = xPathLexer3.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("bB2H", token3.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("~]U3");
      Token token4 = xPathLexer6.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (1) (b)", string0);
      
      Token token5 = xPathLexer7.at();
      assertEquals(16, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zUL'*~@j?j8*$R");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifier();
      assertEquals("zUL", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kxcW#ol%5 77S>z*");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.operatorName();
      xPathLexer1.setXPath("[ (20) (k)");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "+$:\\I8P8f";
      XPathLexer xPathLexer0 = new XPathLexer("+$:I8P8f");
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.not();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GU.{bJYAm@0I,a(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("GU.", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("b", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.comma();
      assertEquals("J", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.colon();
      assertEquals("Y", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[V.@vW@v`/");
      xPathLexer1.dollar();
      xPathLexer1.star();
      xPathLexer2.comma();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("[V.@vW@v`/");
      assertFalse(xPathLexer3.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kNxcW#o5 77S>z*");
      Token token0 = xPathLexer0.star();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (20) (k)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.setXPath("v");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("v", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("N", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.pipe();
      assertEquals(17, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yG");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("yG", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kxcW#ol%5 77S>z*");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-1));
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (k)");
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      String string0 = "Any%1iA`u(h]<>h+f";
      xPathLexer0.star();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("Any%1iA`u(h]<>h+f");
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".4oWP%k[XEa(");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(".4", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer2.whitespace();
      assertEquals((-2), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("?xc!5cocj5h3");
      Token token0 = xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("?xc!5cocj5h3");
      token0.toString();
      xPathLexer0.at();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer("62.");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.minus();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath(".=o+<hafFW-io,");
      Token token0 = xPathLexer1.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (21) (=)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer0.colon();
      assertEquals("o", token4.getTokenText());
      
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (21) (=)");
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer4.equals();
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token7 = xPathLexer0.not();
      assertEquals("+", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.and();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer2.leftParen();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("<", token9.getTokenText());
      
      Token token10 = xPathLexer6.number();
      assertEquals(30, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-omjkC35~t");
      XPathLexer xPathLexer1 = new XPathLexer("-omjkC35~t");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("-", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.slashes();
      assertEquals("-", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer2.whitespace();
      assertEquals((-2), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'cn+dIB");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.comma();
      assertEquals("'", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("n", token5.getTokenText());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (22) (c!)");
      token2.toString();
      xPathLexer0.plus();
      Token token6 = xPathLexer2.nextToken();
      assertEquals("[", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals("d", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer2.rightParen();
      assertEquals(" ", token8.getTokenText());
      
      xPathLexer3.and();
      Token token9 = xPathLexer2.nextToken();
      assertEquals("(", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.literal();
      xPathLexer4.and();
      xPathLexer2.relationalOperator();
      xPathLexer1.mod();
      xPathLexer3.consume();
      xPathLexer3.mod();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer7 = new XPathLexer("SNc!'cn+dIB");
      Token token11 = xPathLexer4.leftParen();
      assertEquals(1, token11.getTokenType());
      
      String string0 = token4.toString();
      assertEquals("[ (26) (c)", string0);
      
      Token token12 = xPathLexer5.literal();
      assertNull(token12);
      
      Token token13 = xPathLexer7.doubleColon();
      assertEquals(19, token13.getTokenType());
      assertEquals("SN", token13.getTokenText());
      
      char char0 = xPathLexer2.LA(6);
      assertEquals('c', char0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]");
      XPathLexer xPathLexer1 = new XPathLexer("}Rp7vB=|EFS");
      Token token0 = xPathLexer0.identifier();
      xPathLexer1.nextToken();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer2.nextToken();
      Token token1 = xPathLexer1.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      token1.toString();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-530));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
