/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:32:18 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft((-537), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-537][0..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3718, 3718, 17);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) null, 3718, 17, 622, 622, 1394, 622);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) null, (-208), 0, (-941), (-208), 0, 3214);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -941, -208
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector vector0 = Vector.zero(226);
      Matrix matrix0 = vector0.toDiagonalMatrix();
      matrix0.rowMajorIterator();
      matrix0.iteratorOfRow(226);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInColumn(226, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 73;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(73, 73);
      basic2DMatrix0.toMatrixMarket();
      MatrixOperation<RowMajorSparseMatrix> matrixOperation0 = (MatrixOperation<RowMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic2DMatrix0.apply(matrixOperation0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 17;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(17, 17);
      // Undeclared exception!
      try { 
        basic2DMatrix0.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(10);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      assertEquals(10, cRSMatrix1.columns());
      assertEquals(10, cRSMatrix1.rows());
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      denseMatrix0.minInRow(0);
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)denseMatrix0.blankOfRows(0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("     ");
      cRSMatrix0.toSparseMatrix();
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      sparseMatrix0.norm();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.is(advancedMatrixPredicate0);
      sparseMatrix0.diagonalProduct();
      sparseMatrix0.trace();
      sparseMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(517L);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(4, 1898, mockRandom0);
      double double0 = basic2DMatrix0.trace();
      assertEquals(2.4000000000000004, double0, 0.01);
      assertEquals(4, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.trace();
      MatrixIterator matrixIterator0 = cRSMatrix0.iterator();
      assertNotNull(matrixIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      locale1.getDisplayCountry(locale0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale1);
      matrix0.toMatrixMarket(numberFormat0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        matrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.sum();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.trace();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        Matrix.unit(309, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      rowMajorSparseMatrix0.slice((-1), (-583), (-1), 2103);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapColumns(8, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 2361;
      Matrix matrix0 = Matrix.identity(2361);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn((-806), vectorFunction0);
      matrix0.copyOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector.zero(1096, 1096);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      int int0 = 13;
      int int1 = 18;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, (-7), (-7), 901, 13, 18, (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 18x-7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1096;
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1096);
      SparseVector sparseVector0 = SparseVector.zero(1096, 1096);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      vector0.copyOfLength(1096);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.minInColumn(1096);
      int int1 = 44;
      boolean boolean0 = false;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.is(matrixPredicate0);
      CRSMatrix.zero(int0, int0);
      int int2 = 8;
      int int3 = (-1013);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int3, int1, int2);
      double double0 = (-14.8466547);
      rowMajorSparseMatrix1.subtract(double0);
      int int4 = (-178);
      int int5 = 682;
      cRSMatrix0.swapRows(int5, int4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 5;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.identity(9);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(5, 1722);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [5..9][1722..9].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformColumn(0, vectorFunction0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotNull(cRSMatrix1);
      
      double double0 = cRSMatrix0.norm();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      double double1 = cRSMatrix0.diagonalProduct();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      double double0 = sparseMatrix0.diagonalProduct();
      assertEquals(1.0, double0, 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      
      double double1 = sparseMatrix0.maxInColumn(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      
      double double2 = sparseMatrix0.trace();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      
      Matrix matrix0 = sparseMatrix0.add(1.0);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 17;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(17);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.058823529411764705, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      Spliterator<Double> spliterator0 = rowMajorSparseMatrix0.spliterator();
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.058823529411764705, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertNotNull(spliterator0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 17;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.each(matrixProcedure0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.058823529411764705, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertEquals(17, rowMajorSparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      Matrix matrix0 = Matrix.unit(1, 1);
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.minInColumn(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = 270.341825;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (-1803.8895);
      doubleArray0[8] = (double) 8;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(8, 8, doubleArray0);
      assertArrayEquals(new double[] {8.0, 8.0, 8.0, 8.0, 8.0, 270.341825, 8.0, (-1803.8895), 8.0}, doubleArray0, 0.01);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {8.0, 8.0, 8.0, 8.0, 8.0, 270.341825, 8.0, (-1803.8895), 8.0}, doubleArray0, 0.01);
      assertEquals(9, sparseVector0.length());
      assertEquals(9, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      boolean boolean0 = sparseVector0.equals((Object) denseMatrix0);
      assertArrayEquals(new double[] {8.0, 8.0, 8.0, 8.0, 8.0, 270.341825, 8.0, (-1803.8895), 8.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      assertEquals(9, sparseVector0.length());
      assertEquals(9, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(1, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 9. Should be: 8.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3441;
      intArray0[1] = 3441;
      intArray0[2] = 3441;
      intArray0[3] = 3441;
      intArray0[4] = 3441;
      intArray0[5] = (-2599);
      intArray0[6] = 18;
      intArray0[7] = 3441;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(3441, 3441, 3441, (double[]) null, intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3441, 3441, 3441, 3441, 3441, (-2599), 18, 3441}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3441, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3441, cRSMatrix0.cardinality());
      assertEquals(3441, cRSMatrix0.rows());
      assertEquals(2.906131938390003E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3718, 3718, 17);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(3718, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(3718, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) null, 0, (-2313), 660, 32, 615, 144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 660, 32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) rowMajorSparseMatrix0, (-1804), 8, 8, (-941), 0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 8, -941
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.toColumnVector();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.removeFirstRow();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertEquals(46, (int)integer0);
      assertNotNull(integer0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(46, (double) integer0);
      assertEquals(0.021739130434782608, cRSMatrix0.density(), 0.01);
      assertEquals(46, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(46.0, cRSMatrix0.max(), 0.01);
      assertEquals(46, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(46, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix0.subtract(2284.66142);
      assertEquals(0.021739130434782608, cRSMatrix0.density(), 0.01);
      assertEquals(46, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(46.0, cRSMatrix0.max(), 0.01);
      assertEquals(46, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(46, cRSMatrix0.rows());
      assertEquals(46, matrix0.columns());
      assertEquals(46, matrix0.rows());
      assertNotNull(matrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(46, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition1 = new OoPlaceVectorsAddition();
      assertFalse(ooPlaceVectorsAddition1.equals((Object)ooPlaceVectorsAddition0));
      assertNotNull(ooPlaceVectorsAddition1);
      
      int int0 = 6;
      Integer integer0 = new Integer(6);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = Integer.MAX_VALUE;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(7.098534644071841E-11).when(matrixAccumulator0).accumulate();
      double double0 = basic2DMatrix0.fold(matrixAccumulator0);
      assertEquals(7.098534644071841E-11, double0, 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("org.la4j.LinearAlgebra$SolverFactory$8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cRSMatrix0.is(advancedMatrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      String string0 = cRSMatrix0.mkString("{{Unf`=i9F^IOT", "M|");
      assertEquals("", string0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertEquals(46, (int)integer0);
      assertNotNull(integer0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 0.0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfColumn(1);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(vectorIterator0);
      
      Locale locale0 = Locale.forLanguageTag("82,]");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = new DecimalFormat();
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat1);
      
      DecimalFormatSymbols decimalFormatSymbols0 = decimalFormat1.getDecimalFormatSymbols();
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat2 = new DecimalFormat("Wrong input file format: can not read header '%%MatrixMarket'.", decimalFormatSymbols0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertFalse(decimalFormat2.equals((Object)decimalFormat0));
      assertFalse(decimalFormat2.equals((Object)decimalFormat1));
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat2.getRoundingMode());
      assertEquals("-Wrong input file format: can not read header %%MatrixMarket", decimalFormat2.getNegativePrefix());
      assertFalse(decimalFormat2.isGroupingUsed());
      assertFalse(decimalFormat2.isParseIntegerOnly());
      assertEquals("", decimalFormat2.getPositiveSuffix());
      assertEquals("'Wrong input file format: can not read header %%MatrixMarket'#.", decimalFormat2.toLocalizedPattern());
      assertTrue(decimalFormat2.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat2.getMinimumFractionDigits());
      assertFalse(decimalFormat2.isParseBigDecimal());
      assertEquals(0, decimalFormat2.getMinimumIntegerDigits());
      assertEquals("", decimalFormat2.getNegativeSuffix());
      assertEquals("Wrong input file format: can not read header %%MatrixMarket", decimalFormat2.getPositivePrefix());
      assertEquals("'Wrong input file format: can not read header %%MatrixMarket'#.", decimalFormat2.toPattern());
      assertEquals(0, decimalFormat2.getMaximumFractionDigits());
      assertEquals(0, decimalFormat2.getGroupingSize());
      assertEquals(1, decimalFormat2.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat2.getMaximumIntegerDigits());
      assertNotNull(decimalFormat2);
      
      decimalFormat2.setParseIntegerOnly(true);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertNotSame(decimalFormat1, decimalFormat2);
      assertNotSame(decimalFormat2, decimalFormat0);
      assertNotSame(decimalFormat2, decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertFalse(decimalFormat1.equals((Object)decimalFormat2));
      assertFalse(decimalFormat2.equals((Object)decimalFormat0));
      assertFalse(decimalFormat2.equals((Object)decimalFormat1));
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat2.getRoundingMode());
      assertEquals("-Wrong input file format: can not read header %%MatrixMarket", decimalFormat2.getNegativePrefix());
      assertFalse(decimalFormat2.isGroupingUsed());
      assertEquals("", decimalFormat2.getPositiveSuffix());
      assertEquals("'Wrong input file format: can not read header %%MatrixMarket'#.", decimalFormat2.toLocalizedPattern());
      assertTrue(decimalFormat2.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat2.getMinimumFractionDigits());
      assertFalse(decimalFormat2.isParseBigDecimal());
      assertEquals(0, decimalFormat2.getMinimumIntegerDigits());
      assertTrue(decimalFormat2.isParseIntegerOnly());
      assertEquals("", decimalFormat2.getNegativeSuffix());
      assertEquals("Wrong input file format: can not read header %%MatrixMarket", decimalFormat2.getPositivePrefix());
      assertEquals("'Wrong input file format: can not read header %%MatrixMarket'#.", decimalFormat2.toPattern());
      assertEquals(0, decimalFormat2.getMaximumFractionDigits());
      assertEquals(0, decimalFormat2.getGroupingSize());
      assertEquals(1, decimalFormat2.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat2.getMaximumIntegerDigits());
      
      DecimalFormat decimalFormat3 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertNotSame(decimalFormat3, decimalFormat0);
      assertNotSame(decimalFormat3, decimalFormat2);
      assertNotSame(decimalFormat3, decimalFormat1);
      assertFalse(decimalFormat3.equals((Object)decimalFormat0));
      assertFalse(decimalFormat3.equals((Object)decimalFormat2));
      assertFalse(decimalFormat3.equals((Object)decimalFormat1));
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat3.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat3.getMaximumIntegerDigits());
      assertFalse(decimalFormat3.isParseBigDecimal());
      assertEquals(1, decimalFormat3.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat3.getMinimumFractionDigits());
      assertEquals(1, decimalFormat3.getMultiplier());
      assertEquals(3, decimalFormat3.getGroupingSize());
      assertEquals("", decimalFormat3.getPositiveSuffix());
      assertEquals("-", decimalFormat3.getNegativePrefix());
      assertEquals("", decimalFormat3.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat3.toLocalizedPattern());
      assertEquals("", decimalFormat3.getPositivePrefix());
      assertTrue(decimalFormat3.isParseIntegerOnly());
      assertEquals(0, decimalFormat3.getMaximumFractionDigits());
      assertFalse(decimalFormat3.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0", decimalFormat3.toPattern());
      assertTrue(decimalFormat3.isGroupingUsed());
      assertNotNull(decimalFormat3);
      
      String string0 = cRSMatrix0.toCSV((NumberFormat) decimalFormat3);
      assertNotSame(decimalFormat3, decimalFormat0);
      assertNotSame(decimalFormat3, decimalFormat2);
      assertNotSame(decimalFormat3, decimalFormat1);
      assertFalse(decimalFormat3.equals((Object)decimalFormat0));
      assertFalse(decimalFormat3.equals((Object)decimalFormat2));
      assertFalse(decimalFormat3.equals((Object)decimalFormat1));
      assertEquals("0\n", string0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat3.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat3.getMaximumIntegerDigits());
      assertFalse(decimalFormat3.isParseBigDecimal());
      assertEquals(1, decimalFormat3.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat3.getMinimumFractionDigits());
      assertEquals(1, decimalFormat3.getMultiplier());
      assertEquals(3, decimalFormat3.getGroupingSize());
      assertEquals("", decimalFormat3.getPositiveSuffix());
      assertEquals("-", decimalFormat3.getNegativePrefix());
      assertEquals("", decimalFormat3.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat3.toLocalizedPattern());
      assertEquals("", decimalFormat3.getPositivePrefix());
      assertTrue(decimalFormat3.isParseIntegerOnly());
      assertEquals(0, decimalFormat3.getMaximumFractionDigits());
      assertFalse(decimalFormat3.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0", decimalFormat3.toPattern());
      assertTrue(decimalFormat3.isGroupingUsed());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.toColumnVector();
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)rowMajorSparseMatrix0.toRowVector();
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)rowMajorSparseMatrix0.add((double) 1);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.blankOfColumns(4);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setRow(4, (Vector) compressedVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertNotNull(sparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.multiplyByItsTranspose();
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.norm();
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      CRSMatrix cRSMatrix1 = (CRSMatrix)sparseMatrix0.multiply((-1737.210019472653));
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)sparseMatrix0));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      
      boolean boolean0 = cRSMatrix0.is(advancedMatrixPredicate0);
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(boolean0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      double double1 = cRSMatrix0.diagonalProduct();
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      double double2 = sparseMatrix0.trace();
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)sparseMatrix0.toColumnVector();
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cRSMatrix0.add(0.0);
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.blankOfColumns(4);
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertNotNull(basic2DMatrix1);
      
      cRSMatrix1.setRow(4, (Vector) compressedVector0);
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)sparseMatrix0));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-548);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(1, (-548));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-548
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      double double0 = sparseMatrix0.norm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = sparseMatrix0.is(advancedMatrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      
      double double1 = sparseMatrix0.diagonalProduct();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 4664);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.kroneckerProduct(sparseMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      Matrix matrix1 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, (DenseMatrix) basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertTrue(matrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.slice((-1), (-583), (-1), 2103);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(2686, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      String string0 = rowMajorSparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals("0%\n", string0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(string0);
      
      double double0 = cRSMatrix0.manhattanNorm();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(2686, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2103;
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      SparseVector sparseVector0 = SparseVector.zero(1096, (-2));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1096, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      assertEquals(9.124087591240876E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1096.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      int int0 = 1;
      int int1 = 476;
      rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix1, (-1755), 1, (-2147445335), 476, (-2147445368), (-2147445365));
      int int2 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int1, int2, int0);
      int int3 = 447;
      rowMajorSparseMatrix0.power(int3);
      cRSMatrix0.toSparseMatrix();
      int int4 = 378;
      rowMajorSparseMatrix0.copyOfColumns(int4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertNotNull(cRSMatrix2);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = new DecimalFormat();
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertNotNull(decimalFormat1);
      
      String string0 = decimalFormat0.getNegativeSuffix();
      assertNotSame(decimalFormat0, decimalFormat1);
      assertTrue(decimalFormat0.equals((Object)decimalFormat1));
      assertEquals("", string0);
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertNotNull(string0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldColumns(vectorAccumulator0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("V^O)r2_w.YtK]4R`J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(18);
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(18, sparseMatrix0.columns());
      assertEquals(18, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.05555555555555555, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(18, sparseMatrix0.rows());
      assertNotNull(sparseMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(18, 18, 18);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(18, cRSMatrix0.rows());
      assertEquals(18, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      sparseMatrix0.swapColumns(18, 18);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(18, sparseMatrix0.columns());
      assertEquals(18, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.05555555555555555, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(18, sparseMatrix0.rows());
      
      double double0 = sparseMatrix0.minInRow(5);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(18, sparseMatrix0.columns());
      assertEquals(18, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.05555555555555555, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(18, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.multiplyByItsTranspose();
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      
      basic2DMatrix0.updateColumn(1000, vectorFunction0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = new DecimalFormat();
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertNotNull(decimalFormat1);
      
      String string0 = sparseMatrix0.toCSV((NumberFormat) decimalFormat1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("", string0);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertNotNull(string0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)Matrix.fromCSV("");
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix1.columns());
      assertNotNull(basic2DMatrix1);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = 0;
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.slice((-1), (-583), (-1), 2103);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2686, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      int int1 = 8;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)Matrix.diagonal(8, 8);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(8, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.125, cRSMatrix1.density(), 0.01);
      assertEquals(8, cRSMatrix1.columns());
      assertEquals(8, cRSMatrix1.cardinality());
      assertEquals(8.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      
      cRSMatrix0.forEach(consumer0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2686, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) rowMajorSparseMatrix0, 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1096;
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      SparseVector sparseVector0 = SparseVector.zero(1096, 1096);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1096, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix0.rows());
      assertEquals(1096, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1096.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix0.cardinality());
      assertEquals(9.124087591240876E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      int int1 = 9;
      rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 1096, 1096, 6, 9, 6, 1096);
      rowMajorSparseMatrix0.blank();
      int int2 = 37;
      int int3 = (-2625);
      rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, int1, int2, int0, int3);
      rowMajorSparseMatrix1.determinant();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4, 4);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(4, cRSMatrix1.rows());
      assertEquals(4, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(4, cRSMatrix1.rows());
      assertEquals(4, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(4, cRSMatrix2.rows());
      assertEquals(4, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertNotNull(cRSMatrix2);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = new DecimalFormat();
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertNotNull(decimalFormat1);
      
      String string0 = decimalFormat0.getPositivePrefix();
      assertNotSame(decimalFormat0, decimalFormat1);
      assertTrue(decimalFormat0.equals((Object)decimalFormat1));
      assertEquals("", string0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(" in a ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      Matrix matrix0 = Matrix.from1DArray(10, 10, doubleArray0);
      assertArrayEquals(new double[] {10.0, 10.0, 10.0, 10.0, 10.0}, doubleArray0, 0.01);
      assertEquals(10, matrix0.columns());
      assertEquals(10, matrix0.rows());
      assertNotNull(matrix0);
      
      int int0 = (-1954);
      String string0 = "Wrong matrix dimensions: ";
      // Undeclared exception!
      try { 
        matrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.slice(0, 0, 10, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      DenseVector denseVector0 = DenseVector.zero(1096);
      assertEquals(1096, denseVector0.length());
      assertNotNull(denseVector0);
      
      SparseVector sparseVector0 = SparseVector.zero(1096, 1096);
      assertEquals(1096, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
      assertEquals(1096, denseVector0.length());
      assertEquals(1096, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1096, vector0.length());
      assertNotNull(vector0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix0.rows());
      assertEquals(9.124087591240876E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1096.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1096, rowMajorSparseMatrix0.columns());
      assertEquals(1096, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      Vector vector1 = vector0.copyOfLength(1096);
      assertNotSame(denseVector0, vector1);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, vector1);
      assertNotSame(vector0, denseVector0);
      assertNotSame(vector1, vector0);
      assertNotSame(vector1, denseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector1.equals((Object)denseVector0));
      assertEquals(1096, denseVector0.length());
      assertEquals(1096, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1096, vector0.length());
      assertEquals(1096, vector1.length());
      assertNotNull(vector1);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      assertSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix0.rows());
      assertEquals(9.124087591240876E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1096.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1096, rowMajorSparseMatrix0.columns());
      assertEquals(1096, rowMajorSparseMatrix0.cardinality());
      assertEquals(1096.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix1.rows());
      assertEquals(9.124087591240876E-4, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(1096, rowMajorSparseMatrix1.cardinality());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(1096, rowMajorSparseMatrix1.columns());
      assertNotNull(rowMajorSparseMatrix1);
      
      int int0 = 13;
      int int1 = 18;
      Matrix matrix0 = rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix1, (-7), 10, 901, 13, 18, 10);
      matrix0.toSparseMatrix();
      rowMajorSparseMatrix1.setColumn(int0, (double) int1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = sparseMatrix0.multiplyByItsTranspose();
      matrix0.norm();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      Matrix matrix1 = sparseMatrix0.multiply((-1737.210019472653));
      matrix0.is(advancedMatrixPredicate0);
      matrix0.diagonalProduct();
      sparseMatrix0.trace();
      sparseMatrix0.toColumnVector();
      Matrix matrix2 = matrix1.add((double) 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix2.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(")=5WMk@R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformColumn(612, vectorFunction0);
      int int0 = 613;
      Matrix matrix1 = matrix0.blankOfShape(613, 0);
      matrix1.rows();
      DenseMatrix denseMatrix1 = DenseMatrix.identity(3700);
      int int1 = 0;
      denseMatrix0.getColumn(618);
      // Undeclared exception!
      try { 
        denseMatrix1.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1000, 67, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply((double) 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(248);
      SparseVector sparseVector0 = SparseVector.zero(248, (-2));
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(248, 248);
      vector0.copyOfLength(248);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 10);
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      matrix0.subtract((Matrix) rowMajorSparseMatrix1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      sparseMatrix0.norm();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.is(advancedMatrixPredicate0);
      sparseMatrix0.trace();
      Matrix matrix0 = sparseMatrix0.sliceTopLeft(0, 0);
      matrix0.determinant();
      Matrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 10;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 10);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 10;
      doubleArray0[0] = doubleArray1;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      SparseVector sparseVector0 = SparseVector.zero(10, (-1127));
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        sparseMatrix0.setRow(10, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 10.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 257;
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(257);
      SparseVector sparseVector0 = SparseVector.zero(257, (-2));
      ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3143, 10, 257);
      // Undeclared exception!
      cRSMatrix0.power(13);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 1096;
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1096);
      SparseVector sparseVector0 = SparseVector.zero(1096, 1096);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      vector0.copyOfLength(1096);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix1, 6041, 1059, 1059, 1096, 290, 1096);
      int int1 = 3846;
      int int2 = 3959;
      int int3 = 3260;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int1, int2, int3);
      rowMajorSparseMatrix1.power(int0);
      cRSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.constant((-980), (-980), (-1.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector.zero(1096, (-2));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.iteratorOfColumn((-2558));
      rowMajorSparseMatrix1.subtract((double) (-2));
      rowMajorSparseMatrix1.swapRows((-2), (-2));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1096);
      SparseVector sparseVector0 = SparseVector.zero(1096, (-2));
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      vector0.copyOfLength(1096);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.trace();
      int[] intArray0 = new int[1];
      Matrix matrix0 = cRSMatrix0.blank();
      matrix0.power(13);
      matrix0.rows();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1096;
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector.zero(1096, 1096);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      int int1 = 18;
      int int2 = Integer.MAX_VALUE;
      rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 9, Integer.MAX_VALUE, 9, 1096);
      int int3 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int3, int1);
      Integer integer0 = new Integer(int2);
      String string0 = "q)(R|@/.kzGv%^@Ln}d";
      int int4 = 4142;
      int int5 = 6;
      Matrix.constant(int4, int5, int2);
      Matrix matrix0 = Matrix.fromCSV(string0);
      matrix0.removeColumn(int0);
      rowMajorSparseMatrix1.add((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1096;
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1096);
      int int1 = (-2);
      SparseVector sparseVector0 = SparseVector.zero(1096, (-2));
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      vector0.copyOfLength(1096);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix1.toColumnMajorSparseMatrix();
      double double0 = (-1225.0);
      columnMajorSparseMatrix0.add(double0);
      rowMajorSparseMatrix1.iteratorOfColumn(int0);
      int int2 = 1881;
      CRSMatrix.zero(int2, int1);
      rowMajorSparseMatrix0.kroneckerProduct(rowMajorSparseMatrix1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1, 1);
      Matrix matrix0 = rowMajorSparseMatrix0.slice((-8), 33, (-8), 2103);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 33);
      matrix0.minInColumn(33);
      mockRandom0.doubles();
      Matrix matrix1 = matrix0.slice((-3263), 2103, 1, 2103);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.each(matrixProcedure0);
      rowMajorSparseMatrix0.toCSV(numberFormat0);
      matrix0.manhattanNorm();
      CRSMatrix.zero(1523, 9);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.nonZeroIterator();
      matrix1.shuffle();
      cRSMatrix0.subtract(matrix1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(7, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(27, 919);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(919, (-2386));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 920
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(1, vectorProcedure0);
      Integer integer0 = new Integer(0);
      int int0 = 6;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Matrix matrix0 = Matrix.from1DArray(0, 6, doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cRSMatrix1.rank();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(0, 1.0);
      cRSMatrix2.shuffle();
      // Undeclared exception!
      try { 
        Basic2DMatrix.identity((-3652));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int0 = (-1602);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cRSMatrix0.toCSV(numberFormat0);
      DecimalFormat decimalFormat0 = new DecimalFormat("kxtpI{Cr/ca");
      cRSMatrix0.iterator();
      // Undeclared exception!
      try { 
        Vector.fromCSV("`DZ%*d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector.zero(226);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(226);
      Matrix.random(3, 3, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      int int0 = (-1789569705);
      int int1 = 101;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 13, 101, 10, 1069);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 13, 101
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(257, 257);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(257, 257, 10);
      rowMajorSparseMatrix0.toSparseMatrix();
      cRSMatrix0.setColumn(257, 0.964);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector.zero(257);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(257, 257);
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      Integer integer0 = new Integer((-18));
      matrix0.setAll(10);
      int int0 = 1241;
      Matrix.unit(int0, int0);
      int int1 = 2842;
      matrix0.iteratorOfColumn(int1);
      matrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector.zero(257);
      RowMajorSparseMatrix.diagonal(839, 257);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(839);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transformRow(28, vectorFunction0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix(3, (-640));
      cRSMatrix1.removeFirstRow();
      String string0 = "/7s*'%hTT1\"-lPU";
      DenseMatrix.fromCSV(string0);
      rowMajorSparseMatrix0.subtract(matrix0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      Matrix matrix0 = cCSMatrix0.multiply((-3775.849));
      Matrix matrix1 = matrix0.shuffle();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix2 = Matrix.randomSymmetric(3, mockRandom0);
      matrix0.toBinary();
      matrix2.toCSV();
      Matrix.fromCSV("0.000, 0.100, 0.200\n0.100, 0.300, 0.400\n0.200, 0.400, 0.500\n");
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, (-1562), 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1562x9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.determinant();
      cRSMatrix0.rank();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cRSMatrix0.toCSV(numberFormat0);
      DecimalFormat decimalFormat0 = new DecimalFormat("0\n");
      cRSMatrix0.iterator();
      Vector.fromCSV("0\n");
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom((-2271L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(9, mockRandom0);
      basic2DMatrix0.subtract(0.75);
      basic2DMatrix0.kroneckerProduct(cRSMatrix0);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        Matrix.fromCSV("Out of bounds: Cannot add ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateAt((-3746), 309, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(20);
      int int0 = 10;
      denseMatrix0.setRow(10, 1.0);
      int int1 = 761;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateAt(761, 2852, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 3152;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(3152, mockRandom0);
      denseVector0.divide((-2997.9));
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.setRow(3152, (double) 3152);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 10);
      Integer integer0 = new Integer(10);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        cRSMatrix0.get((-41), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-41' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 10;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 10, 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      decimalFormat1.getDecimalFormatSymbols();
      Matrix matrix0 = cRSMatrix0.transpose();
      matrix0.getRow(1);
      matrix0.toBinary();
      cRSMatrix0.removeRow(1);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(24);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(24, (double) integer0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(24, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.identity(9);
      matrix0.setColumn(5, 0.5);
      matrix0.swapRows((-281), (-281));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blank();
      // Undeclared exception!
      try { 
        matrix0.power((-1478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1478.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 1096;
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1096);
      SparseVector sparseVector0 = SparseVector.zero(1096, 1096);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      vector0.copyOfLength(1096);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1096);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      int int1 = 2480;
      // Undeclared exception!
      try { 
        cRSMatrix0.slice(901, 1096, 10, (-1416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [901..10][1096..-1416].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(257);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(257, 257);
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      matrix0.multiply((Vector) denseVector0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(257, 257, 10);
      rowMajorSparseMatrix0.toSparseMatrix();
      cRSMatrix0.setColumn((-2), 0.964);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = sparseMatrix0.multiplyByItsTranspose();
      matrix0.norm();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      Matrix matrix1 = sparseMatrix0.multiply((-1737.210019472653));
      matrix0.is(advancedMatrixPredicate0);
      Integer integer0 = new Integer(0);
      sparseMatrix0.trace();
      Vector vector0 = sparseMatrix0.toColumnVector();
      Matrix matrix2 = matrix0.add(0.0);
      matrix2.subtract(7.098534644071841E-11);
      matrix2.blankOfColumns(0);
      matrix1.setRow(0, vector0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = sparseMatrix0.multiplyByItsTranspose();
      matrix0.norm();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      matrix0.is(advancedMatrixPredicate0);
      matrix0.diagonalProduct();
      sparseMatrix0.trace();
      sparseMatrix0.add(1.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldRows(vectorAccumulator0);
      sparseMatrix0.toCSV((NumberFormat) null);
      int int0 = (-1969);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn((-1969));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RowMajorSparseMatrix.zero(1, 1, 1);
      Matrix matrix0 = Matrix.unit(1, 1);
      matrix0.toString();
      Matrix matrix1 = matrix0.multiply((double) 1);
      matrix1.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(14, 14, 14);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector.zero(14);
      RowMajorSparseMatrix.diagonal(14, 0.0);
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      CRSMatrix.zero(10, 10, 1);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      sparseMatrix0.removeColumn(6);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(384, 30, 10);
      cRSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix.identity(3);
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 30);
      cCSMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 226;
      Vector vector0 = Vector.zero(226);
      Matrix matrix0 = vector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(226, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..225
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 10, 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      decimalFormat0.toPattern();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.iterator();
      basic2DMatrix0.infinityNorm();
      cRSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.apply((MatrixOperation<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 257;
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector.zero(257);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(257, 257);
      Matrix matrix0 = cRSMatrix0.multiply((double) 257);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
      matrix0.diagonalProduct();
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate1);
      int int1 = 37;
      int int2 = (-240);
      int int3 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(257, 257, matrixFunction0);
      matrix0.slice(int1, int2, int3, int0);
      Integer integer0 = new Integer(int1);
      double double0 = 1066.3;
      cRSMatrix0.setAll(double0);
      int int4 = 2147483608;
      int int5 = 1930;
      Matrix.unit(int4, int5);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1096;
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1096);
      SparseVector sparseVector0 = SparseVector.zero(1096, 1096);
      ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      int int1 = 10;
      int int2 = 901;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.is(matrixPredicate0);
      Matrix matrix0 = rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix1, 1096, 10, 901, 1096, 901, 10);
      Matrix matrix1 = rowMajorSparseMatrix0.blank();
      matrix0.removeColumn(int2);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      rowMajorSparseMatrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      rowMajorSparseMatrix0.columnMajorIterator();
      int int3 = 7;
      matrix1.swapRows(int0, int3);
      matrix0.multiply((double) int1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1096;
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(1096);
      SparseVector sparseVector0 = SparseVector.zero(1096, 1096);
      ooPlaceVectorsAddition0.apply(sparseVector0, denseVector0);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1096, 1096);
      vector0.copyOfLength(1096);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      int int1 = 17;
      int int2 = 10;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1096, 10);
      Matrix matrix0 = rowMajorSparseMatrix0.add((Matrix) rowMajorSparseMatrix1);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ooPlaceKroneckerProduct0.applyCommon(sparseMatrix0, matrix0);
      matrix0.removeColumn(int2);
      rowMajorSparseMatrix1.setColumn(int1, (double) int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero((-5243), 22);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.zero(3, 3);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(3);
      Locale locale0 = Locale.KOREA;
      cRSMatrix1.equals((Matrix) cRSMatrix0, 7.098534644071841E-11);
      cRSMatrix0.iterator();
      cRSMatrix1.toCSV();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      sparseMatrix0.is(advancedMatrixPredicate0);
      sparseMatrix0.diagonalProduct();
      sparseMatrix0.trace();
      Matrix matrix0 = sparseMatrix0.add(1.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      String string0 = "{{Unf`=i9F^IOT";
      matrix0.diagonalProduct();
      matrix0.setColumn(98, (double) 98);
      // Undeclared exception!
      try { 
        SparseVector.zero((-390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -390
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 2728;
      Matrix matrix0 = Matrix.zero(2728, 2728);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1139, (-581), 1186.22, (Random) mockRandom0);
      Vector vector0 = cCSMatrix0.getColumn(int0);
      matrix0.multiply(vector0);
      int int1 = 2070;
      matrix0.copyOfRows(int1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 10;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 10);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      basic2DMatrix0.max();
      ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, (DenseMatrix) basic2DMatrix0);
      Matrix.fromCSV("     ");
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("     ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(257);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(257, 257);
      int int0 = 10;
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      int int1 = 35;
      int int2 = 27;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(27, 27, 35);
      int int3 = 2650;
      cRSMatrix0.non(matrixPredicate0);
      MockRandom mockRandom0 = new MockRandom(257);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.random(257, 35, (double) 27, (Random) mockRandom0);
      double double0 = 0.0;
      rowMajorSparseMatrix0.subtract(double0);
      Matrix matrix1 = denseVector0.toDiagonalMatrix();
      int int4 = (-272);
      rowMajorSparseMatrix1.insert(matrix1, int1, int1, int3, int1, int4, int2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldColumn(int0, vectorAccumulator0);
      Vector vector0 = matrix0.toRowVector();
      rowMajorSparseMatrix0.blank();
      cRSMatrix0.manhattanNorm();
      int int5 = 6;
      SparseMatrix.identity(int5);
      String string0 = "31YH";
      Matrix.fromCSV(string0);
      vector0.divide(int0);
      matrix1.insertColumn(int3, denseVector0);
      double double1 = Double.POSITIVE_INFINITY;
      rowMajorSparseMatrix0.subtract(double1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.identity(0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transform(matrixFunction0);
      int int0 = (-2031);
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) cRSMatrix2, 1329, (-2031), 0, (-3110));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-3110
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(14, 14, 14);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix(10, 10);
      CRSMatrix cRSMatrix2 = new CRSMatrix(10, 14, 14);
      CRSMatrix.zero(14, 37, 14);
      CRSMatrix.zero(1654, 14);
      CRSMatrix.identity(0);
      cRSMatrix1.equals((Matrix) rowMajorSparseMatrix0, (double) 14);
      cRSMatrix0.iterator();
      // Undeclared exception!
      try { 
        cRSMatrix1.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 226;
      Vector vector0 = Vector.zero(226);
      Matrix matrix0 = vector0.toDiagonalMatrix();
      // Undeclared exception!
      matrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      sparseMatrix0.norm();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.is(advancedMatrixPredicate0);
      sparseMatrix0.diagonalProduct();
      sparseMatrix0.trace();
      Matrix matrix0 = sparseMatrix0.sliceTopLeft(0, 0);
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 14;
      RowMajorSparseMatrix.zero(14, 14, 14);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(14);
      int int1 = 10;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-73.75028785031137), (-2218.362), (double)10, (double)10, (-2218.362)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(14);
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn(14, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Integer integer0 = new Integer(0);
      cRSMatrix0.trace();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      cRSMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.trace();
      Basic2DMatrix.unit(8, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 3;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      cRSMatrix0.determinant();
      int int1 = new Integer(3);
      Vector vector0 = Vector.zero(2436);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(3, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 9;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      decimalFormat0.getDecimalFormatSymbols();
      CRSMatrix cRSMatrix0 = new CRSMatrix(9, 9);
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("Ph34es6WN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt((-2773), (-1869), matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2773
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1;
      RowMajorSparseMatrix.zero(1, 1, 1);
      Matrix matrix0 = Matrix.unit(1, 1);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixOperation0);
      // Undeclared exception!
      try { 
        matrix0.copyOfRows((-208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -208x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.determinant();
      cRSMatrix0.rank();
      Vector vector0 = Vector.zero(12);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(1, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2901.04575646);
      doubleArray1[1] = 18.0;
      doubleArray1[2] = 2672.4636886277326;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 862.265051461;
      doubleArray1[5] = 735.0;
      doubleArray1[6] = (-966.0);
      doubleArray1[7] = (-966.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Object object0 = new Object();
      cRSMatrix0.equals(object0);
      int[] intArray0 = new int[5];
      cRSMatrix0.rank();
      intArray0[0] = (-834);
      intArray0[1] = (-2021161079);
      intArray0[2] = 3043;
      intArray0[3] = 37;
      intArray0[4] = 17;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-834' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 16);
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.determinant();
      int int0 = new Integer(1);
      int int1 = 2433;
      Vector vector0 = Vector.zero(12);
      int int2 = (-549);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow((-549), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      cRSMatrix0.determinant();
      int int0 = NumberFormat.INTEGER_FIELD;
      int int1 = 2441;
      Vector vector0 = Vector.zero(2441);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2441. Should be: 3.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 10;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 10);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      sparseMatrix0.divide(8.992806499463768E-13);
      int int1 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(1, vectorProcedure0);
      Integer integer0 = new Integer(1);
      sparseMatrix0.trace();
      int int2 = (-1136);
      int int3 = (-5762);
      // Undeclared exception!
      try { 
        Basic2DMatrix.unit((-1136), (-5762));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 10);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn((-2), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(10, 10);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 10;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 10);
      int int1 = 2;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.update(matrixFunction0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      CCSMatrix.diagonal(2, (-1724.65));
      Matrix matrix0 = sparseMatrix0.insertColumn(2, (Vector) null);
      int int2 = (-568);
      org.evosuite.runtime.Random.setNextRandom(int2);
      int int3 = 2759;
      double double0 = 7.098534644071841E-11;
      CRSMatrix.diagonal(int3, double0);
      String string0 = "S'G}}}oE5!=DUo_";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      Matrix matrix1 = basic2DMatrix0.hadamardProduct(sparseMatrix0);
      matrix1.removeRow(int3);
      CRSMatrix.identity(int1);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int1, int0, mockRandom0);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.apply(matrixOperation0);
      basic2DMatrix0.trace();
      matrix0.subtract(matrix1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(11, 11, 11);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(11);
      cRSMatrix1.equals((Matrix) cRSMatrix0, 7.098534644071841E-11);
      cRSMatrix0.iterator();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cRSMatrix0.toMatrixMarket(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix.zero(3, 3, 3);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3, 3);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(3);
      MatrixOperation<DenseMatrix> matrixOperation0 = (MatrixOperation<DenseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix1.apply(matrixOperation0);
      Locale locale0 = Locale.TAIWAN;
      cRSMatrix0.equals((Matrix) cRSMatrix1, (double) 3);
      cRSMatrix0.iterator();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      cRSMatrix0.determinant();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[10];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 51;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix.zero(10, 10);
      DenseVector denseVector0 = DenseVector.unit(2);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rotate();
      matrix0.rowMajorIterator();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      MockRandom mockRandom0 = new MockRandom(1985L);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("/7s*'%hTT1\"-lPU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (-19.46535186);
      doubleArray0[3] = (double) 10;
      Matrix matrix0 = Matrix.from1DArray(10, 70, doubleArray0);
      Integer integer0 = new Integer(70);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      matrix0.blankOfRows(1017);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(10, 70);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(486, 10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(10, vectorFunction0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-5);
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      Matrix matrix0 = cRSMatrix0.blank();
      Matrix matrix1 = cRSMatrix0.insert(matrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix0.add((-966.0));
      MockRandom mockRandom0 = new MockRandom();
      int int1 = (-1151);
      // Undeclared exception!
      try { 
        matrix1.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 10;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 10);
      Integer integer0 = new Integer(10);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Double double0 = new Double(10);
      Double.max(0.75, 266.9648352182359);
      cRSMatrix0.equals((Object) integer0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(14, 14, 14);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(14, 14, 1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      cRSMatrix0.equals((Object) rowMajorSparseMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      rowMajorSparseMatrix0.determinant();
      Integer integer0 = new Integer(14);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-3622));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      cRSMatrix0.determinant();
      Locale locale0 = Locale.forLanguageTag("column-major");
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.mkString(numberFormat0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale1 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("Wrong length of RHS vector: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(14);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 2.0, 2.0, (double)14, (-174.0530812768293)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1602);
      doubleArray1[1] = 2.0;
      doubleArray1[2] = (double) (-1602);
      doubleArray1[3] = (double) (-1602);
      doubleArray1[4] = 4477.252618;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      cRSMatrix0.trace();
      cRSMatrix0.determinant();
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.iteratorOfColumn(10);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.foldColumn((-1980), vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1980' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 14;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(14, 14, 14);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(10, 14, 14);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix1.toCSV((NumberFormat) decimalFormat0);
      decimalFormat0.clone();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(14, 0);
      basic2DMatrix0.kroneckerProduct(rowMajorSparseMatrix0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (DenseMatrix) basic2DMatrix0);
      Matrix.fromCSV("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n");
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("hc!n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(14, 14, 14);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      Matrix matrix0 = rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 10, 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) 10;
      Matrix.from1DArray(1, 1, doubleArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      cRSMatrix0.equals((Object) matrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      matrix0.determinant();
      double double0 = new Integer(10);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(63, (-966.5923969416997));
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom((-1053L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(8, mockRandom0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(4.9E-324).when(matrixAccumulator0).accumulate();
      basic2DMatrix0.fold(matrixAccumulator0);
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 1;
      intArray0[3] = 10;
      intArray0[4] = 8;
      intArray0[5] = 1;
      intArray0[6] = 1;
      denseMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(18);
      Vector vector0 = Vector.zero(18);
      MockRandom mockRandom0 = new MockRandom(18);
      mockRandom0.longs((long) 18, (long) 18, 698L);
      Vector.random(18, mockRandom0);
      sparseMatrix0.insertRow(12, vector0);
      int int0 = (-917);
      int int1 = 1000;
      int int2 = (-2040109464);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(18, (-917), (-2040109464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 18x-917
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(18);
      CRSMatrix cRSMatrix0 = new CRSMatrix(18, 18, 18);
      Locale locale0 = Locale.TAIWAN;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(913);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, columnMajorSparseMatrix0);
      sparseMatrix0.equals(matrix0, (double) 18);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.determinant();
      cRSMatrix0.rank();
      int int0 = 1;
      int int1 = 3311;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1);
      cRSMatrix1.equals((Object) null);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      String string0 = "5&80}@1d.9_Hje";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("5&80}@1d.9_Hje");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 14;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(14);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 0.0, 2.0, (double)14, (-174.0530812768293)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      decimalFormat0.clone();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      Matrix.fromCSV(string0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }
}
