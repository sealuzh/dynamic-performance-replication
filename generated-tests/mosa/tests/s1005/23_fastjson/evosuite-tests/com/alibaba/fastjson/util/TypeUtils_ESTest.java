/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:34:31 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("j", "hM{p}s");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues(0L, biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      TypeUtils.isGenericParamType(class0);
      Class<Dimension> class1 = Dimension.class;
      Dimension dimension0 = TypeUtils.castToJavaBean((Object) concurrentHashMap0, class1);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TypeUtils.isHibernateInitialized(mockMinguoDate0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@a27d31
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Dimension> class1 = Dimension.class;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(stackTraceElementDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.subMap("", true, "gJASWLI<$Iks|UCU`\"J", true);
      treeMap0.entrySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, propertyNamingStrategy0);
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("5x[3S5[??");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("5x[3S5[??", "5x[3S5[??");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues((-1714L), biFunction0);
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Class<Dimension> class1 = Dimension.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) decimalFormat0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getGenericParamType(class0);
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("%|wIjDz#F");
      LinkedHashMap<IllegalAccessException, SimpleDateFormat> linkedHashMap0 = new LinkedHashMap<IllegalAccessException, SimpleDateFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      Boolean boolean0 = new Boolean("y");
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Date> class0 = Date.class;
      TypeUtils.isProxy(class0);
      Class<VerifyError> class1 = VerifyError.class;
      TypeUtils.isKotlin(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("hM{p}s", "hM{p}s");
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("dd-MM-yyyy");
      TypeUtils.castToTimestamp((Object) null);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put(">9m2#BrekZv\"I:__ ", ">9m2#BrekZv\"I:__ ");
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(identityHashMap0);
      jSONObject0.getJSONObject(">9m2#BrekZv\"I:__ ");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, parserConfig0);
      Byte byte0 = new Byte((byte)9);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put(">9m2#BrekZv\"I:__ ", ">9m2#BrekZv\"I:__ ");
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Class<Calendar> class1 = Calendar.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Dimension> class2 = Dimension.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLException sQLException0 = new SQLException(">9m2#BrekZv\"I:__ ", ">9m2#BrekZv\"I:__ ", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLException0);
      Properties properties0 = new Properties();
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) properties0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, (ParserConfig) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      Class<Double> class1 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("&^JcrCAp&4o");
      assertEquals(6560400421181969591L, long0);
      
      Class<Date> class0 = Date.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<VerifyError> class1 = VerifyError.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeUtils.clearClassMapping();
      WeakHashMap<RenderingHints.Key, SQLClientInfoException> weakHashMap0 = new WeakHashMap<RenderingHints.Key, SQLClientInfoException>();
      assertNotNull(weakHashMap0);
      
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap0);
      assertNotNull(renderingHints0);
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNotNull(noSuchMethodError0);
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = TypeUtils.toLocale(" p{gmvrV8<nR2");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals(" p{gmvrv8<nr2", locale0.toString());
      assertEquals(" p{gmvrv8<nr2", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, false);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeUtils.clearClassMapping();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<JSONObject> class0 = JSONObject.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("Qv_f.\u0005Pw$", "is");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(1, treeMap0.size());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      long long0 = concurrentHashMap0.reduceKeysToLong(1L, toLongFunction0, 1L, longBinaryOperator0);
      assertEquals(1L, long0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Dimension> class1 = Dimension.class;
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.awt.Dimension", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#Brh2kv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Dimension> class1 = Dimension.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) classLoader1, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("&^JcrCAp&4o");
      assertEquals(6560400421181969591L, long0);
      
      Class<Date> class0 = Date.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("writeDouble", classLoader0);
      assertNull(class1);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Class<IllegalAccessError> class2 = IllegalAccessError.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) treeMap0, true);
      assertNotNull(list0);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("5x[3S5[??");
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException: 5x[3S5[??", noSuchFieldException0.toString());
      assertEquals("5x[3S5[??", noSuchFieldException0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("&^JcrCAp&4o");
      assertEquals(6560400421181969591L, long0);
      
      Class<Date> class0 = Date.class;
      MockThread mockThread0 = new MockThread("&^JcrCAp&4o");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.util.Date", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.util.Date", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      Class<Float> class3 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class2, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("o", "ErT.yY", 97);
      assertNotNull(sQLRecoverableException0);
      assertEquals("o", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: o", sQLRecoverableException0.toString());
      assertEquals(97, sQLRecoverableException0.getErrorCode());
      assertEquals("ErT.yY", sQLRecoverableException0.getSQLState());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sQLRecoverableException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.sq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "\"Jnp#=qpX^D4'a/";
      String string1 = TypeUtils.decapitalize("\"Jnp#=qpX^D4'a/");
      assertEquals("\"Jnp#=qpX^D4'a/", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("\"Jnp#=qpX^D4'a/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : \"Jnp#=qpX^D4'a/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      long long0 = TypeUtils.fnv1a_64("u");
      assertEquals((-5808543679014371088L), long0);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<VerifyError> class1 = VerifyError.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("getEndInclusive");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getEndInclusive
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError(";Ljava/lang/String;Ljava/lang/Object;)V");
      assertNotNull(stackOverflowError0);
      assertEquals("java.lang.StackOverflowError: ;Ljava/lang/String;Ljava/lang/Object;)V", stackOverflowError0.toString());
      assertEquals(";Ljava/lang/String;Ljava/lang/Object;)V", stackOverflowError0.getMessage());
      
      stackOverflowError0.printStackTrace();
      assertEquals("java.lang.StackOverflowError: ;Ljava/lang/String;Ljava/lang/Object;)V", stackOverflowError0.toString());
      assertEquals(";Ljava/lang/String;Ljava/lang/Object;)V", stackOverflowError0.getMessage());
      
      Class<java.sql.Date> class0 = java.sql.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) stackOverflowError0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StackOverflowError: ;Ljava/lang/String;Ljava/lang/Object;)V
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("isgetStackTrace");
      assertNull(class0);
      
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject(identityHashMap0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.getJSONObject("isgetStackTrace");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(jSONObject1);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Byte byte0 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("isgetStackTrace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : isgetStackTrace
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("NaN");
      assertNotNull(threadGroup0);
      assertEquals("NaN", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "NaN");
      assertNotNull(threadGroup1);
      assertEquals("NaN", threadGroup0.getName());
      assertEquals("NaN", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "");
      assertNotNull(mockThread0);
      assertEquals("NaN", threadGroup0.getName());
      assertEquals("NaN", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotNull(classLoader0);
      assertEquals("NaN", threadGroup0.getName());
      assertEquals("NaN", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Class<?> class0 = TypeUtils.loadClass("NaN", classLoader0, true);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNull(class0);
      assertEquals("NaN", threadGroup0.getName());
      assertEquals("NaN", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("-'i");
      assertNull(class0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("-'i", "8gT%[!c|`J%w[2:");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("8gT%[!c|`J%w[2:", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("-'i", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: -'i", sQLNonTransientConnectionException0.toString());
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      Type type0 = TypeUtils.getGenericParamType(typeArray0[0]);
      assertNull(type0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type1 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type1);
      assertSame(type1, parameterizedTypeImpl0);
      assertNotNull(type1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type2 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type2);
      
      Float float0 = TypeUtils.castToFloat(type0);
      assertNull(float0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      long long0 = TypeUtils.fnv1a_64("u");
      assertEquals((-5808543679014371088L), long0);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      
      Class<GridBagConstraints> class2 = GridBagConstraints.class;
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.GridBagConstraints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      String string0 = "dY=JMG|";
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string1 = "getgetInfinity";
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      String string2 = ") r]Q%g";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, ") r]Q%g", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      String string0 = "hM{p}s";
      String string1 = concurrentHashMap0.put("j", "hM{p}s");
      assertNull(string1);
      assertFalse(concurrentHashMap0.isEmpty());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<VerifyError> class1 = VerifyError.class;
      Class<DataTruncation> class2 = DataTruncation.class;
      boolean boolean1 = TypeUtils.isKotlin(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean2 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean2);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-113);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class0 = TypeUtils.loadClass("-TkX\"", classLoader0, true);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Long long0 = new Long((byte) (-113));
      assertEquals((-113L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-113.0F), (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('6');
      assertFalse(boolean0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("46.'");
      assertNull(class0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Class<Calendar> class1 = Calendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      DataTruncation dataTruncation0 = new DataTruncation((-597), true, false, (-481), 9);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      InternalError internalError0 = new InternalError((String) null, dataTruncation0);
      assertNotNull(internalError0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      
      AbstractMap.SimpleImmutableEntry<String, InternalError> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, InternalError>("46.'", internalError0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      
      String string0 = TypeUtils.castToString(abstractMap_SimpleEntry0);
      assertNotNull(string0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "java.util.AbstractMap$SimpleEntry@0000000001", (-481));
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals((-481), sQLTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
      
      long long0 = TypeUtils.fnv1a_64_lower("java.time.java.awt.Dimension");
      assertEquals(1748570513283070846L, long0);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Qv_f.\u0005Pw$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Qv_f.\u0005Pw$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("isgetStackTrace");
      assertNull(class0);
      
      Insets insets0 = new Insets(1024, 26, 90, 26);
      assertEquals(90, insets0.bottom);
      assertEquals(26, insets0.right);
      assertEquals(1024, insets0.top);
      assertEquals(26, insets0.left);
      assertNotNull(insets0);
      
      Class<?> class1 = TypeUtils.loadClass("N");
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap1);
      assertTrue(concurrentHashMap1.isEmpty());
      assertTrue(concurrentHashMap1.equals((Object)concurrentHashMap0));
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalArgumentException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      assertNotNull(indexOutOfBoundsException0);
      assertNull(indexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.IndexOutOfBoundsException", indexOutOfBoundsException0.toString());
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("c", false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.setDefaultClassLoader(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) indexOutOfBoundsException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      ArrayList<Calendar> arrayList0 = new ArrayList<Calendar>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      JSONArray jSONArray0 = (JSONArray)JSON.toJSON((Object) arrayList0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONArray0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(">9m2#BrekZv\"I:__ ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = Character.isSurrogate('6');
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("46.'");
      assertNull(class0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      JSONObject jSONObject0 = new JSONObject(4093);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string0 = TypeUtils.decapitalize(".000000");
      assertEquals(".000000", string0);
      assertNotNull(string0);
      
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      assertNotNull(treeSet0);
      
      AtomicLong atomicLong0 = new AtomicLong(1502845958873959152L);
      assertNotNull(atomicLong0);
      assertEquals("1502845958873959152", atomicLong0.toString());
      assertEquals(1.50284595887395917E18, atomicLong0.doubleValue(), 0.01);
      assertEquals(1502845958873959152L, atomicLong0.get());
      assertEquals((byte) (-16), atomicLong0.byteValue());
      assertEquals(1502845958873959152L, atomicLong0.longValue());
      assertEquals((short)19184, atomicLong0.shortValue());
      assertEquals(1.50284589E18F, atomicLong0.floatValue(), 0.01F);
      assertEquals((-355448080), atomicLong0.intValue());
      
      java.sql.Date date0 = TypeUtils.castToSqlDate(atomicLong0);
      assertNotNull(date0);
      assertEquals("1502845958873959152", atomicLong0.toString());
      assertEquals(1.50284595887395917E18, atomicLong0.doubleValue(), 0.01);
      assertEquals(1502845958873959152L, atomicLong0.get());
      assertEquals((byte) (-16), atomicLong0.byteValue());
      assertEquals(1502845958873959152L, atomicLong0.longValue());
      assertEquals((short)19184, atomicLong0.shortValue());
      assertEquals(1.50284589E18F, atomicLong0.floatValue(), 0.01F);
      assertEquals((-355448080), atomicLong0.intValue());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TypeUtils.clearClassMapping();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
      
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Class<BigDecimal> class0 = BigDecimal.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) zoneInfo0, class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateFormatSymbols dateFormatSymbols0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, (ParserConfig) null);
      assertNotNull(dateFormatSymbols0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("Z");
      assertNotNull(noClassDefFoundError0);
      assertEquals("Z", noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError: Z", noClassDefFoundError0.toString());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Locale locale0 = TypeUtils.toLocale(".000000");
      assertNotNull(locale0);
      assertEquals(".000000", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".000000", locale0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(noClassDefFoundError0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("Z", noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError: Z", noClassDefFoundError0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.lang.NoClassDefFoundError: Z", sQLTransientConnectionException0.toString());
      assertEquals("java.lang.NoClassDefFoundError: Z", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = ">9m2#BrekZv\"I:__ ";
      boolean boolean0 = TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("S");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      Class<MapDeserializer> class2 = MapDeserializer.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", concurrentHashMap0);
      assertNull(field0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      FieldInfo fieldInfo0 = new FieldInfo("=/nuFh2", class1, class2, class2, (Field) null, (-255), (-255), (-1218));
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-1218), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-255), fieldInfo0.serialzeFeatures);
      assertNotNull(fieldInfo0);
      assertEquals("=/nuFh2", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-1218), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-255), fieldInfo0.serialzeFeatures);
      assertNotNull(beanContext0);
      assertEquals("=/nuFh2", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNull(beanContext0.getFormat());
      assertEquals("=/nuFh2", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals((-255), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      
      Method method0 = beanContext0.getMethod();
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-1218), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-255), fieldInfo0.serialzeFeatures);
      assertNull(method0);
      assertEquals("=/nuFh2", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNull(beanContext0.getFormat());
      assertEquals("=/nuFh2", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals((-255), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNotNull(noSuchFieldException0);
      assertNull(noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      assertTrue(treeMap1.equals((Object)treeMap0));
      
      String string0 = treeMap1.put("AlC>`KFpZ", ", fieldName : ");
      assertNotSame(treeMap1, treeMap0);
      assertNull(string0);
      assertEquals(1, treeMap1.size());
      assertFalse(treeMap1.equals((Object)treeMap0));
      
      String string1 = treeMap1.put(".000000000", ".000000000");
      assertNotSame(treeMap1, treeMap0);
      assertNull(string1);
      assertEquals(2, treeMap1.size());
      assertFalse(treeMap1.equals((Object)treeMap0));
      
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotSame(treeMap0, treeMap1);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
      assertFalse(treeMap0.equals((Object)treeMap1));
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader1.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      classLoader1.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-140));
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("String index out of range: -140", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: -140", stringIndexOutOfBoundsException0.toString());
      
      stringIndexOutOfBoundsException0.printStackTrace();
      assertEquals("String index out of range: -140", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: -140", stringIndexOutOfBoundsException0.toString());
      
      Throwable[] throwableArray0 = stringIndexOutOfBoundsException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("String index out of range: -140", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: -140", stringIndexOutOfBoundsException0.toString());
      
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(">9m2#BrekZv\"I:__ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : >9m2#BrekZv\"I:__ 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      ArrayList<Calendar> arrayList0 = new ArrayList<Calendar>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JSONArray jSONArray0 = (JSONArray)JSON.toJSON((Object) arrayList0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONArray0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, (ParserConfig) null);
      assertSame(class1, class0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      assertNotNull(treeSet0);
      
      TreeMap<Throwable, MockJapaneseDate> treeMap0 = new TreeMap<Throwable, MockJapaneseDate>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float float1 = Float.min(1070.2F, (-1.0F));
      assertEquals((-1.0F), float1, 0.01F);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LmethodName");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertEquals("class java.text.ChoiceFormat", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      
      boolean boolean2 = TypeUtils.isProxy(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("&^JcrCAp&4o");
      assertEquals(6560400421181969591L, long0);
      
      Class<Date> class0 = Date.class;
      MockThread mockThread0 = new MockThread("&^JcrCAp&4o");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("&^JcrCAp&4o", (ClassLoader) aSMClassLoader0, false);
      assertNull(class1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class2, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@43d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("9m2#BrekZv\"I__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus("9m2#BrekZv\"I__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      DataTruncation dataTruncation0 = new DataTruncation((-597), false, true, (-3307), (-3307));
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning("pI(LSGz4ph", "pI(LSGz4ph", (-2697), dataTruncation0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals((-2697), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: pI(LSGz4ph", sQLWarning0.toString());
      assertEquals("pI(LSGz4ph", sQLWarning0.getSQLState());
      assertEquals("pI(LSGz4ph", sQLWarning0.getMessage());
      
      dataTruncation0.setNextWarning(sQLWarning0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals((-2697), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: pI(LSGz4ph", sQLWarning0.toString());
      assertEquals("pI(LSGz4ph", sQLWarning0.getSQLState());
      assertEquals("pI(LSGz4ph", sQLWarning0.getMessage());
      
      InternalError internalError0 = new InternalError((String) null, dataTruncation0);
      assertNotNull(internalError0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      
      String string0 = TypeUtils.castToString("j");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
      
      Class<Point> class0 = Point.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      try { 
        javaBeanSerializer0.getFieldValuesMap("javax.xml.datatype.XMLGregorianCalendar");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      long long0 = TypeUtils.fnv1a_64("Unr%(l|~NFm");
      assertEquals(9051936829523088924L, long0);
      
      Class<Date> class0 = Date.class;
      MockThread mockThread0 = new MockThread(">xZDR=E2G.[AJ4g6y");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("Unr%(l|~NFm", (ClassLoader) aSMClassLoader0, false);
      assertSame(classLoader2, classLoader1);
      assertNull(class1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.util.Date", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class class3 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory2);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory2, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Point point1 = new Point(0, 0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertNotNull(point1);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(point1.equals((Object)point0));
      
      point1.setLocation(point0);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      point1.y = 0;
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      
      point0.setLocation(point1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(point0);
      assertNotSame(point0, point1);
      assertTrue(boolean0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      
      Point point2 = new Point(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertNotNull(point2);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      
      Point point3 = new Point();
      assertEquals(0, point3.x);
      assertEquals(0, point3.y);
      assertNotNull(point3);
      assertEquals(0.0, point3.getY(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertTrue(point3.equals((Object)point2));
      assertTrue(point3.equals((Object)point0));
      assertTrue(point3.equals((Object)point1));
      
      point0.setLocation(point2);
      assertNotSame(point0, point3);
      assertNotSame(point0, point1);
      assertNotSame(point0, point2);
      assertNotSame(point2, point0);
      assertNotSame(point2, point3);
      assertNotSame(point2, point1);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point0.equals((Object)point3));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point3));
      assertTrue(point2.equals((Object)point1));
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      TreeMap<MockMinguoDate, SQLDataException> treeMap0 = new TreeMap<MockMinguoDate, SQLDataException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      assertNotNull(list0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = Character.isSurrogate('6');
      assertFalse(boolean0);
      
      AtomicLong atomicLong0 = new AtomicLong(0);
      assertNotNull(atomicLong0);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      
      Double double0 = TypeUtils.castToDouble(atomicLong0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(parameterizedTypeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      EnumDeserializer enumDeserializer0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(enumDeserializer0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NULL");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      NumberFormatException numberFormatException0 = new NumberFormatException("NULL");
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException: NULL", numberFormatException0.toString());
      assertEquals("NULL", numberFormatException0.getMessage());
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread(thread0, "[F");
      assertNotNull(mockThread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<StackTraceElement> class1 = StackTraceElement.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      Short short1 = TypeUtils.castToShort((Object) null);
      assertNull(short1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      String string0 = concurrentHashMap0.put("hM{p}s", "hM{p}s");
      assertNull(string0);
      assertFalse(concurrentHashMap0.isEmpty());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = concurrentHashMap0.reduceValues(1099511628211L, biFunction0);
      assertEquals("hM{p}s", string1);
      assertNotNull(string1);
      assertFalse(concurrentHashMap0.isEmpty());
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertNotNull(list0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Class<Dimension> class1 = Dimension.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) ">9m2#BrekZv\"I:__ ", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      long long0 = TypeUtils.fnv1a_64("Do+*lR1EsD");
      assertEquals(2021659327051744374L, long0);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      Class<Long> class1 = Long.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]'x[*kf");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: ]'x[*kf", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("]'x[*kf", sQLTransactionRollbackException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#Brh2kv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#Brh2kv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      MockThread mockThread0 = new MockThread(">9m2#Brh2kv\"I:__ ");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader2);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      ClassLoader classLoader3 = classLoader1.getParent();
      assertNull(classLoader3);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass(">9m2#Brh2kv\"I:__ ", (ClassLoader) null, true);
      assertNull(class0);
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[6]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.NoSuchMethodException -> double
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      String string0 = concurrentHashMap0.put("j", "hM{p}s");
      assertNull(string0);
      assertFalse(concurrentHashMap0.isEmpty());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Locale locale0 = TypeUtils.toLocale("hM{p}s");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("hm{p}s", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("hm{p}s", locale0.getLanguage());
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Float float0 = new Float(2212.6999215169);
      assertEquals(2212.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("S5W^L~Y");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("S5W^L~Y");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<HttpCookie> class0 = HttpCookie.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.putIfAbsent("WriteNonStringKeyAsString", "S5W^L~Y");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertEquals(1, treeMap0.size());
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("^l_NUN");
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException: ^l_NUN", noSuchFieldException0.toString());
      assertEquals("^l_NUN", noSuchFieldException0.getMessage());
      
      String string1 = TypeUtils.castToString(noSuchFieldException0);
      assertNotNull(string1);
      assertEquals("java.lang.NoSuchFieldException: ^l_NUN", noSuchFieldException0.toString());
      assertEquals("^l_NUN", noSuchFieldException0.getMessage());
      
      Type[] typeArray0 = new Type[0];
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.net.HttpCookie", class1.toString());
      assertFalse(class1.isAnnotation());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.net.HttpCookie", class1.toString());
      assertFalse(class1.isAnnotation());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedHashMap<BufferCapabilities, SQLIntegrityConstraintViolationException> linkedHashMap0 = new LinkedHashMap<BufferCapabilities, SQLIntegrityConstraintViolationException>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Type[] typeArray0 = new Type[0];
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)123;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)71, (byte)123}, byteArray0);
      assertFalse(boolean0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      NoSuchMethodException noSuchMethodException0 = TypeUtils.cast((Object) linkedHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNull(noSuchMethodException0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      assertNotNull(list0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      
      point0.y = (-56695729);
      assertEquals((-5.6695729E7), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      
      Point point1 = new Point(0, (-56695729));
      assertEquals(0, point1.x);
      assertEquals((-56695729), point1.y);
      assertNotNull(point1);
      assertEquals((-5.6695729E7), point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(point1.equals((Object)point0));
      
      point1.y = (-56695729);
      assertEquals((-5.6695729E7), point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      
      point0.setLocation(point1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.x);
      assertEquals((-56695729), point0.y);
      assertEquals(0, point1.x);
      assertEquals((-56695729), point1.y);
      assertEquals((-5.6695729E7), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals((-5.6695729E7), point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(point0);
      assertNotSame(point0, point1);
      assertTrue(boolean0);
      assertEquals(0, point0.x);
      assertEquals((-56695729), point0.y);
      assertEquals((-5.6695729E7), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertTrue(point0.equals((Object)point1));
      
      Point point2 = new Point(point0);
      assertEquals(0, point0.x);
      assertEquals((-56695729), point0.y);
      assertEquals(0, point2.x);
      assertEquals((-56695729), point2.y);
      assertNotNull(point2);
      assertEquals((-5.6695729E7), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals((-5.6695729E7), point2.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      
      Point point3 = new Point();
      assertEquals(0, point3.y);
      assertEquals(0, point3.x);
      assertNotNull(point3);
      assertEquals(0.0, point3.getX(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertFalse(point3.equals((Object)point1));
      assertFalse(point3.equals((Object)point0));
      assertFalse(point3.equals((Object)point2));
      
      point0.setLocation(point2);
      assertNotSame(point0, point1);
      assertNotSame(point0, point3);
      assertNotSame(point0, point2);
      assertNotSame(point2, point3);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertEquals(0, point0.x);
      assertEquals((-56695729), point0.y);
      assertEquals(0, point2.x);
      assertEquals((-56695729), point2.y);
      assertEquals((-5.6695729E7), point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals((-5.6695729E7), point2.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertFalse(point0.equals((Object)point3));
      assertTrue(point2.equals((Object)point1));
      assertFalse(point2.equals((Object)point3));
      assertTrue(point2.equals((Object)point0));
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      TreeMap<MockMinguoDate, SQLDataException> treeMap0 = new TreeMap<MockMinguoDate, SQLDataException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("YNY");
      assertNotNull(noClassDefFoundError0);
      assertEquals("java.lang.NoClassDefFoundError: YNY", noClassDefFoundError0.toString());
      assertEquals("YNY", noClassDefFoundError0.getMessage());
      
      Locale locale0 = TypeUtils.toLocale(".000000");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals(".000000", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(".000000", locale0.getLanguage());
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[1], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class1);
      assertNull(annotation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$ExtClassLoader@20e2cbe0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      byte[] byteArray0 = TypeUtils.castToBytes("hM{p}s");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-23), (byte) (-2)}, byteArray0);
      assertNotNull(byteArray0);
      
      DataTruncation dataTruncation0 = new DataTruncation(887, false, false, 887, 393216);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(dataTruncation0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#Brh2kv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#Brh2kv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader1.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      classLoader1.setClassAssertionStatus(">9m2#Brh2kv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      SQLWarning sQLWarning0 = new SQLWarning("j", (String) null, 0, (Throwable) null);
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("j", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: j", sQLWarning0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation(114, false, false, 0, 114);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      dataTruncation0.setNextWarning(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals("j", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: j", sQLWarning0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      InstantiationException instantiationException0 = new InstantiationException(">9m2#Brh2kv\"I:__ ");
      assertNotNull(instantiationException0);
      assertEquals(">9m2#Brh2kv\"I:__ ", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: >9m2#Brh2kv\"I:__ ", instantiationException0.toString());
      
      InternalError internalError0 = new InternalError("\"|_#K^)U_", instantiationException0);
      assertNotNull(internalError0);
      assertEquals(">9m2#Brh2kv\"I:__ ", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: >9m2#Brh2kv\"I:__ ", instantiationException0.toString());
      assertEquals("\"|_#K^)U_", internalError0.getMessage());
      assertEquals("java.lang.InternalError: \"|_#K^)U_", internalError0.toString());
      
      AtomicLong atomicLong0 = new AtomicLong();
      assertNotNull(atomicLong0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      long long0 = atomicLong0.getAndAccumulate(114, longBinaryOperator0);
      assertEquals(0L, long0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      
      String string0 = TypeUtils.castToString(atomicLong0);
      assertNotNull(string0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertNotNull(ruleBasedCollator0);
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLException sQLException0 = new SQLException((String) null, (String) null, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = sQLInvalidAuthorizationSpecException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)102;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte) (-99), (byte)119, (byte) (-17), (byte) (-42), (byte) (-127), (byte)102}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = "5x[3S5[??";
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("5x[3S5[??");
      assertNotNull(noSuchFieldException0);
      assertEquals("5x[3S5[??", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: 5x[3S5[??", noSuchFieldException0.toString());
      
      Class<Point> class0 = Point.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Class<StringCharacterIterator> class1 = StringCharacterIterator.class;
      Field[] fieldArray0 = new Field[6];
      Field field0 = ParserConfig.getFieldFromCache("5x[3S5[??", hashtable0);
      assertNull(field0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      fieldArray0[0] = null;
      Class<BreakIterator> class2 = BreakIterator.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, "D", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TypeUtils.clearClassMapping();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNotNull(noSuchFieldException0);
      assertNull(noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      
      Class<JSONObject> class0 = JSONObject.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      Class<?> class1 = TypeUtils.getCollectionItemClass(typeArray0[0]);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      
      Class<?> class2 = TypeUtils.loadClass("A.o,>PO_EsaT");
      assertNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "is", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f428f980
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("5x[3S5[??");
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException: 5x[3S5[??", noSuchFieldException0.toString());
      assertEquals("5x[3S5[??", noSuchFieldException0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("!)hkM");
      assertNotNull(threadGroup0);
      assertEquals("!)hkM", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "L!Mp8VRtc)jF77|F8");
      assertNotNull(threadGroup1);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals("L!Mp8VRtc)jF77|F8", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup0, "java.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(mockThread0);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0);
      assertNotNull(mockThread1);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals("L!Mp8VRtc)jF77|F8", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertNotNull(mockThread2);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals("L!Mp8VRtc)jF77|F8", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      MockThread mockThread3 = new MockThread(mockThread2);
      assertNotNull(mockThread3);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals("L!Mp8VRtc)jF77|F8", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread1));
      
      MockThread mockThread4 = new MockThread(mockThread1);
      assertNotNull(mockThread4);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals("L!Mp8VRtc)jF77|F8", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread4.isInterrupted());
      assertFalse(mockThread4.isDaemon());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread1));
      
      ClassLoader classLoader1 = mockThread4.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread4);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread4, mockThread0);
      assertNotSame(mockThread4, mockThread3);
      assertNotSame(mockThread4, mockThread2);
      assertNotSame(mockThread4, mockThread1);
      assertNotNull(classLoader1);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals("L!Mp8VRtc)jF77|F8", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread4.isInterrupted());
      assertFalse(mockThread4.isDaemon());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ClassLoader classLoader3 = classLoader1.getParent();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread4);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread4, mockThread0);
      assertNotSame(mockThread4, mockThread3);
      assertNotSame(mockThread4, mockThread2);
      assertNotSame(mockThread4, mockThread1);
      assertSame(classLoader3, classLoader2);
      assertSame(classLoader3, classLoader0);
      assertNotNull(classLoader3);
      assertEquals("!)hkM", threadGroup0.getName());
      assertEquals("L!Mp8VRtc)jF77|F8", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread4.isInterrupted());
      assertFalse(mockThread4.isDaemon());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader1));
      
      Class<?> class0 = TypeUtils.loadClass("java.util.concurrent.ConcurrentSkipListMap", classLoader0);
      assertSame(classLoader0, classLoader3);
      assertSame(classLoader0, classLoader2);
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.util.concurrent.ConcurrentSkipListMap", class0.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, treeMap0.size());
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("double", class2.toString());
      assertEquals(1041, class2.getModifiers());
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = ">9m2#BrekZv\"I:__ ";
      boolean boolean0 = TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      classLoader0.clearAssertionStatus();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.clearAssertionStatus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      classLoader0.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(">9m2#BrekZv\"I:__ ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">9m2#BrekZv\"I:__ \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      mockThread0.run();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      classLoader0.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader0.setDefaultAssertionStatus(false);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      MockThread mockThread1 = new MockThread(">9m2#BrekZv\"I:__ ");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      classLoader1.setDefaultAssertionStatus(false);
      assertNotSame(mockThread0, mockThread1);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      classLoader2.setPackageAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader2, classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ClassLoader classLoader3 = classLoader1.getParent();
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader0, classLoader2);
      assertNotNull(classLoader3);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader1));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader3));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass(">9m2#BrekZv\"I:__ ", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader2, classLoader0);
      assertNull(class0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader3));
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockHijrahDate0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(">9m2#Brh2kv\"I:__ ");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus(">9m2#Brh2kv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException(".F!5e;*FLvz.)U!");
      assertNotNull(illegalMonitorStateException0);
      assertEquals(".F!5e;*FLvz.)U!", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: .F!5e;*FLvz.)U!", illegalMonitorStateException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(".F!5e;*FLvz.)U!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : .F!5e;*FLvz.)U!
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNotNull(noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      byte[] byteArray0 = new byte[3];
      NavigableSet<String> navigableSet0 = treeMap0.descendingKeySet();
      assertNotNull(navigableSet0);
      assertEquals(0, treeMap0.size());
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      String string0 = treeMap0.put("charAt", "]'x[*kf");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)25, (byte)25}, byteArray0);
      assertFalse(boolean0);
      
      String string1 = treeMap0.put("PATTERN_HOUR_OF_DAY1", "");
      assertNull(string1);
      assertEquals(2, treeMap0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("country", classLoader0);
      assertNull(class0);
      
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      assertFalse(treeMap1.equals((Object)treeMap0));
      
      Class<Locale> class1 = Locale.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      assertNotSame(treeMap0, treeMap1);
      assertNotNull(list0);
      assertEquals(2, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeMap0.equals((Object)treeMap1));
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertEquals("double", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertTrue(class2.isPrimitive());
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class2);
      assertNotNull(class3);
      assertEquals("double", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertTrue(class2.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      Collection collection0 = TypeUtils.createCollection(class3);
      assertNotNull(collection0);
      assertEquals("double", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertTrue(class2.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<SQLException> class1 = SQLException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, linkedHashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(class1);
      assertNotNull(map0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class2, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Point point0 = new Point(0, 0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Point point1 = new Point(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertNotNull(point1);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(point1.equals((Object)point0));
      
      point0.x = 0;
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Point point2 = new Point();
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertNotNull(point2);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      
      point1.setLocation(point2);
      assertNotSame(point0, point1);
      assertNotSame(point0, point2);
      assertNotSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point0);
      assertNotSame(point2, point1);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, point2.y);
      assertEquals(0, point2.x);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertTrue(point0.equals((Object)point2));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point2));
      assertTrue(point1.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      TreeMap<MockMinguoDate, SQLDataException> treeMap0 = new TreeMap<MockMinguoDate, SQLDataException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(treeMap0);
      assertNull(bigDecimal0);
      assertEquals(0, treeMap0.size());
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = concurrentHashMap0.reduceValues((long) 0, (BiFunction<? super String, ? super String, ? extends String>) biFunction0);
      assertNull(string0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<TimeUnit> class3 = TimeUnit.class;
      List<FieldInfo> list1 = TypeUtils.computeGetters(class3, (Map<String, String>) null);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.equals((Object)list0));
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      
      List<FieldInfo> list2 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      java.sql.Date date0 = jSONObject0.getSqlDate("trim");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNull(date0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Insets insets0 = new Insets(989, (-89072757), 44, 452);
      assertEquals(44, insets0.bottom);
      assertEquals((-89072757), insets0.left);
      assertEquals(452, insets0.right);
      assertEquals(989, insets0.top);
      assertNotNull(insets0);
      
      Class<?> class0 = TypeUtils.loadClass("1.2.46");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "N", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<?> class0 = TypeUtils.loadClass("1!Laa'./");
      assertNull(class0);
      
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      Object object0 = linkedHashMap0.get(javaObjectDeserializer0);
      assertNull(object0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<ClassLoader> class1 = ClassLoader.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Ljava.awt.Point", (Class<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<?> class3 = TypeUtils.getClassFromMapping("Y$4>oSU)\u0006");
      assertNull(class3);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus("Y$4>oSU)\u0006", true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      classLoader0.setPackageAssertionStatus("3", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader0.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.clearAssertionStatus();
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertNotNull(noSuchFieldError0);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      MockDate mockDate0 = new MockDate(128, 128, 664, 119, 119);
      assertNotNull(mockDate0);
      assertEquals("Sat Jun 30 00:59:00 GMT 2040", mockDate0.toString());
      
      Date date0 = TypeUtils.castToDate(mockDate0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotNull(date0);
      assertEquals("Sat Jun 30 00:59:00 GMT 2040", mockDate0.toString());
      assertEquals("Sat Jun 30 00:59:00 GMT 2040", date0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("L!R#9d]$F:M;ASEs=-");
      assertNull(class0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      MockThread mockThread0 = new MockThread(thread0);
      assertNotNull(mockThread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("dzUd:");
      assertNotNull(illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException: dzUd:", illegalMonitorStateException0.toString());
      assertEquals("dzUd:", illegalMonitorStateException0.getMessage());
      
      LinkedHashMap<IllegalAccessException, SimpleDateFormat> linkedHashMap0 = new LinkedHashMap<IllegalAccessException, SimpleDateFormat>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      AtomicLong atomicLong0 = new AtomicLong((-1772L));
      assertNotNull(atomicLong0);
      assertEquals((-1772.0), atomicLong0.doubleValue(), 0.01);
      assertEquals("-1772", atomicLong0.toString());
      assertEquals((short) (-1772), atomicLong0.shortValue());
      assertEquals((-1772L), atomicLong0.get());
      assertEquals((-1772.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1772), atomicLong0.intValue());
      assertEquals((byte)20, atomicLong0.byteValue());
      assertEquals((-1772L), atomicLong0.longValue());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -1772
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      java.sql.Date date0 = jSONObject0.getSqlDate("trim");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(date0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Insets insets0 = new Insets((-3969), 2086, (-1135), 989);
      assertEquals(989, insets0.right);
      assertEquals((-3969), insets0.top);
      assertEquals((-1135), insets0.bottom);
      assertEquals(2086, insets0.left);
      assertNotNull(insets0);
      
      Class<?> class0 = TypeUtils.loadClass("N");
      assertNull(class0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Byte byte0 = new Byte((byte)47);
      assertEquals((byte)47, (byte)byte0);
      assertNotNull(byte0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(byte0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<?> class0 = TypeUtils.loadClass("fastjson.parser.autoTypeAccept");
      assertNull(class0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<SQLException> class1 = SQLException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, linkedHashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(class1);
      assertNotNull(map0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Point point0 = new Point(0, 1305);
      assertEquals(0, point0.x);
      assertEquals(1305, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(1305.0, point0.getY(), 0.01);
      
      Point point1 = new Point(point0);
      assertEquals(0, point0.x);
      assertEquals(1305, point0.y);
      assertEquals(0, point1.x);
      assertEquals(1305, point1.y);
      assertNotNull(point1);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(1305.0, point0.getY(), 0.01);
      assertEquals(1305.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(point1.equals((Object)point0));
      
      point1.setLocation(point0);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.x);
      assertEquals(1305, point0.y);
      assertEquals(0, point1.x);
      assertEquals(1305, point1.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(1305.0, point0.getY(), 0.01);
      assertEquals(1305.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(point1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertTrue(boolean0);
      assertEquals(0, point0.x);
      assertEquals(1305, point0.y);
      assertEquals(0, point1.x);
      assertEquals(1305, point1.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(1305.0, point0.getY(), 0.01);
      assertEquals(1305.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      Point point2 = new Point(point0);
      assertEquals(0, point0.x);
      assertEquals(1305, point0.y);
      assertEquals(0, point2.x);
      assertEquals(1305, point2.y);
      assertNotNull(point2);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(1305.0, point0.getY(), 0.01);
      assertEquals(1305.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      assertTrue(point2.equals((Object)point1));
      
      Point point3 = new Point();
      assertEquals(0, point3.y);
      assertEquals(0, point3.x);
      assertNotNull(point3);
      assertEquals(0.0, point3.getX(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertFalse(point3.equals((Object)point2));
      assertFalse(point3.equals((Object)point0));
      assertFalse(point3.equals((Object)point1));
      
      point2.setLocation(point3);
      assertNotSame(point0, point1);
      assertNotSame(point0, point3);
      assertNotSame(point0, point2);
      assertNotSame(point2, point1);
      assertNotSame(point2, point0);
      assertNotSame(point2, point3);
      assertNotSame(point3, point2);
      assertNotSame(point3, point0);
      assertNotSame(point3, point1);
      assertEquals(0, point0.x);
      assertEquals(1305, point0.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      assertEquals(0, point3.y);
      assertEquals(0, point3.x);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(1305.0, point0.getY(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertEquals(0.0, point3.getY(), 0.01);
      assertFalse(point0.equals((Object)point3));
      assertFalse(point0.equals((Object)point2));
      assertTrue(point0.equals((Object)point1));
      assertFalse(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point3));
      assertFalse(point2.equals((Object)point0));
      assertFalse(point3.equals((Object)point0));
      assertFalse(point3.equals((Object)point1));
      assertTrue(point3.equals((Object)point2));
      
      Class<DecimalFormatSymbols> class2 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap1);
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotSame(linkedHashMap0, linkedHashMap1);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(linkedHashMap0.equals((Object)linkedHashMap1));
      
      TreeMap<MockMinguoDate, SQLDataException> treeMap0 = new TreeMap<MockMinguoDate, SQLDataException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("YNY");
      assertNotNull(noClassDefFoundError0);
      assertEquals("java.lang.NoClassDefFoundError: YNY", noClassDefFoundError0.toString());
      assertEquals("YNY", noClassDefFoundError0.getMessage());
      
      Locale locale0 = TypeUtils.toLocale(".000000");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals(".000000", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".000000", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[5]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(noClassDefFoundError0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.lang.NoClassDefFoundError: YNY", noClassDefFoundError0.toString());
      assertEquals("YNY", noClassDefFoundError0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: java.lang.NoClassDefFoundError: YNY", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.lang.NoClassDefFoundError: YNY", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientConnectionException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLTransientConnectionException -> com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      mockThread0.run();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      classLoader0.setClassAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      MockThread mockThread1 = new MockThread(">9m2#BrekZv\"I:__ ");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader2);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      classLoader2.setPackageAssertionStatus(">9m2#BrekZv\"I:__ ", false);
      assertNotSame(mockThread0, mockThread1);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ClassLoader classLoader3 = classLoader1.getParent();
      assertNull(classLoader3);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass(">9m2#BrekZv\"I:__ ", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      assertNotSame(mockThread0, mockThread1);
      assertNull(class0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      SQLException sQLException0 = TypeUtils.cast((Object) mockHijrahDate0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNull(sQLException0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
      
      TypeUtils.clearClassMapping();
      Class<Timestamp> class1 = Timestamp.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = "";
      Locale locale0 = TypeUtils.toLocale("");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<NumberFormatException> class0 = NumberFormatException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<?> class1 = TypeUtils.loadClass("", classLoader0, false);
      assertNull(class1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      int int0 = 240;
      int int1 = (-3178);
      MockDate mockDate0 = new MockDate(240, 240, 240, 47, (-3178));
      assertNotNull(mockDate0);
      assertEquals("Tue Aug 26 18:02:00 GMT 2160", mockDate0.toString());
      
      JSONArray jSONArray0 = new JSONArray(1809);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Point point1 = new Point(0, 0);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertNotNull(point1);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(point1.equals((Object)point0));
      
      point1.setLocation(point0);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      point1.y = 0;
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      
      point0.setLocation(point1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(point0);
      assertNotSame(point0, point1);
      assertTrue(boolean0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertTrue(point0.equals((Object)point1));
      
      Point point2 = new Point(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      assertNotNull(point2);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      
      Point point3 = new Point();
      assertEquals(0, point3.x);
      assertEquals(0, point3.y);
      assertNotNull(point3);
      assertEquals(0.0, point3.getY(), 0.01);
      assertEquals(0.0, point3.getX(), 0.01);
      assertTrue(point3.equals((Object)point0));
      assertTrue(point3.equals((Object)point2));
      assertTrue(point3.equals((Object)point1));
      
      point0.setLocation(point2);
      assertNotSame(point0, point1);
      assertNotSame(point0, point2);
      assertNotSame(point0, point3);
      assertNotSame(point2, point0);
      assertNotSame(point2, point1);
      assertNotSame(point2, point3);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point2.x);
      assertEquals(0, point2.y);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertEquals(0.0, point2.getX(), 0.01);
      assertTrue(point0.equals((Object)point3));
      assertTrue(point0.equals((Object)point1));
      assertTrue(point0.equals((Object)point2));
      assertTrue(point2.equals((Object)point3));
      assertTrue(point2.equals((Object)point1));
      assertTrue(point2.equals((Object)point0));
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<Point> class1 = Point.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertNotNull(serializeBeanInfo1);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class2 = TypeUtils.loadClass("error parse null or new", classLoader0);
      assertNull(class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<BigInteger> class3 = BigInteger.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) linkedHashMap0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      String string0 = "trim";
      java.sql.Date date0 = jSONObject0.getSqlDate("trim");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNull(date0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Insets insets0 = new Insets(44, (-9), 989, 13);
      assertEquals(989, insets0.bottom);
      assertEquals(13, insets0.right);
      assertEquals(44, insets0.top);
      assertEquals((-9), insets0.left);
      assertNotNull(insets0);
      
      Class<?> class0 = TypeUtils.loadClass("N");
      assertNull(class0);
      
      NoSuchMethodError noSuchMethodError0 = TypeUtils.cast((Object) null, (Type) null, (ParserConfig) null);
      assertNull(noSuchMethodError0);
      
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "N", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ThreadGroup threadGroup0 = new ThreadGroup("PATTERN_DAY_OF_MONTH");
      assertNotNull(threadGroup0);
      assertEquals("PATTERN_DAY_OF_MONTH", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "PATTERN_DAY_OF_MONTH");
      assertNotNull(threadGroup1);
      assertEquals("PATTERN_DAY_OF_MONTH", threadGroup0.getName());
      assertEquals("PATTERN_DAY_OF_MONTH", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, "PATTERN_DAY_OF_MONTH");
      assertNotNull(mockThread0);
      assertEquals("PATTERN_DAY_OF_MONTH", threadGroup0.getName());
      assertEquals("PATTERN_DAY_OF_MONTH", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<BitSet> class1 = BitSet.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) null);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Dimension> class2 = Dimension.class;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)20;
      ThreadGroup threadGroup2 = threadGroup0.getParent();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup2, threadGroup0);
      assertNotSame(threadGroup2, threadGroup1);
      assertNotNull(threadGroup2);
      assertEquals("PATTERN_DAY_OF_MONTH", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup2.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-76);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte)33, (byte)20, (byte)25, (byte) (-106), (byte) (-76)}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-26956), bigInteger0.shortValue());
      assertEquals((byte) (-76), bigInteger0.byteValue());
      
      String string0 = bigInteger0.toString((-1832));
      assertArrayEquals(new byte[] {(byte)82, (byte)33, (byte)20, (byte)25, (byte) (-106), (byte) (-76)}, byteArray0);
      assertEquals("90302024619700", string0);
      assertNotNull(string0);
      assertEquals((short) (-26956), bigInteger0.shortValue());
      assertEquals((byte) (-76), bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) threadGroup1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
