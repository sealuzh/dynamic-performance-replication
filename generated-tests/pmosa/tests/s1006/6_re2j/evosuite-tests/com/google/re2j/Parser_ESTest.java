/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:21:23 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "|*-^lFb@5#Nv(u\"* Q{";
      int int0 = 109;
      try { 
        Parser.parse("|*-^lFb@5#Nv(u\"* Q{", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "(?(F";
      try { 
        Parser.parse("(?(F", (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse(">(?P<(?P<", 4348);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("s(", 8676);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `s(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp[] regexpArray0 = null;
      int int0 = 65;
      Parser.subarray((Regexp[]) null, 65, 65);
      String string0 = "(F";
      try { 
        Parser.parse("(F", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(F`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      Parser parser0 = new Parser("S", 0);
      String string0 = "\\E";
      Regexp regexp0 = Parser.parse("E", 0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp0.flags = int0;
      int int1 = 664;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "-]";
      int int0 = 55296;
      Regexp regexp1 = Parser.parse("-]", 55296);
      regexp1.max = 55296;
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("J6fzH/lk&T", 55296);
      regexp2.toString();
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp0.min = 55296;
      Object object0 = new Object();
      regexp3.equals(object0);
      regexpArray0[3] = regexp3;
      int int1 = 2186;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 55296, 2186);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("?", 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w", (-3976));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("*(q_cMChp`'xUR?", 2657);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "\\VKJ";
      int int0 = 0;
      Parser parser0 = new Parser("VKJ", 0);
      Parser.parse("[:^upper:]", 0);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("VKJ", 0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      String string1 = "/Zfp}'>]cr";
      Regexp regexp2 = Parser.parse(string1, int0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      String string2 = regexp0.toString();
      int int1 = 78894;
      regexp0.min = int1;
      Object object0 = new Object();
      regexp1.equals(object0);
      regexpArray0[2] = regexp3;
      int int2 = 0;
      Parser.subarray(regexpArray0, int0, int2);
      int int3 = (-1348);
      Parser.parse(string1, int3);
      Regexp[] regexpArray1 = null;
      int int4 = (-65);
      Parser.subarray(regexpArray1, int4, int4);
      Parser.parse(string2, int4);
      int int5 = 0;
      try { 
        Parser.parse(string0, int5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\V`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", 324);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Parser.parse("[:-!M[", 44009);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "[:";
      try { 
        Parser.parse("[:", 3640);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Parser parser0 = new Parser((String) null, (-3415));
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op2);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("7xxVE6l*~fF~GoJ9>.", (-2482));
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("7xxVE6l*~fF~GoJ9>.", (-5504));
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp2);
      regexpArray0[6] = regexp7;
      int int0 = 26;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 26, (-5504));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Parser.parse("^", 597);
      Parser parser0 = new Parser((String) null, 597);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Parser.parse("P(?(?:)", 1253);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Parser.parse("3(?.)", 9189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$", 1092);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser parser0 = new Parser("", 0);
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = " ?6\"nKF!=$qK1";
      Regexp regexp0 = Parser.parse(" ?6\"nKF!=$qK1", 0);
      regexpArray0[0] = regexp0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 2369);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = new Parser("eg4=1~s6udm`|E%", 4963);
      Parser.parse("eg4=1~s6udm`|E%", 0);
      Parser.parse("eg4=1~s6udm`|E%", (-5630));
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 4963, 4963);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse(" |N7", 193);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|i", (-2207));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-1780);
      try { 
        Parser.parse(")C", (-1780));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = new Parser("-^&Ld^jCLxPje7j", 0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("-^&Ld^jCLxPje7j", 0);
      regexp1.equals(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Parser.subarray(regexpArray0, 0, 0);
      try { 
        Parser.parse("(?-s:.)", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Parser.parse("(?P<", 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Parser.parse("[", 4168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = ".@=5+<.P|x==}!Df4";
      int int0 = 189;
      Parser parser0 = new Parser(".@=5+<.P|x==}!Df4", 189);
      Parser.parse("", (-1474));
      try { 
        Parser.parse("p4D0x[?M*e2o*o", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[?M*e2o*o`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      String string0 = "LUGD@s%fowIpzxM[;[";
      int int0 = (-407);
      try { 
        Parser.parse("LUGD@s%fowIpzxM[;[", (-407));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[;[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = new Parser("-^&Ld^jCLxPje7j", 0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Parser.parse("-^&Ld^jCLxPje7j", 0);
      regexp1.equals(regexp0);
      int int0 = 55;
      Parser parser1 = new Parser("(?-s:.)", 1035);
      Parser.parse("-^&Ld^jCLxPje7j", 55);
      String string0 = ";[";
      try { 
        Parser.parse(";[", (-752));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Parser parser0 = new Parser((String) null, 1373);
      Parser.parse("[:per:]", (-679));
      Parser.parse(">*Qdl!PmC", 1373);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 4221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 102;
      Regexp regexp0 = Parser.parse("pD", 102);
      Parser.parse("Kayah_Li", 102);
      Parser parser0 = new Parser("pD", 81);
      Parser.parse("pD", 2486);
      int int1 = 102;
      Regexp regexp1 = Parser.parse("Kayah_Li", 102);
      Parser.parse("pD", 81);
      String string0 = "sLw+:BwnHtf5AS B%x";
      Parser.parse(string0, int0);
      String string1 = "G|j1byM_G`Q:hg%f";
      int int2 = 36;
      Parser.parse(string1, int2);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse(string1, int2);
      regexpArray0[2] = regexp2;
      int int3 = 94;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("?hOT_", 4029);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("A", (-2111));
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("=k2$C<+u<-ITbY5K+", 2069);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp2);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp7);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp6);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1843), (-1480));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1843
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 10132);
      Regexp regexp0 = Parser.parse("[::]", 0);
      int int0 = (-5630);
      Regexp regexp1 = Parser.parse("t}?", (-5630));
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      try { 
        Parser.parse("j!nyK>Ny(", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `j!nyK>Ny(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "eg4=1~s6udm`|E%";
      Parser parser0 = new Parser("eg4=1~s6udm`|E%", 4967);
      Regexp regexp0 = Parser.parse("eg4=1~s6udm`|E%", 1825);
      Regexp regexp1 = Parser.parse("eg4=1~s6udm`|E%", (-679));
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      Regexp regexp2 = Parser.parse("eg4=1~s6udm`|E%", 9371);
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp1;
      int int0 = 108;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 4221, 108);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",]^Z-~+i6:8|,", (-396));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X?'|<", 3724);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = new Parser("Jpv4jor\"t@0c", 8144);
      Regexp regexp0 = Parser.parse("A", 8144);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "";
      int int0 = (-44);
      Parser parser0 = new Parser("[:r:]", (-44));
      Regexp regexp0 = Parser.parse("[:r:]", (-996));
      int int1 = 102;
      Parser.parse("", 102);
      Regexp regexp1 = Parser.parse("[:r:]", (-996));
      String string1 = "sLw+:BwnHtf5AS B%x";
      Regexp regexp2 = Parser.parse("P?v3", (-996));
      int int2 = 36;
      int int3 = (-3864);
      Regexp regexp3 = Parser.parse(string0, int3);
      Regexp regexp4 = Parser.parse(string1, int0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp4;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp2;
      int int4 = 1135;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int4, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("b|k", 1312);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p ?Zfl3", 10224);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-27);
      try { 
        Parser.parse("[", (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-679);
      Parser.parse("[8^13n>-!M[", 87);
      try { 
        Parser.parse("[8^13n>-!M[", (-679));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `>-!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse("n{\rjoMSC'HX*XS^`", 36);
      Regexp[] regexpArray0 = new Regexp[5];
      regexp0.max = (-4006);
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp1 = Parser.parse("Cherokee", 5);
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 36, 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Parser.parse("{?", 3704);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Parser.parse("$B(21}HufH o,oYj|a", (-3976));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `$B(21}HufH o,oYj|a`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Parser.parse("(?<", 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = new Parser("BY?v3", (-439));
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("BY?v3", (-439));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("BY?v3", (-439));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("BY?v3", 838);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      Regexp regexp5 = Parser.parse("(?s:.)", (-439));
      assertFalse(regexp5.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "(?:";
      int int0 = (-152);
      try { 
        Parser.parse("(?:", (-152));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", (-152));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 10132);
      Regexp regexp0 = Parser.parse("[::]", 0);
      Regexp regexp1 = Parser.parse("t}?", (-5630));
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      Regexp regexp2 = Parser.parse("t}?", 2636);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P?v3", 8676);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "n{\\rjoMSC'HX*XS^`";
      Regexp[] regexpArray0 = new Regexp[1];
      int int0 = 125;
      Regexp regexp0 = Parser.parse("Nyrid*H-qT", 125);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int1 = 1039;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1039, 78);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-679);
      try { 
        Parser.parse("4T5{4xvF)\"C,DEqR\"", (-679));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Parser.parse("oN{1(", 3801);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `oN{1(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser.parse("rM=Bh.=C&{ Kf", 8);
      String string0 = "\\p\\?v3";
      Regexp regexp0 = Parser.parse("p?v3", 8);
      int int0 = 1262;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        Parser.parse("v)K", 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "(s)!|*k]hs9 (";
      int int0 = 119148;
      try { 
        Parser.parse("(s)!|*k]hs9 (", 119148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = new Parser("oA0d=2VaTq-v_0V(", (-1780));
      Parser.parse("|gBdb91@PCzaTD<w6^", (-1780));
      try { 
        Parser.parse("oA0d=2VaTq-v_0V(", (-1780));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `oA0d=2VaTq-v_0V(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x?10FFF!}]", 41);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-2167);
      Parser parser0 = new Parser("com.google.re2j.Parser", (-2167));
      try { 
        Parser.parse("/Ei[^@o>9@NN2fv", 2340);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^@o>9@NN2fv`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("BY\t?v3", (-439));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("BY\t?v3", (-439));
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp regexp4 = Parser.parse("(?s:.)", (-439));
      assertFalse(regexp4.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("BY?v3", (-439));
      regexpArray0[1] = regexp0;
      Regexp regexp1 = Parser.parse("BY?v3", (-439));
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = Parser.parse("Ed0Z1H;&58u;%sdnA{", 16);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 8676;
      Regexp regexp0 = Parser.parse("PqspaP91t", 8676);
      String string0 = "Thaana";
      Parser.parse(string0, int0);
      String string1 = "z4oisd";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser.parse("y#{X! C,|", (-3976));
      Regexp regexp0 = Parser.parse("`x&d/uDJhn^yOF&jd<}", (-1093));
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = Parser.parse("[:^alpha:]", (-1093));
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|&q^X{|zz9\"*0BW-`", (-2271));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-1555);
      Regexp[] regexpArray0 = new Regexp[7];
      int int1 = 66339;
      Regexp regexp0 = Parser.parse("gb%)u>DA0h6", 66339);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("C", (-1555));
      regexpArray0[5] = regexp5;
      Regexp.Op regexp_Op2 = Regexp.Op.LEFT_PAREN;
      Regexp regexp6 = new Regexp(regexp_Op2);
      regexpArray0[6] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser parser0 = new Parser(",~[CcMY1-F!23X(", (-2320));
      try { 
        Parser.parse(",~[CcMY1-F!23X(", (-2320));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[CcMY1-F!23X(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "aH:P[;\\!(";
      Parser.parse("aH:P[;!(", (-2));
      String string1 = "^hyFJr\\W]]94f|^]\"";
      int int0 = (-59);
      Parser.parse("^hyFJrW]]94f|^]\"", (-59));
      Parser parser0 = new Parser("^hyFJrW]]94f|^]\"", 12);
      try { 
        Parser.parse("aH:P[;!(", (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[;!(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^hyFJrW]]94f|^]\"", 9180);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = new Parser("<Vvxc(*ka r?bPx", 1532);
      Regexp[] regexpArray0 = new Regexp[4];
      try { 
        Parser.parse("(?", 1532);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("\n", 976);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 976, 976);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", (-4468));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("M", 119973);
      Regexp regexp1 = Parser.parse("x{", 119973);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1701;
      Parser parser0 = new Parser("Kve2TAX\"1NTmzy>%", 1701);
      Parser.parse("pP{]>", 2512);
      Parser.parse("Kve2TAX\"1NTmzy>%", 1701);
      String string0 = "TCp68c|b=I!F";
      Regexp regexp0 = Parser.parse("TCp68c|b=I!F", 1701);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.max = 1701;
      int int1 = 550;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1701, 550);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PPD", (-304));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005", (-4832));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000IPD", (-1095));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Parser.parse("ih\u00169Xdf^43", 9180);
      Parser parser0 = new Parser("ih\u00169Xdf^43", 9180);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0002PzN3", 49);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Parser.parse("(2\fSfh", (-1555));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(2\fSfh`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 8676;
      Parser.parse("\u0001PzN3", 8676);
      String string0 = "8n3Fvi4jCLz8|C-`|XS";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 1188;
      Parser.parse("9KuR$,xsB", 1188);
      String string0 = " s";
      Parser.parse(string0, int0);
      String string1 = "(?(?";
      Parser parser0 = new Parser(string1, int0);
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser parser0 = new Parser("915 zU", 118);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("6k\u0000j};!tu=+#W93n", (-1760));
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp4 = new Regexp(regexp_Op2);
      regexpArray0[4] = regexp4;
      regexp4.min = (-2731);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 46, 962);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x[-t]+>KfXP", 560);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Parser.parse("x+<?[-t]@d;fKKfXP", 5);
      Parser parser0 = new Parser("x+<?[-t]@d;fKKfXP", 2828);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x+<?[-t]@d;fKKfXP", 69);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("zN3", 3801);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser.parse("54HolMxC5H5y*", 1444);
      Regexp regexp0 = Parser.parse("54HolMxC5H5y*", 55);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 93, 93);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "\\pP\\K";
      int int0 = (-2067);
      Parser parser0 = new Parser("pPK", (-2067));
      Parser.parse("pPK", (-2067));
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\K`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Parser parser0 = new Parser(".avRL#i#tyf]*", 13);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("6n0", 28);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int0 = 101;
      Regexp regexp2 = Parser.parse("D", 101);
      regexpArray0[1] = regexp2;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-=R2sD[M]e&,Xx5kA", 3801);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x+<?[t]@P;KKfXP", 2197);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Parser.parse("hWfA{013ODL[5", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      Parser parser0 = new Parser("-^&Ld^jCLxPje7j", 0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Parser.parse("-^&Ld^jCLxPje7j", 0);
      regexp1.equals(regexp0);
      Parser parser1 = new Parser("(?-s:.)", 1035);
      Parser.parse("(?-s:.)", 116);
      Parser.parse("-^&Ld^jCLxPje7j", 0);
      String string0 = ";[";
      try { 
        Parser.parse(";[", (-752));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Parser.parse("(?-m:$", (-279));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?-m:$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Parser parser0 = new Parser("46=L4~1q 'Kqzn5", (-1943));
      Regexp regexp0 = Parser.parse("HT4\u0005{j:wgR7!qT/H*c", (-1943));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", (-3600));
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3872, (-3600));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 3821;
      Parser.parse("oYaE%rbdk.Ab3<\u0002#", 3821);
      String string0 = null;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FtFF}]", 373);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-623));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{l&10FFFF}]", (-623));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[x00-x{10FFFF}]", 93);
      regexp0.reinit();
      regexp0.flags = 379;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser parser0 = new Parser("[:f;hP", 92);
      Regexp regexp0 = Parser.parse("Yi", 41);
      Regexp regexp1 = Parser.parse("X}Z]T{13hV-", 41);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser.parse("d", 9185);
      Parser.parse("d", 9185);
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 9185, 9185);
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("nRnI&'TO\"aGM5", (-4794));
      int int0 = 42;
      Regexp regexp1 = Parser.parse("nRnI&'TO\"aGM5", 42);
      Regexp regexp2 = Parser.parse("nRnI&'TO\"aGM5", 42);
      String string0 = "\\5";
      Regexp regexp3 = Parser.parse("\u0005", 125);
      String string1 = "(?P<(?P<";
      Regexp regexp4 = Parser.parse(string1, int0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[5] = regexp5;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp1;
      int int1 = (-2607);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("U,a|r|c", 1540);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w'x{CPL0\u0007K3Yf", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Parser.parse("((?)", 3808);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `((?)`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "D.Rs4G:Bk;kK\"-\\6;";
      int int0 = (-867);
      Parser parser0 = new Parser("D.Rs4G:Bk;kK\"-\u0006;", (-867));
      int int1 = (-3180);
      Parser.parse("D.Rs4G:Bk;kK\"-\u0006;", (-3180));
      Regexp[] regexpArray0 = new Regexp[4];
      String string1 = "IIS3BYnJ@6U]Zi(;8*";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `IIS3BYnJ@6U]Zi(;8*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^hyFJra]]94f|^CS]\"", 917500);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", (-279));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",]^Z-~+i6:8n|,", (-396));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse(": b\u0004QE\":5VV6", 12304);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("I~v:PLSf^pT5g", (-537));
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("1}", 3185);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("1}", (-4493));
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      int int0 = 124;
      Regexp regexp6 = Parser.parse("\b", 124);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp4);
      regexpArray0[7] = regexp7;
      try { 
        Parser.parse("+GDa", 5792);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Parser.parse("B\u0003.#KE6s}H(|NJ,", 593);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `B\u0003.#KE6s}H(|NJ,`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Parser.parse("(?is-m$", 11504);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?is-m$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      int int0 = 0;
      Regexp regexp0 = Parser.parse("MoC", 0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("MoC", 0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("Javanese", (-1358));
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("MoC", (-1358));
      regexpArray0[4] = regexp4;
      int int1 = (-276);
      try { 
        Parser.parse("_[\u0000", (-276));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[\u0000`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Regexp regexp0 = Parser.parse("QD", 2541);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexp0.name = "?'X_A_3.1x6^:=\"(:";
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Parser.subarray(regexpArray0, 2541, 2541);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 106, 106);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = new Parser("3~|.)z<#fi'ZuS", 80);
      try { 
        Parser.parse("3~|.)z<#fi'ZuS", 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
