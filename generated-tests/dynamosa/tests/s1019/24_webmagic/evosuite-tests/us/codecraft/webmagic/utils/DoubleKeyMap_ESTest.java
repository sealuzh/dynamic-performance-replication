/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 04:35:01 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = new Integer(4);
      doubleKeyMap0.put(integer0, "us.cdecraft.webmagic.utis.DoubleKeyMp", integer0);
      Integer integer1 = new Integer(4);
      Integer integer2 = doubleKeyMap0.remove(integer1, "us.cdecraft.webmagic.utis.DoubleKeyMp");
      assertTrue(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<Object, Map<String, Object>>, Map<HashMap<Object, String>, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<String, Object>>, Map<HashMap<Object, String>, String>, String>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      HashMap<HashMap<Object, String>, String> hashMap0 = new HashMap<HashMap<Object, String>, String>();
      doubleKeyMap0.put(map0, (Map<HashMap<Object, String>, String>) hashMap0, "");
      String string0 = doubleKeyMap0.put(map0, (Map<HashMap<Object, String>, String>) hashMap0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Integer, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<String, String>>();
      HashMap<String, String> hashMap0 = doubleKeyMap0.remove("eL&*V@8Ev", (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      DoubleKeyMap<HashMap<Integer, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Object>();
      Object object0 = doubleKeyMap1.remove((HashMap<Integer, Object>) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      DoubleKeyMap<Integer, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<String, String>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      Object object0 = new Object();
      String string0 = doubleKeyMap2.remove(object0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, Integer>();
      DoubleKeyMap<Integer, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<String, String>>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      Map<Object, String> map1 = doubleKeyMap2.remove((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, String>((Map<HashMap<String, Object>, Map<Object, String>>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.put(hashMap0, object0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Integer) null, "F[9fhen2rg9g#KA%j", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<HashMap<Object, String>, String>, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<HashMap<Object, String>, String>, Object>, Integer, Integer>();
      Map<Integer, Map<Object, HashMap<String, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<String, String>>(map0);
      Map<Object, Map<Object, String>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(map1, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put(object0, (Object) "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      DoubleKeyMap<HashMap<Integer, String>, Object, Map<HashMap<Object, String>, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, String>, Object, Map<HashMap<Object, String>, String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(2666, 1371.7979F);
      Map<HashMap<Object, String>, String> map0 = doubleKeyMap1.get(hashMap0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Map<Object, Integer>, Map<String, String>> hashMap0 = new HashMap<Map<Object, Integer>, Map<String, String>>();
      DoubleKeyMap<Map<Object, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, String>(hashMap0);
      String string0 = doubleKeyMap0.get((Map<Object, Integer>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Map<Map<HashMap<String, Integer>, Map<Integer, HashMap<Object, String>>>, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<HashMap<String, Integer>, Map<Integer, HashMap<Object, String>>>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<String, Integer>, Map<Integer, HashMap<Object, String>>>, Integer, Integer>(map0);
      Map<HashMap<String, Integer>, Map<Integer, HashMap<Object, String>>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, Integer, HashMap<Object, String>> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Integer>, Integer, HashMap<Object, String>>(map1, class0);
      Map<Integer, HashMap<Object, String>> map2 = doubleKeyMap2.get((HashMap<String, Integer>) null);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<String, Integer>>();
      DoubleKeyMap<HashMap<Integer, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, String, Integer>(hashMap0);
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>();
      Map<HashMap<Object, Object>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<Integer, Integer>, Map<String, Integer>>, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Integer>, Map<String, Integer>>, String, Integer>((Map<Map<HashMap<Integer, Integer>, Map<String, Integer>>, Map<String, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<String, Map<String, String>>, Map<String, Map<String, String>>, HashMap<Integer, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, Map<String, String>>, Map<String, Map<String, String>>, HashMap<Integer, Object>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = new Integer(4);
      doubleKeyMap0.put(integer0, "us.cdecraft.webmagic.utis.DoubleKeyMp", integer0);
      Integer integer1 = doubleKeyMap0.remove(integer0, "");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, String>, Integer, String>();
      HashMap<HashMap<Object, String>, String> hashMap0 = new HashMap<HashMap<Object, String>, String>();
      Integer integer0 = new Integer((-1483));
      doubleKeyMap0.put((Map<HashMap<Object, String>, String>) hashMap0, integer0, (String) null);
      String string0 = doubleKeyMap0.get((Map<HashMap<Object, String>, String>) hashMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Map<String, String>>, Map<String, Map<String, String>>, HashMap<Integer, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, Map<String, String>>, Map<String, Map<String, String>>, HashMap<Integer, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
