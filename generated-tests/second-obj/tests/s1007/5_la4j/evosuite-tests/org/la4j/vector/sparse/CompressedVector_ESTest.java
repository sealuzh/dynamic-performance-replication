/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:47:48 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.Spliterator;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 3115);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(0, 3115);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 3115.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1617).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1617, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1617).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1617, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(3711);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2081);
      compressedVector0.setAll(2081);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-3417), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertFalse(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.989945929170638;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.iterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2147326196;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(2147326196, (double) 2147326196, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(2147326215, 0.0, (Random) mockRandom0);
      assertEquals(2147326215, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(0.0);
      assertEquals(2147326215, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      String string0 = compressedVector0.mkString((NumberFormat) decimalFormat0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1840700269);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1840700269, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(1840700269);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1840700269, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1840700269, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.zero(2147326200);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2147326200, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(2147326200);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2147326200, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2147326200, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = Integer.valueOf(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Double double0 = new Double(4451.594);
      assertNotNull(double0);
      assertEquals(4451.594, (double)double0, 0.01);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(double1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-3706), (double) (-3706), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Long.BYTES;
      assertEquals(8, int0);
      
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1560, 1560);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1560, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.product();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1560, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1560, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(16, 16);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2763, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(16, sparseVector0.length());
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      compressedVector0.swapElements(16, 3);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(3736, 3736);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1901, 8);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1901, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(8);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1901, compressedVector0.length());
      assertEquals(8, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2);
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      String string0 = "j'w!8jDbJ";
      ChoiceFormat choiceFormat0 = new ChoiceFormat("j'w!8jDbJ");
      assertTrue(choiceFormat0.isGroupingUsed());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertNotNull(choiceFormat0);
      
      // Undeclared exception!
      try { 
        compressedVector0.mkString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.010000000000000002;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(8, compressedVector1.length());
      assertEquals(0.125, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2081);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2081, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2081);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2081, compressedVector0.cardinality());
      assertEquals(2081, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2081, compressedVector0.cardinality());
      assertEquals(2081, compressedVector0.length());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float(314.8749F);
      assertNotNull(float0);
      assertEquals(314.8749F, (float)float0, 0.01F);
      
      boolean boolean0 = linkedList0.add(float0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean1 = compressedVector0.non(vectorPredicate0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertFalse(boolean1);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 0.010000000000000002;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      double double0 = compressedVector0.product();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = (-5440);
      compressedVector0.swapElements(0, (-5440));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-3892));
      assertNotNull(integer0);
      assertEquals((-3892), (int)integer0);
      
      Double double0 = new Double((-3892));
      assertNotNull(double0);
      assertEquals((-3892.0), (double)double0, 0.01);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(double1);
      
      int int0 = 501;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 501);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(2146158855, (-662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -662.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      long long0 = Short.toUnsignedLong((short)3);
      assertEquals(3L, long0);
      
      boolean boolean0 = linkedList0.offer(short0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Float float0 = new Float((-4475.589247952855));
      assertNotNull(float0);
      assertEquals((-4475.5894F), (float)float0, 0.01F);
      
      int int0 = Short.compare((short)615, (short)615);
      assertEquals(0, int0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)615);
      assertNotNull(short0);
      assertEquals((short)615, (short)short0);
      
      boolean boolean0 = linkedList0.offer(short0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      Vector vector0 = Vector.unit((short)615);
      assertEquals(615, vector0.length());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((short)615, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2147326215;
      doubleArray0[1] = (double) 2147326215;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {2.147326215E9, 2.147326215E9}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      String string0 = compressedVector0.toCSV();
      assertArrayEquals(new double[] {2.147326215E9, 2.147326215E9}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(string0);
      assertEquals("2147326215.000, 2147326215.000", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(0.0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 0.11120233894072501;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.09090909090909091, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(11, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.11120233894072501);
      assertNotNull(float0);
      assertEquals(0.11120234F, (float)float0, 0.01F);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0.09090909090909091, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(11, compressedVector0.length());
      assertNotNull(byteArray0);
      
      int int0 = 0;
      double double0 = compressedVector0.getOrElse(0, (-499.31762208578823));
      assertEquals(0.09090909090909091, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(11, compressedVector0.length());
      assertEquals(0.11120233894072501, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("org.la4j.vector.sparse.CompressedVector");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1840700269);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1840700269, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.getOrElse(525, 1840700269);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1840700269, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1.840700269E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertNotNull(byteArray0);
      assertSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(0.16666666666666666, compressedVector2.density(), 0.01);
      assertEquals(6, compressedVector2.length());
      assertNotNull(compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1234;
      doubleArray0[1] = (double) 1234;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      int[] intArray0 = new int[5];
      intArray0[0] = 1234;
      intArray0[1] = 1234;
      intArray0[2] = 3;
      intArray0[3] = 1234;
      intArray0[4] = 3;
      CompressedVector compressedVector0 = new CompressedVector(1234, 3, doubleArray0, intArray0);
      assertArrayEquals(new double[] {1234.0, 1234.0, 3.0, 3.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1234, 1234, 3, 1234, 3}, intArray0);
      assertEquals(0.0024311183144246355, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1234, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1234).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertArrayEquals(new double[] {1234.0, 1234.0, 1234.0, 3.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 1234, 1234, 3, 3}, intArray0);
      assertEquals(0.0032414910858995136, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1234, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.zero(1234, 1486);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1486.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2902);
      assertEquals(2902, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(2902, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.set(3, (-997.54054652));
      assertEquals(2902, compressedVector0.length());
      assertEquals(3.4458993797381116E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure1);
      assertEquals(2902, compressedVector0.length());
      assertEquals(3.4458993797381116E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 530.0074791354216;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.05263157894736842, compressedVector0.density(), 0.01);
      assertEquals(19, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements((-432), 270);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.05263157894736842, compressedVector0.density(), 0.01);
      assertEquals(19, compressedVector0.length());
      
      org.evosuite.runtime.Random.setNextRandom(270);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = Short.compare((short)13638, (short)13638);
      assertEquals(0, int0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)13638);
      assertNotNull(short0);
      assertEquals((short)13638, (short)short0);
      
      boolean boolean0 = linkedList0.offer(short0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      Vector vector0 = Vector.unit(0);
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.010000000000000002;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt((byte) (-122));
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = Long.BYTES;
      assertEquals(8, int0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)13638);
      assertNotNull(short0);
      assertEquals((short)13638, (short)short0);
      
      int int1 = Short.toUnsignedInt((short)13638);
      assertFalse(int1 == int0);
      assertEquals(13638, int1);
      
      boolean boolean0 = linkedList0.offer(short0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      boolean boolean1 = linkedList0.remove((Object) compressedVector0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertFalse(boolean1);
      
      Vector vector0 = Vector.unit((short)13638);
      assertEquals(13638, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.swapElements(8, (-2717));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5304.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {5304.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1782.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {5304.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertArrayEquals(new double[] {5304.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(vectorIterator0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5304.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {5304.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {5304.0}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertArrayEquals(new double[] {5304.0}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(vectorIterator0);
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {5304.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse(16, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '16' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.010000000000000002;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.1, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertNotNull(byteArray0);
      assertSame(compressedVector0, compressedVector1);
      
      compressedVector0.swapElements((-229), 0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertSame(compressedVector0, compressedVector1);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertNotNull(vectorIterator0);
      assertSame(compressedVector0, compressedVector1);
      
      Float float0 = new Float(0.010000000000000002);
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      VectorOperation<CompressedVector> vectorOperation0 = (VectorOperation<CompressedVector>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      CompressedVector compressedVector2 = compressedVector0.apply(vectorOperation0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(10, compressedVector2.length());
      assertEquals(0.1, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector2, compressedVector1);
      assertSame(compressedVector2, compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-229), vectorFunction0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(";[_[v `GGmS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 544.0;
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-913));
      assertNotNull(integer0);
      assertEquals((-913), (int)integer0);
      
      int[] intArray0 = new int[9];
      intArray0[5] = (-913);
      intArray0[3] = (-913);
      intArray0[4] = 382;
      intArray0[6] = (-913);
      intArray0[8] = 13;
      CompressedVector compressedVector0 = new CompressedVector(13, 602, doubleArray0, intArray0);
      assertArrayEquals(new double[] {544.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-913), 382, (-913), (-913), 0, 13}, intArray0);
      assertEquals(46.30769230769231, compressedVector0.density(), 0.01);
      assertEquals(602, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.setAll(3050.22326535687);
      assertArrayEquals(new double[] {544.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-913), 382, (-913), (-913), 0, 13}, intArray0);
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.updateAt(0, vectorFunction0);
      assertArrayEquals(new double[] {544.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-913), 382, (-913), (-913), 0, 13}, intArray0);
      assertEquals(0.9230769230769231, compressedVector0.density(), 0.01);
      assertEquals(12, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = hashMap0.put(integer0, long0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(long1);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 3308);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3308, compressedVector0.length());
      assertEquals(3.022974607013301E-4, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3308, compressedVector0.length());
      assertEquals(3.022974607013301E-4, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3308, compressedVector0.length());
      assertEquals(3.022974607013301E-4, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3308, 3384);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = Short.compare((short)13638, (short)13638);
      assertEquals(0, int0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)13638);
      assertNotNull(short0);
      assertEquals((short)13638, (short)short0);
      
      int int1 = Short.toUnsignedInt((short)898);
      assertFalse(int1 == int0);
      assertEquals(898, int1);
      
      boolean boolean0 = linkedList0.offer(short0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      org.evosuite.runtime.Random.setNextRandom((short)13638);
      org.evosuite.runtime.Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.product();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double((-3774.10853));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-3774.10853), (double)double1, 0.01);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = Integer.getInteger("Qb1SBH2@");
      assertNull(integer1);
      
      int int0 = Integer.sum(1902, 2135);
      assertEquals(4037, int0);
      
      Double double2 = new Double((-1219.166740753076));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1219.166740753076), (double)double2, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4037).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1083, vectorFunction1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("#:w<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(166, 1.0, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(166, compressedVector0.length());
      assertEquals(166, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-188.48080785545275);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-188.48080785545275), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double double0 = compressedVector0.innerProduct(compressedVector0);
      assertArrayEquals(new double[] {(-188.48080785545275), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(35525.0149298441, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket("Is[`uk,K=b:(.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      compressedVector1.setAll(1270.028819);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      Double double0 = new Double(84.27384986438807);
      assertNotNull(double0);
      assertEquals(84.27384986438807, (double)double0, 0.01);
      
      byte[] byteArray0 = compressedVector1.toBinary();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertNotNull(byteArray0);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-1629));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 544.0;
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      intArray0[5] = (-913);
      intArray0[3] = (-913);
      intArray0[4] = 382;
      intArray0[6] = (-913);
      intArray0[8] = 13;
      CompressedVector compressedVector0 = new CompressedVector(13, 602, doubleArray0, intArray0);
      assertArrayEquals(new double[] {544.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-913), 382, (-913), (-913), 0, 13}, intArray0);
      assertEquals(46.30769230769231, compressedVector0.density(), 0.01);
      assertEquals(602, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.setAll(3050.22326535687);
      assertArrayEquals(new double[] {544.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-913), 382, (-913), (-913), 0, 13}, intArray0);
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.updateAt(0, vectorFunction0);
      assertArrayEquals(new double[] {544.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, (-913), 382, (-913), (-913), 0, 13}, intArray0);
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(19, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(19, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(19, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      double double0 = compressedVector0.infinityNorm();
      assertEquals(19, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, double0, 0.01);
      assertSame(compressedVector0, compressedVector1);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(19, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertSame(compressedVector0, compressedVector1);
      
      boolean boolean0 = compressedVector1.isZeroAt(2143543311);
      assertEquals(19, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(19, compressedVector1.length());
      assertTrue(boolean0);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      int int0 = (-216);
      compressedVector1.setAll(13649.0);
      assertEquals(19, compressedVector0.cardinality());
      assertEquals(19, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(19, compressedVector1.length());
      assertEquals(19, compressedVector1.cardinality());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-216), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2081);
      assertEquals(2081, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2081);
      assertEquals(2081, compressedVector0.length());
      assertEquals(2081, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Spliterator<Double> spliterator0 = compressedVector0.spliterator();
      assertEquals(2081, compressedVector0.length());
      assertEquals(2081, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(spliterator0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(37);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(2081, compressedVector0.length());
      assertEquals(2081, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(37, compressedVector1.cardinality());
      assertEquals(37, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      int[] intArray0 = new int[6];
      intArray0[4] = 621;
      intArray0[2] = 621;
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      assertArrayEquals(new double[] {3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 621, 0, 621, 0}, intArray0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = 840;
      compressedVector0.swapElements(840, 621);
      assertArrayEquals(new double[] {3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 840, 0, 621, 0}, intArray0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.010000000000000002;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(10, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.1, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertSame(compressedVector0, compressedVector1);
      
      int int0 = 0;
      compressedVector0.swapElements((-229), 0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertSame(compressedVector0, compressedVector1);
      
      int int1 = (-1313);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-229)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1313), vectorFunction0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertSame(compressedVector0, compressedVector1);
      
      compressedVector1.swapElements((-229), (-2384));
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(10, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      VectorOperation<Vector> vectorOperation0 = ooPlaceVectorsAddition0.partiallyApply((SparseVector) compressedVector1);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(10, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertNotNull(vectorOperation0);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      compressedVector0.swapElements((-2384), (-1313));
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertSame(compressedVector0, compressedVector1);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition1 = new OoPlaceVectorsAddition();
      assertFalse(ooPlaceVectorsAddition1.equals((Object)ooPlaceVectorsAddition0));
      assertNotNull(ooPlaceVectorsAddition1);
      
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("Check your map: Index must be 0..n-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int0 = 3;
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector1.subtract((Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 3 does not equal to 6.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.010000000000000002;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      
      compressedVector0.swapElements(0, 162);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.1, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      double double0 = compressedVector1.min();
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.1, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.1, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertNotNull(vectorIterator0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      Float float0 = new Float(0.010000000000000002);
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(10, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Double double0 = new Double((-545.26288));
      assertNotNull(double0);
      assertEquals((-545.26288), (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 501);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(501, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-358.72813)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(501, vectorFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.001996007984031936, compressedVector0.density(), 0.01);
      assertEquals(501, compressedVector0.length());
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(double1);
      
      compressedVector0.set(9, (-2194.41));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.003992015968063872, compressedVector0.density(), 0.01);
      assertEquals(501, compressedVector0.length());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.010000000000000002;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      Vector vector0 = Vector.zero(32);
      assertEquals(32, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.swapElements((-250), 0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-250)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1313), vectorFunction0);
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements((-250), (-2384));
      assertArrayEquals(new double[] {0.010000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      Vector vector1 = null;
      try {
        vector1 = new CompressedVector((-2384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2384
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      int[] intArray0 = new int[6];
      intArray0[4] = 621;
      intArray0[2] = 621;
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      assertArrayEquals(new double[] {3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 621, 0, 621, 0}, intArray0);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = 840;
      compressedVector0.swapElements(840, 621);
      assertArrayEquals(new double[] {3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 840, 0, 621, 0}, intArray0);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.divide(621);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '840' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
