/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:50:32 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      assertEquals(0, matrix0.rows());
      
      matrix0.maxInColumn(31);
      int int0 = matrix0.columns();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      Matrix matrix0 = Matrix.fromCSV("");
      assertEquals(0, matrix0.rows());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformColumn(0, vectorFunction0);
      matrix1.swapColumns(331, 1161);
      assertNotSame(matrix1, matrix0);
      
      int int0 = denseMatrix0.columns();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.diagonal((-30561911), (-2322.5));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 6;
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(5, 6, doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateColumn(9, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-598.9128885577);
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-598.9128885577);
      doubleArray2[1] = (-598.9128885577);
      doubleArray2[2] = (-598.9128885577);
      doubleArray2[3] = (-598.9128885577);
      doubleArray2[4] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-598.9128885577);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-598.9128885577);
      doubleArray3[3] = (-598.9128885577);
      doubleArray3[4] = (-613.52584);
      doubleArray3[5] = 3833.41;
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (-598.9128885577);
      doubleArray3[8] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-598.9128885577);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-613.52584);
      doubleArray4[4] = (-613.52584);
      doubleArray4[5] = (-598.9128885577);
      doubleArray4[6] = (-613.52584);
      doubleArray4[7] = (-598.9128885577);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-613.52584);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-598.9128885577);
      doubleArray5[3] = 3833.41;
      doubleArray5[4] = (-1.0);
      doubleArray0[4] = doubleArray5;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.setColumn(0, 0.0);
      assertEquals(2, matrix0.columns());
      assertEquals(5, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = (-12.077194452686719);
      int int0 = 3;
      basic2DMatrix0.setColumn(3, (double) 3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("55null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(554);
      SparseMatrix.identity(5);
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getInstance(locale0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 554;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 554;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(554, 200.41641473356);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '554' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.randomSymmetric(48, mockRandom0);
      double double0 = new Integer(48);
      // Undeclared exception!
      try { 
        matrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      SparseVector.zero(37);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.minInColumn(37);
      cRSMatrix0.euclideanNorm();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(518, 518, 1608);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(doubleArray0);
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft(29, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 651;
      doubleArray0[1] = (double) 651;
      doubleArray0[2] = (double) 651;
      doubleArray0[3] = (double) 651;
      doubleArray0[4] = 0.0;
      Matrix matrix0 = Matrix.from1DArray(651, 651, doubleArray0);
      assertArrayEquals(new double[] {651.0, 651.0, 651.0, 651.0, 0.0}, doubleArray0, 0.01);
      assertEquals(651, matrix0.rows());
      assertEquals(651, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.slice(651, 651, 651, (-1303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [651..651][651..-1303].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1119, 1119);
      assertEquals(1119.0, sparseMatrix0.max(), 0.01);
      assertEquals(1119, sparseMatrix0.rows());
      assertEquals(1119, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1119, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(8.936550491510277E-4, sparseMatrix0.density(), 0.01);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotNull(sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotNull(string0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      assertEquals(0.0, double0, 0.01);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)sparseMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      cRSMatrix1.slice((-3036), 1119, 1119, 1119);
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(doubleArray0);
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("Wrong input file format: can not read header '%%MatrixMarket'.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 4;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(4, 4);
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(4, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.multiply((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero(17, (-1315));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.add((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 557;
      doubleArray0[1] = (double) 557;
      doubleArray0[2] = (double) 557;
      doubleArray0[3] = (double) 557;
      doubleArray0[4] = (double) 557;
      doubleArray0[5] = (double) 557;
      doubleArray0[6] = 2230.8267122;
      doubleArray0[7] = (double) 557;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(557, 557, doubleArray0);
      assertArrayEquals(new double[] {557.0, 557.0, 557.0, 557.0, 557.0, 557.0, 2230.8267122, 557.0}, doubleArray0, 0.01);
      assertEquals(557, basic1DMatrix0.rows());
      assertEquals(557, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.toCSV((NumberFormat) decimalFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("9");
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      String string0 = basic2DMatrix0.mkString(" in a ", "<omGm\"|ic>St");
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals("9.000 in a ", string0);
      assertNotNull(string0);
      
      int int0 = 417;
      // Undeclared exception!
      try { 
        DenseMatrix.unit((-235), 417);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = (-845);
      Integer integer0 = new Integer((-845));
      assertEquals((-845), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int1 = 9;
      String string0 = denseMatrix0.toCSV();
      assertEquals(9, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertEquals("0.000, 0.000\n0.000, 0.000\n0.000, 0.000\n0.000, 0.000\n0.000, 0.000\n0.000, 0.000\n0.000, 0.000\n0.000, 0.000\n0.000, 0.000\n", string0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertNotNull(string0);
      assertNotSame(denseMatrix0, matrix0);
      
      int int2 = (-1296);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow((-1296), 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      double double0 = matrix0.trace();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 4162.24;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 4162.24, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 646, 646);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(646, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0, 4162.24, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0015479876160990713, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(646, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(646, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0015479876160990713, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      assertSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      double double0 = cCSMatrix0.trace();
      assertArrayEquals(new double[] {1.0, 1.0, 4162.24, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0015479876160990713, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(646, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(646, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0015479876160990713, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertSame(cCSMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cRSMatrix0.columnMajorIterator();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(columnMajorMatrixIterator0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      MatrixVectorOperation<DenseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<DenseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.swapColumns(2147483645, 2147483645);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      // Undeclared exception!
      try { 
        linkedList1.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cRSMatrix0.columnMajorIterator();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(columnMajorMatrixIterator0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      MatrixVectorOperation<DenseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<DenseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.shuffle();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1314;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1314);
      assertEquals(1314, denseMatrix0.rows());
      assertEquals(1314, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = denseMatrix0.columnMajorIterator();
      assertEquals(1314, denseMatrix0.rows());
      assertEquals(1314, denseMatrix0.columns());
      assertNotNull(columnMajorMatrixIterator0);
      
      // Undeclared exception!
      denseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1444.9737253;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1444.9737253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.updateColumn(0, vectorFunction0);
      assertArrayEquals(new double[] {0.0, 1444.9737253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = denseMatrix0.rowMajorIterator();
      assertArrayEquals(new double[] {0.0, 1444.9737253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(rowMajorMatrixIterator0);
      
      denseMatrix0.setRow(0, 0.0);
      assertArrayEquals(new double[] {0.0, 1444.9737253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.updateRow(0, vectorFunction1);
      assertArrayEquals(new double[] {0.0, 1444.9737253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(9);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(6, vectorFunction0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInColumn(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.minInRow(1006);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(827, 827);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(827, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(827, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.blankOfRows(827);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      LongStream longStream0 = mockRandom0.longs((long) 48);
      assertNotNull(longStream0);
      
      Matrix matrix0 = Matrix.randomSymmetric(48, mockRandom0);
      assertEquals(48, matrix0.rows());
      assertEquals(48, matrix0.columns());
      assertNotNull(matrix0);
      
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      Matrix matrix1 = matrix0.blank();
      assertEquals(48, matrix0.rows());
      assertEquals(48, matrix0.columns());
      assertEquals(48, matrix1.rows());
      assertEquals(48, matrix1.columns());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      
      Vector vector0 = matrix0.toRowVector();
      assertEquals(48, matrix0.rows());
      assertEquals(48, matrix0.columns());
      assertEquals(48, vector0.length());
      assertFalse(matrix0.equals((Object)matrix1));
      assertNotNull(vector0);
      assertNotSame(matrix0, matrix1);
      
      // Undeclared exception!
      try { 
        matrix1.maxInRow(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      double[][] doubleArray0 = new double[14][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix0.columns());
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      int int0 = Double.BYTES;
      assertEquals(8, int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      int int1 = Double.MAX_EXPONENT;
      assertEquals(1023, int1);
      assertFalse(int1 == int0);
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      Matrix matrix1 = denseMatrix0.blankOfColumns(1);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      assertEquals(14, matrix1.rows());
      assertEquals(1, matrix1.columns());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = matrix0.equals((Object) integer0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertFalse(boolean0);
      
      int int0 = Double.BYTES;
      assertEquals(8, int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      int int1 = Double.MAX_EXPONENT;
      assertEquals(1023, int1);
      assertFalse(int1 == int0);
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      Matrix matrix1 = matrix0.blankOfColumns(1023);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix1.rows());
      assertEquals(1023, matrix1.columns());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1688;
      int int1 = 660;
      Matrix matrix0 = Matrix.zero(1688, 660);
      matrix0.is((AdvancedMatrixPredicate) null);
      int[] intArray0 = new int[4];
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      int int2 = (-4217);
      intArray0[3] = int2;
      Matrix matrix1 = matrix0.select(intArray0, intArray0);
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      matrix0.to(matrixFactory0);
      matrix1.norm();
      matrix1.transpose();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      MatrixVectorOperation<DenseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<DenseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.subtract((Matrix) cRSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1102);
      linkedList0.addLast(integer0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cRSMatrix1.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(0, vectorFunction0);
      matrix0.sliceBottomRight(0, 0);
      matrix0.swapColumns(0, 0);
      Matrix.zero(2006, 1029);
      matrix0.swapRows((-3633), (-417));
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)50;
      byteArray0[0] = byte0;
      byte byte1 = (byte)49;
      byteArray0[1] = byte1;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(37, 37, 201);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(201);
      cCSMatrix1.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformRow(201, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '201' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1444.9737253;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      int int1 = 3;
      denseMatrix0.blankOfColumns(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1444.9737253, 0.0, (double)0, 712.0342998284, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1040.50126;
      doubleArray0[1] = 1040.50126;
      doubleArray0[2] = 1040.50126;
      doubleArray0[3] = 1040.50126;
      SparseVector.fromArray(doubleArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 0.0;
      doubleArray0[4] = 1.0;
      Matrix matrix0 = Matrix.identity(3062);
      matrix0.rowMajorIterator();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixOperation<SparseMatrix> matrixOperation0 = (MatrixOperation<SparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.apply(matrixOperation0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = cRSMatrix0.transformColumn((-157), vectorFunction0);
      matrix1.toRowVector();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      ColumnMajorSparseMatrix.zero(1, 646, 646);
      Matrix matrix0 = rowMajorSparseMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        matrix0.set(646, (-3190), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '646' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[3];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      double[] doubleArray0 = new double[4];
      cRSMatrix0.product();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom(48);
          VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
          Matrix matrix0 = Matrix.randomSymmetric(48, mockRandom0);
          // Undeclared exception!
          try { 
            matrix0.maxInColumn((-840));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2147483484, 16);
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-2054114792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2054114792.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "\\Ls_^0RKU";
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.foldColumns((VectorAccumulator) null);
      int int0 = 17;
      // Undeclared exception!
      try { 
        basic2DMatrix0.kroneckerProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[14][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 0, (-536), 2030, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 0, -536
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      int int0 = 1168;
      int int1 = 4605;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 1168, 1168, 1168, 4605);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1168, 1168
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(48);
      Matrix matrix0 = Matrix.zero(48, 32);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn((-840));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -840
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix.zero(2147483484, 4);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 758;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(758);
      cRSMatrix0.hashCode();
      cRSMatrix0.getColumn(int0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = (-151);
      Matrix matrix0 = cRSMatrix0.copyOfShape(int0, int1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int2 = 1073741824;
      double double0 = 11.0;
      matrix0.set(int0, int2, double0);
      cRSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      cRSMatrix0.ensureDimensionsAreCorrect(int1, int1);
      matrix0.copy();
      cRSMatrix0.foldColumn(int0, vectorAccumulator0);
      cRSMatrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[3];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(0, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1168;
      int int1 = 4605;
      int int2 = 2;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4605, 2);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4605);
      int int3 = 11;
      int int4 = 504;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 11, 1168, 504, 1274);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 11, 1168
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(1157, 1157);
      cCSMatrix0.infinityNorm();
      int int0 = 48;
      int int1 = 9;
      Matrix.unit(int0, int1);
      cCSMatrix0.ensureDimensionsAreCorrect(int0, int1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 6;
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(5, 6, doubleArray0);
      int int1 = 9;
      double[][] doubleArray1 = new double[7][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(35);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) basic1DMatrix0, (-1661533834), 5, 3, 5456896);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1661533834, 5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cRSMatrix0, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3 rows and 3 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      Matrix matrix0 = denseMatrix0.power(0);
      Basic2DMatrix.identity(0);
      Matrix matrix1 = matrix0.add((double) 0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix1, 0, (-3859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-3859
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 504;
      int int1 = 1274;
      int int2 = (-1493);
      int int3 = (-1022);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 1274, (-1493), 1274, (-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1274x-1022
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 2543, mockRandom0);
      denseMatrix0.power(0);
      denseMatrix0.multiply(2003.53178);
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[9];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.constant(0, 0, 0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector.fromMap(hashMap0, 0);
      matrix0.sum();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[4] = (double) 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(32, 32);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      basic2DMatrix0.rowMajorIterator();
      int[] intArray1 = new int[2];
      intArray1[0] = 8;
      intArray1[1] = 5;
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      matrix0.infinityNorm();
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrixOperation0).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      matrix0.apply(matrixMatrixOperation0, (Matrix) basic2DMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      DenseVector denseVector0 = DenseVector.constant(781, 4780.188);
      Vector vector0 = denseVector0.add((double) 781);
      Matrix matrix0 = vector0.toDiagonalMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.is(matrixPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      MockRandom mockRandom0 = new MockRandom(1207L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(10, mockRandom0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic1DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.infinityNorm();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("%0 0 0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 5;
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(5, 6, doubleArray0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseVector.fromCSV("");
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.unit(6);
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, (Matrix) null, (Matrix) null, denseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.norm();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("      ");
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic2DMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[23];
      doubleArray0[15] = (double) 1;
      doubleArray0[1] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      cRSMatrix0.removeLastRow();
      MockRandom mockRandom0 = new MockRandom(9L);
      SparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      cRSMatrix0.subtract((double) 1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 1;
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[13] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 16, doubleArray0);
      int int1 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(1, 1924.0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 16 cols at 0, 0 in a 1x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      int int1 = 2543;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(2543, 0, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.power(3866);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 2543 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      int int0 = 2317;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1798, 1798, 2317, doubleArray0, (int[]) null, (int[]) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      VectorFunction vectorFunction0 = null;
      cRSMatrix0.updateColumn(int0, vectorFunction0);
      int int1 = 444;
      int int2 = 10;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(int1, int2, doubleArray0);
      cRSMatrix1.toColumnVector();
      String string0 = "sapE2~MbgScAv6cJ#";
      int int3 = (-2700);
      matrix0.transformRow(int3, vectorFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat(string0);
      String string1 = null;
      cRSMatrix0.mkString((NumberFormat) decimalFormat0, string1, string1);
      cRSMatrix0.updateColumn(int1, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(1123, (-471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1123..0][-471..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      int int0 = 1161;
      rowMajorSparseMatrix0.swapColumns(331, 1161);
      int int1 = 736;
      // Undeclared exception!
      try { 
        denseMatrix0.swapColumns(736, 331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 736
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-845);
      DenseMatrix.zero(7, 3);
      Integer integer0 = new Integer((-845));
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int1 = 9;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.non(matrixPredicate0);
      denseMatrix0.toCSV();
      int int2 = (-1296);
      double double0 = 1.0;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.la4j.LinearAlgebra$SolverFactory$8");
      // Undeclared exception!
      try { 
        matrix0.toCSV((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("      ");
      cRSMatrix0.toBinary();
      cRSMatrix0.toCSV();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      cRSMatrix0.product();
      cRSMatrix0.getColumn((-1385));
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 0 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 498.97);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setNegativePrefix(".");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      DenseVector.fromArray(doubleArray0);
      int int0 = 521;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(2073, 521);
      Matrix matrix0 = cRSMatrix0.power(5);
      basic2DMatrix0.equals(matrix0, (double) 5);
      int int1 = (-1629);
      // Undeclared exception!
      try { 
        Basic2DMatrix.identity((-1629));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.toMatrixMarket();
      int int0 = (-1994091957);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[3];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.insertRow(0, sparseVector0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList1.addAll((Collection<? extends Integer>) linkedList0);
      matrix0.rank();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      String string0 = "FORWARD_BACK_SUBSTITUTION";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("FORWARD_BACK_SUBSTITUTION");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-2101.1023);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3277.504215;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2587.5);
      doubleArray0[8] = 1777.5857387;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      matrix0.shuffle();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 2338, 961, 2338);
      matrix0.removeLastRow();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(2338, 1394.057953, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 5466244.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Integer integer0 = new Integer(1994095350);
      cRSMatrix0.determinant();
      cRSMatrix0.mkString((NumberFormat) null);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      matrix0.toMatrixMarket();
      // Undeclared exception!
      Basic2DMatrix.identity(1994095350);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = sparseVector0.shuffle();
      DenseVector denseVector0 = vector0.toDenseVector();
      double[] doubleArray0 = new double[7];
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      doubleArray0[0] = 0.75;
      doubleArray0[1] = 2018.5064729725;
      doubleArray0[2] = (-1392.709);
      doubleArray0[3] = (-66.5194976084433);
      doubleArray0[4] = 8.0;
      doubleArray0[5] = 1384.5762231497633;
      doubleArray0[6] = (-2870.0);
      DenseVector denseVector1 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector1);
      matrix0.setAll((-1881.276112494));
      int int0 = 970;
      matrix0.min();
      denseVector1.toColumnMatrix();
      int int1 = (-2590);
      // Undeclared exception!
      try { 
        matrix0.swapRows(970, (-2590));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 970
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.toColumnMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(2657, 2657, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 2083.2952502103);
      Matrix.unit(5, 133);
      int int0 = Double.MIN_EXPONENT;
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfColumns((-2392));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 5x-2392
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = 1876;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1876, 1.0);
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.copyOfRows(3051);
      matrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn((-3855), vectorFunction0);
      cRSMatrix0.toColumnVector();
      DecimalFormat decimalFormat0 = new DecimalFormat("Pz/0;Mz@F");
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(7, vectorFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[32];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      cRSMatrix0.blankOfRows(1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(1, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.toColumnMajorSparseMatrix();
      int int0 = 32;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(32, 32, (double) 32, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 5;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix0.rank();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 1168, 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow((-453), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.toCSV();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transform(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArrayArray0 = null;
      int int0 = 729;
      CRSMatrix.diagonal(729, (-1948.29484478));
      Basic2DMatrix basic2DMatrix0 = null;
      try {
        basic2DMatrix0 = new Basic2DMatrix((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.minInRow(1006);
      matrix0.swapRows(0, 0);
      Matrix.randomSymmetric(5, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextBoolean();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (-2946.63357), (Random) mockRandom0);
      columnMajorSparseMatrix0.equals((Object) mockRandom0);
      columnMajorSparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 18;
      DenseMatrix denseMatrix0 = DenseMatrix.random(2543, 0, mockRandom0);
      denseMatrix0.multiply(2003.53178);
      Matrix matrix0 = denseMatrix0.add((double) 0);
      denseMatrix0.insert(matrix0, 2543, 0);
      denseMatrix0.max();
      // Undeclared exception!
      try { 
        matrix0.setColumn(5, (-847.6768572));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[3];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.insertRow(0, sparseVector0);
      intArray0[2] = 0;
      Matrix matrix2 = matrix1.insert(matrix0);
      // Undeclared exception!
      try { 
        matrix2.maxInColumn(652);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '652' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(5, 2, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.transpose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2541;
      Matrix matrix0 = Matrix.from1DArray(5, 2541, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.transpose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2541
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      double[][] doubleArray0 = new double[5][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      Matrix matrix1 = rowMajorSparseMatrix0.slice((-849), (-1118), (-849), (-849));
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1717986917));
      linkedList0.add(integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      matrix0.equals((Matrix) denseMatrix0, (double) (-1717986917));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      rowMajorSparseMatrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      matrix0.divide(0.0);
      matrix1.toMatrixMarket();
      int int0 = Double.MAX_EXPONENT;
      double double0 = new Integer((-1717986917));
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector.zero(1108);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[13] = (double) 1;
      Matrix matrix0 = Matrix.from1DArray(1, 1, doubleArray0);
      Matrix matrix1 = matrix0.slice((-1303), (-1303), (-1303), 1);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RowMajorSparseMatrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      matrix1.rotate();
      // Undeclared exception!
      try { 
        matrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[3][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[1];
      denseMatrix0.rotate();
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 837, 837, 837, 837, 837, 837);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 837, 837
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.rank();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList2);
      Integer integer0 = new Integer(3);
      linkedList2.add(integer0);
      matrix0.toRowVector();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      matrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("yV=AjO/|]3AmI`-[<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[4] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      rowMajorSparseMatrix0.rank();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        DenseVector.fromCollection(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
          double[] doubleArray0 = new double[23];
          doubleArray0[5] = (double) 1;
          doubleArray0[4] = (double) 1;
          RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
          rowMajorSparseMatrix0.rank();
          LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
          int int0 = (-2206);
          int int1 = 1854;
          int int2 = (-1328);
          // Undeclared exception!
          try { 
            Basic2DMatrix.constant((-1328), (-1328), 0.0);
            fail("Expecting exception: NegativeArraySizeException");
          
          } catch(NegativeArraySizeException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 1;
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[13] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      int int1 = 1760;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(1760, 1.0);
      basic2DMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      ((CRSMatrix) rowMajorSparseMatrix0).getOrElse(1760, (-659), 0.0);
      basic2DMatrix0.rowMajorIterator();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(int0, int0, int0);
      rowMajorSparseMatrix0.infinityNorm();
      rowMajorSparseMatrix0.toCSV();
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.apply(matrixVectorOperation0, (Vector) sparseVector0);
      rowMajorSparseMatrix0.product();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(int1, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 4;
      Integer integer0 = new Integer(4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.removeFirstColumn();
      int int1 = 2489;
      int int2 = 476;
      int int3 = 4150;
      int int4 = Integer.MAX_VALUE;
      MatrixFactory<SparseMatrix> matrixFactory0 = (MatrixFactory<SparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.insertRow(0, sparseVector0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DenseVector.fromCollection(linkedList0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 3);
      Locale locale0 = Locale.TAIWAN;
      cRSMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        CRSMatrix.zero(542, (-2185), (-2185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 542x-2185
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 3, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3 rows and 1000 cols at 0, 0 in a 4x4 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer(1);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      int int0 = Double.MIN_EXPONENT;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      cRSMatrix0.toMatrixMarket();
      int int1 = Double.MAX_EXPONENT;
      cRSMatrix0.determinant();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      cRSMatrix0.diagonalProduct();
      cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("f?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[26];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[4] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.clone();
      rowMajorSparseMatrix0.toMatrixMarket();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n1 1 1\n1 1 1.000\n");
      rowMajorSparseMatrix0.toMatrixMarket();
      basic2DMatrix0.add((double) 1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      DenseVector.fromArray(doubleArray1);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      rowMajorSparseMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n1 1 1\n1 1 1.000\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 48;
      org.evosuite.runtime.Random.setNextRandom(48);
      int int1 = 32;
      Matrix matrix0 = Matrix.unit(32, 48);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(48, 2441, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("      ");
      cRSMatrix0.toBinary();
      cRSMatrix0.toCSV();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      double[][] doubleArray1 = new double[0][0];
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      basic2DMatrix0.iterator();
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray2);
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, 1.0);
      Basic2DMatrix.identity(2080);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn((-3646), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      Integer integer0 = new Integer(4);
      matrix0.equals((Object) integer0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.rank();
      cRSMatrix0.toMatrixMarket();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n4 4 0\n");
      cRSMatrix0.toMatrixMarket();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 68;
      doubleArray0[4] = (double) 68;
      doubleArray0[5] = (double) 4;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      basic2DMatrix1.equals(matrix0, 0.0);
      int int0 = 10;
      Basic2DMatrix.identity(10);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(3, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 7. Should be: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList1);
      CRSMatrix.zero(550, 3);
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      denseVector0.mkString(numberFormat0, "kEt6u})~h+^2,");
      Matrix matrix0 = rowMajorSparseMatrix0.removeLastColumn();
      CRSMatrix.zero(550, 550, 1);
      double[] doubleArray1 = matrix0.foldColumns((VectorAccumulator) null);
      DenseVector.fromArray(doubleArray1);
      Vector vector0 = Vector.unit(3);
      // Undeclared exception!
      try { 
        matrix0.insertRow(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 3. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-845));
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = 774;
      int int1 = 9;
      double double0 = 1.0;
      Matrix matrix1 = denseMatrix0.copy();
      matrix1.removeFirstRow();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, denseMatrix0, matrix1, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[14][2];
      DenseMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1264;
      doubleArray1[1] = (double) 1264;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(1264, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      Matrix.from1DArray(1, 525, doubleArray0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.transpose();
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      basic2DMatrix0.blankOfRows(6);
      basic2DMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("org.la4j.LinearAlgebra$DecompositorFactory");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      cRSMatrix0.nonZeroRowMajorIterator();
      int int0 = (-8);
      cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) basic2DMatrix0, (-8), (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -8x-8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(2217);
      int int0 = 1188;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 1188);
      int int1 = Double.MIN_EXPONENT;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      cRSMatrix0.toMatrixMarket();
      int int2 = Double.MAX_EXPONENT;
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1176.6277148;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-966.0);
      doubleArray1[3] = 5.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 5.0;
      doubleArray2[1] = (-159.63577659136);
      doubleArray2[2] = 1176.6277148;
      doubleArray2[3] = (-966.0);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 5.0;
      doubleArray0[1] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(753, 2982);
      int int0 = 37;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2982;
      DenseMatrix denseMatrix1 = DenseMatrix.from1DArray(37, 10, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.hadamardProduct(denseMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 753x2982 does not equal to 37x10.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 1168;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.toMatrixMarket();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer1);
      // Undeclared exception!
      try { 
        cRSMatrix1.sliceBottomRight(8, 1168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [8..0][1168..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      MatrixVectorOperation<DenseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<DenseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-912));
      Integer integer1 = new Integer(2602);
      linkedList0.addLast(integer1);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-912), (-912), (-393.810549658669));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-912' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      int int1 = Double.MIN_EXPONENT;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      matrix0.equals((Matrix) cRSMatrix0, (double) (-1022));
      // Undeclared exception!
      try { 
        Basic2DMatrix.unit((-1022), (-1022));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 1994095350;
      Integer integer0 = new Integer(1994095350);
      cRSMatrix0.determinant();
      cRSMatrix0.mkString((NumberFormat) null);
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("      ");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[14][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      int int0 = (-1118);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      rowMajorSparseMatrix0.slice((-1118), (-1118), (-1118), (-1118));
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector.fromArray(doubleArray1);
      CRSMatrix.fromCSV("");
      rowMajorSparseMatrix0.toMatrixMarket();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMultiplier(11);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(7, mockRandom0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
      CCSMatrix.zero(393, 7);
      // Undeclared exception!
      Matrix.randomSymmetric(921, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 4;
      Matrix.constant(4, 4, 4);
      CRSMatrix.zero(4, 4);
      int int1 = Double.MIN_EXPONENT;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(4, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMultiplier(11);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(7, mockRandom0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
      CCSMatrix.zero(393, 7);
      // Undeclared exception!
      Matrix.randomSymmetric(921, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      Integer integer0 = new Integer(227);
      cRSMatrix0.equals((Object) null);
      int int0 = (-1201);
      int int1 = Double.BYTES;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 10;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRow(1820, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1820
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      Integer integer0 = new Integer(4);
      basic2DMatrix0.equals((Object) integer0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 4);
      int int0 = Double.BYTES;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      basic2DMatrix0.equals((Matrix) cRSMatrix0, (double) 8);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1860.5213235152, 1860.5213235152, (-1367.53208693)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      Integer integer0 = new Integer(4);
      matrix0.equals((Object) integer0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      int int1 = new Integer(4);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      cRSMatrix0.mkString(",0:43yp<L~", "4{f/Xmu+|g2");
      matrix0.equals((Matrix) cRSMatrix0, (double) 4);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      cRSMatrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n4 4 0\n");
      cRSMatrix0.toMatrixMarket();
      double[] doubleArray0 = new double[0];
      DenseVector.fromArray(doubleArray0);
      cRSMatrix0.slice(3, 4, 3, 4);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      int int2 = 133;
      Matrix matrix1 = Matrix.unit(133, 4);
      int int3 = Double.MAX_EXPONENT;
      cRSMatrix0.determinant();
      // Undeclared exception!
      matrix1.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMultiplier(11);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(5, mockRandom0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(393, 5);
      int int0 = 921;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0, 236, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 236 rows and 5 cols at 0, 0 from a 5x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[26];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[4] = (double) 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList1.add(integer0);
      linkedList1.clone();
      rowMajorSparseMatrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n1 1 1\n1 1 1.000\n");
      rowMajorSparseMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.slice(1, 790, 5, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [1..5][790..1].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      Integer integer0 = new Integer(4);
      matrix0.equals((Object) integer0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.rank();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      cRSMatrix0.mkString(",0:43yp<L%~", "4{f/Xmu+|g2");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 6303.05351171, 1237.1905, 6303.05351171).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, sparseVector0);
      cRSMatrix0.insertColumn(0, vector0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 499.5552040713738);
      int int0 = NumberFormat.FRACTION_FIELD;
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        DenseMatrix.unit(5, (-235));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 5;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 499.5552040713738);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.mkString((NumberFormat) decimalFormat0, "Jv/KS?<:H%ME", "Cannot have negative source position: ");
      cRSMatrix0.rank();
      decimalFormat0.setMultiplier(Integer.MAX_VALUE);
      decimalFormat0.setPositivePrefix("Check your map: Index must be 0..n-1");
      Double double0 = new Double((-1.0));
      cRSMatrix0.toRowMajorSparseMatrix();
      DecimalFormat decimalFormat1 = new DecimalFormat("Cannot have negative source position: ");
      cRSMatrix0.mkString((NumberFormat) decimalFormat0);
      SparseVector.zero(4083, 236);
      double double1 = Locale.LanguageRange.MAX_WEIGHT;
      Integer integer0 = new Integer(5);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Matrix matrix0 = Matrix.unit(1082, 5);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.toDenseMatrix();
      Matrix matrix1 = cRSMatrix0.copy();
      matrix0.apply((MatrixMatrixOperation<Integer>) null, matrix1);
      int int1 = 7;
      double double2 = (-294.277);
      Matrix.constant(int1, int0, double2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Matrix.constant(4, 4, 4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.rank();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromCollection(linkedList0);
      compressedVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(3, compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1116, 1116);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1740, 1116, 1116);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert((Matrix) columnMajorSparseMatrix0, 1740, 3073, 1088, 1088, 1116, 3073);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1740, 3073
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(4, 4, 4);
      Integer integer0 = new Integer(4);
      matrix0.equals((Object) integer0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      int int0 = Double.BYTES;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0, (-13.243046261785839), 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix1 = matrix0.transpose();
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = 4;
      matrix0.hadamardProduct(matrix1);
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = (-1363);
      intArray0[6] = 8;
      intArray0[7] = 8;
      intArray0[8] = 4;
      int[] intArray1 = new int[0];
      matrix0.norm();
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("      ");
      cRSMatrix0.toBinary();
      cRSMatrix0.toCSV();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 30, 1);
      cRSMatrix0.equals((Matrix) columnMajorSparseMatrix0, 1.0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Iv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.columnMajorIterator();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      MatrixVectorOperation<DenseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<DenseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.equals((Object) matrix0);
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix((-3080), 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3080x5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
