/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:40:40 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.Image;
import java.io.CharArrayReader;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.AbstractOutput;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " to bound ";
      stringArray0[1] = "}#PDA0y4N]";
      stringArray0[2] = "getNumIterations";
      stringArray0[3] = "attributeNames";
      stringArray0[4] = ":?Ay00TR!jC8do";
      stringArray0[5] = "randomWidthFactorTipText";
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      SMOreg.main((String[]) null);
      BayesNet bayesNet0 = new BayesNet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.makeOptionString(bayesNet0, false);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      assertEquals("Binary serialized instances", serializedInstancesLoader0.getFileDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "setFilterType";
      stringArray0[1] = "setFilterType";
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.addNumericTrainClass(4.94E-321, 1239.3094);
      evaluation0.toCumulativeMarginDistributionString();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(evaluation0);
      evaluation0.toSummaryString();
      evaluation0.addNumericTrainClass((-1), (-1));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.pctCorrect();
      evaluation0.pctUnclassified();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.weightedAreaUnderROC();
      sMO0.toString();
      evaluation0.toSummaryString();
      evaluation0.addNumericTrainClass(553.5946928, 1879.14);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SMOreg.main((String[]) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOptions((String[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      instances0.lastIndexOf(multilayerPerceptron0);
      evaluation0.weightedFMeasure();
      evaluation0.addNumericTrainClass(Double.NaN, 2.0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances1.lastIndexOf(instances0);
      evaluation0.addNumericTrainClass((-1), (-1));
      evaluation0.weightedPrecision();
      Random.setNextRandom((-2021930395));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.priorEntropy();
      RandomTree randomTree0 = new RandomTree();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      try { 
        Evaluation.evaluateModel((Classifier) randomTree0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(evaluation0);
      evaluation0.weightedFMeasure();
      evaluation0.addNumericTrainClass((-1), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      String[] stringArray0 = sMO0.getOptions();
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      String string0 = BorderLayout.BEFORE_FIRST_LINE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MultiFilter multiFilter0 = new MultiFilter();
      double double0 = evaluation0.m_MinTarget;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      ArffLoader arffLoader1 = new ArffLoader();
      arffLoader1.getNextInstance(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("gsE]^", instances0, 1, stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: gsE]^
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("0");
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "wX.e}@;9OZKmSLQ3Z";
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader6 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader5.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.precision(1);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.getDiscardPredictions();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.numInstances();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SMOreg.main((String[]) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-2460));
      evaluation0.meanPriorAbsoluteError();
      evaluation0.getDiscardPredictions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      evaluation0.toMatrixString(".arff");
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(" ");
      evaluation0.useNoPriors();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.unweightedMacroFmeasure();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.getDiscardPredictions();
      Random.setNextRandom(1781);
      evaluation0.toMatrixString("G_lEZdv|,");
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.useNoPriors();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.m_SumSchemeEntropy = Double.NaN;
      evaluation0.equals(evaluation0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, stringArray0[2]);
      evaluation0.addNumericTrainClass(3610.39, (-1902.895899230697));
      evaluation0.priorEntropy();
      evaluation0.toClassDetailsString();
      evaluation0.addNumericTrainClass(104.87858, 104.87858);
      Random.setNextRandom(4);
      evaluation0.toSummaryString();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2797.385));
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.falseNegativeRate((-171));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.makeOptionString(naiveBayesMultinomial0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.kappa();
      evaluation0.fMeasure(1);
      evaluation0.toSummaryString();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      SparseInstance sparseInstance0 = new SparseInstance(44);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) naiveBayesMultinomial0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.makeOptionString(naiveBayesMultinomial0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.kappa();
      MockRandom mockRandom0 = new MockRandom(3);
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifier0, instances0, 3, (java.util.Random) mockRandom0, (Object[]) multiClassClassifier0.TAGS_METHOD);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      testInstances0.setHandler(multiClassClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      MockRandom mockRandom0 = new MockRandom(2);
      int int0 = 100;
      AllFilter allFilter0 = new AllFilter();
      evaluation0.setNumericPriorsFromBuffer();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SMOreg.main((String[]) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      evaluation0.priorEntropy();
      evaluation0.toClassDetailsString();
      evaluation0.addNumericTrainClass(38.48783195318393, 0.0);
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[4];
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(6);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.errorRate();
      evaluation0.toMatrixString((String) null);
      AllFilter.main(testInstances0.DEFAULT_WORDS);
      evaluation0.areaUnderROC(210);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SMOreg.main((String[]) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "setFilterType";
      stringArray0[1] = "setLossFhnction";
      stringArray0[2] = "wX.e}@;9OZKmSLQ3Z";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Random.setNextRandom(46);
      evaluation0.toMatrixString("#]T(!<~fhwt%\"(4{j/");
      int int0 = 4244;
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      evaluation0.num2ShortID(4244, charArray0, 109);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(charArrayReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dddddd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(instances1);
      evaluation0.addNumericTrainClass((-1), 2.0);
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.weightedAreaUnderROC();
      sMO0.toString();
      evaluation0.toMatrixString("graph");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.makeDistribution(Double.NaN);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalsePositiveRate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.unweightedMacroFmeasure();
      Random.setNextRandom(971);
      String string0 = Action.MNEMONIC_KEY;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.confusionMatrix();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.pctUnclassified();
      evaluation0.KBInformation();
      evaluation0.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SMOreg.main((String[]) null);
      String[] stringArray0 = new String[5];
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.m_TrainClassVals = doubleArray0;
      evaluation0.precision(124);
      evaluation0.getDiscardPredictions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F(:9StnJ2KzYw");
      Random.setNextRandom(124);
      evaluation0.toMatrixString(".arff");
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      evaluation0.priorEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = 173.2919;
      instances0.delete();
      // Undeclared exception!
      try { 
        TextDirectoryLoader.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SMOreg.main((String[]) null);
      MultiScheme multiScheme0 = new MultiScheme();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.setDiscardPredictions(false);
      textDirectoryLoader0.reset();
      evaluation0.addNumericTrainClass((-3599.567127532), 0.001);
      evaluation0.toSummaryString();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.getDiscardPredictions();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SMOreg.main((String[]) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.addNumericTrainClass(1, 2);
      evaluation0.priorEntropy();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.priorEntropy();
      evaluation0.setDiscardPredictions(true);
      evaluation2.addNumericTrainClass(4047.399764334788, 0.0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.toSummaryString();
      evaluation3.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      String string0 = SerializedInstancesLoader.FILE_EXTENSION;
      evaluation0.unweightedMacroFmeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.SFMeanPriorEntropy();
      double double0 = KStarConstants.EPSILON;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toSummaryString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.m_NoPriors = true;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tE.g.: ");
      evaluation0.priorEntropy();
      CostMatrix costMatrix0 = new CostMatrix(3);
      evaluation0.numTrueNegatives(3);
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T&jLwdGec9!lDqeBS");
      evaluation0.sizeOfPredictedRegions();
      Random.setNextRandom((-1));
      evaluation0.meanPriorAbsoluteError();
      evaluation0.numFalsePositives(105);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "wX.e}@;9OZKmSLQ3Z";
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.weightedAreaUnderROC();
      sMO0.toString();
      evaluation0.toMatrixString("graph");
      evaluation0.matthewsCorrelationCoefficient(1);
      evaluation0.addNumericTrainClass((-1318.0), 1.0E-8);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "wX.e}@;9OZKmSLQ3Z";
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(324);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      textDirectoryLoader3.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.setPriors(instances0);
      TextDirectoryLoader textDirectoryLoader6 = new TextDirectoryLoader();
      SparseInstance sparseInstance0 = new SparseInstance(107);
      C45Loader c45Loader0 = new C45Loader();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2247.01183402);
      doubleArray0[1] = (double) 3;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -500
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getStructure();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.setPriors(instances1);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      SparseInstance sparseInstance0 = new SparseInstance(204);
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.pctIncorrect();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "generic");
      SMO sMO0 = new SMO();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      evaluation0.m_TrainClassVals = doubleArray0;
      Random.setNextRandom(1);
      evaluation0.toMatrixString(stringArray0[3]);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      evaluation0.num2ShortID(1, (char[]) null, 0);
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      textDirectoryLoader4.getOptions();
      Instances instances0 = textDirectoryLoader4.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.delete();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.unweightedMacroFmeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "setFilterType");
      evaluation0.coverageOfTestCasesByPredictedRegions();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.errorRate();
      evaluation0.sizeOfPredictedRegions();
      LMT lMT0 = new LMT();
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) multiClassClassifierUpdateable0.TAGS_METHOD);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader6 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader4.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.areaUnderPRC(0);
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader textDirectoryLoader7 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom(1);
      instances0.resample(mockRandom0);
      Instance instance0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      testInstances0.setHandler(multiClassClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toSummaryString();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.confusionMatrix();
      evaluation0.toClassDetailsString(" ");
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.KBInformation();
      String string0 = DefaultEditorKit.pageDownAction;
      evaluation0.weightedPrecision();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.toSummaryString((String) null, false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.delete();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.unweightedMacroFmeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "  Precision  Recall");
      MockRandom mockRandom1 = new MockRandom(2);
      Evaluation.makeOptionString(regressionByDiscretization0, false);
      evaluation0.weightedMatthewsCorrelation();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.m_ComplexityStatisticsAvailable = true;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "z!");
      instances1.lastIndexOf("generic");
      evaluation0.weightedFMeasure();
      evaluation0.addNumericTrainClass((-1.7976931348623157E308), (-1));
      evaluation0.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      textDirectoryLoader4.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader3.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      SMO sMO0 = new SMO();
      sMO0.toString();
      evaluation0.toMatrixString("@data");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      sMO0.toString();
      Object[] objectArray0 = new Object[0];
      evaluation0.weightedRecall();
      try { 
        evaluation0.crossValidateModel((Classifier) sMO0, instances1, 2, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifier0, instances0, 100, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.unweightedMacroFmeasure();
      MultiScheme multiScheme0 = new MultiScheme();
      Random.setNextRandom((-1));
      String string0 = Action.MNEMONIC_KEY;
      evaluation0.meanPriorAbsoluteError();
      multiScheme0.getCapabilities();
      evaluation0.toSummaryString(true);
      evaluation0.priorEntropy();
      try { 
        Evaluation.evaluateModel((Classifier) multiScheme0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.MultiScheme:
         // 
         // -X <number of folds>
         // \tUse cross validation for model selection using the
         // \tgiven number of folds. (default 0, is to
         // \tuse training error)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -B <classifier specification>
         // \tFull class name of classifier to include, followed
         // \tby scheme options. May be specified multiple times.
         // \t(default: \"weka.classifiers.rules.ZeroR\")
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "wX.e}@;9OZKmSLQ3Z";
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      boolean boolean0 = true;
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesMultinomial0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.toString();
      evaluation0.toSummaryString();
      evaluation0.addNumericTrainClass(553.5946928, 1879.14);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.trueNegativeRate((-1114383320));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getStructure();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.setPriors(instances1);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      SparseInstance sparseInstance0 = new SparseInstance(204);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.pctCorrect();
      evaluation0.pctUnclassified();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_MinTarget;
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation.getGlobalInfo(gaussianProcesses1);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SelectedTag selectedTag0 = regressionByDiscretization0.getEstimatorType();
      gaussianProcesses1.setFilterType(selectedTag0);
      PART pART0 = new PART();
      double double1 = evaluation0.m_SumSchemeEntropy;
      evaluation0.avgCost();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Classifier classifier0 = AbstractClassifier.makeCopy(naiveBayesMultinomial0);
      AbstractClassifier.runClassifier(classifier0, testInstances0.DEFAULT_WORDS);
      String string0 = DefaultEditorKit.pageDownAction;
      evaluation0.toSummaryString("page-down", true);
      evaluation0.addNumericTrainClass(50.0, 50.0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.delete();
      evaluation0.unweightedMacroFmeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.trueNegativeRate(501);
      evaluation0.weightedTrueNegativeRate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(463);
      double[] doubleArray0 = new double[1];
      evaluation0.m_TrainClassVals = doubleArray0;
      evaluation0.incorrect();
      instances0.lastIndexOf(doubleArray0);
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "wX.e}@;9OZKmSLQ3Z";
      stringArray0[3] = stringArray0[1];
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      evaluation0.confusionMatrix();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      try { 
        evaluation0.evaluateModelOnce((Classifier) randomSubSpace0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation.makeOptionString(multiClassClassifier0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.kappa();
      CostMatrix costMatrix0 = new CostMatrix(105);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      textDirectoryLoader4.getOptions();
      textDirectoryLoader4.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedRecall();
      evaluation0.setPriors(instances0);
      TextDirectoryLoader textDirectoryLoader6 = new TextDirectoryLoader();
      evaluation0.KBRelativeInformation();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFMeanEntropyGain();
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 703.4923006);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.getOptions();
      String string0 = NimbusStyle.MINI_KEY;
      MockRandom mockRandom0 = new MockRandom((-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      C45Loader c45Loader0 = new C45Loader();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.falseNegativeRate(0);
      evaluation0.toSummaryString(true);
      evaluation0.priorEntropy();
      evaluation0.addNumericTrainClass(1.3, (-803.6470176155));
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SMOreg.main((String[]) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader6 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader4.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      SMO sMO1 = new SMO();
      sMO1.toString();
      evaluation0.toMatrixString("@relation");
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) sMO0, instances1, 2, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "wX.e}@;9OZKmSLQ3Z";
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader4.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.precision(1);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.getDiscardPredictions();
      double double0 = evaluation0.m_SumKBInfo;
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.getRevision();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      textDirectoryLoader1.reset();
      textDirectoryLoader0.getDataSet();
      String string0 = TechnicalInformationHandlerJavadoc.BIBTEX_ENDTAG;
      evaluation0.addNumericTrainClass((-4194.42821068745), (-4194.42821068745));
      evaluation0.priorEntropy();
      evaluation0.addNumericTrainClass(609.4, (-4194.42821068745));
      evaluation0.getDiscardPredictions();
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toMatrixString();
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = stringArray0[1];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      SMO sMO0 = new SMO();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 1649.89533920975;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(83, 83);
      Vector vector0 = defaultTableModel0.getDataVector();
      instances0.containsAll(vector0);
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "generic");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "generic");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      instances0.lastIndexOf(textDirectoryLoader0);
      evaluation0.weightedFMeasure();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanEntropyGain();
      evaluation0.KBMeanInformation();
      evaluation0.pctIncorrect();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tRetrieves the options from the XML-data instead of the command line.\n");
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader5 = new TextDirectoryLoader();
      textDirectoryLoader4.getOptions();
      textDirectoryLoader4.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.toMatrixString("@data");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedRecall();
      evaluation0.setPriors(instances0);
      evaluation0.trueNegativeRate(487);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.trueNegativeRate((-1307));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      try { 
        Evaluation.handleCostOption("ej", 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      evaluation0.setPriors(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.correct();
      evaluation0.setPriors(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.areaUnderPRC((-1625));
      double double1 = evaluation0.m_Incorrect;
      evaluation0.addNumericTrainClass((-1773.121), Double.NaN);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      instances0.lastIndexOf(principalComponents0);
      evaluation0.addNumericTrainClass(0.01, 0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(".bsi");
      evaluation0.addNumericTrainClass(1.0E-10, (-1));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.pctCorrect();
      evaluation0.pctUnclassified();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      SMO sMO0 = new SMO();
      sMO0.toString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (java.util.Random) mockRandom0, objectArray0);
      evaluation0.toSummaryString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.confusionMatrix();
      evaluation0.toClassDetailsString("@relation");
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.useNoPriors();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      textDirectoryLoader1.getStructure();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.errorRate();
      textDirectoryLoader1.getDirectory();
      evaluation0.sizeOfPredictedRegions();
      LMT lMT0 = new LMT();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".names";
      stringArray0[1] = "@relation";
      stringArray0[2] = "ied";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".names";
      MultiScheme.main(stringArray0);
      evaluation0.sizeOfPredictedRegions();
      LMT lMT1 = new LMT();
      Object object0 = new Object();
      LMT lMT2 = new LMT();
      lMT2.getOptions();
      Object object1 = Image.UndefinedProperty;
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader1.listOptions();
      evaluation1.rootMeanSquaredError();
      evaluation1.meanAbsoluteError();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      evaluation1.rootMeanPriorSquaredError();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Evaluation.main((String[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dwT0_ 1kv");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SMO sMO0 = new SMO();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.setOutputFilename(false);
      sMO0.setBuildLogisticModels(true);
      sMO0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(6);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = (-2413.8422482);
      gaussianProcesses0.listOptions();
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.clone();
      testInstances0.assign(testInstances1);
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.nextDouble();
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (java.util.Random) mockRandom0, objectArray0);
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.toSummaryString(true);
      evaluation0.priorEntropy();
      LMT lMT0 = new LMT();
      evaluation0.weightedMatthewsCorrelation();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      SMO sMO0 = new SMO();
      Utils.log2 = (double) (-2);
      sMO0.toString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (java.util.Random) mockRandom0, objectArray0);
      evaluation0.toSummaryString();
      evaluation0.trueNegativeRate(1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 3);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 162.0534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      textDirectoryLoader4.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.priorEntropy();
      Evaluation.handleCostOption((String) null, 3165);
      MultiScheme multiScheme0 = new MultiScheme();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom(0L);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      SMO sMO0 = new SMO();
      sMO0.toString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.listOptions();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (java.util.Random) mockRandom0, objectArray0);
      evaluation0.toSummaryString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.confusionMatrix();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFPriorEntropy();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.useNoPriors();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.errorRate();
      String[] stringArray0 = new String[0];
      MultiScheme.main(stringArray0);
      evaluation0.sizeOfPredictedRegions();
      LMT lMT0 = new LMT();
      Object object0 = new Object();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.getOptions();
      sMO0.toString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (java.util.Random) mockRandom0, objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.errorRate();
      evaluation0.falseNegativeRate(0);
      // Undeclared exception!
      try { 
        evaluation0.areaUnderPRC((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.evaluation.ThresholdCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.m_NoPriors = true;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tE.g.: ");
      evaluation0.priorEntropy();
      evaluation0.toClassDetailsString();
      evaluation0.addNumericTrainClass(38.48783195318393, Double.NaN);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MultiScheme multiScheme0 = new MultiScheme();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      double double1 = KStarConstants.ROOT_FINDER_ACCURACY;
      String string0 = Action.MNEMONIC_KEY;
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFMeanEntropyGain();
      evaluation0.getRevision();
      evaluation0.SFSchemeEntropy();
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.m_NoPriors = true;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tE.g.: ");
      evaluation0.priorEntropy();
      try { 
        Evaluation.handleCostOption(".bsi", 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.m_SumSqrClass;
      MultiFilter multiFilter0 = new MultiFilter();
      double double1 = evaluation0.m_MinTarget;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SelectedTag selectedTag0 = regressionByDiscretization0.getEstimatorType();
      gaussianProcesses0.setFilterType(selectedTag0);
      PART pART0 = new PART();
      evaluation0.KBInformation();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.errorRate();
      evaluation0.equals(textDirectoryLoader4);
      evaluation1.useNoPriors();
      evaluation0.useNoPriors();
      evaluation1.SFEntropyGain();
      evaluation1.pctCorrect();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String[] stringArray0 = null;
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setDirectory(file0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      evaluation0.m_ClassPriors = doubleArray0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.m_NoPriors = true;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation _mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka\n\n@attribute text string\n@attribute @@class@@ {}\n\n@data\n");
      evaluation0.priorEntropy();
      evaluation0.toClassDetailsString();
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.weightedFMeasure();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanEntropyGain();
      evaluation0.KBMeanInformation();
      evaluation0.pctIncorrect();
      evaluation0.recall((-206797271));
      J48 j48_0 = new J48();
      java.util.Random random0 = null;
      PART pART0 = new PART();
      try { 
        AbstractClassifier.forName("@relation", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String[] stringArray0 = null;
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.m_NoPriors = true;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tE.g.: ");
      evaluation0.priorEntropy();
      evaluation0.toClassDetailsString();
      Random.setNextRandom(12);
      String string0 = Action.MNEMONIC_KEY;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.toSummaryString(false);
      evaluation0.priorEntropy();
      try { 
        AbstractClassifier.forName("CAUCHIT", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: CAUCHIT
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SMOreg.main((String[]) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.addNumericTrainClass(0.0, 0.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.m_NoPriors = true;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation _mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka\n\n@attribute text string\n@attribute @@class@@ {}\n\n@data\n");
      evaluation0.priorEntropy();
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.KBRelativeInformation();
      MultiFilter multiFilter0 = new MultiFilter();
      double double1 = evaluation0.m_MinTarget;
      evaluation0.trueNegativeRate((-1307));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", 3);
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      SMO sMO0 = new SMO();
      sMO0.getOptions();
      sMO0.toString();
      evaluation0.toClassDetailsString("SMO: No model built yet.");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.nextDouble();
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (java.util.Random) mockRandom0, objectArray0);
      evaluation0.toSummaryString();
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.confusionMatrix();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.errorRate();
      evaluation0.KBInformation();
      evaluation0.useNoPriors();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.useNoPriors();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.equals(multiClassClassifierUpdateable0);
      J48 j48_0 = new J48();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, " ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMO sMO0 = new SMO();
      sMO0.getOptions();
      sMO0.toString();
      evaluation0.toClassDetailsString("SMO: No model built yet.");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-1));
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (java.util.Random) mockRandom0, objectArray0);
      MultiScheme multiScheme0 = new MultiScheme();
      C45Loader c45Loader0 = new C45Loader();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.falseNegativeRate(0);
      double double1 = evaluation0.priorEntropy();
      evaluation0.toMatrixString(" ");
      AllFilter allFilter0 = new AllFilter();
      Instance instance0 = allFilter0.output();
      evaluation0.updateStatsForPredictor(double1, instance0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Classifier classifier0 = AbstractClassifier.makeCopy(naiveBayesMultinomial0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = "@relation";
      AbstractClassifier.runClassifier(naiveBayesMultinomial0, stringArray0);
      AbstractClassifier.runClassifier(classifier0, (String[]) null);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.equals((Object) null);
      SystemInUtil.addInputLine(".bsi");
      SparseInstance sparseInstance0 = new SparseInstance(3484);
      try { 
        evaluation0.updateStatsForPredictor(3484, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BIT");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      TimeZone.getAvailableIDs();
      Instances instances0 = textDirectoryLoader3.getStructure();
      PART pART0 = new PART();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1710.35;
      doubleArray0[1] = (-1122.0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\tOnly outputs the graph representation of the classifier.\n");
      doubleArray0[2] = (-1596.8);
      doubleArray0[3] = 1350.11;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation.getGlobalInfo(gaussianProcesses0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      PART pART0 = new PART();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.useNoPriors();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.equals(evaluation0);
      evaluation0.KBInformation();
      String string0 = DefaultEditorKit.pageDownAction;
      evaluation0.weightedPrecision();
      evaluation0.toSummaryString((String) null, true);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.delete();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "null\nTotal Number of Instances                0     \n";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      stringArray0[3] = "null\nTotal Number of Instances                0     \n";
      TextDirectoryLoader.main(stringArray0);
      evaluation0.unweightedMacroFmeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.errorRate();
      LMT lMT0 = new LMT();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      SparseInstance sparseInstance0 = new SparseInstance(3052);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      String string0 = BorderLayout.BEFORE_FIRST_LINE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Action.MNEMONIC_KEY;
      MultiFilter multiFilter0 = new MultiFilter();
      double double0 = evaluation0.m_MinTarget;
      ArffLoader arffLoader1 = new ArffLoader();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }
}
