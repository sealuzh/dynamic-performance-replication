/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:03:14 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.File;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.asmFactory = aSMDeserializerFactory0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("getFieldValue error.", parserConfig0, 7);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0d}k?wg/${oWJwpC$\"", parserConfig0, 123);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.handleResovleTask("");
      ClassLoader.getSystemClassLoader();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      StringReader stringReader0 = new StringReader("TODO : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 252);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getLexer();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lea.J4%.qo|HjH`", parserConfig0, 18);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("i<qR8");
      Object object0 = new Object();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = new Boolean("-_nM8TWn8r+!a+Z)]_95");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-_nM8TWn8r+!a+Z)]_95");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.fieldTypeResolver = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "-_nM8TWn8r+!a+Z)]_95");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("i<qR8");
      defaultJSONParser0.getObject("java.awt.Color");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : i<qR8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 20);
      defaultJSONParser0.parseObject((Type) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "baN.6AW";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("baN.6AW");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getConfig();
      defaultJSONParser0.close();
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(421);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZonedDateTime");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q\"=.\"i9jMlr!pgZyO");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : q\"=.\"i9jMlr!pgZyO
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^lh#+9Cp-", parserConfig0, 41);
      HashMap<MockJapaneseDate, BufferCapabilities> hashMap0 = new HashMap<MockJapaneseDate, BufferCapabilities>();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("^lh#+9Cp-", identityHashMap0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : ^lh#+9Cp-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = new Object();
      Class<JobAttributes> class0 = JobAttributes.class;
      HashSet<BigInteger> hashSet0 = new LinkedHashSet<BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s=s&I]", parserConfig0, (-200));
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) list0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : s=s&I]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("baN.6AW");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : baN.6AW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ub$5Y[?", parserConfig0);
      defaultJSONParser0.checkListResolve((Collection) null);
      TreeMap<MockMinguoDate, BreakIterator> treeMap0 = new TreeMap<MockMinguoDate, BreakIterator>();
      defaultJSONParser0.checkMapResolve(treeMap0, treeMap0);
      defaultJSONParser0.getInput();
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("baN.6AW");
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("baN.6AW");
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      defaultJSONParser0.setDateFormat("baN.6AW");
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s=s&I]", parserConfig0, (-200));
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-200));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("JxHdSw`St/eM\"/D/$W0", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.handleResovleTask("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      defaultJSONParser0.handleResovleTask("");
      defaultJSONParser0.setResolveStatus(2);
      defaultJSONParser0.getExtraTypeProviders();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName com.alibaba.fastjson.parser.ParserConfig@94
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("i<qR8");
      defaultJSONParser0.getObject("java.awt.Color");
      ArrayDeque<Insets> arrayDeque0 = new ArrayDeque<Insets>();
      ArrayDeque<Insets> arrayDeque1 = arrayDeque0.clone();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[floa9", parserConfig0);
      defaultJSONParser0.handleResovleTask("[floa9");
      defaultJSONParser0.setResolveStatus(0);
      defaultJSONParser0.getExtraTypeProviders();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "[floa9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Boolean boolean0 = new Boolean("create deserializeUsing ObjectDeserializer error");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create deserializeUsing ObjectDeserializer error");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.fieldTypeResolver = null;
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[foat", parserConfig0);
      ArrayDeque<JSONObject> arrayDeque0 = new ArrayDeque<JSONObject>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Exceptions", parserConfig0);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("^lh#+9Cp-", parserConfig0, 41);
      HashMap<MockJapaneseDate, BufferCapabilities> hashMap0 = new HashMap<MockJapaneseDate, BufferCapabilities>();
      Boolean boolean0 = Boolean.FALSE;
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      defaultJSONParser0.config(feature0, false);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<ExtraTypeProvider> vector0 = new Vector<ExtraTypeProvider>();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", class ");
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.time.ZonedDteTme");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbol(defaultJSONParser0.symbolTable);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Type type0 = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : ava.time.ZonedDteTme
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Locale> vector0 = new Stack<Locale>();
      System.setCurrentTimeMillis((-8720046426850100497L));
      int int0 = 295;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{37d&/YNEbhb=#Z)", parserConfig0, 295);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      HashSet<Float> hashSet0 = new HashSet<Float>();
      defaultJSONParser0.checkListResolve(hashSet0);
      Time time0 = new Time(0L);
      defaultJSONParser0.parse((Object) time0);
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.isEnabled(feature0);
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0, (Object) time0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 00:00:00
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}m@04M1:$DnY+Sd,yt#", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[24];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3018);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getFieldTypeResolver();
      Object object0 = new Object();
      Locale locale0 = Locale.CHINA;
      Class<Byte> class0 = Byte.TYPE;
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("WriteSlashAsSpecial");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "WriteSlashAsSpecial");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00.000", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      ParseContext parseContext0 = defaultJSONParser0.context;
      Locale locale0 = Locale.ENGLISH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("yyyy-MM-dd HH:mm:ss", locale0);
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) mockSimpleDateFormat0, (Object) classLoader0);
      assertNotNull(parseContext1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.setConfig(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.setConfig(parserConfig0);
      ArrayDeque<MockThaiBuddhistDate> arrayDeque0 = new ArrayDeque<MockThaiBuddhistDate>();
      jSONScanner0.sp = 0;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0, (Object) mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@10d0e18a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = ',';
      charArray0[1] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3821);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.time.ZoneRegion");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "java.time.ZoneRegion", (Object) "java.time.ZoneRegion");
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) null);
      defaultJSONParser0.resolveReference("$.fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(719, 719);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[13];
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 2);
      defaultJSONParser0.close();
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Insets> arrayList0 = new ArrayList<Insets>();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[foat", parserConfig0);
      defaultJSONParser0.checkListResolve(arrayList0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 414);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      TreeMap<PageAttributes, Float> treeMap0 = new TreeMap<PageAttributes, Float>();
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayCountry();
      DecimalFormatSymbols.getInstance(locale0);
      Class<Byte> class0 = Byte.TYPE;
      TreeMap<GridBagConstraints, BitSet> treeMap1 = new TreeMap<GridBagConstraints, BitSet>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = ',';
      charArray0[1] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 460);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      treeMap0.keySet();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("va.", parserConfig0, (-1451));
      defaultJSONParser0.popContext();
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[0wj>XZ$MPz", parserConfig0);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error :error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[0wj>XZ$MPz", parserConfig0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Timestamp> class0 = Timestamp.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5");
      Byte byte0 = new Byte((byte)98);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TODO");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TODO", 2);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner1);
      defaultJSONParser1.getExtraProcessors();
      defaultJSONParser1.getExtraProcessors();
      defaultJSONParser1.getFieldTypeResolver();
      defaultJSONParser0.getObject("#]bIT_ya.Gh/");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      jSONReaderScanner1.scanUUID('<');
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, json : 5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 414);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      TreeMap<PageAttributes, Float> treeMap0 = new TreeMap<PageAttributes, Float>();
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayCountry();
      DecimalFormatSymbols.getInstance(locale0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = '$';
      charArray0[2] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, ',');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraProcessors();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Class<Byte> class0 = Byte.TYPE;
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0d}k?wg/${oWJwpC$\"", parserConfig0, (-1546));
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[4] = '?';
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",qN-$C*/p]", parserConfig0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      HashSet<Collator> hashSet0 = new HashSet<Collator>();
      defaultJSONParser0.checkListResolve(hashSet0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ArrayDeque<JSONObject> arrayDeque0 = new ArrayDeque<JSONObject>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : pos 3, json : ,qN-$C*_/p]
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '?';
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",qN-$C*/p]", parserConfig0);
      LinkedHashSet<Collator> linkedHashSet0 = new LinkedHashSet<Collator>();
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Float float0 = new Float((double) '?');
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) null);
      Float.isFinite(0);
      IdentityHashMap<DecimalFormat, Time> identityHashMap0 = new IdentityHashMap<DecimalFormat, Time>();
      defaultJSONParser0.getDateFormat();
      parseContext0.toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : pos 3, json : ,qN-$C*_/p]
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ", parserConfig0, (-4022));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("L5");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.accept(1, 1);
      ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class1, (PropertyNamingStrategy) null);
      DateCodec dateCodec0 = new DateCodec();
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'S';
      charArray0[2] = '?';
      charArray0[3] = 'S';
      Class<JobAttributes> class0 = JobAttributes.class;
      HashSet<BigInteger> hashSet0 = new HashSet<BigInteger>();
      int int0 = 5;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 5, parserConfig0, 15);
      Integer integer0 = new Integer(8);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class java.lang.Integer, property S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[float", parserConfig0);
      Point point0 = new Point(1, 2);
      ParserConfig parserConfig1 = ParserConfig.global;
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getFieldTypeResolver();
      Class<Dimension> class0 = Dimension.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ava.");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Object object0 = new Object();
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      ArrayDeque<MockThaiBuddhistDate> arrayDeque0 = new ArrayDeque<MockThaiBuddhistDate>();
      arrayDeque0.clone();
      jSONScanner0.sp = 0;
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<Insets> arrayList0 = new ArrayList<Insets>();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      int int0 = 0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[lB!t", parserConfig0, 0);
      Properties properties0 = new Properties();
      Point point0 = new Point(1, (-292));
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "[lB!t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [lB!t
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<Insets> arrayList0 = new ArrayList<Insets>();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[float", parserConfig0, 0);
      Properties properties0 = new Properties();
      Vector<SimpleTimeZone> vector0 = new Vector<SimpleTimeZone>();
      Consumer<SimpleTimeZone> consumer0 = (Consumer<SimpleTimeZone>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "yyyy-MM-dd'T'HH:mm:ss.SSS");
      vector0.add(simpleTimeZone0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")3~!d1.`c=");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1410);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 418);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Locale locale0 = Locale.ITALIAN;
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) ")3~!d1.`c=");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, ")3~!d1.`c=");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSON.defaultLocale = locale0;
      Locale locale1 = Locale.JAPANESE;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      stack0.removeElement(locale0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S", parserConfig0, 21);
      defaultJSONParser0.setContext((Object) stack0, (Object) locale0);
      defaultJSONParser0.getObject("S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      defaultJSONParser0.popContext();
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      Object object1 = new Object();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSON.defaultLocale = locale0;
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap1 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S", parserConfig0, (-17));
      defaultJSONParser0.setContext((Object) stack0, (Object) locale0);
      defaultJSONParser0.getObject("S");
      defaultJSONParser0.getInput();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("|W~c0=JD|2_*v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=|w~c0=jd|2_*v
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSON.defaultLocale = locale0;
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap1 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S", parserConfig0, 21);
      defaultJSONParser0.setContext((Object) stack0, (Object) locale0);
      defaultJSONParser0.getObject("S");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(21, 2177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Set, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[21];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      String string0 = File.pathSeparator;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[float");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[float", jSONReaderScanner0, parserConfig0);
      Feature feature0 = Feature.IgnoreAutoType;
      defaultJSONParser0.isEnabled(feature0);
      defaultJSONParser0.getExtraTypeProviders();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1410;
      longArray0[1] = (long) 1410;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JSON.defaultLocale = locale0;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S", parserConfig0, 21);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) stack0, (Object) locale0);
      defaultJSONParser0.getObject("S");
      String string0 = parseContext0.toString();
      TreeMap<PageAttributes, Float> treeMap0 = new TreeMap<PageAttributes, Float>();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Object object0 = new Object();
      defaultJSONParser0.getContext();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Object object1 = defaultJSONParser0.parseKey();
      assertFalse(object1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[24];
      charArray0[0] = ',';
      charArray0[1] = 'F';
      charArray0[2] = '?';
      charArray0[4] = '?';
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Class<Byte> class0 = Byte.TYPE;
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 74, 74);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = File.pathSeparator;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      char[] charArray0 = new char[4];
      charArray0[1] = '8';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":");
      charArray0[0] = '5';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 28, '\u0000');
      jSONReaderScanner1.getTimeZone();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator(":", 0);
      JSONScanner jSONScanner0 = new JSONScanner("AutoCloseSource", 28);
      jSONScanner0.scanISO8601DateIfMatch(true);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":");
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Enum;)V");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(Ljava/lang/Enum;)V");
      JSON.DEFAULT_GENERATE_FEATURE = 63;
      defaultJSONParser0.getSymbolTable();
      Stack<ExtraProcessor> stack0 = new Stack<ExtraProcessor>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.getObject("(Ljava/lang/Enum;)V");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(Ljava/lang/Enum;)V");
      defaultJSONParser0.checkListResolve(stack0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (Ljava/lang/Enum;)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0);
      defaultJSONParser0.getContext();
      Float float0 = new Float(1.0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) float0, (Object) null);
      Object object0 = defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s~", parserConfig0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Timestamp> class0 = Timestamp.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '9';
      charArray0[1] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 496);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.parse((Object) charArray0);
      defaultJSONParser0.getResolveTaskList();
      BitSet bitSet0 = new BitSet(496);
      defaultJSONParser0.handleResovleTask((Object) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1426);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "@");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      Locale locale0 = JSON.defaultLocale;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.setContext((ParseContext) null);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("@");
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(choiceFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")3~!d1.`c=");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")3~!d1.`c=", parserConfig0);
      Class<Time> class0 = Time.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )3~!d1.`c=
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<Locale> stack0 = new Stack<Locale>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{37d&/YNEbhb=#Z)", parserConfig0, 295);
      defaultJSONParser0.getExtraProcessors();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Class<Byte> class0 = Byte.TYPE;
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      String string0 = "$s$ntax error, position at ";
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {37d&/YNEbhb=#Z)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1426);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "@");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.setContext((ParseContext) null);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("@");
      defaultJSONParser0.handleResovleTask(choiceFormat0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3821);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      TreeMap<GridBagConstraints, BitSet> treeMap0 = new TreeMap<GridBagConstraints, BitSet>();
      treeMap0.keySet();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = '6';
      charArray0[2] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3018);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultJSONParser0.getExtraProcessors();
      char[] charArray1 = new char[3];
      charArray1[0] = '6';
      charArray1[1] = '6';
      charArray1[2] = ',';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 1);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      TreeMap<PageAttributes, Float> treeMap0 = new TreeMap<PageAttributes, Float>();
      defaultJSONParser1.accept(2);
      Float float0 = new Float(1.0);
      defaultJSONParser0.checkMapResolve(treeMap0, float0);
      TreeMap<GridBagConstraints, BitSet> treeMap1 = new TreeMap<GridBagConstraints, BitSet>();
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig(false);
      Locale locale0 = Locale.US;
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(breakIterator0, defaultJSONParser1.lexer, parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser2.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      classLoader1.setPackageAssertionStatus("+M;?{{", false);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+M;?{{", parserConfig0);
      LinkedList<ExtraTypeProvider> linkedList0 = new LinkedList<ExtraTypeProvider>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser1.checkListResolve(linkedList0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
      TreeMap<PageAttributes, Float> treeMap0 = new TreeMap<PageAttributes, Float>();
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : +M;?{{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("r_IPiK:D,sRe_/=DO!", parserConfig0);
      parserConfig0.setAutoTypeSupport(true);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getDateFormat();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[\u0000wj>XaZ$MPz", parserConfig0);
      defaultJSONParser0.checkListResolve((Collection) null);
      TreeMap<MockMinguoDate, BreakIterator> treeMap0 = new TreeMap<MockMinguoDate, BreakIterator>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "fastjson.parser.deny");
      Vector<SimpleTimeZone> vector0 = new Vector<SimpleTimeZone>();
      vector0.add(simpleTimeZone0);
      vector0.add(simpleTimeZone0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [\u0000wj>XaZ$MPz
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[\u0000wj>XaZ$MPz", parserConfig0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("[\u0000wj>XaZ$MPz", identityHashMap0);
      JSONField jSONField0 = mock(JSONField.class, new ViolatedAssumptionAnswer());
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [\u0000wj>XaZ$MPz
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1426);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$S_}I7O");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Locale locale0 = Locale.ENGLISH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$S_}I7O");
      defaultJSONParser0.setContext((ParseContext) null);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      defaultJSONParser0.resolveReference("@");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Type[] typeArray0 = new Type[4];
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      boolean boolean0 = false;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[0wj>XZ$MPz", parserConfig0);
      LinkedList<GridBagConstraints> linkedList0 = new LinkedList<GridBagConstraints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : [0wj>XZ$MPz
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<Locale> stack0 = new Stack<Locale>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{37d&/YNEbhb=#Z)", parserConfig0, 295);
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("p5>", parserConfig0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(Ljava/Flang/Enum;)V");
      HashSet<Collator> hashSet0 = new HashSet<Collator>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gaWlM_orTDmN#6umb");
      defaultJSONParser1.checkListResolve(hashSet0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ArrayDeque<JSONObject> arrayDeque0 = new ArrayDeque<JSONObject>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3pos 1, json : {37d&/YNEbhb=#Z)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[0wj>XZ$MPz", parserConfig0);
      JSONObject jSONObject0 = new JSONObject(false);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : 1
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = ")3~!d1.`c=";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")3~!d1.`c=");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1385);
      Integer integer0 = new Integer(1385);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 418);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner1);
      Locale locale0 = Locale.ITALIAN;
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) ")3~!d1.`c=");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, ")3~!d1.`c=");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Feature feature0 = Feature.SortFeidFastMatch;
      defaultJSONParser0.config(feature0, true);
      IdentityHashMap<PageAttributes, HttpCookie> identityHashMap0 = new IdentityHashMap<PageAttributes, HttpCookie>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray0 = new JSONArray();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<MockMinguoDate> list0 = jSONArray0.toJavaList(class0);
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, list0, 1556);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.setContext((ParseContext) null);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(mapDeserializer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1556, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
