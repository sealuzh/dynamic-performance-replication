/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:21:29 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.net.URI;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte) (-48);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-656), 74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byte byte0 = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)127;
      int int0 = (-212);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (-212));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("System");
      Utility.setBit((byte)9, (byte)9);
      Utility.searchOpcode("anqYAH.+o`.Mn!");
      Utility.fillup("M%G\"Rqj#['V{]\"otk", 168, true, 'y');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M%G\"Rqj#['V{]\"otkyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy";
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "invokedynamic";
      stringArray0[3] = "M%G\"Rqj#['V{]\"otkyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy";
      stringArray0[4] = "M%G\"Rqj#['V{]\"otkyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy";
      stringArray0[5] = "System";
      stringArray0[6] = "System";
      Utility.methodTypeToSignature("invokedynamic", stringArray0);
      try { 
        Utility.methodSignatureReturnType("`p.'=b4EQss", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``p.'=b4EQss'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "T` AJ';1{_Y";
      Utility.signatureToString("T` AJ';1{_Y", false);
      Utility.signatureToString("T` AJ';1{_Y", false);
      String string1 = "Class ";
      try { 
        Utility.typeOfMethodSignature("Class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.setBit(95, 95);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte) (-113);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lu&n#bs}#/Dr;V");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-116);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (-299), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)62;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmple\t\t#16453", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.convertString("\nException handler(s) = \n");
      boolean boolean0 = true;
      Utility.compactClassName("\nException handler(s) = \n", "\nException handler(s) = \n", true);
      Utility.clearBit(188, 13);
      Utility.getSignature("\nException handler(s) = \n");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("void", (String) null, "void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.getSignature("\t\t#");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "L#;";
      objectArray0[1] = (Object) "\t\t#";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[2] = (Object) "\t\t#";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "\t\t#";
      objectArray0[6] = (Object) "\t\t#";
      Utility.printArray(objectArray0, false);
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte) (-35);
      byteArray1[3] = (byte)34;
      byteArray1[4] = (byte) (-35);
      byteArray1[5] = (byte) (-35);
      byteArray1[6] = (byte) (-12);
      byteArray1[7] = (byte) (-12);
      byteArray1[8] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lstore_0";
      stringArray0[1] = "lstore_0";
      stringArray0[2] = "lstore_0";
      stringArray0[3] = "lstore_0";
      stringArray0[4] = "interface";
      stringArray0[5] = "lstore_0";
      stringArray0[6] = "lstore_0";
      stringArray0[7] = "lstore_0";
      stringArray0[8] = "lstore_0";
      String string0 = Utility.methodTypeToSignature("lstore_0", stringArray0);
      assertEquals("(Llstore_0;Llstore_0;Llstore_0;Llstore_0;Linterface;Llstore_0;Llstore_0;Llstore_0;Llstore_0;)Llstore_0;", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-125), true);
      assertEquals("0:    dup\n1:    monitorexit\n2:    lor\n3:    ishl\n4:    iconst_4\n5:    lxor\n6:    lreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.setBit(46, 11);
      Utility.setBit(2094, 97);
      Utility.compactClassName("e\t .F", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)104;
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("\\");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4076, (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      Utility.classOrInterface(1024);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, 87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit(198, 198);
      Utility.clearBit(198, 198);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":Fl");
      byteArray0[1] = (byte)43;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-67);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char char0 = '0';
      Utility.format(62, 62, false, '0');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)88;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("GwLv\".zA_f;'0Z~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GwLv\".zA_f;'0Z~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-99);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)79, (byte) (-99));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1405), (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    <illegal opcode>
         // 2:    lmul
         // 3:    iastore
         // 4:    <illegal opcode>
         // 5:    ishl
         // 6:    i2d
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.compactClassName("J\"mu)$bFc%b", false);
      Utility.signatureToString("J\"mu)$bFc%b", true);
      byte byte0 = (byte)98;
      byte byte1 = (byte) (-31);
      byte byte2 = (byte)5;
      byte byte3 = (byte) (-94);
      byte byte4 = (byte)88;
      try { 
        Utility.typeOfSignature("5Ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5Ha
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte) (-71), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    lload\t\t%84
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.accessToString(162, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 915, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)91;
      byte byte0 = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)83;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3, 50, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 34395. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)32;
      byte byte1 = (byte)46;
      byteArray0[3] = (byte)46;
      byte byte2 = (byte)79;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)62;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (-1696), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, 190, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((-91), (-91), false, 'e');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(361, 54, false, 'C');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)93;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 80, (int) (byte) (-94), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.replace(" - NWjX&5", "fload_3", "1S>'<L%S4>iy*:-");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(+a4,!(IeBl<Nz", "V", "SAME");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+a4,!(IeBl<Nz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_Class");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-126);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1812), (int) (byte)76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore_1
         // 1:    aconst_null
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    i2f
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "AT9";
      try { 
        Utility.typeOfSignature("AT9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AT9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      Utility.compactClassName("!1%=Okc)kXs1-");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byte byte0 = (byte)89;
      byteArray0[1] = (byte)89;
      byte byte1 = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("!1%=Okc)kXs1-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1%=Okc)kXs1-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.fillup("multianewarray", 1750, false, 'I');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)92;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)77;
      byte byte1 = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",;Ou9h~N#z");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 238, (int) (byte) (-117), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-82);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.equals(byteArray1, byteArray1);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-86));
      constantArray0[0] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-82));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2959, 3485, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(101, 559, false, 'H');
      try { 
        Utility.typeOfSignature
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V");
      String string0 = Utility.convertString(",#OmWiK&bhv}u|O'");
      assertEquals(",#OmWiK&bhv}u|O\\'", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1148), 123);
      assertEquals("0:    aconst_null\n1:    fmul\n2:    dup_x1\n3:    <illegal opcode>\n4:    fastore\n5:    astore_3\n6:    bastore\n7:    iconst_5\n8:    fstore_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-107);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('{');
      String string0 = ";/1n1I1\"yuO%6?";
      try { 
        Utility.typeOfSignature(";/1n1I1\"yuO%6?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;/1n1I1\"yuO%6?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.convertString("<illegal opcode>");
      Utility.convertString("<illegal opcode>");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)62;
      byte byte0 = (byte)43;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)10;
      int int0 = 1171;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1171, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      Utility.classOrInterface(1024);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, 87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 35, 158, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)88;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (int) (byte) (-62));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0:    monitorenter\n1:    pop2\n";
      stringArray0[1] = "iaload";
      stringArray0[2] = "0:    monitorenter\n1:    pop2\n";
      stringArray0[3] = "iaload";
      Utility.methodTypeToSignature("iaload", stringArray0);
      Utility.searchOpcode("d+)Pqw#}jVpuL)%N@4");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("^1r,", "%[b72N`c", "eKCX&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^1r,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-78);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 344, 85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.convertString("istore");
      Utility.methodTypeToSignature("istore", (String[]) null);
      Utility.methodSignatureToString("()Listore;", " Hdi.#d", "istore", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 155;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, 155, 155, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "X7J~XEaeivX";
      try { 
        Utility.typeOfSignature("X7J~XEaeivX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X7J~XEaeivX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)8;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)8);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantInteger1.accept(emptyVisitor0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-87), (int) (byte) (-87), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%189
         // 2:    lushr
         // 3:    <illegal opcode>
         // 4:    iconst_2
         // 5:    <illegal opcode>
         // 6:    dreturn
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tdefault = ");
      byte[] byteArray0 = Utility.decode("{$19V:]cm5", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 91, 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.compactClassName("*)CJo$]bVZ'>;W$4", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-5);
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, 1478, true);
      try { 
        Utility.methodSignatureArgumentTypes("tableswitch", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tableswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "Only element values of type array can be built with this ctor - type specified: ";
      Utility.searchOpcode("Only element values of type array can be built with this ctor - type specified: ");
      Utility.classOrInterface((short) (-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type array can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)119;
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(81);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(81, (byte)0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 403, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.classOrInterface(74);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-107);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (int) (byte) (-118), true);
      try { 
        Utility.methodSignatureArgumentTypes("0:    lstore_3\n1:    l2d\n2:    fcmpl\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lstore_3
         // 1:    l2d
         // 2:    fcmpl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("getfield");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (int) (byte) (-72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.format(182, 59, false, '');
      Utility.replace("182", "182", (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)31;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, (-1202), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Mvf m>1OC64G5IW;6}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mvf m>1OC64G5IW;6}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.clearBit(6, 584);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      byte byte1 = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)107;
      byte byte2 = (byte)122;
      byteArray0[3] = (byte)122;
      byte byte3 = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)29;
      byte byte4 = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-102);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)29, 3924);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)87;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)87;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)87;
      byteArray1[3] = (byte) (-56);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("r*qf<Tz0~E^W2#`@0", false);
      assertEquals("r*qf<Tz0~E^W2#`@0", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)39;
      objectArray0[1] = (Object) (byte) (-56);
      objectArray0[2] = (Object) (byte) (-56);
      objectArray0[3] = (Object) (byte)87;
      objectArray0[4] = (Object) "r*qf<Tz0~E^W2#`@0";
      objectArray0[5] = (Object) (byte) (-4);
      objectArray0[6] = (Object) (byte)39;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("39, -56, -56, 87, r*qf<Tz0~E^W2#`@0, -4, 39", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.getSignature("class_index");
      Utility.replace("class_index", "class_index", "@75XEk$<\r");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Lclass_index;";
      stringArray0[1] = "'+&X&;2B6!";
      stringArray0[2] = "@75XEk$<\r";
      stringArray0[3] = "@75XEk$<\r";
      Utility.methodTypeToSignature("'+&X&;2B6!", stringArray0);
      Utility.replace("F*<zWz^zcMS'B2m}2", "(LLclass_index;;L'+&X&;2B6!;L@75XEk$<\r;L@75XEk$<\r;)L'+&X&;2B6!;", "'+&X&;2B6!");
      Utility.typeOfSignature("F*<zWz^zcMS'B2m}2");
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@75XEk$<\r");
      Utility.accessToString(175, true);
      Utility.methodSignatureReturnType("F*<zWz^zcMS'B2m}2", true);
      try { 
        Utility.typeOfSignature("@75XEk$<\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @75XEk$<\r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.replace("Ny]<F0/S> _Kii/N", "#", (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2043), 188, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wwDUr?sV");
      Utility.accessToString(2391, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aastore
         // 1:    <illegal opcode>
         // 2:    dconst_0
         // 3:    <illegal opcode>
         // 4:    ixor
         // 5:    fconst_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "S(.O=m~<C1dLSB_c";
      Utility.typeOfSignature("S(.O=m~<C1dLSB_c");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S(.O=m~<C1dLSB_c");
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        byteSequence0.read(byteArray0, (int) (byte)9, (-2053));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VN9Ui7Er;{9bcn?q`k");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(649, 649);
      Utility.setBit(649, 754);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.getSignature("i2b");
      Utility.getSignature("i2b");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("#h/4cjiajVfPm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #h/4cjiajVfPm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.isJavaIdentifierPart('(');
      Utility.decode("java.lang.y56x?al^$", false);
      String string0 = "ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd512";
      Utility.compactClassName("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd512", "java.lang.y56x?al^$", true);
      String string1 = "Warning: Padding byte != 0 in ";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd512", "Warning: Padding byte != 0 in ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Warning: Padding byte != 0 in \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 4073;
      char char0 = '%';
      Utility.fillup("L*N1w^;V", 4073, true, '%');
      Utility.typeOfSignature("L*N1w^;V");
      try { 
        Utility.typeOfSignature("7LZqR20!M1!i~}8r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7LZqR20!M1!i~}8r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.compactClassName("j079TB2[|3", false);
      Utility.clearBit((-1667), 188);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 1871, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2d
         // 1:    <illegal opcode>
         // 2:    fstore\t\t%108
         // 4:    <illegal opcode>
         // 5:    ishr
         // 6:    fastore
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-84);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, 64, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.accessToString(2);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)83;
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)125;
      byte byte1 = (byte)36;
      byteArray0[2] = (byte)36;
      byte byte2 = (byte)87;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-54);
      byte byte3 = (byte)73;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.clearBit(6, 584);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      byte byte1 = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)115;
      byte byte2 = (byte)122;
      byteArray0[3] = (byte)122;
      byte byte3 = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-85);
      byte byte4 = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-102);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, 3924);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", high = ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)65;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 961, 234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.compactClassName("*)CJo$]bVZ'>;W$4", true);
      assertEquals("*)CJo$]bVZ'>;W$4", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-5);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 1478, true);
      assertEquals("0:    fsub\n1:    pop2\n2:    <illegal opcode>\n3:    dup2_x1\n4:    fload\t\t%254\n6:    <illegal opcode>\n", string1);
      
      try { 
        Utility.decode("*)CJo$]bVZ'>;W$4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3702, (-2238));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-28));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(byteSequence0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantInteger constantInteger1 = new ConstantInteger(213);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "anewarray";
      stringArray0[1] = "anewarray";
      stringArray0[2] = "anewarray";
      Utility.methodTypeToSignature("anewarray", stringArray0);
      try { 
        Utility.typeOfSignature("UNKNOWN (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UNKNOWN (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-75);
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("MjpF.Q!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MjpF.Q!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "8-";
      try { 
        Utility.typeOfSignature("8-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#;Ti+Mf\"9$+UD)&");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.accessToString((-1085), false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)17;
      Utility.toHexString(byteArray0);
      Utility.convertString(", ");
      Utility.setBit(2077, (-1085));
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte) (-47);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2077, 85);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 78, 216, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%: 8$jut9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %: 8$jut9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-98), (int) (byte) (-41));
      assertEquals("0:    <illegal opcode>\n1:    iadd\n2:    <illegal opcode>\n3:    ifle\t\t#37\n", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.compactClassName("J\"mu)$bFc%b", false);
      Utility.signatureToString("J\"mu)$bFc%b", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (int) (byte) (-31), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V1=or:pl7`(");
      String string0 = "=|T4Z";
      try { 
        Utility.typeOfSignature("=|T4Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =|T4Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.fillup("Q", (-2894), false, 'f');
      Utility.isSet(1654, 1654);
      Utility.compactClassName("Q", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)13;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 35, 950);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[hzeXxz");
      boolean boolean0 = true;
      Utility.format(67, (-824), true, ':');
      Utility.setBit(620, 67);
      try { 
        Utility.typeOfSignature("67");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 67
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byte byte0 = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-95);
      byte byte1 = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readBoolean();
      byteSequence0.readFloat();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpne\t\t#21552", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "*)CJo$]bVZ";
      try { 
        Utility.typeOfSignature("*)CJo$]bVZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )CJo$]bVZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("return", false);
      Utility.classOrInterface(126);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "class";
      Utility.printArray(objectArray0, false, false);
      Utility.setBit(126, 34);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 126, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-51), (-455));
      assertEquals("0:    iconst_3\n1:    d2i\n2:    istore_3\n3:    iload_0\n4:    astore_1\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    pop\n8:    astore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "T.MbF";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("T.MbF", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "T.MbF");
      Object[] objectArray0 = null;
      Utility.printArray(printStream0, (Object[]) null);
      Utility.isSet(2162, 2162);
      Utility.typeOfSignature("T.MbF");
      String string1 = "-~v";
      Utility.convertString("-~v");
      String string2 = "invokespecial";
      String string3 = ">";
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Utility.decode("?a}$)*-@qf0<,", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("?a}$)*-@qf0<,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?a}$)*-@qf0<,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(155);
      constantArray0[0] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte)76;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool0, (-751), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "/6D'|JP77(kI{jP";
      try { 
        Utility.typeOfSignature("/6D'|JP77(kI{jP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /6D'|JP77(kI{jP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.compactClassName("Ay9~n.");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ay9~n.");
      Utility.accessToString((-3626), false);
      boolean boolean1 = true;
      Utility.format((-509), 180, true, 's');
      String string0 = "double";
      Utility.compactClassName("double", false);
      String string1 = "\"jtyok";
      try { 
        Utility.typeOfSignature("\"jtyok");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"jtyok
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = ", code_length = ";
      try { 
        Utility.typeOfSignature(", code_length = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , code_length = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte) (-88), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("HK$b5Za#", false);
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "HK$b5Za#";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("[qNL6~A5P] W' ?");
      Utility.isJavaIdentifierPart('S');
      String string0 = "&T?xT-dLtH0R,mNYt";
      Utility.compactClassName("&T?xT-dLtH0R,mNYt", true);
      Utility.typeOfSignature("Invalid type: ");
      Utility.accessToString((int) (byte)10, false);
      Utility.classOrInterface((byte)10);
      Utility.isJavaIdentifierPart('Z');
      Utility.isSet(51, 51);
      try { 
        Utility.typeOfSignature("&T?xT-dLtH0R,mNYt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &T?xT-dLtH0R,mNYt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E',~KF9?>{l<U^s");
      Utility.accessToString(4164, true);
      int int0 = 80;
      Utility.accessToString(80, true);
      try { 
        Utility.typeOfSignature("E',~KF9?>{l<U^s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E',~KF9?>{l<U^s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char char0 = 'G';
      Utility.fillup("Unreachable default case reached!", (-276), true, 'G');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.clearBit(6, 584);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      byte byte1 = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)107;
      byte byte2 = (byte)122;
      byteArray0[3] = (byte)122;
      byte byte3 = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-85);
      byte byte4 = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-102);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, 3924);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 87;
      boolean boolean0 = true;
      Utility.format(2192, 87, true, 'o');
      Utility.compactClassName("2192ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.searchOpcode("2192ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
      try { 
        Utility.methodSignatureReturnType("invokestatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokestatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("q>}V.yok0M", false);
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(39, 39, true, 'P');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      stringArray0[1] = "71 3e 7d 56 2e 79 6f 6b 30 4d";
      stringArray0[2] = "39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      Utility.methodTypeToSignature("71 3e 7d 56 2e 79 6f 6b 30 4d", stringArray0);
      Utility.compactClassName("39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", true);
      Utility.isJavaIdentifierPart('P');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      objectArray0[1] = (Object) "39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      objectArray0[2] = (Object) "q>}V.yok0M";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "71 3e 7d 56 2e 79 6f 6b 30 4d";
      objectArray0[5] = (Object) "39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      objectArray0[6] = (Object) "71 3e 7d 56 2e 79 6f 6b 30 4d";
      objectArray0[7] = (Object) "39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      objectArray0[8] = (Object) "q>}V.yok0M";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 39PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.replace("G;D0Zx5w", "G;D0Zx5w", "G;D0Zx5w");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-122);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((-444));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString((-354));
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1504, (-685), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.typeOfSignature("DHh*Hn-8y^R");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, false);
      Utility.classOrInterface((byte)7);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("uhl>%E/G0H@&Dl!l", false);
      assertEquals(17, byteArray0.length);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kcaa");
      Utility.compactClassName("-K[Hi%", "ret", false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)103;
      byteArray1[4] = (byte)77;
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("74 4b 34 67 4d", string0);
      
      Utility.fillup("Kcaa", (byte)52, false, '~');
      byte byte0 = Utility.typeOfSignature("JavaClass.debug");
      assertEquals((byte)11, byte0);
      
      String string1 = Utility.fillup("yUyAlC...}+0M 1T]1", 245, false, '+');
      assertEquals("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++yUyAlC...}+0M 1T]1", string1);
      
      String string2 = Utility.encode(byteArray1, false);
      assertEquals("tK4gM", string2);
      
      String string3 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-27);
      byte byte0 = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-27), (int) (byte) (-70), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_1
         // 1:    <illegal opcode>
         // 2:    dstore_3
         // 3:    i2f
         // 4:    iload_0
         // 5:    ldiv
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte) (-14));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("4^(@@PN5`zOBn!", "istore_2", "istore_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4^(@@PN5`zOBn!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.compactClassName("or", false);
      Utility.accessToString(2404, false);
      Utility.typeOfSignature("CcFg $|");
      String string0 = "b(3";
      String string1 = "anewarray";
      boolean boolean0 = true;
      int int0 = 91;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("{<0x", "anewarray");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"anewarray\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.replace("0NiFEm", "6\"~Cr,woM>Q7j9fsB9j", "0NiFEm");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readByte();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)4, 9);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ".9.S~*pi8T^{";
      try { 
        Utility.typeOfSignature(".9.S~*pi8T^{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .9.S~*pi8T^{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "CN NI:]VQ,o0l#-m)rO";
      Utility.getSignature("CN NI:]VQ,o0l#-m)rO");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xoytrs2W");
      Utility.isJavaIdentifierPart('B');
      Utility.compactClassName("CN NI:]VQ,o0l#-m)rO", "Gj%_.vP42!?HI", true);
      Utility.signatureToString("CN NI:]VQ,o0l#-m)rO", true);
      Utility.accessToString(2126);
      Utility.convertString("CN NI:]VQ,o0l#-m)rO");
      String string1 = "T";
      String string2 = "-1c";
      int int0 = 3273;
      int int1 = 838;
      File file0 = MockFile.createTempFile("CN NI:]VQ,o0l#-m)rO", "T", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 1910);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("float");
      int int0 = 509;
      Utility.accessToString(509);
      Utility.typeOfSignature("F");
      Utility.compactClassName("long");
      try { 
        Utility.methodSignatureArgumentTypes("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "GTg(\"W/:.Phl=\"z 9$";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("GTg(\"W/:.Phl=\"z 9$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GTg(\"W/:.Phl=\"z 9$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("QH.&MPYm_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QH.&MPYm_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte) (-106);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4, 2111);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("QE!>(}B23~u&m");
      constantArray0[1] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(19, (byte)10);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-18));
      Constant constant0 = constantFloat0.copy();
      constantArray0[4] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, 4679, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 101. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char char0 = 'I';
      String string0 = Utility.fillup("+^ AV\"8_C@Cv}_m", 1632, true, 'I');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^ AV\"8_C@Cv}_m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Utility.clearBit(203, (-2481));
      Utility.fillup("tableswitch", 203, true, 'M');
      Utility.isSet(86, 203);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tableswitchMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM";
      stringArray0[1] = ">,%=j4x9|TumP";
      stringArray0[2] = ">,%=j4x9|TumP";
      stringArray0[3] = ">,%=j4x9|TumP";
      stringArray0[4] = "tableswitch";
      Utility.methodTypeToSignature(">,%=j4x9|TumP", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-122);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)101, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)46;
      byte byte1 = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 205, (int) (byte) (-19), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "multianewarray";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "multianewarray");
      String string1 = "R";
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "<Q?%fI^Sj";
      Utility.getSignature("<Q?%fI^Sj");
      boolean boolean0 = true;
      Utility.format(72, 73, true, '&');
      Utility.setBit(72, (-943));
      try { 
        Utility.typeOfSignature("<Q?%fI^Sj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Q?%fI^Sj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tdefault = ");
      byte[] byteArray0 = Utility.decode("{B$?9V:fcm5", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 91, 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 1538;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(1538, 1157, false, 'B');
      Utility.convertString("A]Gf=");
      Utility.typeOfSignature(string0);
      Utility.compactClassName("A]Gf=");
      byte[] byteArray0 = Utility.decode("Ry1>&cTe", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.compactClassName("Fg`\".TT[(/}x]gr");
      Utility.signatureToString("Fg`\".TT[(/}x]gr");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Fg`\".TT[(/}x]gr", "ifnonnull", "O.Y8!y[<z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Fg`\".TT[(/}x]gr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "Z;25uG%IT,Z";
      Utility.methodSignatureReturnType("Z;25uG%IT,Z");
      Utility.typeOfSignature("Z;25uG%IT,Z");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, 225);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "87;o!!D";
      stringArray0[3] = "void";
      stringArray0[4] = "Only element values of type annotation can be built with this ctor - type specified: ";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-29);
      byteArray0[1] = (byte)57;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "[|~ikRSwr((BO@J";
      Utility.typeOfSignature("[|~ikRSwr((BO@J");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.format((-1633), 189, true, 'E');
      String string0 = "I`ma0;]`6&";
      Utility.typeOfSignature("I`ma0;]`6&");
      Utility.isJavaIdentifierPart('E');
      String string1 = "$7f;[PEE.";
      try { 
        Utility.typeOfSignature("$7f;[PEE.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $7f;[PEE.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)122;
      String string0 = Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(255);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-70), (byte)40);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, 8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("RQ+P!e(k", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.classOrInterface((-1441409593));
      Utility.clearBit((-355), (-1439181048));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte) (-1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 229, (-2499));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "L4DA";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("L4DA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L4DA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^{,-h-]z";
      stringArray0[1] = "^{,-h-]z";
      stringArray0[2] = "^{,-h-]z";
      stringArray0[3] = "^{,-h-]z";
      stringArray0[4] = "^{,-h-]z";
      Utility.methodTypeToSignature("^{,-h-]z", stringArray0);
      Utility.getSignature("^{,-h-]z");
      Utility.methodSignatureArgumentTypes("(L^{,-h-]z;L^{,-h-]z;L^{,-h-]z;L^{,-h-]z;L^{,-h-]z;)L^{,-h-]z;");
      boolean boolean0 = true;
      Utility.accessToString((-3750), true);
      Utility.convertString("^{,-h-]z");
      try { 
        Utility.methodSignatureReturnType("^{,-h-]z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^{,-h-]z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-102);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "9a";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte) (-102);
      objectArray0[4] = (Object) "{";
      objectArray0[5] = (Object) "{";
      objectArray0[6] = (Object) "{";
      objectArray0[7] = (Object) "{";
      Utility.printArray(objectArray0, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byte byte0 = (byte) (-63);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-56);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte) (-22), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.accessToString(58, true);
      Utility.convertString("private static final");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("private static final");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("07m) X@XNjS'S(SA", "Only element values of type enum can be built with this ctor - type specified: ", "private static final", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 07m) X@XNjS'S(SA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 1974;
      String string0 = Utility.format(1974, 1974, true, 'h');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1974hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)70;
      byte byte0 = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-120), (byte)118);
      byteSequence0.readFloat();
      constantMethodHandle0.setReferenceIndex(167);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)118, (byte)70);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      String string0 = "i2l";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("i2l");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("i2l", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.clearBit(226, 60);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-80);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1089), (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("U*Q)ZhdIDu1WOtsi");
      // Undeclared exception!
      try { 
        Utility.signatureToString("U*Q)ZhdIDu1WOtsi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U*Q)ZhdIDu1WOtsi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 139;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("`H?zM", 139, false, '!');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      try { 
        Utility.typeOfSignature("9J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.clearBit(137, 137);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-126);
      byteArray0[3] = (byte)19;
      byteArray0[6] = (byte) (-19);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-2125));
      ConstantClass constantClass1 = new ConstantClass((byte)28);
      constantArray0[0] = (Constant) constantClass1;
      ConstantLong constantLong0 = new ConstantLong(1610L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-570), 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33280. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "athrow");
      try { 
        Utility.typeOfSignature("?cs=-} !/#bc?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?cs=-} !/#bc?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "O,b(w5u";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O,b(w5u", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O,b(w5u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)15;
      Utility.encode(byteArray0, false);
      String string0 = "44D";
      Utility.getSignature("44D");
      String string1 = "N>dvfVE22r:";
      // Undeclared exception!
      try { 
        Utility.signatureToString("N>dvfVE22r:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N>dvfVE22r:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte) (-22), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "Shn%c-+fx3C<";
      boolean boolean0 = true;
      Utility.fillup("Shn%c-+fx3C<", 32, true, '4');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.format(3955, 3955, false, '&');
      String string1 = Utility.convertString(string0);
      Utility.replace(string0, string0, string1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)87;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)87, 749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 35982. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(43);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.setBit((-261), (-1268));
      Utility.compactClassName(")foKQZ0>hNerzW", true);
      Utility.searchOpcode(")foKQZ0>hNerzW");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-85);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1268), (-261), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    idiv
         // 1:    lsub
         // 2:    aconst_null
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.fillup("arraylength", 12, false, 'G');
      Utility.setBit((-2293), 12);
      Utility.setBit((-2293), 12);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)92;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = Utility.decode("arraylength", false);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)49;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1121), (-1121));
      assertEquals("0:    l2f\n1:    daload\n", string0);
      
      String string1 = Utility.fillup("0:    l2f\n1:    daload\n", 44, true, ')');
      assertEquals("0:    l2f\n1:    daload\n)))))))))))))))))))))", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.compactClassName("aload_3");
      String string0 = "K=x:iPE\\?";
      try { 
        Utility.typeOfSignature("K=x:iPE?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K=x:iPE?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.format(3955, 3955, false, '&');
      String string1 = Utility.convertString(string0);
      Utility.replace(string0, string0, string1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)87;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)87, 749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Hgv7.#w", "(Hgv7.#w", "(Hgv7.#w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hgv7.#w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte)112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.convertString("\"");
      Utility.accessToString(122, false);
      // Undeclared exception!
      try { 
        Utility.decode("Lj],l?$3gD#XLZ0gM", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MK<@.BRX*%8");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byte byte0 = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-116);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MK<@.BRX*%8");
      byteArray0[3] = (byte)81;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = object2;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "{\"java.lang.Object@75a3dab7\", \"java.lang.Object@67c802e8\", \"java.lang.Object@330ed90f\", \"java.lang.Object@693a8264\", \"java.lang.Object@330ed90f\", \"java.lang.Object@2279b96\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2537, false);
      assertEquals("0:    swap\n1:    baload\n2:    sipush\t\t22016\n5:    aaload\n", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Utility.getSignature("breakpoint");
      assertEquals("Lbreakpoint;", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      
      short short0 = Utility.searchOpcode("breakpoint");
      assertEquals((short)202, short0);
      
      byte byte0 = Utility.typeOfSignature("IdxD");
      assertEquals((byte)10, byte0);
      
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)69;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-12);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte)93);
      assertEquals("0:    ladd\n1:    astore_1\n2:    dup2_x1\n3:    sastore\n4:    impdep2\n5:    return\n6:    <illegal opcode>\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("61 4c 5d 56 ff b1 f4", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "61 4c 5d 56 ff b1 f4";
      stringArray0[1] = "0:    ladd\n1:    astore_1\n2:    dup2_x1\n3:    sastore\n4:    impdep2\n5:    return\n6:    <illegal opcode>\n";
      stringArray0[2] = "0:    ladd\n1:    astore_1\n2:    dup2_x1\n3:    sastore\n4:    impdep2\n5:    return\n6:    <illegal opcode>\n";
      String string2 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals("(L61;L0:;L0:;)F", string2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char char0 = 'b';
      Utility.isJavaIdentifierPart('b');
      Utility.signatureToString("Bqh`#$7cw)b.Kamwf");
      try { 
        Utility.methodSignatureArgumentTypes("\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = Utility.clearBit(111, 111);
      assertEquals(111, int0);
      
      String string0 = Utility.replace("java.lang.,F.ine1b2}1;7h8", "m!r.U.a6unfIZL8", "pV!jxG%liM6Gee='2(~");
      String string1 = Utility.compactClassName("java.lang.,F.ine1b2}1;7h8", true);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.isSet(4, (-507));
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "m!r.U.a6unfIZL8";
      objectArray0[1] = (Object) "m!r.U.a6unfIZL8";
      String string2 = Utility.printArray(objectArray0, false);
      assertEquals("m!r.U.a6unfIZL8, m!r.U.a6unfIZL8", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.,F.ine1b2}1;7h8";
      stringArray0[1] = "pV!jxG%liM6Gee='2(~";
      stringArray0[2] = "java.lang.,F.ine1b2}1;7h8";
      stringArray0[3] = "m!r.U.a6unfIZL8";
      stringArray0[4] = "java.lang.,F.ine1b2}1;7h8";
      stringArray0[5] = "java.lang.,F.ine1b2}1;7h8";
      String string3 = Utility.methodTypeToSignature("java.lang.,F.ine1b2}1;7h8", stringArray0);
      assertEquals("(Ljava/lang/,F/ine1b2}1;7h8;LpV!jxG%liM6Gee='2(~;Ljava/lang/,F/ine1b2}1;7h8;Lm!r/U/a6unfIZL8;Ljava/lang/,F/ine1b2}1;7h8;Ljava/lang/,F/ine1b2}1;7h8;)Ljava/lang/,F/ine1b2}1;7h8;", string3);
      
      String string4 = Utility.printArray(objectArray0, true);
      assertNotNull(string4);
      assertEquals("{m!r.U.a6unfIZL8, m!r.U.a6unfIZL8}", string4);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)86;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte)86, false);
      Utility.classOrInterface((byte)86);
      Utility.compactClassName("<");
      Utility.convertString("<");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wsvso_#$I![.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wsvso_#$I![.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byte byte0 = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-71);
      byte byte1 = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("bipush\t\t60");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bipush\t\t60
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "<KB@0KK;MbmgyU$r/S";
      try { 
        Utility.decode("<KB@0KK;MbmgyU$r/S", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = ")[N4,lc5+q";
      Utility.compactClassName(")[N4,lc5+q");
      Utility.replace(")[N4,lc5+q", ")[N4,lc5+q", ")[N4,lc5+q");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")[N4,lc5+q");
      try { 
        Utility.typeOfSignature(")[N4,lc5+q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )[N4,lc5+q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Utility.signatureToString("J");
      String string1 = Utility.fillup("J", 1071, false, 'h');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)55, (byte)55);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1, 963);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-106);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.getSignature("");
      Utility.getSignature("");
      Utility.isJavaIdentifierPart('_');
      Utility.compactClassName("L;");
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "L;";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "L;";
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "4s%UJygVM+rbk-";
      try { 
        Utility.typeOfSignature("4s%UJygVM+rbk-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4s%UJygVM+rbk-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "Dzn,-_W98Wz";
      Utility.signatureToString("Dzn,-_W98Wz", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Dzn,-_W98Wz";
      objectArray0[1] = (Object) "Dzn,-_W98Wz";
      objectArray0[2] = (Object) "Dzn,-_W98Wz";
      objectArray0[3] = (Object) "double";
      objectArray0[4] = (Object) "Dzn,-_W98Wz";
      objectArray0[5] = (Object) "double";
      Object object0 = new Object();
      objectArray0[6] = object0;
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      int int0 = (-2);
      int int1 = 87;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 98
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "2u=a9h[BN";
      try { 
        Utility.typeOfSignature("2u=a9h[BN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2u=a9h[BN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.convertString("Z");
      // Undeclared exception!
      try { 
        Utility.signatureToString("K!eNX}hYB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K!eNX}hYB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "IM@!~t";
      boolean boolean0 = true;
      Utility.signatureToString("IM@!~t", true);
      try { 
        Utility.methodSignatureArgumentTypes("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 1974;
      Utility.format(1974, 1974, true, 'h');
      Utility.isJavaIdentifierPart('h');
      try { 
        Utility.typeOfSignature("WesS[HPC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WesS[HPC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.setBit(822, 822);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string1 = "HL6}fh#I9bHO20";
      try { 
        Utility.methodSignatureReturnType("HL6}fh#I9bHO20");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HL6}fh#I9bHO20'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("E*oGx78a:m:&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E*oGx78a:m:&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.fillup("DP", 1, true, '#');
      assertEquals("DP", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("z26WCnaN{^ B8#");
      assertEquals("z26WCnaN{^ B8#", string1);
      
      int int0 = Utility.setBit(2838, 2838);
      assertEquals(4197142, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 105;
      boolean boolean0 = false;
      char char0 = 'P';
      Utility.format(105, 105, false, 'P');
      MockFile mockFile0 = new MockFile("\"O<IK<yE|uV?!lXUp");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      String string0 = "xx\"Az@pAbA]oFHEW`";
      mockPrintWriter0.write("xx\"Az@pAbA]oFHEW`");
      Object[] objectArray1 = new Object[0];
      mockPrintWriter0.format("\"O<IK<yE|uV?!lXUp", objectArray1);
      objectArray0[0] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.isJavaIdentifierPart('C');
      String string0 = "QTteP\"0MH[5Hq$";
      try { 
        Utility.typeOfSignature("QTteP\"0MH[5Hq$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QTteP\"0MH[5Hq$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("KF'N`B(p%-u<8d");
      String string0 = "breakpoint";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("breakpoint", "breakpoint", "breakpoint", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      boolean boolean1 = true;
      Utility.accessToString(202, true);
      try { 
        Utility.methodSignatureReturnType("RCH6sI:$a(-4(bQF", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RCH6sI:$a(-4(bQF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.getSignature("BootstrapMethods(");
      Utility.setBit(10, 75);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H5mwQ\"WpWotGX");
      Utility.format(706, 202, true, '/');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "LBootstrapMethods(;";
      Utility.printArray(objectArray0, true, true);
      int int0 = (-3953);
      Utility.setBit(75, (-3953));
      Utility.convertString("{\"LBootstrapMethods(;\"}");
      Utility.compactClassName("qmQ&=pH3T:>xKg^YDW");
      Utility.compactClassName("boolean");
      Utility.compactClassName("boolean", false);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-122);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString((byte)57);
      constantArray0[0] = (Constant) constantString0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.getSignature("\t\t");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y2XE2s %Vhvaec o;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y2XE2s %Vhvaec o;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.convertString("~[j8cumn");
      Utility.format((-583), (-583), true, '|');
      Utility.clearBit(137, 137);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-19);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-2125));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantLong constantLong0 = new ConstantLong(1610L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-583), 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33299. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "XZw0~";
      // Undeclared exception!
      try { 
        Utility.signatureToString("XZw0~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XZw0~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.compactClassName("HY(mS9VM7");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      Utility.toHexString(byteArray0);
      Utility.setBit((byte)41, (byte)42);
      try { 
        Utility.methodSignatureReturnType("Pusu0~{g?AE;1V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pusu0~{g?AE;1V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("i2b");
      Utility.convertString("i2b");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "i2b";
      objectArray0[1] = (Object) "i2b";
      objectArray0[2] = (Object) "i2b";
      objectArray0[3] = (Object) "i2b";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("N3!?3uiZ~|x$ww");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N3!?3uiZ~|x$ww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-43);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-124), 173);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((byte)78);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)78, (int) (byte) (-115), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "long";
      stringArray0[1] = "long";
      stringArray0[2] = "long";
      stringArray0[3] = "long";
      stringArray0[4] = "long";
      stringArray0[5] = "long";
      stringArray0[6] = "long";
      Utility.methodTypeToSignature("long", stringArray0);
      Utility.setBit(5, 5);
      boolean boolean0 = true;
      Utility.compactClassName("long", true);
      Utility.isJavaIdentifierPart('H');
      Utility.compactClassName("long");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("public");
      Utility.getSignature("public");
      String string0 = Utility.getSignature("Lpublic;");
      assertEquals("LLpublic;;", string0);
      
      byte byte0 = Utility.typeOfSignature("LLpublic;;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.signatureToString("Lpublic;");
      assertEquals("public", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("0e 0e 0e 0e 0e 0e", string2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.compactClassName("*)CJo$]bVZ'>;W$4", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)93;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-5);
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, 1478, true);
      try { 
        Utility.typeOfSignature("0:    fsub\n1:    pop2\n2:    <illegal opcode>\n3:    dup2_x1\n4:    fload\t\t%254\n6:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fsub
         // 1:    pop2
         // 2:    <illegal opcode>
         // 3:    dup2_x1
         // 4:    fload\t\t%254
         // 6:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.getSignature("p;OxI:b9P3Uu$cz");
      assertEquals("Lp;OxI:b9P3Uu$cz;", string0);
      
      String string1 = Utility.accessToString(60);
      assertEquals("protected static final synchronized", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "protected static final synchronized";
      objectArray0[1] = (Object) "Lp;OxI:b9P3Uu$cz;";
      objectArray0[2] = (Object) "p;OxI:b9P3Uu$cz";
      objectArray0[3] = (Object) "Lp;OxI:b9P3Uu$cz;";
      objectArray0[4] = (Object) "p;OxI:b9P3Uu$cz";
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{protected static final synchronized, Lp;OxI:b9P3Uu$cz;, p;OxI:b9P3Uu$cz, Lp;OxI:b9P3Uu$cz;, p;OxI:b9P3Uu$cz}", string2);
      
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-115), (-916), true);
      assertEquals("0:    impdep1\n1:    dload_0\n2:    lstore_1\n3:    <illegal opcode>\n", string3);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("1|[f^N", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[f^N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.methodSignatureReturnType("V3lCtp;", false);
      Utility.decode("void", false);
      String string0 = "mMP!QOWe\\3 U";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("void", "mMP!QOWe\u0003 U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"mMP!QOWe\u0003 U\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (int) (byte)76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4MkkS6dz^hM]1GIK");
      Utility.getSignature("\t<");
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)50;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("1$k2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1$k2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false, true);
      Utility.printArray(objectArray0, true);
      Utility.fillup("{java.lang.Object@bfbd13a, java.lang.Object@5c02dee, java.lang.Object@180a2584, java.lang.Object@6005a8f6, java.lang.Object@35a2d7cd, java.lang.Object@318933ca, java.lang.Object@7866167a}", 192, true, 'O');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("The array of suffixes must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-69);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)105);
      boolean boolean1 = true;
      Utility.compactClassName(" arg", "s oi1#BjJ4^ALy.", true);
      Utility.clearBit(91, (-750));
      String string0 = "(i8_Reb.SZeOP9";
      try { 
        Utility.typeOfSignature("(i8_Reb.SZeOP9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (i8_Reb.SZeOP9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[%`Fn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%`Fn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.format(170, 970, false, 'd');
      Utility.format(512, 512, false, 'd');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd512";
      stringArray0[1] = "ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd512";
      String string0 = Utility.methodTypeToSignature(",<-", stringArray0);
      Utility.isSet(1339, 512);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)76;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-56);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L,<-;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)21;
      Utility.toHexString(byteArray0);
      Utility.isSet((-1951), (byte)21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.setBit((-243), 1100);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-78);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-78));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4181, (-5760));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong(11L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)124);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 121, 217);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17825. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2163);
      Utility.isSet((-2163), (-2163));
      Utility.getSignature(">");
      Utility.typeOfSignature("L>;");
      Utility.clearBit((byte)14, (byte)14);
      String string0 = "!|P4}H";
      Utility.replace("!|P4}H", "!|P4}H", "imul");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-38);
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2163), 72, false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("L>;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L>;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tableswitch");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 212;
      Utility.classOrInterface(212);
      Utility.replace("class", "-[paJWaEOQn^QrgG*:", "class");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0);
      try { 
        Utility.decode("class", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "invokevirtual";
      try { 
        Utility.typeOfSignature("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokevirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = 36;
      Utility.format(36, 36, false, 'J');
      String string0 = " (O=K_t V&9?X%";
      Utility.getSignature(" (O=K_t V&9?X%");
      Utility.printArray((Object[]) null, false);
      Utility.printArray((Object[]) null);
      File file0 = MockFile.createTempFile(" (O=K_t V&9?X%", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(2050);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("L(O=K_t;", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = 2928;
      boolean boolean0 = true;
      Utility.accessToString(2928, true);
      try { 
        Utility.methodSignatureArgumentTypes("DL*5w$5:.WrF0FChYM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: DL*5w$5:.WrF0FChYM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "$_[@[$KF";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$_[@[$KF");
      Utility.isSet(1730, 1730);
      Utility.clearBit(1730, 1730);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString(".X>D*_ U$51+k3 !");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.X>D*_ U$51+k3 !'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byte byte0 = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)66;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)70;
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.getSignature("fcmpg");
      boolean boolean0 = false;
      Utility.format(652, (-2277), false, '\"');
      Utility.setBit(652, 65);
      Utility.compactClassName("if_acmpeq");
      Utility.classOrInterface(652);
      String string0 = "java.lang.public private static volatile transient native strictfp";
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.public private static volatile transient native strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.public private static volatile transient native strictfp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.replace("0NiFEm", "6\"~Cr,woM>Q7j9fsB9j", "0NiFEm");
      assertEquals("0NiFEm", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)4, 9);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("areturn", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("op'2b[RHi[W<j0", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[RHi[W<j0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (int) (byte)90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.accessToString((-2653));
      assertEquals("public private synchronized transient native abstract synthetic annotation enum", string0);
      
      String string1 = Utility.methodTypeToSignature("public private synchronized transient native abstract synthetic annotation enum", (String[]) null);
      assertEquals("()Lpublic;", string1);
      
      int int0 = Utility.clearBit((-382), 1614);
      assertEquals((-16766), int0);
      
      Utility.getSignature("i2b");
      int int1 = Utility.clearBit(953, (-613));
      assertEquals(953, int1);
      
      String string2 = Utility.format((-16766), (-16766), true, 'g');
      assertEquals("-16766", string2);
      
      String string3 = Utility.classOrInterface((-2653));
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      short short0 = Utility.searchOpcode("getstatic");
      assertEquals((short)178, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)7;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b2 82 30 ab 5b 07", string0);
      
      String string1 = Utility.replace("<", "<", "<");
      assertEquals("<", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j/Gjnji/^9xh");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "j/Gjnji/^9xh";
      PrintWriter printWriter0 = mockPrintWriter0.format("j/Gjnji/^9xh", objectArray0);
      Object[] objectArray1 = new Object[8];
      Object object0 = new Object();
      mockPrintWriter0.write("j/Gjnji/^9xh");
      objectArray1[0] = object0;
      Object object1 = new Object();
      objectArray1[1] = object1;
      objectArray1[2] = (Object) mockPrintWriter0;
      objectArray1[3] = (Object) mockPrintWriter0;
      objectArray1[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.println((-10L));
      objectArray1[5] = (Object) "j/Gjnji/^9xh";
      Object object2 = new Object();
      objectArray1[6] = object2;
      objectArray1[7] = (Object) printWriter0;
      Utility.printArray(printWriter0, objectArray1);
      String string0 = Utility.printArray(objectArray1, false, false);
      Utility.printArray(objectArray0, false);
      String string1 = Utility.signatureToString("Z^]q1", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.compactClassName("PE#~pr >-k,Tl}fH4;t", "PE#~pr >-k,Tl}fH4;t", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.format(170, 970, false, 'd');
      Utility.format(512, 512, false, 'd');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd512";
      stringArray0[1] = "ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd512";
      Utility.methodTypeToSignature(",<-", stringArray0);
      Utility.isSet(1339, 512);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte) (-56);
      Utility.equals(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.isJavaIdentifierPart('X');
      // Undeclared exception!
      try { 
        Utility.signatureToString("8!kM_+E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8!kM_+E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.accessToString(1989, true);
      String string0 = "impdep2";
      Utility.convertString("impdep2");
      try { 
        Utility.methodSignatureToString(".g)#r{Apw=7gE", ".g)#r{Apw=7gE", ".g)#r{Apw=7gE", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .g)#r{Apw=7gE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Utility.accessToString(2507);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "public private static volatile transient native strictfp";
      stringArray0[1] = "public private static volatile transient native strictfp";
      stringArray0[2] = "public private static volatile transient native strictfp";
      stringArray0[3] = "public private static volatile transient native strictfp";
      stringArray0[4] = "public private static volatile transient native strictfp";
      stringArray0[5] = "public private static volatile transient native strictfp";
      String string1 = Utility.methodTypeToSignature("public private static volatile transient native strictfp", stringArray0);
      assertEquals("(Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;)Lpublic;", string1);
      
      String string2 = Utility.compactClassName("public private static volatile transient native strictfp");
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)122;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("13 3c b5 ab 03 7d 7a", string3);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)122;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Utility.accessToString((-1174));
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "private static synchronized volatile native interface strictfp synthetic annotation enum");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) "private static synchronized volatile native interface strictfp synthetic annotation enum";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "private static synchronized volatile native interface strictfp synthetic annotation enum";
      objectArray0[5] = (Object) uRI0;
      objectArray0[6] = (Object) uRI0;
      Utility.printArray(printStream0, objectArray0);
      assertEquals(445L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.setBit((-239), 1100);
      Utility.format(16, 16, false, 'p');
      try { 
        Utility.methodSignatureArgumentTypes(")c@MqE{9SFxiKU|#e'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )c@MqE{9SFxiKU|#e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.replace("?>...", "?>...", "?>...");
      // Undeclared exception!
      try { 
        Utility.signatureToString("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?>...'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = Utility.setBit((-562), (-622));
      assertEquals((-562), int0);
      
      int int1 = Utility.clearBit(3449, (-487));
      assertEquals(3449, int1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-535));
      String string0 = Utility.accessToString((-535));
      assertEquals("public static synchronized volatile transient native abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.fillup("5JW'", (-535), true, ' ');
      assertEquals("5JW'", string1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("ph,Z2^,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ph,Z2^,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.compactClassName("", false);
      byte[] byteArray0 = Utility.decode("", false);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[6];
      MockFile mockFile0 = new MockFile("$l$8b$I$A$A$A$A$A$A$A");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"$l$8b$I$A$A$A$A$A$A$A\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      byte byte1 = (byte) (-54);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-15);
      byte byte2 = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)75;
      Utility.toHexString(byteArray0);
      try { 
        Utility.decode("00 92 ca 00 f1 d2 5a d3 4b", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.accessToString(330, false);
      Utility.compactClassName("private static volatile native");
      String string0 = "~";
      Utility.searchOpcode("~");
      String string1 = "sipush";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'", "private static volatile native", "sipush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.accessToString(2066, true);
      Utility.classOrInterface(2066);
      Utility.convertString("class");
      Utility.replace(" = ", " = ", "class");
      Utility.getSignature("class");
      // Undeclared exception!
      try { 
        Utility.signatureToString(" = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("N4/ezlong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N4/ezlong
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)87;
      Utility.encode(byteArray0, true);
      Utility.accessToString(205);
      try { 
        Utility.typeOfMethodSignature("('FR?pE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ('FR?pE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling0;
      String string0 = Utility.printArray(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{org.evosuite.runtime.testdata.FileSystemHandling@3969f435}";
      stringArray0[1] = "{org.evosuite.runtime.testdata.FileSystemHandling@3969f435}";
      String string1 = Utility.methodTypeToSignature("{org.evosuite.runtime.testdata.FileSystemHandling@3969f435}", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "SyntheticRepository could not load ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("SyntheticRepository could not load ", false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)85;
      byteArray0[0] = (byte)85;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1148), 11);
      constantArray0[0] = (Constant) constantMethodref0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("SyntheticRepository could not load ", "short");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"short\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)91;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)44;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)92;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('<');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
