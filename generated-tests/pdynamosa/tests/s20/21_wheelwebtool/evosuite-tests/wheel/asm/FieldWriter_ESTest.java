/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 06:07:12 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wheel.asm.ClassReader";
      stringArray0[1] = "wheel.asm.ClassReader";
      stringArray0[2] = "";
      stringArray0[3] = "c&^D}c<&vu8";
      stringArray0[4] = "$%Um`-nCLbdBi_";
      stringArray0[5] = "c&^D}c<&vu8";
      classWriter0.visit((-1242), 8, "wheel.asm.ClassReader", "$%Um`-nCLbdBi_", "$%Um`-nCLbdBi_", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1242), "", "wheel.asm.ClassReader", "RuntimeVisibleAnnotations", "");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wheel.asm.ClassReader";
      stringArray0[1] = "wheel.asm.ClassReader";
      stringArray0[2] = "";
      stringArray0[3] = "c&^D}c<&vu8";
      stringArray0[4] = "$%Um`-nCLbdBi_";
      stringArray0[5] = "c&^D}c<&vu8";
      classWriter0.visit((-1242), 8, "wheel.asm.ClassReader", "$%Um`-nCLbdBi_", "$%Um`-nCLbdBi_", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1242), "", "wheel.asm.ClassReader", "RuntimeVisibleAnnotations", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      classWriter0.index = (-5);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "+C:?cZei{xq", "+C:?cZei{xq", "+C:?cZei{xq", "+C:?cZei{xq");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(314);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 314, "", "", "", "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-783));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-783), "[`Tj(9|s~OCw", "[`Tj(9|s~OCw", "[`Tj(9|s~OCw", "9C");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(314);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "=xZ", "", "biFCxLgzbqI5{G;E", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "SourceDebugExtension", "SourceDebugExtension", "{u]xq", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Label");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "wheel.asm.Label", "wheel.asm.Label", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@1c861df2
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "", "", "TGF", "TGF");
      fieldWriter0.visitAnnotation("J", false);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1242), "$%Um`-nCLbdBi_", "c&^D}c<&vu8", "c&^D}c<&vu8", "$%Um`-nCLbdBi_");
      fieldWriter0.visitAnnotation("NCBcxaJ", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "", "", "TGF", "TGF");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NCBcxaJ";
      stringArray0[1] = "NCBcxaJ";
      stringArray0[2] = "TGF";
      classWriter0.visit(49, 1275, "", "TGF", "", stringArray0);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "cm&^D}c<&vu8", "cm&^D}c<&vu8", "cm&^D}c<&vu8", "cm&^D}c<&vu8");
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-783));
      ByteVector byteVector0 = new ByteVector(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-783), "[`Tj(9|s~OCw", "9C", (String) null, (Object) null);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, " VoXAmqG}6-R#0!m8I", "=xZ", " VoXAmqG}6-R#0!m8I", "biFCxLgzbqI5{G;E");
      Attribute attribute0 = new Attribute("{");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "", "", "TGF", "TGF");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NCBcxaJ";
      stringArray0[1] = "NCBcxaJ";
      stringArray0[2] = "TGF";
      classWriter0.visit(49, 1275, "", "TGF", "", stringArray0);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "", "", "TGF", "TGF");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-595), "e>o9zX9]", "e>o9zX9]", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1242), "$%Um`-nCLbdBi_", "c&^D}c<&vu8", "c&^D}c<&vu8", "$%Um`-nCLbdBi_");
      fieldWriter0.visitAnnotation("NCBcxaJ", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-7), "", "", "TGF", "TGF");
      fieldWriter0.visitAnnotation("J", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-783));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-783), "[`Tj(9|s~OCw", "[`Tj(9|s~OCw", "[`Tj(9|s~OCw", "9C");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-783), "[`Tj(9|s~OCw", "9C", (String) null, (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 41, "", "R%", "m,v8Xb&uKn0", (Object) null);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-783));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-783), "[`Tj(9|s~OCw", "[`Tj(9|s~OCw", "[`Tj(9|s~OCw", "9C");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(1);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
