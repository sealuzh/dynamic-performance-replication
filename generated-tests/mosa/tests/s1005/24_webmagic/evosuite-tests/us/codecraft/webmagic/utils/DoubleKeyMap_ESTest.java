/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:19:21 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(1);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) map0, (Map<Object, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>((Map<Integer, Map<Integer, Object>>) null);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      String string0 = doubleKeyMap0.get((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      doubleKeyMap0.remove((String) null, (Object) null);
      Map<Object, Object> map0 = doubleKeyMap0.get("");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.put("", "", "");
      String string0 = doubleKeyMap0.get("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(class0);
      Object object0 = new Object();
      Object object1 = new Object();
      doubleKeyMap0.put(object0, object1, "");
      String string0 = "wrong proto type map ";
      doubleKeyMap0.put(object0, (Object) "N *g3IQxE$.", "wrong proto type map ");
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Map<Integer, Map<Object, Object>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, Object, Object>(map1);
      Integer integer0 = new Integer(0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("", "]{6C'");
      // Undeclared exception!
      try { 
        doubleKeyMap3.put(integer0, (Map<Object, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(861);
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(map0, "E=}>!0d<M}w", integer0);
      doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      doubleKeyMap0.remove(map0, "E=}>!0d<M}w");
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap2.get("h!p7H}k8Wh", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(861);
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(map0, "E=}>!0d<M}w", integer0);
      doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      Map<Object, Object> map1 = doubleKeyMap1.newMap();
      doubleKeyMap0.remove(map1, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      doubleKeyMap2.get("h!p7H}k8Wh", object0);
      DoubleKeyMap<String, String, String> doubleKeyMap3 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap3.newMap();
      String string0 = doubleKeyMap3.get("h!p7H}k8Wh", "h!p7H}k8Wh");
      assertNull(string0);
  }
}
