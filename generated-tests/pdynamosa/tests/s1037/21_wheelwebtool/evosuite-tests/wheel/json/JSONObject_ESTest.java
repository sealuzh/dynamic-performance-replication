/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:26:05 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 1687, (-5513));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-961), (-961));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Yad*57\"S^zR<}z");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {Yad*57\"S^zR<}z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|2&c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |2&c
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "getwait");
      JSONObject jSONObject0 = new JSONObject("getwait", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("o&a", "o&a");
      Object object0 = jSONObject1.remove("o&a");
      assertEquals("o&a", object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Long long0 = new Long(2287L);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("r", 2287L);
      long long1 = jSONObject0.optLong("r");
      assertEquals(2287L, long1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-2660.7624));
      jSONObject0.put("[", (Object) double0);
      long long0 = jSONObject0.optLong("[");
      assertEquals((-2660L), long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.accumulate("\\%,>aW8^S", jSONObject1);
      jSONObject2.optJSONObject("\\%,>aW8^S");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("/*&");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("/*&", (Collection) linkedList0);
      jSONObject0.optJSONArray("/*&");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$jJh", 3308.102222);
      int int0 = jSONObject0.optInt("$jJh");
      assertEquals(3308, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"", (-4150L));
      int int0 = jSONObject0.optInt("\"");
      assertEquals((-4150), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("O", 1L);
      double double0 = jSONObject1.optDouble("O");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("e6L", (-706.6429063072));
      double double0 = jSONObject1.optDouble("e6L");
      assertEquals((-706.6429063072), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("`,21?M<B;lddPw).S", jSONObject0);
      Object object0 = jSONObject0.opt("`,21?M<B;lddPw).S");
      assertSame(jSONObject0, object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("for", (Collection) linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("0h", true);
      boolean boolean0 = jSONObject0.has("0h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      long long0 = jSONObject1.getLong(",\n");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)4);
      jSONObject0.put("3u{)sr<kxKN 5,k2z", (Object) short0);
      long long0 = jSONObject0.getLong("3u{)sr<kxKN 5,k2z");
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("wheel.json.JSONObject");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", 0);
      int int0 = jSONObject0.getInt("{}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (double) 70);
      int int0 = jSONObject1.getInt("wheel.json.JSONArray");
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("gequals", float0);
      double double0 = jSONObject0.getDouble("gequals");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", 878.14024754);
      double double0 = jSONObject0.getDouble("[]");
      assertEquals(878.14024754, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 0, 0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 12, 116);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected a ',' or ']'");
      jSONObject0.toString(59, 0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = jSONObject0.toString(0, (-1217));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Boolean boolean0 = new Boolean("] is not a Boolean.");
      Double double0 = new Double(0.0);
      hashMap0.put(boolean0, double0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      Collection<Long> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("in", collection0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("", object0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 2390L);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 18);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("@@SL8:KSE~0Fa14Pva", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float((-3901.1113F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.optString("", "4 }@Eq A}0qKn*");
      assertEquals("4 }@Eq A}0qKn*", string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("N1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("<,`?", 4045L);
      assertEquals(4045L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-863L));
      assertEquals((-863L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      long long0 = jSONObject0.optLong("", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("false", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("0", (-3));
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 58.139);
      assertEquals(58.139, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("d");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.has((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long long0 = new Long(4453L);
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("", object0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>(275);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.accumulate("", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("/*&");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("\",:]}/\\\"[{;=#\"", stringArray0);
      try { 
        jSONObject0.put((String) null, (-2760L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = jSONObject1.toString((-1232), (-656));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("4l\"*@*", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W~-4", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put(string0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] is not a Boolean.", "] is not a Boolean.");
      String string0 = jSONObject0.optString("] is not a Boolean.", "] is not a Boolean.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Float@0000000001.", 403L);
      double double0 = jSONObject0.optDouble("java.lang.Float@0000000001.", (double) 403L);
      assertEquals(403.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("y{", (-910.0));
      assertEquals((-910.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = Double.valueOf((-2412.7881842));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("O", true);
      boolean boolean0 = jSONObject0.getBoolean("O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("o&a", "o&a");
      try { 
        jSONObject1.getBoolean("o&a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o&a\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "o&");
      jSONObject0.put("o&", false);
      boolean boolean0 = jSONObject0.getBoolean("o&");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (Object) "Null pointer");
      Object object0 = jSONObject1.get("Null pointer");
      assertEquals("Null pointer", object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 1447);
      assertEquals(1447, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("N1", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("/*&");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("\b", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("8g5\"J4VhDy:", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0, 1597, 1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      String string0 = JSONObject.valueToString(hashMap0, (-1037), (-3336));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("-:|=hO Npnj]C", object0);
      String string0 = jSONObject0.toString((-2877));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1382), 107);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("/*&");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("\b", (Collection) linkedList0);
      jSONObject0.toString(1143, 55);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-2660.7624));
      jSONObject0.put("[", (Object) double0);
      String string0 = JSONObject.valueToString(jSONObject0, 3825, 3825);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)67);
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("5</~N`E(R7,w}&y|wH", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2078));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\\%,>aW8^S", jSONObject0);
      jSONObject1.optJSONObject("\\%,>aW8^S");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("W*E(1!C602||P", 0L);
      double double0 = jSONObject0.optDouble("W*E(1!C602||P");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float((-1530.0F));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optBoolean("Eo7r");
      jSONObject0.put("xp_=2wU[]@#O\"Okg0", 0.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3, (Collection) null);
      jSONObject0.names();
      jSONObject0.putOpt("Null key.", "\"gT43u4GS2");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.offer(double0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONArray", 1472.511);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Ap@DS5uyv?Z:", (-1470.9489208));
      long long0 = jSONObject0.getLong("Ap@DS5uyv?Z:");
      assertEquals((-1470L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("YnuLCo\"%", true);
      try { 
        jSONObject0.getLong("YnuLCo\"%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YnuLCo\\\"%\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("YxgVG", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("YxgVG");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONArray", (double) 70);
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("1.8993370083334165", hashMap0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("1.8993370083334165");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("gequals", "gequals");
      try { 
        jSONObject1.getJSONArray("gequals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gequals\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", jSONObject0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("'84]\"h[O(pV)H", (-1271.0));
      double double0 = jSONObject1.getDouble("'84]\"h[O(pV)H");
      assertEquals((-1271.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("z,$-", true);
      try { 
        jSONObject0.getDouble("z,$-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z,$-\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ka", (-1L));
      try { 
        jSONObject1.getBoolean("ka");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ka\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("false", "false");
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      jSONObject0.putOpt("ishashCode", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("ishashCode");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3322.676783692931);
      assertEquals("3322.676783692931", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("O", true);
      Float float0 = new Float((-465.3F));
      try { 
        jSONObject1.append("O", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[O] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", "] is not a Boolean.");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("] is not a Boolean.");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("\"\"", (Collection) linkedList0);
      Integer integer0 = new Integer(1529);
      JSONObject jSONObject1 = jSONObject0.append("\"\"", integer0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\\%,>aW8^S", "\\%,>aW8^S");
      jSONObject0.accumulate("\\%,>aW8^S", jSONObject1);
      Byte byte0 = new Byte((byte) (-86));
      jSONObject1.accumulate("\\%,>aW8^S", byte0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ',' or '}'", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "MlJ~t1,!bsx/3:6d");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{`k]06ms3VX4Q$<I& ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {`k]06ms3VX4Q$<I& 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{rRM=HRY2%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {rRM=HRY2%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("istoString");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("p:x,Dd", object0);
      boolean boolean0 = jSONObject0.isNull("p:x,Dd");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("nx<Y hIoa7qNj2u", "nx<Y hIoa7qNj2u");
      boolean boolean0 = jSONObject0.isNull("nx<Y hIoa7qNj2u");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(105);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("kdK @z:/%BKp");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{$t` Mr?:b>T&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {$t` Mr?:b>T&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Float float0 = new Float((-1530.0F));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("nx<Y hIoa7qNj2u", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isvalueOf", (-2227L));
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.getInt("isvalueOf");
      assertEquals((-2227), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("<,`?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<,`?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
