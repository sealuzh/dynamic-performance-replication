/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:26:45 GMT 2019
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2588;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(22, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MinimumState minimumState0 = new MinimumState(5);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnHesse mnHesse0 = new MnHesse(5);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-3433));
      mnHesse0.ncycles();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1108.0;
      doubleArray0[2] = (double) (-3433);
      doubleArray0[3] = (double) (-3433);
      doubleArray0[4] = (double) 0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-3433));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(0.0);
      mnStrategy0.setMediumStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-798.20939749), 10.0, 0.0, 2.8421709430404007E-14).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      int int0 = 200;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(200);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-1414.1), (-702.07646889), 0.0010647773742959998, 5.9604644775390625E-8).when(fCNBase2).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0, 6);
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState((MnUserParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameterState0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(0.0);
      mnStrategy0.setMediumStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(281.3459672485723, (-1575.1821147756355), (-1710.8611), (-2509.075), (-593.2066483938422)).when(fCNBase0).valueOf(any(double[].class));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(7.110912599270296E-32, 0.02, 9.701170629700103E29, 0.0, 7.110912599270296E-32).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-2865));
      mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters1);
      mnHesse0.calculate(fCNBase0, mnUserParameters1, 685);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance();
      mnHesse0.calculate(fCNBase3, mnUserParameters0, mnUserCovariance1, (-3531));
      FCNBase fCNBase4 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase4, 0.02);
      MinimumParameters minimumParameters0 = new MinimumParameters((MnAlgebraicVector) null, (MnAlgebraicVector) null, 685);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameterState0, (-604));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-2946.0), 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 3, (-2946.0), 1275.13925, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1418.9479502609997), (double)3, (-1418.9479502609997), (-2946.0), (-1418.9479502609997)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2222.700231347556));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-944));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(4084);
      mnHesse0.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0, 1000);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      mnHesse0.tolerg2();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (double[]) null, (double[]) null, 2147445334);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      double double0 = 547.3977351;
      mnStrategy0.setGradientTolerance(547.3977351);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 2362;
      double double1 = 4236.4087406444;
      mnStrategy0.setGradientTolerance(4236.4087406444);
      mnStrategy0.setHessianGradientNCycles(2362);
      MnUserParameters mnUserParameters0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse();
      double double0 = 0.3;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double double1 = (-1455.4492977);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1455.4492977));
      MinimumState minimumState0 = new MinimumState(2);
      MnUserTransformation mnUserTransformation0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, (MnUserTransformation) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add(",AD4Y", (double) 2609);
      mnUserParameters0.add("L$L{M.8PCS6hl$7n1t", (double) 3, 2.842170943040401E-10, (double) 3, (double) 2609);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.842170943040401E-10, 2.842170943040401E-10, (double)3, 2.842170943040401E-10, (double)2609).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      assertEquals(8, mnUserParameterState0.nfcn());
      assertEquals(2.842170943040401E-10, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("L$L{M.8PCS6hl$7n1t", (double) 3, 5.9604644775390625E-8, (double) 3, (double) 2600);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(5.9604644775390625E-8, 5.9604644775390625E-8, (double)3, 5.9604644775390625E-8, (double)2600).when(fCNBase0).valueOf(any(double[].class));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2936.61);
      doubleArray0[1] = (double) 2600;
      doubleArray0[2] = (double) 3;
      mnHesse0.calculate(fCNBase0, mnUserParameters0, 802);
      doubleArray0[3] = 0.001;
      doubleArray0[4] = (double) 2600;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray0, (MnUserCovariance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1106.689983045)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1455.4492977));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnHesse mnHesse0 = new MnHesse(0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnHesse mnHesse1 = new MnHesse(5);
      // Undeclared exception!
      try { 
        mnHesse1.calculate((FCNBase) null, (MnUserParameters) null, (-2045));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      // Undeclared exception!
      try { 
        mnHesse0.tolerg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4367.8904423);
      doubleArray0[1] = (double) (-2246);
      doubleArray0[2] = (double) (-2246);
      doubleArray0[3] = (double) (-2246);
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(8.0, 1869.938584, 10.0, 2.0, 1113.969488631).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2324.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2324.0;
      doubleArray1[1] = 2324.0;
      doubleArray1[2] = 2324.0;
      doubleArray1[3] = 2324.0;
      doubleArray1[4] = 2324.0;
      doubleArray1[5] = 2324.0;
      doubleArray1[6] = 2324.0;
      doubleArray1[7] = 2324.0;
      doubleArray1[8] = 2324.0;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray1);
      assertEquals(8.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(18, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2619);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add((String) null, (double) 2619, (double) 2619, (double) 2619, (-384.62));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      assertEquals(10, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, mnUserCovariance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(0.0);
      mnStrategy0.setMediumStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2297.3), (-2297.3), 1.0, (-826.0311479779274), 4.0E-7).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(200);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1200.509397168), 0.0, 0.1, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 200;
      doubleArray1[1] = (double) 200;
      doubleArray1[2] = (double) 200;
      doubleArray1[3] = 1.0E-6;
      mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, doubleArray0, 544);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 253.695520006;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0, (-773));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", (double) 3, 2.842170943040401E-10, 1275.13925, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1046.8632), (-2237.6724862396845), 0.15, 507.30560122660523, 0.001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2946.0));
      mnFcn0.theNumCall = 2624;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn1 = new MnFcn(fCNBase1, 4.0E-7);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-3637));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, mnUserParameters1, mnUserCovariance0, 254);
      assertEquals(16, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2634);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumParameters minimumParameters0 = new MinimumParameters(2634);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1852), 1230.31918786498, (-1401.1779), (double)(-1852), 5679.95707772593).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-115.96765835);
      doubleArray0[1] = (-2276.7101);
      doubleArray0[2] = 5679.95707772593;
      doubleArray0[3] = (double) 2634;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnHesse0.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0, (-2712));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-3377.87674389724), (-1852));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1852);
      doubleArray1[1] = (-2075.45694);
      doubleArray1[2] = (-3377.87674389724);
      doubleArray1[3] = (-3377.87674389724);
      doubleArray1[4] = (-3377.87674389724);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1487.670245140426), 0.0, (-1487.670245140426), (-2075.45694), 0.10000000000000002).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, doubleArray1, doubleArray1);
      assertEquals(46, mnUserParameterState0.nfcn());
      assertEquals((-1487.670245140426), mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(2600);
      MinimumParameters minimumParameters0 = new MinimumParameters(2600);
      MinimumState minimumState0 = new MinimumState(8);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 8, 2.842170943040401E-10, (double) 8, (double) 2600);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.842170943040401E-10, 2.842170943040401E-10, (double)8, 2.842170943040401E-10, (double)2600).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1327.4));
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 8, (-1));
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumState minimumState2 = mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, (-1));
      assertNotSame(minimumState2, minimumState0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (-3788.51108212919), 3914.7511646294674, 4.0, 3914.7511646294674).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, (-677));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(7);
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      MnUserCovariance mnUserCovariance2 = mnUserCovariance1.clone();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance2, (-3983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, (MnUserParameterState) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-179.63);
      doubleArray0[2] = 8.0;
      doubleArray0[3] = 8.0;
      doubleArray0[4] = (-5580.170778500019);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 3798.6754;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 96.22;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 8.0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray1, (-1025));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2624, 2624);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 3, (-2946.0), 1314.2376207952698, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, 2624);
      assertEquals(10, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1395.791556354382), (double)3, (-1395.791556354382), (-2946.0), (-1395.791556354382)).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, (-2222.700231347556));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(minimumState0, 0.5, mnUserTransformation0);
      MnUserParameterState mnUserParameterState2 = mnHesse0.calculate(fCNBase2, mnUserParameterState1, (-1106));
      assertEquals(0.0, mnUserParameterState2.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(24.490656977301818).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 24.490656977301818);
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnHesse mnHesse0 = new MnHesse();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters are invalid
         //
         verifyException("org.freehep.math.minuit.HessianGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-389), (double)(-389), (double)(-389), (-2991.37996609), 2.8421709430404007E-14).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 4889.47142562938, 0.51, 160.938350625, (-2889.99650802)).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 1);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-438.98633636405);
      doubleArray0[3] = 2718.66924745;
      doubleArray0[4] = 1187.409;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-948.30968479319);
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 6);
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState((MnUserParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-3992.9));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(582);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 582);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(582);
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 1697.216, 582);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters have invalid size
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-2946.0), 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 3, (-2946.0), 1275.13925, (double) 2624);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2624;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 1275.13925;
      doubleArray0[3] = (double) 2624;
      doubleArray0[4] = 0.51;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = 0.07480827624318798;
      doubleArray0[7] = (double) 3;
      mnHesse1.calculate(fCNBase0, doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      FCNBase fCNBase2 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      int int0 = (-3204);
      FCNBase fCNBase1 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-2805));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      mnStrategy0.setHessianStepTolerance((-2805));
      doubleArray0[0] = (double) (-2805);
      doubleArray0[1] = (double) (-2805);
      doubleArray0[2] = (double) (-2805);
      doubleArray0[3] = (double) (-2805);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0, (-2805));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 6;
      MnHesse mnHesse0 = new MnHesse(6);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)6, (double)6, (double)6, 0.005000000000000001, 0.005000000000000001).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int int1 = (-3823);
      mnHesse0.calculate(fCNBase0, mnUserParameterState0, (-3823));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 6;
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray1, (MnUserCovariance) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2634);
      double double0 = 2.622;
      double double1 = 3213.1371;
      double double2 = 5.05258867633529E-13;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnHesse mnHesse1 = new MnHesse(2634);
      MinimumState minimumState0 = new MinimumState(7);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      int int0 = (-677);
      // Undeclared exception!
      try { 
        mnHesse1.calculate((MnFcn) null, minimumState0, mnUserTransformation0, (-677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1455.4492977));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(1401);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 9.701170629700103E29;
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 0);
      MnHesse mnHesse1 = new MnHesse(0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      // Undeclared exception!
      mnHesse1.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0, 1401);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      mnHesse0.tolerg2();
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2610.8483593808164);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1500.2873);
      doubleArray0[3] = (-2405.17954804);
      doubleArray0[4] = (-1077.49045);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.02;
      doubleArray0[7] = (-53.151);
      doubleArray0[8] = (-1739.48034);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      mnHesse0.tolerstp();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, 1092);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(100, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MnFcn mnFcn0 = new MnFcn((FCNBase) null, 2619);
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnHesse mnHesse0 = new MnHesse();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 2619);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      // Undeclared exception!
      try { 
        mnHesse0.tolerstp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2619);
      MinimumState minimumState0 = new MinimumState(2619);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("xE-]IPXVe>@elT,^p", (double) 2619, (double) 2619, 1314.506, (double) 2619);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (double)2619, 10.0, (double)2619, 10.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2235.554850735412));
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 2619);
      assertNotSame(minimumState1, minimumState0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", (double) 3, 2.842170943040401E-10, 1275.13925, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.001, (-710.7202930811), 1415.7980728825, 0.02, 0.001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2222.700231347556));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-944));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0016858899760094428, 2.9460000000000006, 1488.9241216258727, 2.9460000000000006, 1.0E-35).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1275.13925;
      doubleArray0[1] = (-2222.700231347556);
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1271.615844462867), (-20.736907774762976), 938.149748872955, 2.8421709430404007E-11, 938.149748872955).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, mnUserParameters1);
      assertEquals(8, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(989.1817644248, (-1900.1013155), 1.0E-35, (-1900.1013155), 0.001).when(fCNBase3).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase3, mnUserParameters1, mnUserCovariance1, 3);
      assertEquals(989.1817644248, mnUserParameterState1.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 100;
      MnHesse mnHesse0 = new MnHesse(100);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2390.7150557);
      doubleArray0[1] = (double) 100;
      doubleArray0[2] = (double) 100;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, mnUserParameters0, (MnUserCovariance) null, (-831));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(200);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 200;
      doubleArray0[1] = (double) 200;
      doubleArray0[2] = (double) 200;
      doubleArray0[3] = (double) 200;
      doubleArray0[4] = (double) 200;
      doubleArray0[5] = (double) 200;
      doubleArray0[6] = (double) 200;
      doubleArray0[7] = (double) 200;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, (MnUserCovariance) null);
      assertEquals(44, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-259));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-259));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, (MinimumState) null, mnUserTransformation1, (-259));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 2619;
      MnHesse mnHesse0 = new MnHesse(2619);
      mnHesse0.tolerg2();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = null;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.toString();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, mnUserCovariance0, (-989));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("* ", (double) 14, 3.0E-10, (double) 14, (double) 84);
      mnUserParameters0.setPrecision(14);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3.0E-10, 3.0E-10, (double)14, 3.0E-10, (double)84).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      assertEquals(3.0E-10, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianGradientNCycles(3);
      mnHesse0.ncycles();
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, (-677));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-389));
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      // Undeclared exception!
      mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance1, (-677));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance();
      mnUserCovariance1.toString();
      MnUserCovariance mnUserCovariance2 = mnUserCovariance1.clone();
      FCNBase fCNBase1 = null;
      double[] doubleArray0 = null;
      int int0 = 3;
      mnStrategy0.setHessianG2Tolerance(0.0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (double[]) null, mnUserCovariance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3456.4021646646);
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      double double1 = 1.0E-35;
      doubleArray0[3] = 1.0E-35;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, (-2125370131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2626);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", (double) 3, 2.842170943040401E-10, 1275.13925, (double) 2626);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1046.8632), (-2237.6724862396845), 0.15, 507.30560122660523, 0.001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2946.0));
      mnFcn0.theNumCall = 2626;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn1 = new MnFcn(fCNBase1, 4.0E-7);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-3637));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1275.13925, (-390.79153481), (double)(-3637), 560.69, 1275.13925).when(fCNBase2).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, mnUserParameters1, mnUserCovariance0, 254);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      mnHesse0.ncycles();
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase3, mnUserParameterState0, 1073741792);
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(24, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      double[] doubleArray0 = new double[2];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0, (-2246));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(250);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1.0308034341118618E-30);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 0, 0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3914.7511646294674;
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, (-990));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-677));
      mnUserCovariance0.clone();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0, 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianNCycles((-1762));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      mnStrategy0.setGradientStepTolerance(759.5273450637128);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      int int0 = 0;
      mnStrategy0.setHessianG2Tolerance((-389));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 4889.47142562938, 0.51, 160.938350625, (-2889.99650802)).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 1);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MinimumParameters minimumParameters0 = new MinimumParameters(2600);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("L$L{M.8PCS6hl$7n1t", (double) 3, 2.842170943040401E-10, (double) 3, (double) 2600);
      MnHesse mnHesse1 = new MnHesse(1);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1);
      MinimumError minimumError0 = new MinimumError(100);
      FunctionGradient functionGradient0 = new FunctionGradient(1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 5.9604644775390625E-8, 100);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 2600);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(200);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)200, (-1.0), (-1.0), (-1.0), (double)200).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 200;
      doubleArray0[1] = (double) 200;
      doubleArray0[2] = (double) 200;
      doubleArray0[3] = (double) 200;
      doubleArray0[4] = (double) 200;
      doubleArray0[5] = (double) 200;
      doubleArray0[6] = (double) 200;
      doubleArray0[7] = (double) 200;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase0, mnUserParameters0, (MnUserCovariance) null);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-330.634189033);
      doubleArray1[4] = (-1.0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray1, doubleArray1, 2408);
      assertEquals(38, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance1, (-2246));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2593);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(2593);
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, (MnUserParameters) null, mnUserCovariance0, 2593);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MinimumState minimumState0 = new MinimumState(2616);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("ee9e{rcv')6", (double) 2616, (double) 2616, 2880.615110720211, (double) 2616);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (double)2616, 10.0).when(fCNBase0).valueOf(any(double[].class));
      MnHesse mnHesse0 = new MnHesse(4);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2880.615110720211);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-967));
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnHesse mnHesse0 = new MnHesse(0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 2634;
      MnHesse mnHesse0 = new MnHesse(2634);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2634;
      doubleArray0[1] = (double) 2634;
      int int1 = 0;
      MnHesse mnHesse1 = new MnHesse(0);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2634);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(2634);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2634, 2634);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(5);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameterState) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[4];
      mnHesse0.tolerg2();
      doubleArray0[0] = 2214.0;
      doubleArray0[1] = 2214.0;
      doubleArray0[2] = 2214.0;
      doubleArray0[3] = 2214.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-0.125);
      doubleArray1[1] = 2214.0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray1, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1683);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(4000);
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters1, mnUserCovariance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-3433));
      mnHesse0.ncycles();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-2420);
      MnHesse mnHesse0 = new MnHesse((-2420));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2420);
      doubleArray0[1] = (double) (-2420);
      doubleArray0[2] = (double) (-2420);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-2420));
      mnUserCovariance0.toString();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2634);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2634).when(fCNBase0).valueOf(any(double[].class));
      MnHesse mnHesse1 = new MnHesse(0);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2737.393541772236);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 2737.393541772236);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(2634);
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, 2634);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, (-1095.507654), 2634);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      // Undeclared exception!
      try { 
        mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1586083771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1.0));
      int int0 = 100;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(100);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, (-221.6150313));
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(100);
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, (MinimumError.MnInvertFailed) null);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 4.440892098500626E-14, 3879);
      double[] doubleArray0 = new double[0];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnUserParameters0.add((String) null, (double) 100);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0.0, mnUserTransformation0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, mnUserParameterState0, 3879);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2624, 2624);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 3, (-2946.0), 1314.2376207952698, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserParameters0.setPrecision((-602.93322));
      mnUserParameters0.toString();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1121.70346), (double)3, (-1121.70346), (-2946.0), (-1121.70346)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2222.700231347556));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2222.700231347556);
      doubleArray0[1] = (-1121.70346);
      doubleArray0[2] = 1314.2376207952698;
      doubleArray0[3] = (-1121.70346);
      doubleArray0[4] = (double) 2624;
      doubleArray0[5] = 1314.2376207952698;
      doubleArray0[6] = (-1121.70346);
      doubleArray0[7] = (-2946.0);
      doubleArray0[8] = 1314.2376207952698;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, (-1721));
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(48, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-2246);
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[2];
      MnHesse mnHesse0 = new MnHesse();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-2246));
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (MnUserParameters) null, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2324.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2324.0;
      doubleArray1[1] = 2324.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1477.4774788458);
      doubleArray2[1] = (-1477.4774788458);
      doubleArray2[2] = 2324.0;
      doubleArray2[3] = (-1477.4774788458);
      doubleArray2[4] = 2.825496880545967;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray2, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2588, (double)2588, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 2588);
      MinimumState minimumState0 = new MinimumState(979);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 8.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      double[] doubleArray1 = mnUserParameters1.errors();
      mnHesse0.calculate(fCNBase2, mnUserParameters1, mnUserCovariance0, 99);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray1, doubleArray1);
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase0, mnUserParameterState0, (-2864));
      assertEquals(34, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3947);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3947);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-1.0), (-715819937));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1396.473927695);
      doubleArray0[1] = (double) (-715819937);
      doubleArray0[2] = (double) (-715819937);
      doubleArray0[3] = (-1.0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, (-1396.473927695), mnUserTransformation0);
      mnHesse0.calculate(fCNBase1, mnUserParameterState0, 3947);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2.0708832622474276));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3914.7511646294674;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-677));
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3914.7511646294674;
      doubleArray1[3] = (double) (-2145071383);
      mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0);
      doubleArray1[4] = (double) 7;
      doubleArray1[5] = (double) (-677);
      doubleArray1[6] = (double) (-677);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray1, mnUserCovariance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-389), (double)(-389), (double)(-389), (-2991.37996609), 2.8421709430404007E-14).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2075.45694);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnHesse mnHesse1 = new MnHesse();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1419.9990997813595), 8.0, 0.0, (-3375.0914106723503), 9.631173505640259E29).when(fCNBase2).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0, (-1077));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, (-389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", (double) 3, 2.842170943040401E-10, 1275.13925, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.001, (-710.7202930811), 1415.7980728825, 0.02, 0.001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2222.700231347556));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-944));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0016858899760094428, 2.9460000000000006, 1488.9241216258727, 2.9460000000000006, 1.0E-35).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1275.13925;
      doubleArray0[1] = (-2222.700231347556);
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4271.41763, 0.001, 1275.13925, 0.28228681649941867, 0.51).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, mnUserParameters1);
      assertEquals(8, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2624, 0.28228681649941867, (-883.975403366217), 10.0, 0.001).when(fCNBase3).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase3, mnUserParameters1, mnUserCovariance1, 3);
      assertEquals(2624.0, mnUserParameterState1.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, (-217));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-2246));
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (MnUserParameters) null, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("L$L{M.8PCS6hl$7n1t", (double) 3, 2.842170943040401E-10, (double) 3, (double) 2600);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.842170943040401E-10, 2.842170943040401E-10, (double)3, 2.842170943040401E-10, (double)2600).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      assertEquals(8, mnUserParameterState0.nfcn());
      assertEquals(2.842170943040401E-10, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(0.0);
      mnStrategy0.setMediumStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(7.110912599270296E-32, 0.02, 9.701170629700103E29, 0.0, 7.110912599270296E-32).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      mnHesse0.calculate(fCNBase0, mnUserParameters0, 685);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase2, 0.51);
      MinimumParameters minimumParameters0 = new MinimumParameters((MnAlgebraicVector) null, (MnAlgebraicVector) null, 685);
      int int0 = 5;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(685);
      MinimumError.MnHesseFailed minimumError_MnHesseFailed0 = new MinimumError.MnHesseFailed();
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnHesseFailed0);
      FunctionGradient functionGradient0 = null;
      try {
        functionGradient0 = new FunctionGradient((MnAlgebraicVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.FunctionGradient", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 2634;
      MnHesse mnHesse0 = new MnHesse(2634);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2634, (-2244.843824639), (double)2634, (-2244.843824639), (double)2634).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2634;
      doubleArray0[1] = (double) 2634;
      int int1 = 0;
      MnHesse mnHesse1 = new MnHesse(0);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2634);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(2634);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2634, 2634);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", 1761.1317, 2634.0, (double) 2634, 654.969094);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 2634);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 3, 2.842170943040401E-10, 1275.13925, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserParameters0.setPrecision(2.842170943040401E-10);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.001, (-710.7202930811), 1415.7980728825, 0.02, 0.001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2222.700231347556));
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-960));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.842170943040401E-10, 2.9460000000000006, (double)2624, 2.9460000000000006, 0.02).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1275.13925;
      doubleArray0[1] = (-2222.700231347556);
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4271.41763, 0.001, 1275.13925, 0.28228681649941867, 0.51).when(fCNBase2).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(2624);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0);
      assertEquals(4271.41763, mnUserParameterState0.fval(), 0.01);
      assertEquals(8, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2598, (double)2598, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(2598.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(18, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 6;
      MnHesse mnHesse0 = new MnHesse(6);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)6, (double)6, (double)6, 0.005000000000000001, 0.005000000000000001).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase0, mnUserParameterState0, (-3823));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 6;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray1, doubleArray1);
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 6.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(847);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.005000000000000001);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(847);
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, 0.005000000000000001);
      MinimumState minimumState0 = new MinimumState(19);
      MnAlgebraicVector mnAlgebraicVector1 = minimumState0.vec();
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector1);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 0.005000000000000001, 1912);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, 847);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters have invalid size
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("r%:9b:ezU7^p5C", (double) 0);
      // Undeclared exception!
      try { 
        mnUserParameters0.fix(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=0
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-1320);
      MnHesse mnHesse0 = new MnHesse((-1320));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnHesse mnHesse1 = new MnHesse();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1320);
      doubleArray0[1] = (double) (-1320);
      doubleArray0[2] = (double) (-1320);
      doubleArray0[3] = (-1928.355533180465);
      doubleArray0[4] = (double) (-1320);
      doubleArray0[5] = (double) (-1320);
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase0, doubleArray0, (MnUserCovariance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2324.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2324.0;
      doubleArray1[1] = 2324.0;
      doubleArray1[2] = 2324.0;
      doubleArray1[3] = 2324.0;
      doubleArray1[4] = 2324.0;
      doubleArray1[5] = 2324.0;
      doubleArray1[6] = 2324.0;
      doubleArray1[7] = 2324.0;
      doubleArray1[8] = 2324.0;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray1);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(16, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0, (-2246));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      int int0 = 1863;
      mnStrategy0.setGradientNCycles(1863);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnHesse0.tolerg2();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      MnUserTransformation mnUserTransformation0 = null;
      try {
        mnUserTransformation0 = new MnUserTransformation((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-389), 2.8271613260143047, 2.8271613260143047, (double)(-389), (-1466.49045)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2075.45694);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(223.78917932, (-2075.45694)).when(fCNBase1).valueOf(any(double[].class));
      MnHesse mnHesse1 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnHesse1.calculate(mnFcn0, minimumState1, mnUserTransformation0, 1568);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-169));
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0, (-1077));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2075.45694);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnHesse mnHesse1 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-169));
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", (double) 3, 2.842170943040401E-10, (double) 3, (double) 2626);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2946.0));
      mnFcn0.theNumCall = 2626;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn1 = new MnFcn(fCNBase1, 4.0E-7);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2946.0), (-390.79153481), (double)(-3637), 560.69, (-2946.0)).when(fCNBase2).valueOf(any(double[].class));
      MnHesse mnHesse0 = new MnHesse(1199);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(2626);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      mnHesse0.calculate(fCNBase2, mnUserParameters1, 2626);
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2extCovariance(mnAlgebraicVector0, mnAlgebraicSymMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      // Undeclared exception!
      try { 
        mnHesse0.ncycles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2420));
      mnHesse0.tolerg2();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-2420));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 3, 2.842170943040401E-10, 1275.13925, (double) 2624);
      mnUserParameters0.trafo();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", 0.1, 23.20407925, 1275.13925, (-1399.3217094996676));
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2222.700231347556));
      MnHesse mnHesse1 = new MnHesse();
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1138));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(3);
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase1, mnUserParameters1, mnUserCovariance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate name: !8ACv
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      mnAlgebraicVector0.clone();
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2624, 2624);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("!8ACv", (double) 3, (-2946.0), 1314.2376207952698, (double) 2624);
      mnUserParameters0.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1395.791556354382), (double)3, (-1395.791556354382), (-2946.0), (-1395.791556354382)).when(fCNBase0).valueOf(any(double[].class));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2222.700231347556);
      doubleArray0[1] = (double) 2624;
      doubleArray0[2] = (-2222.700231347556);
      doubleArray0[3] = (-1395.791556354382);
      doubleArray0[4] = (-2222.700231347556);
      doubleArray0[5] = (-2946.0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      mnHesse0.ncycles();
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase0, mnUserParameterState0, (-252));
      assertEquals(76, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-389), (double)(-389), (double)(-389), (-2991.37996609), 2.8421709430404007E-14).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2075.45694);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnHesse mnHesse1 = new MnHesse();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0, (-1077));
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(66, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1183.693, (-3993.7968213447), (double)(-389), 1052.409481256, 1052.409481256).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 0.0, (-389));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2075.45694);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2075.45694);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      int int0 = 1;
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
      mnHesse0.tolerg2();
      MnHesse mnHesse1 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(0);
      MnHesse mnHesse2 = new MnHesse(1);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      try { 
        mnHesse2.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 6;
      MnHesse mnHesse0 = new MnHesse(6);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)6, (double)6).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameterState0, (-3823));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2624);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-2946.0));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.842170943040401E-10, 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", (double) 3, 2.842170943040401E-10, 1275.13925, (double) 2624);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1046.8632), (-2237.6724862396845), 0.15, 507.30560122660523, 0.001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2946.0));
      mnFcn0.theNumCall = 2624;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn1 = new MnFcn(fCNBase1, 4.0E-7);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-3637));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1275.13925, (-390.79153481), (double)(-3637), 560.69, 1275.13925).when(fCNBase2).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnHesse0.calculate(fCNBase2, mnUserParameters1, mnUserCovariance0, 254);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 2624;
      MnHesse mnHesse0 = new MnHesse(2624);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2624, (double)2624, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2624);
      MinimumState minimumState0 = new MinimumState(2624);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2624;
      doubleArray1[1] = (-3705.98);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray1);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 2624);
      mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, 2624);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray1, doubleArray1);
      mnHesse0.calculate(fCNBase1, mnUserParameterState0, (-2010));
      MinimumState minimumState2 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-2010));
      // Undeclared exception!
      mnHesse0.calculate(mnFcn0, minimumState2, mnUserTransformation0, (-3081));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      double double0 = 0.0;
      mnStrategy0.setHessianStepTolerance(0.0);
      mnStrategy0.setMediumStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      MnUserParameters mnUserParameters1 = null;
      int int0 = 200;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(200);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 200;
      doubleArray1[1] = (double) 200;
      doubleArray1[2] = (double) 200;
      doubleArray1[3] = 1.0E-6;
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase3, doubleArray1, mnUserCovariance0, 303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, (MnUserCovariance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1455.4492977));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters are invalid
         //
         verifyException("org.freehep.math.minuit.HessianGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(0.0);
      mnStrategy0.setMediumStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      int int0 = 200;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(200);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 200;
      doubleArray1[1] = (double) 200;
      doubleArray1[2] = (double) 200;
      doubleArray1[3] = 1.0E-6;
      doubleArray1[4] = (double) 200;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      mnHesse0.calculate(fCNBase2, doubleArray1, doubleArray1, 200);
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, (MnUserParameters) null, mnUserCovariance0, 200);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(2634);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumParameters minimumParameters0 = new MinimumParameters(2634);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(9.631173505640259E29, 9.631173505640259E29, 4.440892098500626E-15, (double)2634, (-516.0)).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-115.96765835);
      doubleArray0[1] = (-2276.7101);
      doubleArray0[2] = 5679.95707772593;
      doubleArray0[3] = (double) 2634;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnHesse0.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0, (-2712));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-3377.87674389724), (-1852));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1852);
      doubleArray1[1] = (-2075.45694);
      doubleArray1[2] = (-3377.87674389724);
      doubleArray1[3] = (-3377.87674389724);
      doubleArray1[4] = (-3377.87674389724);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05, (-2276.7101), 9.631173505640259E29, 9.631173505640259E29, (-3377.87674389724)).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase2, doubleArray1, doubleArray1);
      assertEquals(46, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse();
      MnHesse mnHesse1 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 665.520237492877);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(959);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 665.520237492877);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 0.3, 0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnHesse mnHesse2 = new MnHesse(0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse2.calculate(fCNBase1, (double[]) null, (MnUserCovariance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 2634;
      MnHesse mnHesse0 = new MnHesse(2634);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2634;
      doubleArray0[1] = (double) 2634;
      doubleArray0[2] = (double) 2634;
      doubleArray0[3] = (double) 2634;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)2634, (-2244.843824639), (double)2634, (-2244.843824639), (double)2634).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2634;
      doubleArray1[1] = (double) 2634;
      int int1 = 0;
      MnHesse mnHesse1 = new MnHesse(0);
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 2634);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(2634);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2634, 2634);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnAlgebraicVector mnAlgebraicVector1 = minimumState0.vec();
      mnFcn0.valueOf(mnAlgebraicVector1);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("!8ACv", 1761.1317, 2634.0, (double) 2634, 654.969094);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      // Undeclared exception!
      try { 
        mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 2634);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 6;
      MnHesse mnHesse0 = new MnHesse(6);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase0, mnUserParameterState0, (-3823));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 6;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray1, (MnUserCovariance) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-3433));
      mnHesse0.ncycles();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, (double[]) null, (MnUserCovariance) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-389));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      double double0 = (-2991.37996609);
      mnStrategy0.setHessianNCycles((-1762));
      int int0 = 7;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      mnStrategy0.setGradientStepTolerance(759.5273450637128);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.0);
      int int1 = 0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      int int2 = (-627);
      double double1 = 1986.8578355;
      double double2 = 774.2241640681;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2246));
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-2246);
      doubleArray1[1] = (double) (-2246);
      doubleArray1[2] = (double) (-2246);
      doubleArray1[3] = (double) (-2246);
      doubleArray1[4] = (double) (-2246);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("L$L{M.8PCS6hl$7n1t", (double) 3, (double) 3, (double) 3, (double) 2600);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, (double)3, (double)3, (double)2600).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      assertEquals(3.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(18, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 1322;
      MnStrategy mnStrategy0 = new MnStrategy(1322);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1322;
      doubleArray0[1] = (double) 1322;
      doubleArray0[2] = (double) 1322;
      doubleArray0[3] = (double) 1322;
      doubleArray0[4] = (double) 1322;
      doubleArray0[5] = (double) 1322;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase0, mnUserParameters0);
      FCNBase fCNBase1 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (MnUserParameterState) null, (-408));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("L$L{M.8PCS6hl$7n1t", (-320.39899066809), 2.842170943040401E-10, 2.842170943040401E-10, (-320.39899066809));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(16, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-518.465983192412), (-518.465983192412), (-518.465983192412), (-518.465983192412), (-1.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (-513.106);
      mnStrategy0.setMediumStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.1, (-333055.5555555554), (-513.106), 2.827344410330165, 1953.239515530949).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, mnUserParameters0);
      assertEquals(40, mnUserParameterState0.nfcn());
      
      doubleArray0[2] = 3252.780636;
      doubleArray0[3] = (-599.1867273326);
      doubleArray0[4] = 42.087408632189;
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals((-518.465983192412), mnUserParameterState1.fval(), 0.01);
  }
}
