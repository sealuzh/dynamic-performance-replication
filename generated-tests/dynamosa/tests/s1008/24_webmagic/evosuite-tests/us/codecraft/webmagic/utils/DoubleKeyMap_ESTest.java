/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 10:49:45 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) null, (String) null, (Object) "");
      Object object0 = doubleKeyMap0.remove((Object) null, (String) null);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap0.put((Map<String, String>) hashMap0, (Object) hashMap0, (Object) "aI{VWaTBOcI)w06");
      Map<Object, Object> map0 = doubleKeyMap0.remove((Map<String, String>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) null, (String) null, (Object) "");
      Object object0 = doubleKeyMap0.put((Object) null, (String) null, (Object) class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      DoubleKeyMap<String, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, HashMap<Object, String>>((Map<String, Map<Object, HashMap<Object, String>>>) null, class0);
      HashMap<Object, String> hashMap0 = doubleKeyMap1.remove("n1MH$t/[i,?GuXgM", (Object) doubleKeyMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Map<String, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      Map<Integer, Object> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(object0, "", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Object object0 = new Object();
      DoubleKeyMap<String, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, String>>((Map<String, Map<Object, HashMap<Object, String>>>) null, class0);
      HashMap<Object, String> hashMap0 = doubleKeyMap0.get("n1MH$t/[i,?GuXgM", object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, HashMap<Object, Object>>(class0);
      HashMap<Object, Object> hashMap0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Map<String, Object> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Map<Object, String>, Map<Integer, Map<Object, String>>> hashMap0 = new HashMap<Map<Object, String>, Map<Integer, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Integer, Map<Object, String>>(hashMap0, class0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0, class1);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("#@j(TOmwS", (Object) doubleKeyMap0, (Object) map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, String>, HashMap<Object, Map<Object, String>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, String>, HashMap<Object, Map<Object, String>>>((Map<Object, Map<Map<Object, String>, HashMap<Object, Map<Object, String>>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Integer, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Map<Object, String>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Map<Object, String>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object0 = new Object();
      doubleKeyMap0.put(object0, "", (Object) "");
      Object object1 = doubleKeyMap0.remove(object0, (String) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) null, (String) null, (Object) null);
      Object object0 = doubleKeyMap0.put((Object) null, (String) null, (Object) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, String>>(class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((String) null, (Object) "L3v}Q,T@Wl.", hashMap0);
      Integer integer0 = new Integer((-54));
      HashMap<Object, String> hashMap1 = doubleKeyMap0.get((String) null, (Object) integer0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
  }
}
