/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:23:39 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      asyncTimeout0.timeout(951L, timeUnit0);
      asyncTimeout0.clearDeadline();
      asyncTimeout0.exit();
      asyncTimeout0.exit(false);
      Buffer buffer0 = new Buffer();
      Source source0 = asyncTimeout0.source(buffer0);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("");
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      assertSame(iOException1, iOException0);
      assertEquals("java.io.InterruptedIOException: timeout", iOException1.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.exit(false);
      asyncTimeout0.exit(false);
      asyncTimeout0.deadlineNanoTime(1L);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.exit(false);
      asyncTimeout0.exit(false);
      asyncTimeout0.exit((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.enter();
      AsyncTimeout.head.newTimeoutException((IOException) null);
      asyncTimeout0.timedOut();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1L);
      asyncTimeout0.enter();
      asyncTimeout1.exit(false);
      assertSame(asyncTimeout0, asyncTimeout1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-910L));
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.awaitTimeout();
      Sink sink0 = null;
      asyncTimeout2.sink(sink0);
      String string0 = "";
      MockIOException mockIOException0 = new MockIOException(string0);
      asyncTimeout1.exit((IOException) mockIOException0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime((-1087L));
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      boolean boolean0 = true;
      try { 
        asyncTimeout1.exit(boolean0);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime((-1083L));
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout1.exit(true);
      asyncTimeout0.enter();
  }
}
