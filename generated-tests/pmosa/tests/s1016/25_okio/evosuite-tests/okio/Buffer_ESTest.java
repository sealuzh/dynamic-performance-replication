/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:43:43 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(10);
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, (long) 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(1L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      try { 
        buffer0.readFully(buffer1, 4665L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.emit();
      realBufferedSink0.flush();
      realBufferedSink0.buffer.write((Source) buffer0, 0L);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writableSegment(5);
      buffer1.emit();
      buffer0.emitCompleteSegments();
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.write((Source) buffer_UnsafeCursor0.buffer, (-537L));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 0L;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("odDw?8]~ba{S", charset0);
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(2L);
      assertEquals(1L, buffer0.size());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      inflaterSource0.close();
      Buffer buffer1 = realBufferedSource0.buffer;
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 842L;
      Pipe pipe0 = new Pipe(842L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Sink sink0 = pipe0.sink();
      buffer0.readAll(sink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.read(buffer1, 10000L);
      buffer2.clear();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer2, (-405L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-861L));
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 182L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1135;
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.utf8 = null;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      realBufferedSource0.indexOfElement(byteString1);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(1582L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Source source0 = hashingSource0.delegate();
      buffer0.writeAll(source0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = buffer0.hmacSha512(byteString0);
      assertEquals(64, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString((byte[]) null);
      long long0 = buffer0.indexOfElement(byteString0, 8L);
      assertEquals((-1L), long0);
      
      long long1 = buffer0.size();
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)70, 0L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      SegmentPool.next = null;
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      byteString0.base64();
      ByteString byteString1 = hashingSink0.hash();
      HashingSource.hmacSha1(hashingSource0, byteString0);
      buffer0.hmacSha1(byteString1);
      buffer0.clear();
      buffer0.rangeEquals((-1862L), byteString0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I~O9)n(YI6E");
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) mockFileOutputStream0, (-1295L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1295
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = buffer0.rangeEquals(4L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 1143L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.timeout();
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0);
      Buffer buffer1 = buffer0.writeByte(0);
      Buffer buffer2 = buffer1.write(byteString0);
      // Undeclared exception!
      try { 
        buffer2.write((Source) buffer1, 2382L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("u");
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(1L, buffer0.size());
      
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 710L;
      long long0 = 3L;
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict(3L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Pipe pipe0 = new Pipe(967L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha512();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-108), (long) (byte) (-108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-108 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-402L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -402
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.buffer.copyTo(buffer0, 0L, 0L);
      buffer0.rangeEquals(0L, byteString0);
      realBufferedSource0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-316L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(2640L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(10L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(0);
      assertFalse(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(84);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1L, buffer0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-1969L);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1969L));
      buffer1.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.readWrite = false;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      MockFile mockFile0 = new MockFile("[text=fffffffffffff84f]");
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("");
      buffer2.readString((long) 16, charset0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "[text=fffffffffffff84f]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [text=fffffffffffff84f]
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = (-204L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1752L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-204 > size=1752
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(10L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=10 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(4L);
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(898L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      long long0 = 710L;
      buffer0.size = 710L;
      buffer0.writeUtf8("!dv5w:jRjmZ");
      buffer0.snapshot();
      buffer0.readUtf8CodePoint();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(127);
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(127, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("SHA-512", 102, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 48 < 102
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      try { 
        buffer0.skip(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(10);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xa
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.close();
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readUtf8Line();
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0, 65280L);
      // Undeclared exception!
      try { 
        buffer0.readByteArray((-3236L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-3236
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      assertFalse(buffer0.exhausted());
      
      buffer0.readByteString();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(1210L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-10);
      Buffer buffer1 = buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[3];
      realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      hashingSource0.hash();
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte)44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-1969L);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1969L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer2.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pipe pipe0 = new Pipe(131L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(131L);
      buffer0.readUtf8Line();
      ByteString byteString0 = null;
      Charset.defaultCharset();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      hashingSource0.hash();
      buffer1.writeInt(1441);
      // Undeclared exception!
      try { 
        byteBuffer0.put((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)56);
      buffer0.exhausted();
      buffer0.writeUtf8CodePoint((byte)56);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.utf8 = null;
      realBufferedSource0.buffer.writeUtf8CodePoint(844);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      realBufferedSource0.indexOfElement(byteString1);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("size < ");
      ByteString byteString0 = buffer0.snapshot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.indexOfElement(byteString0, 8192L);
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(7, buffer_UnsafeCursor1.end);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("~SM5>!*0$JBG%DP");
      ByteString byteString0 = buffer0.snapshot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("~SM5>!*0$JBG%DP");
      buffer1.indexOfElement(byteString0);
      ByteString byteString1 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x7e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 2146836425;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2146836425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7ff61fc9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(42L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (-2086), (-2086), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2086
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-2638));
      long long0 = buffer0.readAll(bufferedSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.timeout();
      hashingSource0.hash();
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(3);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8((long) (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=6
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1815L));
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0, 1333L);
      buffer0.writeHexadecimalUnsignedLong((-1815L));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1775L);
      Buffer buffer1 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource1.timeout();
      HashingSource hashingSource2 = HashingSource.md5(hashingSource1);
      ByteString byteString1 = hashingSource2.hash();
      buffer0.indexOf(byteString1);
      buffer1.writeByte(1425);
      Buffer buffer2 = buffer0.write(byteString0);
      buffer0.write((Source) hashingSource0, (long) 0);
      buffer0.indexOf(byteString0, 2017L);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      try { 
        buffer2.writeAll(inflaterSource0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("odDw?8]~ba{S", charset0);
      HashingSink.sha256(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.emit();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer2.writeTo(outputStream0);
      assertFalse(buffer0.exhausted());
      
      buffer0.readByteString();
      assertTrue(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-2138L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2138
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(967L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha512();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Buffer buffer1 = buffer0.readFrom((InputStream) bufferedInputStream0);
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeByte(0);
      // Undeclared exception!
      try { 
        buffer0.readByteString((-1937L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1937
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeHexadecimalUnsignedLong((-1895L));
      Buffer buffer2 = realBufferedSink0.buffer.writeIntLe(1734);
      buffer2.writeIntLe((byte)4);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer1.readFrom((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong((-2928L));
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-389L));
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.readAll(buffer1);
      ByteString byteString0 = realBufferedSink0.buffer.sha256();
      assertEquals(32, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("odDw?8]~ba{S", charset0);
      buffer1.writeDecimalLong(1826L);
      HashingSink.sha256(buffer1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("base64 == null");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.base64();
      ByteString byteString1 = null;
      ByteString[] byteStringArray0 = new ByteString[9];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)2;
      ByteString byteString2 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = null;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = null;
      byteStringArray0[7] = null;
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      // Undeclared exception!
      try { 
        HashingSink.hmacSha512(buffer0, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.HashingSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      byte[] byteArray0 = new byte[1];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      byteArray0[0] = (byte)17;
      int int1 = buffer0.read(byteArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(572L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOfElement(byteString0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("s == null", charset0);
      long long0 = buffer1.readLong();
      assertEquals(4L, buffer1.size());
      assertEquals(3834589077772778784L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(280375465082880L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer0.readLong();
      assertEquals(16711680L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(27);
      buffer1.readByte();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte)0, (long) (-1), (-1671L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=-1671
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer_UnsafeCursor0.buffer.copyTo((OutputStream) pipedOutputStream0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-1454));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xfffffffa
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1815L));
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-1418));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x76
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.require(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("string == null", charset0);
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=14 content=737472696e67203d3d206e756c6c\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(50);
      long long0 = new Integer(50);
      try { 
        buffer0.readUtf8LineStrict(50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=32\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict(3317L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4!O5j8Q]k&{`@ek");
      Buffer buffer0 = new Buffer();
      buffer0.equals((Object) null);
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(81);
      buffer0.writeDecimalLong(81);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      buffer0.write(byteArray0);
      buffer0.segmentSizes();
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(50);
      buffer0.hashCode();
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-1845));
      buffer0.hashCode();
      boolean boolean0 = buffer0.exhausted();
      assertEquals(4L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 10;
      try { 
        buffer0.write((Source) buffer0, (long) 10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(100000000000000000L);
      buffer0.exhausted();
      buffer0.sha512();
      buffer1.writeIntLe(1357);
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(2147483646);
      Buffer buffer2 = new Buffer();
      try { 
        buffer2.write((Source) buffer1, (long) 2147483646);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.write(byteString0);
      buffer0.outputStream();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Pipe pipe0 = new Pipe(1826L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort((-36));
      buffer1.writeUtf8CodePoint(1277);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1527L;
      buffer0.writeUtf8("^t");
      MockPrintStream mockPrintStream0 = new MockPrintStream("^t");
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) mockPrintStream0, 1527L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-576));
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffc0)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 710L;
      Buffer buffer1 = buffer0.writeUtf8("^t");
      buffer1.readShortLe();
      // Undeclared exception!
      try { 
        buffer0.snapshot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      buffer0.size = 1396L;
      buffer0.writeShort((-199));
      Object object0 = null;
      buffer0.readShortLe();
      // Undeclared exception!
      try { 
        buffer0.readByteArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " content=");
      buffer1.readUtf8Line();
      buffer1.equals(buffer0);
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeInt(5);
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha1(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.writeLongLe((-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)118;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha1(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-12L));
      long long0 = 3814L;
      // Undeclared exception!
      try { 
        buffer0.snapshot(2129129086);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2129129086
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      buffer0.writeUtf8CodePoint((-1));
      int int0 = buffer0.readUtf8CodePoint();
      assertTrue(buffer0.exhausted());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-576));
      buffer0.clone();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.SegmentedByteString");
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-9));
      buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer1.clone();
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-929));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x5f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(127);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(127);
      buffer2.writableSegment(127);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x7f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      buffer0.readUtf8Line();
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-1454));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xfffffffa
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(127);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(127);
      buffer1.readUtf8CodePoint();
      buffer1.writeShortLe((-796));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(999999916900L);
      buffer1.segmentSizes();
      buffer1.readIntLe();
      assertEquals(8L, buffer0.size());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(2576443648L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.write(byteString0);
      buffer0.writeUtf8CodePoint(27);
      int int0 = buffer0.readIntLe();
      assertEquals(17L, buffer0.size());
      assertEquals((-291292710), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        buffer0.readFrom((InputStream) pushbackInputStream0, 1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(251);
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertEquals(251, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2144);
      buffer1.outputStream();
      buffer0.readUtf8CodePoint();
      buffer1.writeLong(2144);
      assertEquals(8L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(56320);
      int int0 = buffer0.readUtf8CodePoint();
      assertTrue(buffer0.exhausted());
      assertEquals(63, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(72);
      buffer0.readUtf8Line();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertEquals("\u0000&\u0018J\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeUtf8CodePoint(1114111);
      assertEquals(4L, buffer1.size());
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(1114111, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.indexOf((byte)8, (long) (byte)8, 3080L);
      buffer0.writeUtf8CodePoint(65536);
      assertEquals(4L, buffer0.size());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(65536, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(98);
      Buffer buffer2 = new Buffer();
      buffer1.writeShort(13);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.sha512();
      buffer0.writeLong(1040L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertEquals(10L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(50);
      long long0 = buffer1.readDecimalLong();
      assertEquals(0L, buffer1.size());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(131);
      buffer0.readByte();
      ByteString[] byteStringArray0 = null;
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(10L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.size = 1396L;
      Buffer buffer1 = buffer0.writeShort((-199));
      buffer1.writeInt(224);
      Object object0 = null;
      buffer0.readShortLe();
      // Undeclared exception!
      try { 
        buffer0.readByteArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(50);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(1L, buffer0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = buffer0.rangeEquals(613L, byteString0, (-2171), 1334);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals((long) (byte) (-118), byteString0);
      Buffer buffer1 = buffer0.writeDecimalLong(2220L);
      buffer0.indexOf(byteString0);
      buffer1.write(byteString0);
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(50);
      MockFile mockFile0 = new MockFile((File) null, "inflater == null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      buffer1.copyTo((OutputStream) mockFileOutputStream0);
      assertEquals(1L, buffer0.size());
      assertEquals(1L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1815L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer1.copyTo(outputStream0);
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Pipe pipe0 = new Pipe(898L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.size = 710L;
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 710L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unit == null");
      Buffer buffer1 = buffer0.writeDecimalLong((-5366L));
      buffer1.write((Source) buffer0, (-5366L));
      Buffer buffer2 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)75;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer2, byteString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString1 = hashingSource0.hash();
      long long0 = buffer1.indexOfElement(byteString1, 3L);
      assertEquals(5L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)9;
      byte byte1 = (byte)31;
      buffer0.indexOf((byte)31);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2569L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.writeUtf8CodePoint(65533);
      buffer0.rangeEquals(71776119061217280L, byteString0);
      buffer1.readUtf8();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)55);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-118);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOf(byteString0);
      buffer1.write(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)55);
      buffer1.writeUtf8CodePoint(0);
      long long0 = buffer1.readDecimalLong();
      assertFalse(buffer0.exhausted());
      assertEquals(55L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(50);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.resizeBuffer(100000000000L);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.buffer.writeShort(11);
      byteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte)55;
      buffer0.write(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[4];
      try { 
        realBufferedSource0.readByteString((long) (byte)15);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s\"");
      ByteString byteString0 = buffer1.snapshot();
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-1845));
      buffer0.hashCode();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)97;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.readShort();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(2L, buffer0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1893);
      buffer0.writeShortLe(1893);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer0.readUtf8Line((long) 1);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1815L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(realBufferedSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      buffer1.indexOf(byteString1);
      buffer1.write(byteString1);
      realBufferedSink0.buffer.readUtf8Line(4L);
      assertEquals(16L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 5;
      buffer0.writeInt(5);
      buffer0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      try { 
        realBufferedSource1.readByteString(17L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(898L);
      Buffer buffer0 = new Buffer();
      buffer0.size = 710L;
      Buffer buffer1 = buffer0.writeUtf8("^t");
      ByteString byteString0 = buffer0.snapshot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("^t");
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(0L, long0);
      
      buffer0.write(byteString0);
      long long1 = buffer1.indexOf((byte)24);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(723);
      buffer1.indexOf((byte) (-14), 1420L, 100000L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffcb
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)110;
      Buffer buffer1 = buffer0.write(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1815L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      ByteString[] byteStringArray0 = new ByteString[5];
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)18;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = new ByteString(byteArray0);
      byteStringArray0[3] = byteString3;
      ByteString byteString4 = new ByteString(byteArray0);
      byteStringArray0[4] = byteString4;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.readAll(buffer1);
      realBufferedSource0.buffer.segmentSizes();
      buffer1.sha1();
      buffer1.writeLongLe(0L);
      realBufferedSource0.buffer.snapshot();
      try { 
        realBufferedSource0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0000000000000000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(898L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[2] = (byte)30;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(9999999999982L);
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000000L);
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10000000000000L);
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Pipe pipe0 = new Pipe(898L);
      Buffer buffer0 = new Buffer();
      buffer0.size = 710L;
      Buffer buffer1 = buffer0.writeUtf8("^t");
      buffer0.snapshot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("^t");
      buffer0.writeHexadecimalUnsignedLong((-1167L));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("^t");
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(999984L);
      buffer0.writeUtf8("");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Pipe pipe0 = new Pipe(898L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(100000L);
      try { 
        buffer1.readUtf8LineStrict(898L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=6 content=313030303030\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)88;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.rangeEquals(10000L, byteString0, (int) (byte)28, (int) (byte) (-83));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      buffer0.writeLongLe(2029L);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals(0L, byteString0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffed
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      realBufferedSource1.buffer.rangeEquals(0L, byteString0);
      realBufferedSource0.buffer.readUtf8();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 710L;
      buffer0.writeUtf8("^t");
      buffer0.writeDecimalLong(710L);
      try { 
        buffer0.readUtf8LineStrict(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=5e743731305e743731305e743731305e743731305e743731305e743731305e74\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(3311L);
      long long0 = 2L;
      try { 
        buffer1.readUtf8LineStrict(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=33333131\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Pipe pipe0 = new Pipe(898L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(100000L);
      buffer1.writeUtf8("^]");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      realBufferedSink0.buffer.sha512();
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      buffer0.copyTo(outputStream0);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer2.readFrom(inputStream0, 100000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("~SM5>!*0$JBG%DP");
      buffer0.snapshot();
      MockPrintStream mockPrintStream0 = new MockPrintStream("~SM5>!*0$JBG%DP");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x7e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("~OImnZxP'");
      HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(999999916725L);
      try { 
        buffer1.readUtf8LineStrict(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=7e4f496d6e5a785027393939393939393136373235\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(16711680L);
      // Undeclared exception!
      try { 
        buffer2.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(9223372036854775807L);
      try { 
        buffer1.readUtf8LineStrict(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=39323233333732303336383534373735383037\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1152921504606846976L));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-72057594037927936L));
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-72057594037927936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -72057594037927936
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(9223372036854775807L);
      long long0 = (-8L);
      ByteString byteString0 = realBufferedSource0.readByteString(8L);
      buffer1.hmacSha256(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((-8L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -8
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeUtf8("SHA-256");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      MockFile mockFile0 = new MockFile("UByNUrnTeN", "b#c-pW");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Buffer buffer4 = realBufferedSink2.buffer.copyTo((OutputStream) mockFileOutputStream0);
      buffer4.writeShort(1952257861);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(2147483647L);
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2147483627L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      buffer1.readUnsafe();
      byteArray0[1] = (byte)1;
      buffer1.read(byteArray0);
      buffer1.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-776L));
      buffer1.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 710L;
      buffer0.size = 710L;
      Buffer buffer1 = buffer0.writeDecimalLong(710L);
      buffer0.writeUtf8("UByNUrnTeN");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.outputStream();
      buffer1.writeDecimalLong(2049L);
      try { 
        buffer1.readUtf8LineStrict(710L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=710 content=3731305542794e55726e54654e323034393731305542794e55726e54654e3230\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(100000000000000L);
      buffer0.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      buffer1.writeDecimalLong((-10000000000000000L));
      buffer0.readDecimalLong();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      buffer0.readFrom((InputStream) pushbackInputStream0, 0L);
      buffer0.rangeEquals(0L, byteString0);
      realBufferedSource0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("size < ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)41;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(100000L);
      buffer_UnsafeCursor0.offset = 60L;
      buffer_UnsafeCursor0.resizeBuffer(927);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("jP(_=");
      buffer0.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 719L;
      buffer0.writeDecimalLong(719L);
      Buffer buffer1 = buffer0.writeUtf8("U@BNUrnTe");
      buffer1.writeLongLe(719L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAll(buffer0);
      Buffer buffer2 = buffer0.writeUtf8("U@BNUrnTe");
      MockPrintStream mockPrintStream0 = new MockPrintStream("U@BNUrnTe");
      buffer2.writeTo((OutputStream) mockPrintStream0, 1L);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 719L;
      buffer0.writeDecimalLong(719L);
      buffer0.writeUtf8("U@BNUrnTe");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAll(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      byte[] byteArray0 = new byte[5];
      dataOutputStream0.write(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0);
      mockPrintStream0.print(true);
      Buffer buffer1 = buffer0.copyTo(outputStream0);
      realBufferedSink0.buffer.copyTo(outputStream0);
      mockPrintStream0.println(false);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      mockPrintStream0.print(false);
      Buffer buffer2 = new Buffer();
      buffer1.copyTo((OutputStream) mockPrintStream0);
      Buffer buffer3 = buffer0.copyTo((OutputStream) mockPrintStream0);
      buffer3.readUtf8CodePoint();
      buffer_UnsafeCursor1.resizeBuffer(719L);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-87);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.rangeEquals(100000000000000L, byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor1.seek((-1L));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 719L;
      Buffer buffer1 = buffer0.writeDecimalLong(719L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAll(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      byte[] byteArray0 = new byte[8];
      dataOutputStream0.write(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0);
      mockPrintStream0.print(true);
      buffer0.copyTo(outputStream0);
      Buffer buffer2 = realBufferedSink0.buffer.copyTo(outputStream0);
      mockPrintStream0.println(false);
      mockPrintStream0.print(true);
      realBufferedSink0.buffer.copyTo((OutputStream) mockPrintStream0);
      buffer0.copyTo(outputStream0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer2.readUtf8Line();
      buffer1.exhausted();
  }
}
