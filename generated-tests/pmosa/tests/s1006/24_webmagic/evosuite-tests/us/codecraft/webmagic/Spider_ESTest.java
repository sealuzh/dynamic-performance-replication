/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:22:46 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.io.LineNumberReader;
import java.io.PipedWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "cRsJF8GKZi~&7jLMvD";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cRsJF8GKZi~&7jLMvD");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.downloader((Downloader) null);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("cRsJF8GKZi~&7jLMvD", "cRsJF8GKZi~&7jLMvD");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("cRsJF8GKZi~&7jLMvD");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GG");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GG", "GG");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.run();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GG";
      stringArray0[1] = "GG";
      stringArray0[2] = "GG";
      stringArray0[3] = "GG";
      stringArray0[4] = "GG";
      stringArray0[5] = "GG";
      stringArray0[6] = "GG";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,b");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2;}5j");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("2;}5j", "2;}5j");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2;}5j";
      stringArray0[1] = "2;}5j";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/|Xl50V");
      Locale locale0 = Locale.forLanguageTag("/|Xl50V");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/|Xl50V", "/|Xl50V");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.getAll((Collection<String>) set0);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      assertFalse(queueScheduler1.equals((Object)queueScheduler0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4.<+!@hs-UZ5lo8-P");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|", "9");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2|/0G=Vnf\"(h(K_)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("J?~q");
      String string0 = spider0.getUUID();
      assertTrue(spider0.isSpawnUrl());
      assertNotNull(string0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("1&y_xz%Yx^|1XR");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      // Undeclared exception!
      try { 
        spider0.get("1&y_xz%Yx^|1XR");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("download page {} error");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Xl50V");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("/Xl50V");
      // Undeclared exception!
      try { 
        spider0.thread((-1122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<script.*?>.*?</script>");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      spider0.getStatus();
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Spider.Status.fromValue((-1));
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("4&cyY-W{-c98M0<");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status.fromValue(75);
      Spider.Status.fromValue(2523);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("nV3nM<^<k");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      Spider spider3 = spider2.thread((ExecutorService) null, 75);
      Spider spider4 = spider3.setSpawnUrl(true);
      Spider spider5 = spider4.setExitWhenComplete(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nV3nM<^<k";
      stringArray0[1] = "nV3nM<^<k";
      stringArray0[2] = "nV3nM<^<k";
      stringArray0[3] = "nV3nM<^<k";
      stringArray0[4] = "nV3nM<^<k";
      stringArray0[5] = "";
      stringArray0[6] = "H;3";
      Page page0 = Page.fail();
      ResultItems resultItems0 = page0.getResultItems();
      Request request0 = new Request((String) null);
      Request request1 = request0.addCookie("H;3", "");
      Request request2 = request1.setPriority(0L);
      ResultItems resultItems1 = resultItems0.setRequest(request2);
      multiPagePipeline0.process(resultItems1, spider1);
      stringArray0[7] = "nV3nM<^<k";
      stringArray0[8] = "nV3nM<^<k";
      // Undeclared exception!
      try { 
        spider5.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2|/0G=Vnf\"(h(K_)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Logger logger0 = (Logger)spider0.logger;
      spider0.logger = (org.slf4j.Logger) logger0;
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-1872));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VI9FA");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1815);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "/a=e*x\"CK?)[";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/a=e*x\"CK?)[");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = "/GQn~`e$=[-_n8";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/GQn~`e$=[-_n8", "/GQn~`e$=[-_n8");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.sleep((-3307));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("PZdRlct");
      Spider spider3 = spider2.startUrls(list0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.addCookie("", "PZdRlct");
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request(", cycleRetryTimes=");
      request0.addCookie("B%6Ktvdp/%I'&?J", "");
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "Stopped";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider0.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.setSpawnUrl(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2632);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider5 = spider4.pipeline(multiPagePipeline0);
      Spider spider6 = spider5.thread(3630);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Request request0 = new Request();
      spider6.getStartTime();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request1 = request0.setExtras(hashMap0);
      Request request2 = request1.setUrl((String) null);
      // Undeclared exception!
      try { 
        duplicateRemovedScheduler0.push(request2, spider2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GG");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      Spider spider3 = spider2.setSpawnUrl(true);
      spider3.setSpawnUrl(false);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2618, threadFactory0);
      Spider spider4 = spider3.thread(2618);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider5 = spider2.setScheduler(fileCacheQueueScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider5.pipeline(multiPagePipeline0);
      Spider spider6 = spider4.thread(3630);
      assertFalse(spider3.isSpawnUrl());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Thread interrupted when sleep";
      stringArray0[1] = "GG";
      spider6.setSpawnUrl(true);
      spider1.runAsync();
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.clearPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.exitWhenComplete = false;
      linkedList0.addFirst(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider2.scheduler(fileCacheQueueScheduler0);
      Spider.create(simplePageProcessor0);
      spider1.uuid = "Thread interrupted when sleep";
      int int0 = 39;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      spider1.start();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39, threadFactory0, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.setSpawnUrl(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2618, threadFactory0);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider5 = spider4.pipeline(multiPagePipeline0);
      spider5.thread(3630);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      spider3.clearPipeline();
      assertTrue(spider3.isExitWhenComplete());
      
      spider4.setExitWhenComplete(false);
      Spider.Status spider_Status0 = spider0.getStatus();
      spider_Status0.getValue();
      spider2.runAsync();
      assertFalse(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.setUUID("Y?");
      Spider spider5 = spider4.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("Y?");
      phantomJSDownloader0.setRetryNum(2);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider5.getAll((Collection<String>) set0);
      spider2.getCollectorPipeline();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Y?";
      stringArray0[2] = "Y?";
      stringArray0[3] = "Y?";
      spider4.setEmptySleepTime(1533);
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Xl50V");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Spider spider3 = Spider.create(simplePageProcessor0);
      assertTrue(spider3.isSpawnUrl());
      
      spider2.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler((Scheduler) null);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|d{`");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Xl50V");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,b");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      Spider spider3 = spider2.clearPipeline();
      int int0 = 3;
      Spider spider4 = spider3.thread(3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`,b";
      stringArray0[1] = "uQ$Kw";
      stringArray0[2] = "`,b";
      stringArray0[3] = "`,b";
      stringArray0[4] = "`,b";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GG");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      Spider spider1 = spider0.setUUID("GG");
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      orSelector0.selectList(" error");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider2.setUUID("");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider2.getSite();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Request request0 = new Request("G");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a;`4m");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      long long0 = spider2.getPageCount();
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.setUUID("Y?");
      Spider spider5 = spider4.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("Y?");
      phantomJSDownloader0.setRetryNum(2);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider5.getAll((Collection<String>) set0);
      spider2.getCollectorPipeline();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Y?";
      stringArray0[2] = "Y?";
      stringArray0[3] = "Y?";
      spider0.setUUID("e9HJfl");
      QueueScheduler queueScheduler0 = new QueueScheduler();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.setUUID("Y?");
      Spider spider5 = spider4.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("Y?");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("Y?", "Y?");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider5.getAll((Collection<String>) set0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider5.clearPipeline();
      spider2.getScheduler();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Xl50V");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/Xl50V", "/Xl50V");
      Spider spider3 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setUUID("/Xl50V");
      Spider spider4 = spider3.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("/Xl50V");
      phantomJSDownloader0.setRetryNum(2);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider3.getAll((Collection<String>) set0);
      CollectorPipeline collectorPipeline0 = spider4.getCollectorPipeline();
      Spider spider5 = spider2.clearPipeline();
      spider5.setEmptySleepTime(639);
      String[] stringArray0 = new String[6];
      stringArray0[4] = "/Xl50V";
      stringArray0[1] = "/Xl50V";
      stringArray0[2] = "/Xl50V";
      String[] stringArray1 = new String[0];
      spider5.test(stringArray1);
      spider0.pipeline(collectorPipeline0);
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GG");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      Request request0 = new Request("");
      spider0.setExitWhenComplete(true);
      spider0.isExitWhenComplete();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("pI*Q^ccP9O", "GG");
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download(request0, (Task) spider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,b");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request(", cycleRetryTimes=");
      Request request1 = request0.addCookie(", acceptStatCode=", "");
      Request[] requestArray0 = new Request[6];
      requestArray0[5] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,b");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      spider1.scheduler((Scheduler) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("`,b");
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      spider3.stop();
      assertEquals(1, linkedList0.size());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,b");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.extractAndAddRequests(page0, false);
      spider1.stop();
      spider0.setUUID("`,b");
      spider0.thread((ExecutorService) null, 5);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<LineNumberReader> linkedList0 = new LinkedList<LineNumberReader>();
      spider0.getCollectorPipeline();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(8);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.thread(8);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequests = list0;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider2 = spider1.setUUID("Y?");
      Spider spider3 = spider2.thread(8);
      spider3.pipeline((Pipeline) null);
      Spider spider4 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider5 = spider2.setExecutorService(forkJoinPool0);
      spider5.run();
      spider4.initComponent();
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2;}5j");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("2;}5j", "2;}5j");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("2;}5j");
      List<Request> list0 = page1.getTargetRequests();
      spider1.startRequests = list0;
      spider0.run();
      PipedWriter pipedWriter0 = new PipedWriter();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }
}
