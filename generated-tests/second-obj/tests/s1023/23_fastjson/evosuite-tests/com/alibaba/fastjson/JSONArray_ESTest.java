/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:14:06 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.sql.Timestamp;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray0.fluentRetainAll(linkedList0);
      jSONArray1.fluentClear();
      Integer integer0 = new Integer(989);
      boolean boolean0 = jSONArray2.contains("1.2.46");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 3087;
      JSONArray jSONArray0 = new JSONArray(3087);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(71);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      boolean boolean0 = jSONArray0.equals(mockHijrahDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G");
      JSONArray jSONArray0 = new JSONArray(1485);
      // Undeclared exception!
      try { 
        jSONArray0.set((-39), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1051, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1051, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(111);
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(23, "_KDFae");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1738);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1738, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(93);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3087;
      JSONArray jSONArray0 = new JSONArray(3087);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = jSONArray0.componentType;
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3087);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3087, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3087);
      JSONObject jSONObject0 = new JSONObject(3087, true);
      jSONArray0.remove((Object) jSONObject0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(252);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 252, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "_KDFae");
      jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : _KDFae
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(16);
      jSONArray0.parallelStream();
      LinkedHashSet<ChronoLocalDate> linkedHashSet0 = new LinkedHashSet<ChronoLocalDate>();
      jSONArray0.containsAll(linkedHashSet0);
      int int0 = 996;
      // Undeclared exception!
      try { 
        jSONArray0.getString(706);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 706, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2015);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, (Object) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      jSONArray1.setRelatedArray(propertyNamingStrategy0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getComponentType();
      Object object0 = new Object();
      float float0 = jSONArray1.getFloatValue(989);
      assertEquals(2016, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.lastIndexOf(linkedList0);
      boolean boolean0 = jSONArray0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1971);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-158));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.fluentSet(2015, (Object) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1314));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(18);
      jSONArray0.fluentSet(1972, (-3201));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.getBigInteger(2);
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertEquals(1973, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSONString((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.listIterator();
      int int0 = (-1043);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1043));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "_KDFae");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_KDFae\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((-3201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3201
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      boolean boolean0 = jSONArray0.add(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      jSONArray0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Integer integer0 = new Integer((-3201));
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getByteValue(2015);
      jSONArray1.getComponentType();
      MockURI.URI("1.2.46");
      jSONArray0.getIntValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3364, Size: 2016
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "_KDFae");
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      jSONArray1.spliterator();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Integer integer0 = new Integer((-3201));
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, integer0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(1110, (Collection<?>) jSONArray0);
      jSONArray2.getJSONObject(2015);
      jSONArray1.getComponentType();
      PropertyNamingStrategy[] propertyNamingStrategyArray0 = new PropertyNamingStrategy[2];
      propertyNamingStrategyArray0[0] = propertyNamingStrategy0;
      propertyNamingStrategyArray0[1] = propertyNamingStrategy0;
      // Undeclared exception!
      try { 
        jSONArray2.toArray(propertyNamingStrategyArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONArray jSONArray0 = new JSONArray(2007);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getBigInteger(1970);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1970, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 3087;
      JSONArray jSONArray0 = new JSONArray(3087);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      Type type0 = jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3087, type0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3087, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      JSONArray jSONArray0 = new JSONArray(2005);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray3.getInteger(1510);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1510, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      Integer integer0 = new Integer(120);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(23, "_KDFae");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSON.parse("");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 24
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Integer integer0 = new Integer((-3201));
      JSONArray jSONArray1 = jSONArray0.fluentSet(1995, integer0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(1110, (Collection<?>) jSONArray0);
      jSONArray2.getJSONObject(1995);
      jSONArray1.getComponentType();
      jSONArray0.getJSONArray(459);
      jSONArray1.getBoolean(989);
      MockURI.URI("1.2.46");
      jSONArray1.getRelatedArray();
      jSONArray0.setComponentType((Type) null);
      assertEquals(3992, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "_KDFae");
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentSet(0, "_KDFae");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2015);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, (Object) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      jSONArray1.setRelatedArray(propertyNamingStrategy1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getComponentType();
      jSONArray1.getObject(1, (Type) parameterizedTypeImpl0);
      Integer integer0 = new Integer(989);
      assertEquals(989, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(111);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.removeAll(jSONArray0);
      Integer integer0 = new Integer((-22));
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3600000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3600000, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?qh9Y4}-=gO%epYp}");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockJapaneseDate0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentSet((-1), jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd((-2180), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2180, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Integer integer0 = new Integer((-3201));
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, integer0);
      jSONArray1.getByteValue(989);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray2.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(5087);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5087, Size: 2017
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1991);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) linkedList0);
      JSONArray jSONArray5 = jSONArray4.fluentRetainAll(jSONArray1);
      JSONArray jSONArray6 = jSONArray5.fluentRemoveAll(jSONArray4);
      // Undeclared exception!
      try { 
        jSONArray6.fluentAddAll(1991, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1991, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2015);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.setRelatedArray(classLoader0);
      jSONArray0.isEmpty();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-3201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(7, (-805));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(7) > toIndex(-805)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.spliterator();
      jSONArray0.hashCode();
      jSONArray0.contains(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(2967);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2967, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Integer integer0 = new Integer((-3201));
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, integer0);
      jSONArray1.getDoubleValue(989);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(1110, (Collection<?>) jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray2.add(999, (Object) mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray2.listIterator((-3201));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3201
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      MockURI.URI("AiOW");
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2015);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, (Object) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-125);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONArray0.getObject(1996, (Type) class1);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) jSONArray3);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONObject jSONObject1 = new JSONObject(989);
      jSONArray2.getFloatValue((byte)0);
      // Undeclared exception!
      try { 
        jSONArray4.remove((-3201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 236;
      JSONArray jSONArray0 = new JSONArray(236);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(236);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 236, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2032);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Integer integer0 = new Integer(2032);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2032, integer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      jSONArray0.getByteValue(1);
      jSONArray0.getJSONArray(1);
      jSONArray1.getComponentType();
      ClassLoader.getSystemClassLoader();
      jSONArray0.getBoolean(2032);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      jSONArray0.getJSONObject((byte)0);
      jSONArray1.clear();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3201), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3201
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2015);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 2000;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Integer integer0 = new Integer(1881);
      jSONArray2.fluentAdd((Object) integer0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-3201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3201
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jSONArray0.clear();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Integer integer0 = new Integer((-3201));
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getComponentType();
      int int0 = 0;
      jSONArray0.getJSONArray(0);
      MockURI.URI("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-3201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 2015;
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jSONArray0.clear();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Integer integer0 = new Integer(2015);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2015, integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray0.fluentAdd(object0);
      jSONArray1.getComponentType();
      jSONArray0.getJSONArray(0);
      jSONArray2.getLongValue(1971);
      MockURI.URI("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-3201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(2015, jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getByteValue(989);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Object object0 = new Object();
      jSONArray1.getComponentType();
      jSONArray2.getJSONArray(2015);
      int int0 = 2953;
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(2953);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2953, Size: 2016
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
