/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:00:53 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.signatureToString("CONSTANT_InterfaceMethodref", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1374, (-400));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)98, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25342. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[7] = (byte) (-109);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 501, (int) (byte)30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "KJ?j|%YU>,I1YHj]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("KJ?j|%YU>,I1YHj]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KJ?j|%YU>,I1YHj]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "VR_#u^Z";
      Utility.searchOpcode("VR_#u^Z");
      Utility.isSet((short) (-1), 122);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)92;
      byte byte0 = (byte)2;
      byteArray0[4] = (byte)2;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3291, 308);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getstatic";
      Utility.methodTypeToSignature("getstatic", stringArray0);
      boolean boolean0 = true;
      Utility.methodSignatureToString("(Lgetstatic;)Lgetstatic;", "getstatic", "getstatic", true, (LocalVariableTable) null);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-1);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-1));
      assertEquals("0:    goto\t\t#-8629\n3:    l2i\n4:    fstore\t\t%138\n6:    fadd\n7:    <illegal opcode>\n8:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.JavaClass$1", false);
      assertEquals(35, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), (int) (byte) (-93), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byte byte1 = (byte)60;
      byteArray0[1] = (byte)60;
      byte byte2 = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-50);
      byte byte3 = (byte)88;
      byteArray0[5] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3920, (int) (byte)39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "\"lZ8";
      try { 
        Utility.typeOfSignature("\"lZ8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"lZ8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&_Z6 nKH:nNAMu2#");
      byteArray0[0] = (byte) (-89);
      int int0 = 188;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, (int) (byte) (-89), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "!on? 5^q";
      try { 
        Utility.typeOfSignature("!on? 5^q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: on? 5^q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(5, 1723);
      Utility.compactClassName("{Sgt\"8[u5*c.z", "{Sgt\"8[u5*c.z", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 358, 98, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)65;
      byte byte0 = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-69);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 217, 166, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.convertString("\n\t\tthrows ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\n\t\tthrows ";
      objectArray0[1] = (Object) "\n\t\tthrows ";
      Utility.printArray(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n\t\tthrows ");
      mockPrintStream0.println((-1695.1F));
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)90, 68);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType1);
      constantArray0[1] = (Constant) constantNameAndType2;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)35, 1372);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantLong constantLong0 = new ConstantLong((-885L));
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.setBit(5573, 198);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@73e3f862, java.lang.Object@13e26441, java.lang.Object@527c5a27, java.lang.Object@501e59d3, java.lang.Object@3c529b5a");
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("java.lang.Object@73e3f862, java.lang.Object@13e26441, java.lang.Object@527c5a27, java.lang.Object@501e59d3, java.lang.Object@3c529b5a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@73e3f862, java.lang.Object@13e26441, java.lang.Object@527c5a27, java.lang.Object@501e59d3, java.lang.Object@3c529b5a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "NewObject";
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-125);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (int) (byte) (-125));
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n1:    lxor\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    lxor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-35), (-538), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.format((-2210), (-2210), true, '}');
      Utility.getSignature("fcmpl");
      String string0 = "9kVoP";
      try { 
        Utility.typeOfSignature("9kVoP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9kVoP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 64, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      char char0 = '\'';
      Utility.fillup("4", (-2529), true, '\'');
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte)95, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%@9Qan^wx?A]3a5tOE");
      byteArray0[3] = (byte) (-84);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-24);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (-1329));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), (int) (byte) (-90), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifeq\t\t#2205
         // 3:    impdep2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f2i");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte) (-101), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-60);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), 59);
      try { 
        Utility.methodSignatureReturnType("d2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d2f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = Utility.clearBit(5, 4661);
      assertEquals(5, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)81;
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4661, (byte)13);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(121, (byte)76);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("{xbEVLukqUJ3 8P\"");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-2205), 116);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3910), 5330, true);
      assertEquals("0:    astore_1\n1:    dstore_1\n2:    istore_0\n3:    aconst_null\n4:    istore_1\n5:    fconst_2\n6:    wide\t(wide)\n7:    fastore\n8:    fastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)106;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-12));
      try { 
        Utility.methodSignatureArgumentTypes("f8|iqO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f8|iqO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)17;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (-1135));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-63);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1818), (int) (byte)16);
      assertEquals("0:    laload\n1:    iushr\n2:    iconst_4\n3:    dstore_3\n4:    bipush\t\t-63\n", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P'zPftHy^jxQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P'zPftHy^jxQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format(1226, 1226, false, 'Y');
      String string1 = Utility.format((-25), 1226, false, 'Y');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) string1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) string0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName(string1);
      Utility.searchOpcode("sC~wBPU0Yza[!vO,2");
      Utility.accessToString(2111);
      Utility.compactClassName("public private protected static final synchronized strictfp", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)113;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2111, (int) (byte) (-94), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41585. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      mockPrintWriter0.flush();
      int int0 = 180;
      dataOutputStream0.writeByte(180);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)61, (byte)61);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)61, (-1354));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.typeOfSignature("D.dyol(::th[h+5^)/o");
      Utility.typeOfSignature("Iw'c|r");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)10;
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      Utility.compactClassName("D.dyol(::th[h+5^)/o", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility$JavaReader", "k>oq6/;Qz:4vsM", "9iq0p~W!,8E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "Xx<7(S|wG+I8/";
      try { 
        Utility.typeOfSignature("Xx<7(S|wG+I8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xx<7(S|wG+I8/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.accessToString(191, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "public private protected static final synchronized transient";
      stringArray0[1] = "public private protected static final synchronized transient";
      stringArray0[2] = "public private protected static final synchronized transient";
      stringArray0[3] = "public private protected static final synchronized transient";
      stringArray0[4] = "public private protected static final synchronized transient";
      stringArray0[5] = "public private protected static final synchronized transient";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[6] = "GBUjAjz~!#3zGT$P";
      stringArray0[7] = "public private protected static final synchronized transient";
      stringArray0[8] = "public private protected static final synchronized transient";
      Utility.methodTypeToSignature("public private protected static final synchronized transient", stringArray0);
      Utility.getSignature("public private protected static final synchronized transient");
      Utility.convertString("NV?ls*,BS@#|y");
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;Lpublic;LGBUjAjz~!#3zGT$P;Lpublic;Lpublic;)Lpublic;", true);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.clearBit((-1152), (-1152));
      Utility.classOrInterface((-1152));
      String string0 = "P5Z+S$bf>f)$'dP5";
      try { 
        Utility.decode("P5Z+S$bf>f)$'dP5", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.compactClassName("1tLm6Hf", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-78);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)65;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[4] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)65, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "Invalid type: void[]";
      Utility.replace("Invalid type: void[]", "Invalid type: void[]", "Invalid type: void[]");
      Utility.format((-3074), (-3074), false, '0');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-3074";
      objectArray0[1] = (Object) "Invalid type: void[]";
      objectArray0[2] = (Object) "Invalid type: void[]";
      objectArray0[3] = (Object) "Invalid type: void[]";
      objectArray0[4] = (Object) "Invalid type: void[]";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0);
      Utility.setBit((-3074), (-3074));
      String string1 = "pQIVq8F2+``M0";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-3074";
      stringArray0[1] = "pQIVq8F2+``M0";
      stringArray0[2] = "{-3074, Invalid type: void[], Invalid type: void[], Invalid type: void[], Invalid type: void[], java.lang.Object@67878e86}";
      Utility.methodTypeToSignature("pQIVq8F2+``M0", stringArray0);
      boolean boolean0 = true;
      try { 
        Utility.decode("-3074", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)23;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte) (-107));
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (int) (byte)23, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lreturn
         // 1:    <illegal opcode>
         // 2:    fcmpl
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byte byte1 = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)6;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("XnLYzsTIIhPu&:<o|9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XnLYzsTIIhPu&:<o|9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)52);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 167, 3129, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(64, (byte)41);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(64, (byte)41);
      constantArray0[2] = (Constant) constantFieldref0;
      constantFieldref0.setClassIndex((byte)41);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 1, 716, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.format((-1615117923), (-2276), true, '~');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)9;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)56;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1781), 2043);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2i
         // 1:    <illegal opcode>
         // 2:    dup2_x2
         // 3:    istore_3
         // 4:    i2l
         // 5:    astore_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.accessToString(702);
      String string0 = "[y(B";
      Utility.typeOfSignature("[y(B");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("B *Z?TfUHu/]:*Y|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B *Z?TfUHu/]:*Y|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)107;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, 51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)1;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'5]'NI ", "'5]'NI ", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.signatureToString("InnerClasses(");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "InnerClasses(";
      objectArray0[1] = (Object) "int";
      objectArray0[2] = (Object) "int";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "InnerClasses(";
      objectArray0[5] = (Object) "int";
      objectArray0[6] = (Object) "InnerClasses(";
      objectArray0[7] = (Object) "InnerClasses(";
      Utility.printArray(objectArray0, false, false);
      Utility.classOrInterface((-1404));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("int");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 120, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.searchOpcode("anewarray");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "anewarray";
      objectArray0[1] = (Object) "anewarray";
      objectArray0[2] = (Object) "anewarray";
      objectArray0[3] = (Object) "anewarray";
      objectArray0[4] = (Object) "anewarray";
      objectArray0[5] = (Object) "anewarray";
      objectArray0[6] = (Object) "anewarray";
      objectArray0[7] = (Object) "anewarray";
      Utility.printArray(objectArray0, false);
      String string0 = Utility.compactClassName("\"");
      Utility.convertString("anewarray, anewarray, anewarray, anewarray, anewarray, anewarray, anewarray, anewarray");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)55;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, 203);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.isSet(125, 125);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)45;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$3cB9$e6$d4$z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = MockFile.createTempFile("ret", ",N");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ",N";
      objectArray0[2] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(92L, file0.length());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(716L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-96), (byte) (-92));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("boolean");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger(191);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)107);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-29), (byte)115);
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmple\t\t#29547", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XfSKU0+");
      String string0 = "The strings must not be null";
      Utility.typeOfSignature("The strings must not be null");
      String string1 = "0`>(]<!g-qE]-a~RLh";
      Utility.compactClassName("0`>(]<!g-qE]-a~RLh");
      Utility.convertString("XfSKU0+");
      try { 
        Utility.typeOfSignature("0`>(]<!g-qE]-a~RLh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0`>(]<!g-qE]-a~RLh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Object@9ca6dcf, null, java.lang.Object@402f79c5, null";
      stringArray0[1] = "java.lang.Object@9ca6dcf, null, java.lang.Object@402f79c5, null";
      stringArray0[2] = "java.lang.Object@9ca6dcf, null, java.lang.Object@402f79c5, null";
      Utility.methodTypeToSignature("ifgt", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)42;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 368, 75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-82);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-82), (int) (byte)13);
      assertEquals("0:    aconst_null\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    return\n4:    fconst_2\n5:    <illegal opcode>\n6:    freturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.getSignature("d~Wk,");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-58);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 76, 47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)48;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("30 d9 1e f1 30");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 30 d9 1e f1 30
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "\t\t<";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t<");
      Utility.compactClassName("\t\t<", true);
      Utility.convertString("\t\t<");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-108);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), 77);
      assertEquals("0:    fcmpg\n1:    lneg\n2:    d2i\n3:    f2l\n4:    <illegal opcode>\n5:    breakpoint\n6:    lconst_1\n7:    lcmp\n", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.getSignature("<illegal opcode>");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "<illegal opcode>";
      objectArray0[1] = (Object) "L<illegal;";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(V!\"7yaR+d|\"&023/p", "\t(wide)", "\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!\"7yaR+d|\"&023/p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "lshr";
      boolean boolean0 = false;
      Utility.decode("lshr", false);
      int int0 = 87;
      Utility.clearBit(62, 87);
      String string1 = "N";
      try { 
        Utility.methodSignatureReturnType("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byte byte0 = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)111;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte) (-99);
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte) (-99);
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)111;
      objectArray0[4] = (Object) (byte)111;
      objectArray0[5] = (Object) (byte) (-99);
      objectArray0[6] = (Object) (byte)0;
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(42, (byte)111);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)58;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)58, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-79), (-79));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)12;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-619), 114);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.copy();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-336), (-2254));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 31527. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("IXC6", "invokestatic", "void");
      Utility.accessToString((-1873));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4096, (-3346), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.isSet(1334, (-3201));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.compactClassName("\t\t", false);
      Utility.getSignature("QN");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("@ef.Je-;", false);
      int int0 = 126;
      Utility.isSet(95, 126);
      Utility.compactClassName("monitorexit");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorexit'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "-_z7bu,),]lA";
      try { 
        Utility.typeOfSignature("-_z7bu,),]lA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -_z7bu,),]lA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-118);
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)1;
      Utility.toHexString(byteArray0);
      String string0 = ";";
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifle\t\t#16737", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 142, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "G< GhW)l(VHXP?";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("G< GhW)l(VHXP?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G< GhW)l(VHXP?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      String string0 = "(class_index = ";
      try { 
        Utility.typeOfMethodSignature("(class_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (class_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.replace("lreturn", "lreturn", "lreturn");
      byte[] byteArray0 = Utility.decode("lreturn", false);
      Utility.toHexString(byteArray0);
      int int0 = (-1793091415);
      Utility.setBit((-1793091415), (-1793091415));
      Utility.compactClassName("6c 72 65 74 75 72 6e", false);
      String string0 = "jsr_w";
      Utility.convertString("jsr_w");
      Utility.fillup("6c 72 65 74 75 72 6e", 108, false, 'J');
      Utility.signatureToString("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ6c 72 65 74 75 72 6e");
      Utility.encode(byteArray0, false);
      Utility.compactClassName("jsr_w", "lreturn", true);
      try { 
        Utility.typeOfSignature("6c 72 65 74 75 72 6e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6c 72 65 74 75 72 6e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "1,L=";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1,L=");
      String string1 = "Haz*B7*1hvO-%DUBH";
      try { 
        Utility.typeOfSignature("Haz*B7*1hvO-%DUBH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Haz*B7*1hvO-%DUBH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)99;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 171, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Long");
      assertEquals((byte)5, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "CONSTANT_Long";
      objectArray0[1] = (Object) "CONSTANT_Long";
      objectArray0[2] = (Object) "CONSTANT_Long";
      objectArray0[3] = (Object) "CONSTANT_Long";
      objectArray0[4] = (Object) "CONSTANT_Long";
      objectArray0[5] = (Object) "CONSTANT_Long";
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("CONSTANT_Long, CONSTANT_Long, CONSTANT_Long, CONSTANT_Long, CONSTANT_Long, CONSTANT_Long", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "impdep2";
      int int0 = 14;
      boolean boolean0 = false;
      Utility.fillup("impdep2", 14, false, '%');
      byte[] byteArray0 = Utility.decode("%%%%%%%impdep2", false);
      Utility.compactClassName("impdep2");
      Utility.decode("%%%%%%%impdep2", false);
      int int1 = 3302;
      Utility.clearBit((-865), 3302);
      Utility.searchOpcode("impdep2");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3302, (-865), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)110;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), (-426));
      assertEquals("0:    d2f\n1:    fneg\n2:    athrow\n3:    fdiv\n", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F'IJH}nJ");
      assertEquals((byte)6, byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "F'IJH}nJ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0);
      String string0 = Utility.accessToString((int) (byte)6, true);
      assertEquals("private protected", string0);
      
      String string1 = Utility.classOrInterface((-2680));
      assertEquals("class", string1);
      
      int int0 = Utility.clearBit(1687, (byte)6);
      assertEquals(1687, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "invokedynamic";
      Utility.getSignature("invokedynamic");
      Utility.clearBit(247, 247);
      Utility.setBit((-1301), 212);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1245, (-4242));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = Utility.setBit((-4694), (-4694));
      assertEquals((-4694), int0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("m68:c;b(<ZaZ}'^qM");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "m68:c;b(<ZaZ}'^qM";
      objectArray0[1] = (Object) "m68:c;b(<ZaZ}'^qM";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "m68:c;b(<ZaZ}'^qM";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-127);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), 326, true);
      assertEquals("0:    dup2\n1:    <illegal opcode>\n2:    lor\n", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "LIIk.2p9/zuG@";
      try { 
        Utility.methodSignatureReturnType("LIIk.2p9/zuG@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LIIk.2p9/zuG@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.clearBit((-783), (-147));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface((-8975));
      Utility.setBit((-8975), (-147));
      Utility.compactClassName("class", "class", false);
      Utility.accessToString((-1930));
      Utility.signatureToString("ZS");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)34;
      Utility.encode(byteArray0, false);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("$r$bc$o", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$r$bc$o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.isSet(2172, (-1678));
      int int0 = 97;
      Utility.isSet(2172, 97);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2172, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("short", "short", false);
      Utility.convertString("#|P,0!Dxt2Rj");
      Utility.format((-1797919417), (-1797919417), true, 'r');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "#|P,0!Dxt2Rj";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "#|P,0!Dxt2Rj";
      objectArray0[3] = (Object) "short";
      objectArray0[4] = (Object) "#|P,0!Dxt2Rj";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)30;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (int) (byte)30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.isJavaIdentifierPart('V');
      Utility.classOrInterface((-255));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)38;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 169, (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48907. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\t\t";
      stringArray0[1] = "\t\t";
      stringArray0[2] = "\t\t";
      stringArray0[3] = "\t\t";
      stringArray0[4] = "\t\t";
      stringArray0[5] = "|k[:oA9|u/";
      stringArray0[6] = "\t\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\t\t", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[:oA9|u/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-65);
      byteArray0[0] = (byte) (-65);
      Utility.equals(byteArray0, byteArray0);
      Utility.setBit((-626), 24);
      Utility.isJavaIdentifierPart('z');
      Utility.setBit((byte) (-65), (-2283));
      boolean boolean0 = false;
      Utility.signatureToString("[VnxL87kGxU@HCDZjZ*", false);
      try { 
        Utility.methodSignatureArgumentTypes("void[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void[]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "=z+=LejF;UBk1P";
      try { 
        Utility.typeOfSignature("=z+=LejF;UBk1P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =z+=LejF;UBk1P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A,;eo!(\"d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A,;eo!(\"d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)95;
      byteArray0[4] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-85);
      byte byte0 = (byte)79;
      byteArray0[5] = (byte)79;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)95, (byte) (-85));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)3, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "D";
      Utility.methodSignatureReturnType("D", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      int int0 = 40;
      int int1 = 2310;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, 2310);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)69;
      byteArray0[0] = (byte)69;
      ConstantPool constantPool0 = null;
      int int0 = 195;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, 195, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "monitorenter";
      String string1 = ",";
      Utility.compactClassName("monitorenter", ",", true);
      Utility.getSignature("if_icmpne");
      Utility.signatureToString("Do@Tm{:Ad8G");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true);
      String string2 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)56;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-4312), (-4312));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lor
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)14;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-120));
      assertEquals("0:    astore_2\n1:    monitorenter\n2:    iconst_4\n3:    l2i\n4:    <illegal opcode>\n5:    ifgt\t\t#13075\n", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("$.^E", "nfX.p3s@x#", false);
      try { 
        Utility.typeOfSignature("7E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "Sb'!+@|V";
      String[] stringArray0 = new String[0];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodTypeToSignature("Sb'!+@|V", stringArray0);
      try { 
        Utility.typeOfSignature(".YRuJkD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .YRuJkD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("d.;:RwKR9Wj", "byte");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.printf("byte", objectArray0);
      mockFile0.toPath();
      mockFile0.getCanonicalPath();
      objectArray0[0] = (Object) "d.;:RwKR9Wj";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.typeOfSignature("V59D[HSn'$");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("d.;:RwKR9Wj", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d.;:RwKR9Wj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q-mSwUq");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      
      int int0 = Utility.setBit(39, 3);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 142, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ":*FGdgZ*I-thQ-.{uj";
      try { 
        Utility.typeOfSignature(":*FGdgZ*I-thQ-.{uj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :*FGdgZ*I-thQ-.{uj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-21);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)127;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)91;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2274, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "Y<^JNWwYwv";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y<^JNWwYwv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y<^JNWwYwv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.signatureToString("S,?sV<4X0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 239, 65, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 56654. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.accessToString(1549);
      assertEquals("public protected static interface abstract", string0);
      
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)80;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-60), 109);
      assertEquals("0:    wide\t(wide)\n1:    lastore\n", string1);
      
      String string2 = Utility.format(1549, 47, false, 'p');
      assertEquals("ppppppppppppppppppppppppppppppppppppppppppp1549", string2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-5086), (int) (byte)5, true);
      assertEquals("0:    daload\n1:    iconst_2\n2:    d2i\n3:    athrow\n", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-85);
      byte byte0 = (byte)79;
      byteArray0[5] = (byte)79;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)95, (byte) (-85));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("wvJ@I>]$", false);
      assertArrayEquals(new byte[] {(byte)119, (byte)118, (byte)74, (byte)64, (byte)73, (byte)62, (byte)93}, byteArray0);
      
      String string0 = Utility.getSignature("if_acmpeq");
      assertEquals("Lif_acmpeq;", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "MMZ~-'";
      try { 
        Utility.typeOfSignature("MMZ~-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MMZ~-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "+YU1Z";
      try { 
        Utility.typeOfSignature("+YU1Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YU1Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.isJavaIdentifierPart('V');
      String string0 = "#O";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("#O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.searchOpcode("invokedynamic");
      try { 
        Utility.typeOfSignature("RQY<P:;_ui}'Zv\"`K8w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RQY<P:;_ui}'Zv\"`K8w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.setBit(50, 50);
      Utility.typeOfSignature("JvT5=gG]");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 50, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O8+>_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O8+>_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = Utility.clearBit(5, 4661);
      assertEquals(5, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)81;
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4661, (byte)13);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(121, (byte)76);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("{xbEVLukqUJ3 8P\"");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-2205), 116);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3910), 5330, true);
      assertEquals("0:    astore_1\n1:    fsub\n2:    istore_0\n3:    aconst_null\n4:    istore_1\n5:    fconst_2\n6:    wide\t(wide)\n7:    fastore\n8:    fastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = Utility.searchOpcode("goto_w");
      assertEquals((short)200, short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 45);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-855), 183, true);
      assertEquals("0:    fconst_1\n1:    ior\n2:    swap\n3:    dstore\t\t%208\n5:    lor\n6:    dconst_1\n7:    ladd\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.setBit(200, 200);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-15);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 200, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "int";
      stringArray0[1] = "int";
      Utility.methodTypeToSignature("int", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[z/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      byte byte1 = (byte)73;
      byteArray0[1] = (byte)73;
      byte byte2 = (byte)15;
      byteArray0[2] = (byte)15;
      byte byte3 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, 535);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-1);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), (-839), true);
      assertEquals("0:    fstore_1\n1:    <illegal opcode>\n2:    impdep1\n3:    ineg\n4:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.getSignature("new");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "new";
      stringArray0[1] = "new";
      stringArray0[2] = "new";
      stringArray0[3] = "Lnew;";
      stringArray0[4] = "void";
      stringArray0[5] = "new";
      stringArray0[6] = "Lnew;";
      stringArray0[7] = "new";
      stringArray0[8] = "Lnew;";
      try { 
        Utility.methodTypeToSignature("Lnew;", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)112;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), 34);
      assertEquals("0:    f2l\n1:    f2l\n2:    if_icmpgt\t\t#-1227\n5:    aload_0\n6:    dcmpg\n7:    irem\n", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)20;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("arraylength", false);
      try { 
        Utility.typeOfSignature("8::$dBf':7V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8::$dBf':7V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uR0Ss7$e#aVO";
      String string0 = Utility.methodTypeToSignature("uR0Ss7$e#aVO", stringArray0);
      assertEquals("(LuR0Ss7$e#aVO;)LuR0Ss7$e#aVO;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte)32;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$I1$q$A_$f9u$8e$m", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-87);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)10);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-87), (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    dload_2
         // 2:    lstore_0
         // 3:    lconst_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.compactClassName("l|NC@r6)O2Zd", false);
      Utility.getSignature("l|NC@r6)O2Zd");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)17;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-15));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1751, 14);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 38, (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(1158, 1158, true, 'V');
      Utility.compactClassName(string0, true);
      Utility.accessToString(3460, false);
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-6);
      Utility.toHexString(byteArray0);
      Utility.format((byte) (-103), (-3428), false, '2');
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", false);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("imul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: imul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "*2:r";
      try { 
        Utility.typeOfSignature("*2:r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2:r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-114);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4711, (int) (byte) (-81), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)112;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2l
         // 1:    <illegal opcode>
         // 2:    if_icmpgt\t\t#-1262
         // 5:    aload_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Utility.convertString("\\");
      assertEquals("\\\\", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.signatureToString("J*Jg#ePO$ii&Rb)BR>", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(38, 59, true, 'Q');
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("us0|$dk[#q},maX5");
      assertEquals("us0|$dk[#q},maX5", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("us0|$dk[#q},maX5");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iaload", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = Utility.accessToString((-275), false);
      assertEquals("public protected static synchronized volatile transient interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.methodSignatureReturnType("B", false);
      assertEquals("byte", string1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "@^#nP";
      try { 
        Utility.typeOfSignature("@^#nP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @^#nP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 1549;
      Utility.accessToString(1549);
      try { 
        Utility.methodSignatureReturnType("O]&1N2w3\"3wNW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O]&1N2w3\"3wNW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 27738. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "K}+*wEc3b9]8W9zMv";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K}+*wEc3b9]8W9zMv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K}+*wEc3b9]8W9zMv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.typeOfSignature("B$Y/*");
      Utility.getSignature("30oln");
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("&q&v'5}fYaaK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&q&v'5}fYaaK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SV8L.BDuT9|");
      assertEquals((byte)9, byte0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SV8L.BDuT9|");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "SV8L.BDuT9|");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "SV8L.BDuT9|";
      objectArray0[1] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$J", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-1), 87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    dastore
         // 2:    dup
         // 3:    frem
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " fields:\n";
      String string0 = Utility.methodTypeToSignature("~9ZZH5ia1CPNd?", stringArray0);
      assertEquals("(Lfields:;)L~9ZZH5ia1CPNd?;", string0);
      
      String string1 = Utility.format(103, 103, false, 'B');
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB103", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.format((-26), (-26), true, 'p');
      Utility.compactClassName("-26", "-26", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-26";
      objectArray0[1] = (Object) "-26";
      objectArray0[2] = (Object) "-26";
      objectArray0[3] = (Object) "-26";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2178, 253);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)30;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1449), (int) (byte)30, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (-403));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)69;
      byte byte0 = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)67;
      byte byte1 = (byte)104;
      byteArray0[7] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((byte)3, (byte)104);
      // Undeclared exception!
      try { 
        Utility.signatureToString("jsr_w\t\t#1159464517", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w\t\t#1159464517'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ret");
      Utility.replace("CONSTANT_String", "CONSTANT_String", "if_icmpne");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      Utility.methodSignatureReturnType("CONSTANT_String");
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "/f$&RS-?-k";
      try { 
        Utility.typeOfSignature("/f$&RS-?-k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /f$&RS-?-k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4711, (int) (byte) (-81), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte byte0 = (byte)43;
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-91);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J");
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)108;
      Utility.toHexString(byteArray0);
      Utility.methodTypeToSignature("2b 48 27 93 a5 ff 6c", (String[]) null);
      Constant[] constantArray0 = new Constant[9];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("()L2b;", "&qF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"&qF\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("Kx%n_UeIdht", (-916), false, '.');
      Utility.compactClassName("Kx%n_UeIdht", "Kx%n_UeIdht", false);
      String string0 = "0x[n0+jvj\"aE`#s/w";
      try { 
        Utility.typeOfSignature("0x[n0+jvj\"aE`#s/w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0x[n0+jvj\"aE`#s/w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      constantPool1.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)107, 7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(56, 4540);
      // Undeclared exception!
      try { 
        Utility.signatureToString("WYh!tXF}SL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WYh!tXF}SL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "ATW(J z(<:-zIB\"~+";
      Utility.convertString("ATW(J z(<:-zIB\"~+");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.setBit(167, 666);
      Utility.isSet(8, (-1632));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ATW(J z(<:-zIB\"~+";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-6);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(1757);
      try { 
        Utility.methodSignatureReturnType("public protected static final volatile transient interface abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public protected static final volatile transient interface abstract'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.searchOpcode("E(4Vj?1S~nY");
      Utility.decode("d2i", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "d2i";
      objectArray0[1] = (Object) "d2i";
      objectArray0[2] = (Object) "d2i";
      objectArray0[3] = (Object) "E(4Vj?1S~nY";
      objectArray0[4] = (Object) "E(4Vj?1S~nY";
      objectArray0[5] = (Object) "E(4Vj?1S~nY";
      objectArray0[6] = (Object) "d2i";
      objectArray0[7] = (Object) "d2i";
      objectArray0[8] = (Object) "E(4Vj?1S~nY";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E(4Vj?1S~nY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E(4Vj?1S~nY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P_!X.Y");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#n0#4:|h|P_N_k=sW&");
      try { 
        Utility.typeOfSignature("Qw/^T(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qw/^T(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")-BXbVR#jd");
      int int0 = 43;
      Utility.accessToString(43);
      String string0 = "lnu^g~]M\\/lZhR:R";
      Utility.compactClassName("impdep1", "lnu^g~]M/lZhR:R", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)41;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-96);
      Utility.equals(byteArray0, byteArray1);
      Utility.format(13, (byte) (-96), false, 'b');
      Utility.getSignature("impdep1");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public private static synchronized";
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.getSignature("=J9");
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Ljava/lang/Object");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.replace("L=J9;", "Total of ", "bH9}cG");
      assertEquals("L=J9;", string0);
      
      String string1 = Utility.classOrInterface(67);
      assertEquals("class", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bH9}cG";
      stringArray0[1] = "bH9}cG";
      stringArray0[2] = "=J9";
      stringArray0[3] = "Ljava/lang/Object";
      stringArray0[4] = "Total of ";
      stringArray0[5] = "bH9}cG";
      stringArray0[6] = "bH9}cG";
      stringArray0[7] = "Ljava/lang/Object";
      stringArray0[8] = "Ljava/lang/Object";
      String string2 = Utility.methodTypeToSignature("=J9", stringArray0);
      assertEquals("(LbH9}cG;LbH9}cG;L=J9;LLjava/lang/Object;LTotal;LbH9}cG;LbH9}cG;LLjava/lang/Object;LLjava/lang/Object;)L=J9;", string2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "$1i|nAvG>";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("$1i|nAvG>", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("(S)S");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)3;
      byte byte0 = (byte)89;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "putfield");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)122;
      Utility.toHexString(byteArray0);
      Utility.getSignature("short");
      Utility.methodTypeToSignature("boolean", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, 2750, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char char0 = '$';
      Utility.format((-2688), (-2688), true, '$');
      Utility.compactClassName("-2688");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)65;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)65, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.getSignature("P>W2|'m4");
      try { 
        Utility.methodSignatureReturnType("P>W2|'m4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P>W2|'m4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("p<=k7YPf+os");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass((byte)17);
      constantArray0[3] = (Constant) constantClass1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-52));
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      Utility.convertString("Invalid method signature: ");
      Utility.signatureToString("Invalid method signature: ", true);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|b4sDgI'zn");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)68;
      byte byte0 = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-109);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 501, (int) (byte)30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.signatureToString("FvO&m5vcW Pw3t7", false);
      Utility.accessToString((-1759));
      Utility.replace("invokespecial", ">\t", "lstore");
      try { 
        Utility.methodSignatureArgumentTypes("anewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-50);
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-121);
      byte byte1 = (byte)41;
      byteArray0[5] = (byte)41;
      byte byte2 = (byte)95;
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.replace("private", (String) null, "<illegal opcode>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SourceFile: ");
      assertEquals("short", string0);
      
      String string1 = Utility.replace("r,\"CaR@._!c,`", "M4i", "ifnonnullInvalid type: ");
      assertEquals("r,\"CaR@._!c,`", string1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.isSet(3930, 1529);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " (";
      stringArray0[1] = "InnerClasses(";
      stringArray0[2] = "InnerClasses(";
      stringArray0[3] = "InnerClasses(";
      stringArray0[4] = "InnerClasses(";
      stringArray0[5] = "InnerClasses(";
      stringArray0[6] = "InnerClasses(";
      stringArray0[7] = "{java.lang.Object@2dc5c468,";
      String string0 = Utility.methodTypeToSignature("InnerClasses(", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "Mo#{a-;";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mo#{a-;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mo#{a-;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "(b \\zddqG5_6les";
      try { 
        Utility.typeOfSignature("(b zddqG5_6les");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (b zddqG5_6les
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("!jY1$7p[Kwl[|eO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Kwl[|eO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = (-1873);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface((-1873));
      String string0 = "%hg";
      try { 
        Utility.typeOfSignature("%hg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %hg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "HtThWPBk BB{F";
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("HtThWPBk BB{F", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HtThWPBk BB{F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.clearBit((-765), (-3281));
      boolean boolean0 = true;
      Utility.accessToString(161, true);
      Utility.isJavaIdentifierPart('|');
      Utility.compactClassName("Mo#{a-;", true);
      Utility.convertString("wiQ^huf8/JhYc@)azO#");
      try { 
        Utility.typeOfSignature(", handler_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , handler_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "T\\d";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.compactClassName("Td", "double", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Td", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Td
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.isSet(256, (-1401));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      Utility.encode(byteArray0, false);
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 849);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('s');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "areturn";
      Utility.getSignature("areturn");
      Utility.signatureToString("Lareturn;", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("<nX6-bai", true);
      Utility.convertString("ireturn");
      try { 
        Utility.typeOfMethodSignature("q]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = ">1}5Fb";
      try { 
        Utility.typeOfSignature(">1}5Fb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >1}5Fb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "'";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(235);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      stringArray0[1] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      stringArray0[2] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      stringArray0[3] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      stringArray0[4] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      stringArray0[5] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      stringArray0[6] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      stringArray0[7] = "{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}";
      String string1 = Utility.methodTypeToSignature("{java.lang.Object@7c3435e8, java.lang.Object@7254f62f, java.lang.Object@5797404f}", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%[97(Kv*v1P@p";
      stringArray0[1] = "%[97(Kv*v1P@p";
      stringArray0[2] = "a#CEC*'Zlvbrq";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("%[97(Kv*v1P@p", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[97(Kv*v1P@p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.typeOfSignature("Illegally nested brackets:");
      try { 
        Utility.methodSignatureArgumentTypes("E[/TFML+$FJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E[/TFML+$FJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("504$$t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 504$$t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "Qj i";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qj i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qj i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.compactClassName("Ui1nV", false);
      String string0 = Utility.format(256, 256, false, 'P');
      assertEquals("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP256", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-10);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-307), (int) (byte) (-17));
      assertEquals("0:    if_icmpne\t\t#10509\n3:    <illegal opcode>\n4:    dup2_x1\n5:    <illegal opcode>\n6:    astore_0\n7:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)20;
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "strictfp";
      Utility.replace("^", "/Yx", "strictfp");
      int int0 = (-2701);
      Utility.isSet((-3656), (-2701));
      try { 
        Utility.typeOfSignature("getfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y|g ";
      Utility.methodTypeToSignature("y|g ", stringArray0);
      Utility.compactClassName("impdep1", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";ng}J)N");
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      int int0 = 190;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 190);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Locale locale0 = Locale.PRC;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Sf", (Object[]) stringArray0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "y|g ";
      objectArray0[3] = (Object) "(Ly|g;)Ly|g;";
      objectArray0[4] = (Object) "impdep1";
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[6] = (Object) "y|g ";
      Utility.printArray(printWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("y|g ", "Sf", "'8zyxY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y|g 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "h(j";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DQ59eJ%?c|+ e>p4B");
      Utility.searchOpcode("h(j");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString(".9sDGJsZtHm';f;bm&]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".9sDGJsZtHm';f;bm&]");
      String string0 = "fDmSC<Byd*gU@gN8{cS";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fDmSC<Byd*gU@gN8{cS");
      char char0 = 'Q';
      Utility.format((-2200), (-2200), true, 'Q');
      Utility.setBit((-831), (-1113));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = 40;
      char char0 = '@';
      Utility.fillup("?z}+=g$", 40, true, '@');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.format(234, (-264), false, 'k');
      Utility.setBit((-264), 234);
      Utility.classOrInterface((-264));
      Utility.convertString("newarray");
      String string0 = "7jWys{\\u\\dGr>e";
      Utility.compactClassName(string0, "snf;c1xKmn.CF", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)14;
      byte byte0 = (byte)98;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)1;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, ";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \";\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.isJavaIdentifierPart('m');
      Utility.searchOpcode("%hg");
      int int0 = 167;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n?");
      Utility.fillup("V", 167, true, 'l');
      try { 
        Utility.methodSignatureArgumentTypes("b7j73f?(TVO-ND");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: b7j73f?(TVO-ND
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("(#:z*y_GT@&[");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "(#:z*y_GT@&[/");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "(#:z*y_GT@&[/";
      objectArray0[2] = (Object) "(#:z*y_GT@&[/";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("(#:z*y_GT@&[");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "{(#:z*y_GT@&[/, null, (#:z*y_GT@&[/, null, java.lang.Object@56a2aeee, null, null, null}");
      try { 
        Utility.methodSignatureArgumentTypes("(#:z*y_GT@&[/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#:z*y_GT@&[/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokestatic", "if_icmpge", "invokestatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.printArray((Object[]) null);
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.MethodParameter");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.replace("4=)Sr", "CONSTANT_String", "CONSTANT_String");
      int int0 = (-1896);
      Utility.classOrInterface((-1896));
      MockFile mockFile0 = new MockFile("CONSTANT_String", "4=)Sr");
      File file0 = MockFile.createTempFile("athrow", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Aj{j+L");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(#:z*y_GT@&[/", "(#:z*y_GT@&[/");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "(#:z*y_GT@&[/";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "(#:z*y_GT@&[/";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) mockFile0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      boolean boolean1 = Utility.isSet(52, 52);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.accessToString(52, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = Utility.replace("protected final synchronized", "protected final synchronized", "protected final synchronized");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format((-1625473374), (-1251), true, ' ');
      assertEquals("-1625473374", string2);
      
      short short0 = Utility.searchOpcode("m.{VFz[<F&Cb]U}c_.q");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.classOrInterface(9);
      Utility.compactClassName("class", "class", true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('2');
      Utility.compactClassName("&~#Os^a^3P/", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("&~#Os^a^3P.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&~#Os^a^3P.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("private", true);
      int int0 = 36;
      Utility.accessToString(36);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private";
      stringArray0[1] = "private";
      Utility.methodTypeToSignature("private", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("private");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.accessToString((-602));
      byte[] byteArray0 = Utility.decode("#,@eYB\"aS 6", false);
      Utility.isSet(14, 1534);
      Utility.clearBit(59, 14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 64
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("0.:' V`L", 81, true, '(');
      Utility.classOrInterface(16);
      Utility.searchOpcode("'");
      Utility.compactClassName("0.:' V`L(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((", false);
      MockFile mockFile0 = new MockFile("boolean");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "ifne");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ifne
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      int int0 = 951;
      Utility.accessToString(951);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "}kk3if=SV";
      boolean boolean0 = false;
      Utility.decode("}kk3if=SV", false);
      try { 
        Utility.typeOfMethodSignature("}kk3if=SV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }kk3if=SV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "land";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      Utility.fillup("land", 2078, false, 'I');
      try { 
        Utility.typeOfSignature("land");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: land
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Signature";
      Utility.decode("org.apache.bcel.classfile.Signature", false);
      int int0 = (-571);
      Utility.isSet((-571), (-571));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Signature", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Signature'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.searchOpcode("dreturn");
      Utility.format((short)175, (short)175, true, 'A');
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.methodSignatureReturnType(", ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Utility.classOrInterface(157);
      assertEquals("class", string0);
      
      int int0 = Utility.setBit(157, 970);
      assertEquals(1181, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "_u";
      try { 
        Utility.typeOfSignature("_u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 16;
      Utility.isSet(16, 41);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("if_icmpge", stringArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-102);
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString((byte) (-102));
      constantArray0[0] = (Constant) constantString0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("*cO1KHW=evY", "()Lif_icmpge;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"()Lif_icmpge;\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "breakpoint";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" methods:\n", "arraylength", "breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  methods:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.fillup("HJcKbgGj}o", 4, true, '+');
      int int0 = 1688;
      int int1 = 242;
      Utility.isSet(1688, 242);
      Utility.isJavaIdentifierPart('+');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(86);
      constantArray0[0] = (Constant) constantInteger0;
      int int2 = 843;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("HJcKbgGj}o", "int");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"int\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.typeOfSignature("Z");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Z", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.convertString("org.apache.bcel.classfile.Utility$JavaReader");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-9);
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((-1445));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-26), (byte) (-13));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(674);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodHandle1.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 222, 674, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ret'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)31;
      Utility.toHexString(byteArray0);
      Utility.clearBit(43, 0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "00 8d 00 00 bf fa 1f";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "00 8d 00 00 bf fa 1f";
      stringArray0[6] = "Illegally nested brackets:";
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.classOrInterface(1398);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)95;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.accessToString(0);
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, (-653));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    i2c
         // 3:    iconst_5
         // 4:    jsr\t\t#-20194
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-107);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = (-2975);
      Utility.format((-889275714), (-2975), true, '`');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("-889275714", (-889275714), true, 's');
      Utility.searchOpcode("-889275714");
      Utility.convertString("-889275714");
      Utility.accessToString((int) (short) (-1));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-889275714";
      objectArray0[1] = (Object) "-889275714";
      objectArray0[2] = (Object) "-889275714";
      objectArray0[3] = (Object) "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[5] = (Object) "-889275714";
      objectArray0[6] = (Object) "-889275714";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "-889275714";
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*8", "-889275714", "v`e9q'?B2J8I;pfrC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.accessToString(1186);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "private synchronized transient abstract";
      objectArray0[1] = (Object) "private synchronized transient abstract";
      objectArray0[2] = (Object) "private synchronized transient abstract";
      objectArray0[3] = (Object) "private synchronized transient abstract";
      objectArray0[4] = (Object) "private synchronized transient abstract";
      objectArray0[6] = (Object) "private synchronized transient abstract";
      objectArray0[7] = (Object) "private synchronized transient abstract";
      objectArray0[8] = (Object) "private synchronized transient abstract";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)93;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 138);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G4XUZpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G4XUZpl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.getSignature("iflt");
      Utility.compactClassName("Liflt;");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Liflt;";
      objectArray0[1] = (Object) "Liflt;";
      objectArray0[2] = (Object) "Liflt;";
      objectArray0[3] = (Object) "Liflt;";
      objectArray0[4] = (Object) "Liflt;";
      objectArray0[5] = (Object) "Liflt;";
      objectArray0[6] = (Object) "iflt";
      Utility.printArray(objectArray0);
      Utility.methodSignatureReturnType("U%$iAK)VC");
      try { 
        Utility.methodSignatureArgumentTypes("sRtY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sRtY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 849);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int int0 = 1335;
      int int1 = 0;
      Utility.clearBit(1335, 0);
      try { 
        Utility.methodSignatureReturnType("RuntimeInvisibleParameterAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
