/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:27:25 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.zero(4, 4);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(4, 4);
      int int1 = (-1994091957);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, (-1994091957), 8, 4, 3575);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1994091957, 8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 32);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.forEach(consumer0);
      rowMajorSparseMatrix0.toMatrixMarket();
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.blankOfRows(32);
      cRSMatrix0.blank();
      cRSMatrix0.setRow(17, 1.1102230246251565E-14);
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n32 32 0\n");
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(17);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1217);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setRow(1217, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1217. Should be: 17.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2338.2981);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1595.14285;
      doubleArray0[4] = (-2783.0);
      doubleArray0[5] = (-0.4375);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.1102230246251565E-14;
      doubleArray0[8] = (-4060.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix1 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 17, 1771, 17, (-203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 17x-203
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-2300.559);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 282.6903;
      doubleArray1[6] = 7.085203328499374E-11;
      doubleArray1[7] = (-428.377);
      doubleArray1[8] = (-402.4018119868997);
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("       ");
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 66;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(66, 0.0);
      int int1 = 9;
      MockRandom mockRandom0 = new MockRandom(66);
      rowMajorSparseMatrix0.swapRows(9, 9);
      Matrix matrix0 = Matrix.random(66, 9, mockRandom0);
      matrix0.spliterator();
      int int2 = (-2078209980);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn((-2078209980));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2078209980' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 9);
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      rowMajorSparseMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.apply((MatrixOperation<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 17;
      MockRandom mockRandom0 = new MockRandom(1L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 17, mockRandom0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = (-995);
      intArray0[5] = 17;
      intArray0[6] = 17;
      intArray0[7] = 17;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 5;
      Matrix matrix0 = Matrix.identity(5);
      int int1 = (-1745);
      Matrix matrix1 = matrix0.sliceBottomRight((-1745), 5);
      Matrix matrix2 = matrix0.power(5);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix2, 5, (-1745), (-4038), (-4038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -4038x-4038
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      Matrix matrix0 = columnMajorSparseMatrix0.copy();
      matrix0.columnMajorIterator();
      SparseMatrix.zero(7, 3547, 14);
      columnMajorSparseMatrix0.maxInRow(14);
      columnMajorSparseMatrix0.setColumn(7, (double) 7);
      SparseMatrix.zero(32, 32, 7);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("&=j?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      DenseMatrix.diagonal(0, 2.0);
      int int1 = 10;
      MockRandom mockRandom0 = new MockRandom(0);
      DenseMatrix.random(0, 10, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 5;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5, 5);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.norm();
      // Undeclared exception!
      try { 
        matrix0.getColumn(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(115, 1000, 1000);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.iteratorOfRow((-1227));
      matrix0.setRow(74, (double) 115);
      // Undeclared exception!
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(6, 3002.6585127595);
      columnMajorSparseMatrix0.equals((Object) "P;dIr{+V=4mC");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(17, 6);
      denseMatrix0.iteratorOfColumn(970);
      // Undeclared exception!
      try { 
        denseMatrix0.trace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(55, (-1269.1665));
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      // Undeclared exception!
      matrix0.mkString(numberFormat0, "rnRoa+f8&6J5k>]5", "rnRoa+f8&6J5k>]5");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 9;
      double double0 = 207.35;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(9, 207.35);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = 207.35;
      Matrix matrix0 = rowMajorSparseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 1626, 9, 1614, 9, 9, 1626);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1614, 9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.identity(4);
      Matrix matrix1 = matrix0.blank();
      int int1 = 1596;
      Matrix matrix2 = Matrix.identity(1596);
      int int2 = 917;
      matrix2.maxInRow(917);
      matrix0.equals((Object) matrix1);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix2, matrix0, (Matrix) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2902;
      double double0 = 1.0;
      Matrix matrix0 = Matrix.diagonal(2902, 1.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(8, 8);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int0 = 21;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(21, mockRandom0);
      denseVector0.toMatrixMarket();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 21);
      rowMajorSparseMatrix0.iteratorOfRow(8);
      denseVector0.manhattanNorm();
      rowMajorSparseMatrix0.swapColumns(21, 21);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, rowMajorSparseMatrix0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      rowMajorSparseMatrix0.diagonalProduct();
      vector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        matrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 21 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 143;
      int int1 = 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(143, 143, 3);
      // Undeclared exception!
      sparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 265;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(265, 1.1102230246251565E-14);
      int int1 = 3914;
      MockRandom mockRandom0 = new MockRandom((-1792L));
      DenseVector denseVector0 = DenseVector.random(882, mockRandom0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(3914, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 882. Should be: 265.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1900;
      int int1 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1900, 0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(0, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(2514, 2325, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.set((-3921), 2514, 2.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-3921' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(220, 0.0);
      Matrix matrix0 = Matrix.identity(0);
      denseMatrix0.kroneckerProduct(matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(220, denseMatrix0.columns());
      
      // Undeclared exception!
      denseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      Matrix matrix1 = matrix0.copy();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.kroneckerProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray1[1] = 1883.567096;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.1102230246251565E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 1883.567096;
      doubleArray4[1] = 1883.567096;
      doubleArray4[2] = 2908.93060210842;
      doubleArray4[3] = 1883.567096;
      doubleArray4[4] = 1883.567096;
      doubleArray4[5] = 1.1102230246251565E-14;
      doubleArray4[6] = (-968.7353026336);
      doubleArray4[7] = 1.1102230246251565E-14;
      doubleArray4[8] = (-10.28439553100776);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1.1102230246251565E-14;
      doubleArray5[1] = (-10.28439553100776);
      doubleArray5[2] = (-1361.67387);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (-10.28439553100776);
      doubleArray6[1] = (-1361.67387);
      doubleArray6[2] = 1883.567096;
      doubleArray6[3] = (-1361.67387);
      doubleArray6[4] = (-4508.0483139204);
      doubleArray6[5] = 1883.567096;
      doubleArray6[6] = 1883.567096;
      doubleArray6[7] = (-10.28439553100776);
      doubleArray6[8] = (-968.7353026336);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 2908.93060210842;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 2908.93060210842;
      doubleArray8[1] = (-10.28439553100776);
      doubleArray8[2] = (-10.28439553100776);
      doubleArray8[3] = 1.1102230246251565E-14;
      doubleArray8[4] = 1.1102230246251565E-14;
      doubleArray8[5] = 2908.93060210842;
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.slice(123, (-112), 1, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [123..1][-112..4].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 36;
      double[] doubleArray0 = new double[0];
      Matrix.from1DArray(251, 36, doubleArray0);
      int int1 = 988;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector.fromCollection(linkedList0);
      RowMajorSparseMatrix.diagonal(6, (-1.0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      double[][] doubleArray0 = new double[0][0];
      Matrix.from2DArray(doubleArray0);
      numberFormat0.setGroupingUsed(false);
      numberFormat0.setParseIntegerOnly(false);
      numberFormat0.setMinimumIntegerDigits((-1));
      String string0 = sparseMatrix0.toCSV(numberFormat0);
      assertEquals("1\n", string0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      double double0 = sparseMatrix0.determinant();
      assertEquals(1.0, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.copyOfRows(1);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 9;
      Matrix matrix0 = Matrix.constant(9, 9, 1269.9248);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1144, 1144, 1144);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1931, 1144, 0);
      Matrix matrix0 = sparseMatrix0.copyOfShape(6, 0);
      ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, sparseMatrix0);
      double[][] doubleArray0 = new double[0][4];
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.apply(denseMatrix1, denseMatrix1);
      matrix1.maxInRow(105);
      Matrix.identity(105);
      matrix1.multiplyByItsTranspose();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix1.foldColumn(105, vectorAccumulator0);
      Vector vector0 = Vector.unit(1144);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-2058005161), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom((-2569L));
      mockRandom0.ints(2452L);
      mockRandom0.nextBoolean();
      Matrix matrix0 = Matrix.random(4, 4, mockRandom0);
      Matrix matrix1 = matrix0.multiply(1.0);
      matrix0.min();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      mockRandom0.nextLong();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.updateAt(888, 4, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1727.171;
      doubleArray1[1] = 2.409013923454495E-8;
      doubleArray1[2] = (-1154.628);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-1698.05879);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 2127.2612713382655;
      doubleArray1[8] = 2.409013923454495E-8;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      Matrix matrix1 = matrix0.subtract(2169846.8416);
      assertEquals(9, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double[] doubleArray1 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray1);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(16, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-73.2);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = matrix0.toColumnMajorSparseMatrix();
      Matrix matrix1 = matrix0.add((Matrix) columnMajorSparseMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      matrix1.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.set(3125, 575, 575);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3125' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 5;
      Matrix matrix0 = null;
      ooPlaceKroneckerProduct0.ensureApplicableTo((Matrix) null, (Matrix) null);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(5, 241.2364955947921);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      ooPlaceKroneckerProduct0.partiallyApply((RowMajorSparseMatrix) null);
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(sparseMatrix0, sparseMatrix0);
      ooPlaceKroneckerProduct0.ensureApplicableTo((Matrix) null, sparseMatrix0);
      int int1 = 327;
      // Undeclared exception!
      try { 
        matrix1.removeColumn(327);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..24
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.diagonal(8, 8);
      Matrix matrix1 = matrix0.rotate();
      matrix1.blankOfRows(8);
      // Undeclared exception!
      try { 
        matrix1.setRow(8, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-489.72451083296);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1637.379;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      int int0 = (-4666);
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-4666));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 929;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(929, 929);
      int int1 = 83;
      denseMatrix0.sliceTopLeft(117, 83);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("J.qjKp<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      Matrix matrix0 = Matrix.randomSymmetric(9, mockRandom0);
      mockRandom0.ints();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix1.toRowMajorSparseMatrix();
      Matrix.diagonal(2842, 0.0);
      matrix0.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 2842, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2842 rows and 9 cols at 0, 0 in a 9x9 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 10;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(10, 0.0, (Random) mockRandom0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.removeFirstColumn();
      int int1 = 2831;
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        matrix0.swapColumns(2831, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2831' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 9;
      SparseVector sparseVector0 = SparseVector.zero(9);
      sparseVector0.toRowMatrix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(123);
      DenseMatrix denseMatrix0 = DenseMatrix.random(37, 123, mockRandom0);
      mockRandom0.nextLong();
      denseMatrix0.mkString("qJ+q'`RAqi;", "`2o~j");
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4551L;
      doubleArray1[1] = (double) 4551L;
      doubleArray1[2] = (double) 123;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 123;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 123;
      doubleArray3[1] = (double) 4551L;
      doubleArray3[2] = (double) 4551L;
      doubleArray3[3] = (double) 4551L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 123;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 4551L;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 37;
      doubleArray6[1] = (double) 4551L;
      doubleArray6[2] = (double) 123;
      doubleArray6[3] = (double) 37;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (double) 123;
      doubleArray7[1] = (double) 4551L;
      doubleArray7[2] = (double) 123;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (double) 123;
      doubleArray8[1] = (double) 37;
      doubleArray8[2] = (double) 123;
      doubleArray8[3] = (double) 4551L;
      doubleArray8[4] = (double) 4551L;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = (double) 37;
      doubleArray9[1] = (double) 123;
      doubleArray9[2] = (double) 37;
      doubleArray9[3] = (double) 37;
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.hadamardProduct(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 37x123 does not equal to 9x3.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray1[1] = 1283.204665;
      doubleArray1[2] = 1.1102230246251565E-14;
      doubleArray1[3] = (-2827.311074138423);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-2740.422719686387);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-2827.311074138423);
      doubleArray2[1] = (-2740.422719686387);
      doubleArray2[2] = 1283.204665;
      doubleArray2[3] = (-2827.311074138423);
      doubleArray2[4] = 1.1102230246251565E-14;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1283.204665;
      doubleArray2[7] = (-2827.311074138423);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      DenseMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 3457.0964935;
      doubleArray1[2] = (-815.97644668);
      doubleArray1[3] = 2215.757198573;
      doubleArray1[4] = 2545.8989;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(1, denseMatrix0.rows());
      
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      double double0 = matrix0.sum();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, matrix0.rows());
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2085.19243286688);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-2085.19243286688);
      doubleArray2[1] = (-2085.19243286688);
      doubleArray2[2] = (-2085.19243286688);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-2085.19243286688);
      doubleArray3[1] = (-2085.19243286688);
      doubleArray3[2] = (-2085.19243286688);
      doubleArray3[3] = (-2085.19243286688);
      doubleArray3[4] = (-2085.19243286688);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1905.7043945290445);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-2085.19243286688);
      doubleArray5[1] = (-2085.19243286688);
      doubleArray5[2] = (-2085.19243286688);
      doubleArray5[3] = (-2085.19243286688);
      doubleArray5[4] = (-1905.7043945290445);
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = (-2085.19243286688);
      doubleArray6[2] = (-1905.7043945290445);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-2085.19243286688);
      doubleArray7[1] = Double.NEGATIVE_INFINITY;
      doubleArray7[2] = (-2085.19243286688);
      doubleArray7[3] = (-1905.7043945290445);
      doubleArray7[4] = (-1905.7043945290445);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (-1905.7043945290445);
      doubleArray8[1] = 1451.6012256318;
      doubleArray8[2] = (-1905.7043945290445);
      doubleArray8[3] = (-1905.7043945290445);
      doubleArray8[4] = (-2085.19243286688);
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      String string0 = matrix0.toCSV();
      assertEquals("-2085.192\n-2085.192\n-2085.192\n-1905.704\n-2085.192\n       -\u221E\n-2085.192\n-1905.704\n", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 3303;
      org.evosuite.runtime.Random.setNextRandom(3303);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3303;
      doubleArray1[1] = (double) 3303;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      columnMajorSparseMatrix0.toSparseMatrix();
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 3303);
      matrix0.toBinary();
      String string0 = "   ";
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow(631, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '631' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(10, 0.0);
      String string0 = sparseMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n10 10 10\n1 1 0.000\n2 2 0.000\n3 3 0.000\n4 4 0.000\n5 5 0.000\n6 6 0.000\n7 7 0.000\n8 8 0.000\n9 9 0.000\n10 10 0.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1213, 1213);
      Matrix matrix0 = rowMajorSparseMatrix0.copyOfRows(1213);
      // Undeclared exception!
      matrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      sparseMatrix0.removeLastRow();
      sparseMatrix0.copy();
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bMWr/Y=A?<kr;";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      matrix0.trace();
      int int0 = 2364;
      // Undeclared exception!
      try { 
        denseMatrix0.getRow(2364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1760;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1760, 1760, 1.1102230246251565E-14);
      // Undeclared exception!
      denseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(23);
      Matrix matrix0 = Matrix.random(23, 23, mockRandom0);
      assertEquals(23, matrix0.columns());
      
      double double0 = matrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-688.992449);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-688.992449);
      doubleArray2[1] = (-688.992449);
      doubleArray2[2] = (-688.992449);
      doubleArray2[3] = (-688.992449);
      doubleArray2[4] = (-688.992449);
      doubleArray2[5] = (-688.992449);
      doubleArray2[6] = (-688.992449);
      doubleArray2[7] = (-688.992449);
      doubleArray2[8] = (-688.992449);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-688.992449);
      doubleArray3[1] = (-688.992449);
      doubleArray3[2] = (-1740.9527863148214);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-688.992449);
      doubleArray4[1] = (-688.992449);
      doubleArray4[2] = (-1740.9527863148214);
      doubleArray4[3] = (-688.992449);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1740.9527863148214);
      doubleArray5[1] = (-1740.9527863148214);
      doubleArray5[2] = 1.1102230246251565E-14;
      doubleArray5[3] = (-688.992449);
      doubleArray5[4] = (-1740.9527863148214);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1.1102230246251565E-14;
      doubleArray6[1] = 1.1102230246251565E-14;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-1740.9527863148214);
      doubleArray7[1] = (-1740.9527863148214);
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(2, 2);
      // Undeclared exception!
      try { 
        matrix0.insertColumn(2, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 617.1624389;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2752.48069611;
      doubleArray2[1] = 617.1624389;
      doubleArray2[2] = 617.1624389;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 617.1624389;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 617.1624389;
      doubleArray3[1] = 617.1624389;
      doubleArray3[2] = 2752.48069611;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 2752.48069611;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 2752.48069611;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.blankOfColumns(2);
      assertEquals(4, matrix0.rows());
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 6;
      SparseVector sparseVector0 = SparseVector.zero(6, (-370));
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.divide(328.6);
      // Undeclared exception!
      try { 
        matrix1.multiply((Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 6 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.divide(0.0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      denseVector0.multiply(matrix0);
      int int0 = 2864;
      matrix0.minInRow(2864);
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(214, 214);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(214, 10, 10);
      denseMatrix0.setAll(1237.5166079073908);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((Matrix) denseMatrix0);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      columnMajorSparseMatrix0.minInRow(3);
      // Undeclared exception!
      try { 
        sparseMatrix0.subtract((Matrix) columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 214x10 does not equal to 214x214.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 2;
      Matrix matrix0 = Matrix.constant(2, 1, 1.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      Matrix matrix1 = matrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        matrix1.minInColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-202.0997710305);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      Matrix matrix1 = matrix0.removeFirstColumn();
      assertEquals(1, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 117;
      MockRandom mockRandom0 = new MockRandom(117);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(117, mockRandom0);
      String string0 = ")0K]gh";
      String string1 = "Can not decode CCSMatrix from the given byte array.";
      mockRandom0.nextDouble();
      // Undeclared exception!
      denseMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1659;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1659, 9, 1659);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      sparseMatrix0.hadamardProduct(matrix0);
      int int1 = 1639;
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("b&oV_wu7{S)qsWDW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(19, 19);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(sparseMatrix0, sparseMatrix0);
      Matrix matrix1 = matrix0.insert((Matrix) sparseMatrix0, 3, 19);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      matrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        matrix1.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(2364L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 1178;
      SparseVector sparseVector0 = SparseVector.zero(1178);
      Vector vector0 = sparseVector0.divide(1178);
      sparseVector0.innerProduct(vector0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      int int1 = 1010;
      matrix0.maxInColumn(1010);
      sparseVector0.manhattanNorm();
      matrix0.manhattanNorm();
      int int2 = 1164;
      // Undeclared exception!
      try { 
        matrix0.iteratorOfRow(1164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1164
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-52.0);
      doubleArray0[1] = 394.890703383;
      doubleArray0[2] = (-2985.56);
      doubleArray0[3] = (-794.159709656);
      doubleArray0[4] = (-2423.8227399);
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int0 = 5;
      matrix0.manhattanNorm();
      matrix0.copyOfRows(5);
      HashMap<Integer, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, Integer>(5, (-1284.5F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1284.5
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(251, 36, doubleArray0);
      int int0 = 988;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector.fromCollection(linkedList0);
      RowMajorSparseMatrix.diagonal(6, (-1.0));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      Matrix matrix1 = Matrix.zero(19, 36);
      // Undeclared exception!
      try { 
        matrix1.maxInRow(36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      int int0 = 1000;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      sparseMatrix0.toColumnVector();
      columnMajorSparseMatrix0.getRow(Integer.MAX_VALUE);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector.fromCollection(linkedList0);
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom(2476L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 9, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      int int2 = (-1);
      int int3 = 3036;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, 9, (-1), 1000, 3036);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 9, -1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(14, 14);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.add((Matrix) denseMatrix0);
      org.evosuite.runtime.Random.setNextRandom(14);
      matrix1.toBinary();
      matrix1.iteratorOfColumn(14);
      // Undeclared exception!
      matrix1.power(14);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2460L);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, 1.1102230246251565E-14, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachInColumn((-1409), vectorProcedure0);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double[] doubleArray1 = new double[0];
      DenseVector.fromArray(doubleArray1);
      denseMatrix0.max();
      Matrix matrix0 = denseMatrix0.multiply((-546.2155416));
      DenseMatrix denseMatrix1 = denseMatrix0.toDenseMatrix();
      assertTrue(denseMatrix1.equals((Object)matrix0));
      assertNotSame(denseMatrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      columnMajorSparseMatrix0.min();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, (-581), (-12), 235, 2, (-570), (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -570x-12
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(14, 14);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.add((Matrix) denseMatrix0);
      org.evosuite.runtime.Random.setNextRandom(14);
      matrix1.toBinary();
      // Undeclared exception!
      try { 
        denseMatrix0.transformColumn(9, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(4, 4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transformRow(4, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 973;
      int int1 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(973, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.transform(matrixFunction0);
      matrix0.insert((Matrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInColumn((-599));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -599
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      int int0 = 2460;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2460, 2460);
      inPlaceCopyMatrixToMatrix0.partiallyApply((DenseMatrix) null);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.equals((Object) columnMajorSparseMatrix0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      matrix0.insert((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(16, 418);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.slice(9, 418, 9, (-1604));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [9..9][418..-1604].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray1[1] = (-859.9139035366);
      doubleArray1[2] = (-1877.2003164);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-769.5007303950432);
      doubleArray1[5] = (-1095.254);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-52.0);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(1, columnMajorSparseMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1473.04;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray1[3] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1473.04;
      doubleArray3[1] = 1473.04;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = 1473.04;
      doubleArray3[4] = (double) 1;
      doubleArray3[5] = (double) 1;
      doubleArray1[4] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray1);
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      denseMatrix0.iterator();
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      int int0 = matrix1.rank();
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-843);
      // Undeclared exception!
      try { 
        Matrix.constant((-843), (-843), 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 5;
      int int1 = 32;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(5, 32);
      Matrix matrix0 = denseMatrix0.transpose();
      int int2 = 1653;
      // Undeclared exception!
      try { 
        matrix0.setColumn(1653, (double) 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.diagonal(8, 8);
      Matrix matrix1 = matrix0.rotate();
      matrix1.blankOfRows(8);
      Matrix matrix2 = matrix1.copyOfShape(8, 8);
      matrix2.iteratorOfRow(8);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        matrix0.setColumn(8, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 958;
      int int1 = 4;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(958, 4, 1.0);
      // Undeclared exception!
      denseMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero((-2601), (-2601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2601x-2601
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 48;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(48, 48, 48);
      columnMajorSparseMatrix0.copyOfRows(48);
      double double0 = 0.0;
      Matrix matrix0 = columnMajorSparseMatrix0.add(0.0);
      NumberFormat.getPercentInstance();
      double[][] doubleArray0 = new double[1][7];
      // Undeclared exception!
      matrix0.power(48);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 8);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn((-2688));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2688' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(7, 7);
      matrix0.euclideanNorm();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      matrix0.add((Matrix) sparseMatrix0);
      matrix0.multiplyByItsTranspose();
      matrix0.iterator();
      Matrix matrix1 = matrix0.add(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Matrix.from1DArray(7, 7, doubleArray0);
      // Undeclared exception!
      try { 
        matrix1.minInColumn(854);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(121);
      rowMajorSparseMatrix0.diagonalProduct();
      int int0 = (-3485);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        SparseVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      int int0 = 8;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix0.apply((MatrixOperation<SparseMatrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(10, 10);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 250;
      Matrix matrix0 = Matrix.unit(250, 250);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom(250);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(250, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2414, 5);
      // Undeclared exception!
      denseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3580.826;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 3580.826;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 3580.826;
      doubleArray2[3] = 3580.826;
      doubleArray2[4] = 3580.826;
      doubleArray2[5] = 3580.826;
      doubleArray2[6] = 3580.826;
      doubleArray2[7] = 3580.826;
      doubleArray2[8] = 3580.826;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 3580.826;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 3580.826;
      doubleArray0[4] = doubleArray5;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      String string0 = sparseMatrix0.toString();
      assertEquals("3580.826\n3580.826\n  -1.000\n  -1.000\n  -1.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 2448;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2448, 972);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      // Undeclared exception!
      sparseMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-2146879572);
      // Undeclared exception!
      try { 
        Matrix.identity((-2146879572));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 2415;
      Matrix matrix0 = Matrix.from1DArray(2415, 2415, (double[]) null);
      int int1 = 1603;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1603;
      doubleArray0[1] = (double) 1603;
      doubleArray0[2] = (double) 2415;
      doubleArray0[3] = (double) 1603;
      doubleArray0[4] = (double) 2415;
      // Undeclared exception!
      try { 
        matrix0.removeRow(1603);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = null;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1234);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray((-1234), (-1234), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1234x-1234
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2460, 2460);
      inPlaceCopyMatrixToMatrix0.partiallyApply((DenseMatrix) null);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      boolean boolean0 = matrix0.equals((Object) columnMajorSparseMatrix0);
      assertFalse(boolean0);
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(2460, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 680.8951693139305;
      double double0 = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2749.57012013;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      int int1 = 2839;
      int int2 = 2834;
      MockRandom mockRandom0 = new MockRandom(2839);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.blankOfShape(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(0, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("&nti");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 1568;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1568);
      Matrix matrix0 = null;
      sparseMatrix0.copyOfShape(1568, 1568);
      // Undeclared exception!
      try { 
        Matrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      Matrix matrix0 = denseMatrix0.transpose();
      Matrix matrix1 = matrix0.sliceBottomRight(0, 0);
      double[] doubleArray0 = new double[6];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "+@@(Ej";
      stringArray0[3] = "org.la4j.operation.ooplace.OoPlaceKroneckerProduct";
      stringArray0[4] = "XgbLt$FWu%_EkZ7";
      stringArray0[5] = "";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      matrix1.mkString((NumberFormat) choiceFormat0, "%%MatrixMarket", "+@@(Ej");
      // Undeclared exception!
      try { 
        matrix1.insert((Matrix) denseMatrix0, 0, 988, 0, 988, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 988
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom(1L);
      DenseVector denseVector0 = DenseVector.random(4, mockRandom0);
      mockRandom0.nextLong();
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        matrix0.maxInRow((-1073741823));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromCSV("[s^qr28_mN)w/7o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom(37);
      mockRandom0.longs();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.randomSymmetric(37, mockRandom0);
      int int1 = 0;
      basic2DMatrix0.getRow(0);
      int int2 = 1603;
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).ensureIndexesAreInBounds(1603, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1603' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("<;/V?m{| tf^YWJ!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      Matrix matrix0 = denseMatrix0.transpose();
      matrix0.sliceBottomRight(0, 0);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "+@@(Ej";
      stringArray0[3] = "org.la4j.operation.ooplace.OoPlaceKroneckerProduct";
      stringArray0[4] = "XgbLt$FWu%_EkZ7";
      stringArray0[5] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 430;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.randomSymmetric(430, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 2;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2, 2, 2);
      denseMatrix0.columns();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 30;
      DenseVector denseVector0 = DenseVector.unit(30);
      ooPlaceOuterProduct0.partiallyApply(denseVector0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      double[][] doubleArray0 = new double[0][4];
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.set(35, 35, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '35' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("?,iSAt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-1106);
      double double0 = 221.505;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.nextInt((-1106));
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (-1106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(16);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.removeLastColumn();
      matrix1.toColumnVector();
      MockRandom mockRandom0 = new MockRandom((-1619L));
      Matrix.random(16, 16, mockRandom0);
      Matrix matrix2 = matrix0.multiply(0.0);
      matrix1.toRowVector();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      matrix2.mkString(numberFormat0, "org.la4j.Matrix$3", ">N]#VXIl;xSQ0\"R9Y/");
      denseMatrix0.columns();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldRow(16, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1741);
      rowMajorSparseMatrix0.iteratorOfColumn(2);
      // Undeclared exception!
      rowMajorSparseMatrix0.power(2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(2301, (-1495), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2301x-1495
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 719;
      Matrix matrix0 = Matrix.diagonal(719, 719);
      int int1 = 282;
      int int2 = (-3587);
      // Undeclared exception!
      try { 
        matrix0.power((-3587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -3587.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
