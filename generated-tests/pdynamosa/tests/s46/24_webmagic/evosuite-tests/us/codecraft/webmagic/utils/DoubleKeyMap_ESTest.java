/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:42:19 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Integer, Map<Integer, Object>> hashMap1 = new HashMap<Integer, Map<Integer, Object>>();
      Integer integer0 = new Integer(4366);
      hashMap1.put(integer0, hashMap0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap1, class0);
      Integer integer1 = new Integer(4366);
      doubleKeyMap0.remove(integer1, integer0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Integer, Object>();
      Integer integer0 = new Integer((-979));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put(integer0, doubleKeyMap0);
      HashMap<Integer, Map<Integer, Object>> hashMap1 = new HashMap<Integer, Map<Integer, Object>>();
      hashMap1.put(integer0, hashMap0);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>(hashMap1, class0);
      doubleKeyMap1.remove(integer0, integer0);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Integer, Map<Integer, Object>> hashMap1 = new HashMap<Integer, Map<Integer, Object>>();
      hashMap1.put(integer0, hashMap0);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap1, class0);
      Map<Integer, Object> map0 = doubleKeyMap0.remove(integer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      doubleKeyMap0.put((Object) hashMap0, object0, "");
      Map<Object, String> map0 = doubleKeyMap0.get((Object) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, Object>();
      DoubleKeyMap<HashMap<Map<Object, String>, Integer>, Map<Object, String>, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Object, String>, Integer>, Map<Object, String>, Map<Object, String>>((Map<HashMap<Map<Object, String>, Integer>, Map<Map<Object, String>, Map<Object, String>>>) null);
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.remove(map0, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, String>, Object>();
      Object object0 = doubleKeyMap0.remove((String) null, (Map<Object, String>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, Map<String, Integer>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Integer>, Integer>();
      Map<Map<String, Integer>, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>();
      Object object0 = doubleKeyMap0.put((Object) "", (Object) doubleKeyMap1, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Map<Object, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Integer, Object>(class0);
      Integer integer0 = new Integer((-871));
      Object object0 = doubleKeyMap0.put((Map<Object, String>) null, integer0, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Object, Integer>>((Map<Integer, Map<String, HashMap<Object, Integer>>>) null);
      DoubleKeyMap<String, Object, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<Object, Object>>();
      Map<Object, Object> map0 = doubleKeyMap1.get("", (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, Integer, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Integer, String>>();
      Integer integer0 = new Integer(0);
      Map<Integer, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) "R:wO_y&rp(i8W<El", "bk.1Ih");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Integer>, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Map<Object, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Map<Object, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Integer, Object>();
      Integer integer0 = new Integer((-979));
      Object object0 = doubleKeyMap0.get((HashMap<Object, Integer>) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, HashMap<Object, Object>>();
      Integer integer0 = new Integer(1150);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      doubleKeyMap0.put(integer0, (Map<Object, String>) hashMap0, hashMap1);
      HashMap<Object, Object> hashMap2 = doubleKeyMap0.get(integer0, (Map<Object, String>) null);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, String>(class0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      doubleKeyMap0.put(hashMap0, (Object) null, (String) null);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      String string0 = doubleKeyMap0.put(hashMap0, (Object) hashMap1, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("", (Object) integer0, (Object) integer0);
      Map<Object, Object> map0 = doubleKeyMap0.remove("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap1.put((Object) doubleKeyMap0, integer0, "C");
      Integer integer1 = new Integer((-705));
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer1);
      assertNull(string0);
  }
}
