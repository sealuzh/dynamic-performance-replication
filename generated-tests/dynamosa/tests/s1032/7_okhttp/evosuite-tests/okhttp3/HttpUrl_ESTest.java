/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 03:12:39 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\u0001jm,");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "/;KW[UO[%n", 14, 9, "F}", true, true, true, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "?uc{$wQ[ %vff");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals("http://www.somefakebutwellformedurl.org/?uc{$wQ[%20%7F%vff", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        HttpUrl.getChecked("h0c!Q1n(&8(c\"nD");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for h0c!Q1n(&8(c\"nD
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        HttpUrl.getChecked("INVALID_PORT");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for INVALID_PORT
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        HttpUrl.getChecked("size < 4: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for size < 4: 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Z-'U!]+<>+");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Z-'U!]+<>+
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("A6~ZjA^'+p0");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        HttpUrl.getChecked("z3*0Zmml7MYw>nnj[$");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for z3*0Zmml7MYw>nnj[$
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("/..");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("/..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.URI("http://foo.bar/+Oe&FMfQ+%a7", "w", "https", 1024, (String) null, "(0", (String) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "x");
      assertEquals("http://foo.bar/+Oe&FMfQ+%a7://w@https:1024?(0", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("/");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"'<>#&=");
      int int0 = httpUrl_Builder0.effectivePort();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/foo.bar");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      URI uRI1 = httpUrl0.uri();
      assertEquals("http://foo.bar/", uRI1.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/foo.bar");
      HttpUrl httpUrl1 = httpUrl0.resolve("https:/foo.bar");
      assertEquals("https://foo.bar/foo.bar", httpUrl1.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "\u2026");
      assertEquals(80, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("%$", "%$");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      String string0 = httpUrl1.queryParameter("%$");
      assertEquals("http://foo.bar/%E2%80%A6?%$=%$", httpUrl1.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.bar");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL((URL) null, "http:/", uRLStreamHandler0);
      URL uRL1 = MockURL.URL(uRL0, "H&+I:C9%jz");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URI uRI0 = MockURI.URI("http://foo.bar/+Oe&FMfQ+%a7", "w", "https", 1024, (String) null, "(0", (String) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("http://foo.bar/+Oe&FMfQ+%a7://w@https:1024?(0", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse(httpUrl0, "a=");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("3z#lC[v}Pw93");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      String string0 = httpUrl1.fragment();
      assertEquals("http://foo.bar/a=#3z#lC[v}Pw93", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("3z#lC[v}Pw93", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:e@Zm%224v%3B|}g");
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertEquals("http://e@zm\"4v;|}g/", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-2331));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-56321));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.queryParameter("");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("okhttp3.HttpUrl$Builder", 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("http:/", (-2339), (-2339));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("", 255, 255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "B4YU)N>mZ", 0, 0, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "B4YU)N>mZ", 0, (-1744), false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "", (-1), (-1), true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.percentDecode((Buffer) null, "http://foo.bar/", 112, 112, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(37);
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "dfFm", (-1), 37, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("%APk73Uw~O%", true);
      assertEquals("%APk73Uw~O%", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("xR?E8", 0, 0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("okio.Util", 0, 4, true);
      assertEquals("okio", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", 271, (-3337), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[&KvPUp'Ss@4@m:D");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "[&KvPUp'Ss@4@m:D");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      HttpUrl.pathSegmentsToString(stringBuilder0, list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      List<String> list0 = httpUrl0.queryParameterValues("nc");
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("?uc{$wQ[ %vff", "?uc{$wQ[ %vff", 0, "eU@p", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      URI uRI0 = MockURI.URI("https", "https", "encodedPassword == null");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("encodedPassword == null", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://https/#encodedPassword%20==%20null", httpUrl0.toString());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "%2e", "]%APk7-3Uw~O%", ",W", "]%APk7-3Uw~O%");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals((Object) null);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals(httpUrl_Builder0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit(':');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "://", 1499, 3102, (String) null, false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "Kr|", 0, 0, "deadline reached", true, false, true, false);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, (String) null, (-2450), (-2450), "':E@:S|BBZpTo", false, false, false, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "AT>%(v<;IY", 7, 57, "=oqD9ORcu4Ib^Hg", false, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "", (-1), (-1), "", false, false, false, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("://", "O60Oo|}", false, false, true, true);
      assertEquals("://", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("Q-]t9pnXMK~1jJZy", "Q-]t9pnXMK~1jJZy", true, true, false, true);
      assertEquals("%51%2D%5D%74%39%70%6E%58%4D%4B%7E%31%6A%4A%5A%79", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("size < 4: ", "", false, true, false, false);
      assertEquals("size < 4: ", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, "d5kd8(c5sc", false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("", "password == null", false, false, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", 1036, 1036, (String) null, true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", 1008, 0, " for ", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("?uc{$wQ[ %vff", 0, 3916, "?uc{$wQ[ %vff", false, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("byteString == nu ll", 10, 10, "byteString == nu ll", false, false, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "httvp");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("gGCyH4Esy$;..iX", (String) null);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("q", 2281, 3711);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded((String) null, 108, 224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, (String) null, (-208), 69, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("/", (-4401), (-4401), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, 240, 128, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues(".%2e");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((Buffer) null, "httvp", (-1717986916), 45, "httvp", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("http:", (String) null, false, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", (-4401), (-4401), "", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 50, 50, "Q>\"s.U[\"z'h6l2DW)a:", false, false, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      List<String> list0 = httpUrl0.encodedPathSegments();
      httpUrl_Builder0.encodedQueryNamesAndValues = list0;
      httpUrl_Builder0.parse(httpUrl0, "Oe&FMQ+%a7");
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "^`{|}");
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("HdW3b5abjf\"|:bW");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("");
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder("\\");
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "\u2026");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("\u2026");
      httpUrl_Builder1.encodedFragment = "\u2026";
      String string0 = httpUrl_Builder1.toString();
      assertEquals("http://foo.bar/%E2%80%A6?%E2%80%A6#\u2026", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "\u2026");
      httpUrl_Builder0.encodedQuery("\u2026");
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://foo.bar/%E2%80%A6?%E2%80%A6", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "%3E'5a");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://foo.bar/%3E'5a", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e@}m%224v%3d|}g");
      httpUrl0.newBuilder();
      assertEquals("http://e@}m\"4v=|}g/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e@}m%224v%3d|}g");
      String string0 = httpUrl0.encodedFragment();
      assertEquals("e", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://e@}m\"4v=|}g/", httpUrl0.toString());
      assertNull(string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e@}m%224v%3d|}g");
      httpUrl0.encodedQuery();
      assertEquals("e", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://e@}m\"4v=|}g/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("https");
      assertEquals(443, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedPassword();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:e@}m%224v%3d|}g");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("e", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://e@}m\"4v=|}g/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.toString();
      assertEquals("http://foo.bar/", string0);
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("\r");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("bGH%#I+SOUZv@,}}4n ");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("\n");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\r");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("%a$", "%a$");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "?uc{$wQ[ %vff");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("httvp:", 2, 128);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("_taW:j%7D(L%23Dt+%Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: _taW:j%7D(L%23Dt+%Q
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(118);
      httpUrl_Builder0.encodedQuery("*_$s+{ok;2er)fh");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("C52:6rtF>f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: C52:6rtF>f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::7::W`_):OBb6rh9u*V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::7::W`_):OBb6rh9u*V
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[ 7wW_):OBb6rh9u*V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [ 7wW_):OBb6rh9u*V
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("okio.PY^ipO");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("R+gIx!K1<Tr[]YGIsz");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        HttpUrl.getChecked("~0sM1:+/1AAg,RYR-Zd");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ~0sM1:+/1AAg,RYR-Zd
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("50");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("%2e.");
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl0.resolve("%2e%2e");
      assertEquals("http://tmp/", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder("#8F6S=[~yLgy5h4");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "5o?;X 4<`km1I", 102, "50");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://5o/?;X%204%3C%7F`km1I:10250", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("https:");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "$VALUES");
      assertEquals(80, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(112);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertEquals("http://foo.bar:112/$VALUES", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("zl");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("R~\", Ev7s]f`+qOs%Sq");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("%$", "%$");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("[ 7wW_):OBb6rh9u*V", "[ 7wW_):OBb6rh9u*V");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("[ 7wW_):OBb6rh9u*V");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("%$", "%$");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("%$", "%$");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "https:/foo.bar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("CF`5Q(M s3^p\"9d", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("//");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("x'DPfYLn3CN,B\"pUo9");
      httpUrl_Builder1.addPathSegment("x'DPfYLn3CN,B\"pUo9");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removePathSegment(0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(107, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1360), "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(3, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(51, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "{<");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("[B");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(1114111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 1114111
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("DeflaterSink(");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[ 7wWW_)Z:OABb6ru*V]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [ 7wWW_)Z:OABb6ru*V]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("Cannot buffer entire body for content length: ");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("okio.Pipe");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("http");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme(",&Uct,I0,sIq\u0003DW9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: ,&Uct,I0,sIq\u0003DW9
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "+Oe&FMfQ+%a7");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      boolean boolean0 = httpUrl0.equals(httpUrl1);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/+Oe&FMfQ+%a7", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertTrue(boolean0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:m:-hc_\"");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http:m:-hc_\"
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        HttpUrl.getChecked("htp:e@}m%224v%3d|&}");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for htp:e@}m%224v%3d|&}
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:e@Zm%224v%3|}g");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:e@Zm%224v%3|}g
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("file:/");
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl1);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"'<>#&=");
      String string0 = httpUrl1.encodedFragment();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("http://foo.bar/%22'%3C%3E#&=", httpUrl1.toString());
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "");
      httpUrl_Builder0.encodedQuery("%2e%2e");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 245, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      httpUrl_Builder0.query("^5Ip?Do3bXHN+");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "\u2026");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "8*,jC");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      httpUrl_Builder0.encodedQuery("http");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      List<String> list0 = httpUrl1.queryParameterValues("http");
      assertEquals("http://foo.bar/8*,jC?http", httpUrl1.toString());
      assertEquals(1, list0.size());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("vq?oGBiMD%J**TW");
      httpUrl1.queryParameterValues("endindex%20%3e%20length(");
      assertEquals("http://foo.bar/vq?oGBiMD%J**T%7FW", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("vq?GBiMD!J**TE");
      httpUrl1.queryParameterNames();
      assertEquals("http://foo.bar/vq?GBiMD!J**T%7FE", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedQueryParameter("w", "");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "lpR3vUNVq9Z~hlYjYF(");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      String string0 = httpUrl1.queryParameter("w");
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/lpR3vUNVq9Z~hlYjYF(?w=", httpUrl1.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter((String) null);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedQueryParameter("", "");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "lpR3vUNVq9Z~hlYjYF(");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      httpUrl1.queryParameter("7");
      assertEquals("http://foo.bar/lpR3vUNVq9Z~hlYjYF(?=", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("vq?oGBiMD%J**TW");
      assertNotNull(httpUrl1);
      
      int int0 = httpUrl1.querySize();
      assertEquals("http://foo.bar/vq?oGBiMD%J**T%7FW", httpUrl1.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e@}m%224v%3d|}g");
      httpUrl0.querySize();
      assertEquals("http://e@}m\"4v=|}g/", httpUrl0.toString());
      assertEquals("e", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("vq?GBiMD!J**TE");
      assertNotNull(httpUrl1);
      
      String string0 = httpUrl1.query();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("GBiMD!J**TE", string0);
      assertEquals("http://foo.bar/vq?GBiMD!J**T%7FE", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("\n&n,t fz3nd: sil=");
      assertFalse(list0.contains("\n&n,t fz3nd: sil="));
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("^5Ip?Do3bXHN+");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder0.parse(httpUrl0, "\u2026");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("%$", "%$");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      assertEquals("http://foo.bar/%E2%80%A6?^5Ip?Do3bXHN%2B&%$=%$", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:e@}m%224v%3B|}g");
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("m~dP{\"?3*6Xk0~7w");
      String string0 = httpUrl1.encodedQuery();
      assertEquals("http://e@}m\"4v;|}g/m~dP%7B%22?3*6Xk0~7w", httpUrl1.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("3*6Xk0~7w", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/foo.bar", (String) null, (String) null, "M");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("encodedPath == null");
      assertEquals("https://foo.bar/#M", httpUrl0.toString());
      assertEquals("M", httpUrl0.fragment());
      assertEquals("https://foo.bar/encodedPath%20==%20null", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals(80, int0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.host();
      assertEquals("foo.bar", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e@}m%224v%3d|}g");
      httpUrl0.username();
      assertEquals("http://e@}m\"4v=|}g/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:@}m%224v%3d|}g");
      assertNotNull(httpUrl0);
      
      httpUrl0.pathSize();
      assertEquals("https://}m\"4v=|}g/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:e@}m%224v%3B|}g");
      assertNotNull(httpUrl0);
      
      httpUrl0.scheme();
      assertEquals("http://e@}m\"4v;|}g/", httpUrl0.toString());
      assertEquals("e", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e@}m%224v%3d|}g");
      String string0 = httpUrl0.encodedPath();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://e@}m\"4v=|}g/", httpUrl0.toString());
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:e@Zm%224v%3B|}g");
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://e@zm\"4v;|}g/", httpUrl0.toString());
      assertEquals("e", httpUrl0.username());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:e@}m%224v%3B|}g");
      assertNotNull(httpUrl0);
      
      httpUrl0.isHttps();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://e@}m\"4v;|}g/", httpUrl0.toString());
      assertEquals("e", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?3/y2|6a}cyoupjk");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.fragment();
      assertNull(string0);
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?3/y2|6a}cyoupjk", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.redact();
      assertEquals("http://foo.bar/...", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e@}m%224v%3d|}g");
      // Undeclared exception!
      try { 
        httpUrl0.uri();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in authority at index 7: http://e@}m\"4v=|}g/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("AX&@Ai$)pvJ", "AX&@Ai$)pvJ");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("%$", "%$");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("%$", "%$");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("%$", "%$");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }
}
