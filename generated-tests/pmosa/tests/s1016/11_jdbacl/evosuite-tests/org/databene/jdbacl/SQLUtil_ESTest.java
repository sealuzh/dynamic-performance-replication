/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:07:53 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("ZxfIA<irGnvF*_1l8", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[0], dBSchema0);
      int int0 = (-4262);
      DBDataType dBDataType0 = DBDataType.getInstance((-4262), "");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("*H*Ngt@%", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.replace((-4262), 0, "Z~9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4262
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.removeComments(",qmDrldygUhQg");
      StringBuilder stringBuilder0 = new StringBuilder(",qmDrldygUhQg");
      SQLUtil.addOptionalCondition(",qmDrldygUhQg", stringBuilder0);
      assertEquals(",qmDrldygUhQg or ,qmDrldygUhQg", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("create table");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("ALTER TABLE ");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("ALTER TABLE ", false);
      assertEquals("ALTER TABLE", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("K_/\"KZqJ");
      String string0 = SQLUtil.normalize("K_/\"KZqJ", true);
      assertEquals("K_ / \"KZqJ\"", string0);
      
      String string1 = SQLUtil.removeComments("K_ / \"KZqJ\"");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<<ysXr";
      stringArray0[1] = "<<ysXr";
      stringArray0[2] = "<<ysXr";
      stringArray0[3] = "<<ysXr";
      stringArray0[4] = "<<ysXr";
      stringArray0[5] = "<<ysXr";
      stringArray0[6] = "<<ysXr";
      stringArray0[7] = "Ppuu>K1";
      String string0 = "[e'M(t$Lr&\\Fqy+yKG";
      SQLUtil.join("<<ysXr", "<<ysXr", stringArray0, "<<ysXr", "[e'M(t$Lr&Fqy+yKG", stringArray0);
      SQLUtil.mutatesDataOrStructure("\n\n");
      String string1 = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '' has no foreign key with the columns (<<ysXr, <<ysXr, <<ysXr, <<ysXr, <<ysXr, <<ysXr, <<ysXr, Ppuu>K1)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.substituteMarkers("0h(GRwd}jA=FZ", "skY!1v&}Aw'<mPKZZ", "skY!1v&}Aw'<mPKZZ");
      SQLUtil.mutatesDataOrStructure("rename");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rename";
      stringArray0[1] = "skY!1v&}Aw'<mPKZZ";
      stringArray0[2] = "0h(GRwd}jA=FZ";
      stringArray0[3] = "0h(GRwd}jA=FZ";
      stringArray0[4] = "drop table:ip`mk";
      stringArray0[5] = "rename";
      stringArray0[6] = "rename";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "- 0";
      stringArray0[1] = "- 0";
      String string1 = SQLUtil.leftJoin((String) null, stringArray0, "- 0", "- 0", stringArray0);
      assertEquals("left join - 0 as - 0 on null.- 0 = - 0.- 0 and null.- 0 = - 0.- 0", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("1");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("~~d2!^");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SQLUtil.parseColumnTypeAndSize("select into");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.normalize("left", true);
      assertEquals("left", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("left");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("\"");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "\"";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, \")", string0);
      
      boolean boolean0 = SQLUtil.isDDL("\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("q(]9n");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "q(]9n";
      stringArray0[1] = "q(]9n";
      stringArray0[2] = "";
      stringArray0[3] = "OmZz-<.\":\"bzc";
      stringArray0[4] = "q(]9n";
      stringArray0[5] = "q(]9n";
      stringArray0[6] = "q(]9n";
      Object[] objectArray0 = new Object[7];
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      objectArray0[0] = (Object) valueDecimal0;
      objectArray0[1] = (Object) "q(]9n";
      objectArray0[2] = (Object) "q(]9n";
      objectArray0[3] = (Object) "q(]9n";
      objectArray0[4] = (Object) "q(]9n";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("q(]9n = 0 AND q(]9n = 'q(]9n' AND  = 'q(]9n' AND OmZz-<.\":\"bzc = 'q(]9n' AND q(]9n = 'q(]9n' AND q(]9n = '' AND q(]9n = ''", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.isQuery("left");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = SQLUtil.substituteMarkers("left", "left", mockJapaneseDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "trigger";
      SQLUtil.substituteMarkers("trigger", "IBSi.q!^", "IBSi.q!^");
      boolean boolean0 = false;
      SQLUtil.normalize("trigger", false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("e:vF|Uea", false, "BINARY_DOUBLE", "BINARY_DOUBLE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK BINARY_DOUBLE", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin(" join ", stringArray0, "", "", stringArray0);
      SQLUtil.mutatesStructure("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("rename%/np<r>qbf!\u0006pu");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.normalize("CLOB", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "CLOB";
      stringArray0[3] = "EiWPJ(F";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "CLOB";
      SQLUtil.innerJoin("CLOB", stringArray0, "CLOB", "CLOB", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!/m3^ u4VYx-");
      defaultDBTable0.getIndex("");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("e:F|Uea", false, "BINARY_DOUBLE", "BINARY_DOUBLE");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK BINARY_DOUBLE", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p=D(cgzE.Hb:/0";
      stringArray0[1] = "p=D(cgzE.Hb:/0";
      stringArray0[2] = "p=D(cgzE.Hb:/0";
      stringArray0[3] = "p=D(cgzE.Hb:/0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p=D(cgzE.Hb:/0", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0) REFERENCES null(p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0, p=D(cgzE.Hb:/0)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " and ";
      stringArray0[1] = " and ";
      stringArray0[2] = " and ";
      stringArray0[3] = " and ";
      stringArray0[4] = " and ";
      stringArray0[5] = " and ";
      stringArray0[7] = " and ";
      String string0 = SQLUtil.renderColumnListWithTableName(" and ", stringArray0);
      assertEquals(" and . and ,  and . and ,  and . and ,  and . and ,  and . and ,  and . and ,  and .null,  and . and ", string0);
      
      SQLUtil.isDDL("");
      SQLUtil.removeComments(" and ");
      SQLUtil.removeComments(" and ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" and ");
      assertNull(boolean0);
      
      String string1 = SQLUtil.join(" and ", " and ", stringArray0, "\"", "\"", stringArray0);
      assertEquals(" and  join \" as \" on  and . and  = \". and  and  and . and  = \". and  and  and . and  = \". and  and  and . and  = \". and  and  and . and  = \". and  and  and . and  = \". and  and  and .null = \".null and  and . and  = \". and ", string1);
      
      String string2 = SQLUtil.normalize("drop index25$k*{1{/rv0", false);
      assertEquals("drop index25 $ k * { 1 { / rv0", string2);
      
      String string3 = SQLUtil.normalize("SELECT RDB$TRANSACTION_ID, RDB$TRANSACTION_DESCRIPTION FROM RDB$TRANSACTIONS WHERE RDB$TRANSACTION_STATE = 1", true);
      assertEquals("SELECT RDB $ TRANSACTION_ID, RDB $ TRANSACTION_DESCRIPTION FROM RDB $ TRANSACTIONS WHERE RDB $ TRANSACTION_STATE = 1", string3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize("-*\"J(cRvS", true);
      assertEquals("- * \"J(cRvS\"", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p=D(cgzE.Hb:/0";
      stringArray0[1] = "p=D(cgzE.Hb:/0";
      stringArray0[2] = "p=D(cgzE.Hb:/0";
      stringArray0[3] = "p=D(cgzE.Hb:/0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p=D(cgzE.Hb:/0", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.isProcedureCall("p=D(cgzE.Hb:/0");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("p=D(cgzE.Hb:/0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: p=D(cgzE.Hb:/0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall(",qmDrldygUhQg");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",qmDrldygUhQg");
      DBDataType dBDataType0 = DBDataType.getInstance((-32), "y4R");
      Integer integer0 = new Integer((-32));
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y4R", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("Y4R(-32,1)", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "IdGb,_1RV#-yu";
      stringArray0[1] = "";
      stringArray0[2] = ",qmDrldygUhQg";
      stringArray0[3] = "Y4R(-32,1)";
      stringArray0[4] = "*}3q";
      stringArray0[5] = ",qmDrldygUhQg";
      stringArray0[6] = ",qmDrldygUhQg";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(IdGb,_1RV#-yu, , ,qmDrldygUhQg, Y4R(-32,1), *}3q, ,qmDrldygUhQg, ,qmDrldygUhQg)", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.normalize("CLOB", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "CLOB";
      stringArray0[3] = "EiWPJ(F";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "CLOB";
      String string0 = SQLUtil.innerJoin("CLOB", stringArray0, "CLOB", "CLOB", stringArray0);
      assertEquals("CLOB as CLOB on CLOB.CLOB = CLOB.CLOB and CLOB.CLOB = CLOB.CLOB and CLOB.null = CLOB.null and CLOB.EiWPJ(F = CLOB.EiWPJ(F and CLOB.CLOB = CLOB.CLOB and CLOB.CLOB = CLOB.CLOB", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!/m3^ u4VYx-");
      defaultDBTable0.getIndex("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-3), "?A<`:|,lZZI_G%HbZ?o");
      defaultDBColumn0.setName("EiWPJ(F");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("EiWPJ(F ?A<`:|,LZZI_G%HBZ?O NULL", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder(47);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isProcedureCall("v@9tpw!");
      String[] stringArray0 = new String[4];
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) stringArray0[0]);
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) stringArray0[2], 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '~';
      charArray0[2] = '{';
      charArray0[3] = 'g';
      charArray0[4] = 'X';
      stringBuilder3.append(charArray0, 0, 0);
      assertEquals("null", stringBuilder1.toString());
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.leftJoin("writeBack ", stringArray0, "alter sessionand", "", stringArray0);
      assertEquals("left join alter sessionand as  on writeBack . = . and writeBack . = . and writeBack . = . and writeBack . = .", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE  = '' AND  = '' AND  = '' AND  = ''", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = AliasInfo.ALIAS_NAME_SPACE_PROCEDURE_AS_STRING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "py";
      stringArray0[1] = "P";
      String string1 = SQLUtil.innerJoin("P", stringArray0, "py", "P", stringArray0);
      assertEquals("py as P on P.py = P.py and P.P = P.P", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("py", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT py ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("e:vF|Uea", false, "BINARY_DOUBLE", "BINARY_DOUBLE");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT e:vF|Uea CHECK BINARY_DOUBLE", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize("y*zL>_N2x[X@/?", true);
      SQLUtil.isProcedureCall("y*zL>_N2x[X@/?");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2, "e3.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tabe", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("create tabe", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("create tabe");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "create tabe";
      stringArray0[2] = "+i'!B8";
      stringArray0[3] = "create tabe";
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "create tabe", "]G^Jg32}&*j55y63", stringArray0);
      assertEquals("create tabe as ]G^Jg32}&*j55y63 on null. = ]G^Jg32}&*j55y63. and null.create tabe = ]G^Jg32}&*j55y63.create tabe and null.+i'!B8 = ]G^Jg32}&*j55y63.+i'!B8 and null.create tabe = ]G^Jg32}&*j55y63.create tabe", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      defaultDBTable0.getIndex("alter materialized view{^x9c");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table alter materialized view", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "rename%/np<r>qbf!\\6pu";
      String string1 = "callp=d(cgze.hb:/0";
      SQLUtil.normalize("callp=d(cgze.hb:/0", true);
      SQLUtil.isQuery("callp = d (cgze.hb : / 0");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter1, (-3365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.normalize("+wivxm1jQR8)1", true);
      SQLUtil.normalize("+ wivxm1jQR8) 1", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+ wivxm1jQR8) 1";
      stringArray0[1] = "'";
      stringArray0[2] = "+ wivxm1jQR8) 1";
      stringArray0[3] = "+ wivxm1jQR8) 1";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("{ 2N'aTI1y) ~*d-M", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1407), "XSDB4.D");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+wivxm1jQR8)1", dBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.removeComments("+wivxm1jQR8)1");
      TableContainer tableContainer0 = new TableContainer("+wivxm1jQR8)1");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("+wivxm1jQR8)1", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%TF94P-b*?4-%Uf ");
      DBDataType.getInstance((-310), "delete");
      Integer integer0 = new Integer(869);
      Integer integer1 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(107, "%TF94P-b*?4-%Uf ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("WT<[HDA", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("%TF94P-B*?4-%UF (869)", string0);
      
      Integer.max(39, (-32));
      String string1 = SQLUtil.normalize("WT<[HDA", true);
      assertEquals("WT < [ HDA", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",qmDrldygUhQg");
      DBDataType dBDataType0 = DBDataType.getInstance((-32), "y4R");
      Integer integer0 = new Integer((-32));
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y4R", defaultDBTable0, dBDataType0, integer0, integer1);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("alter materialized view{^x9c");
      defaultDBTable1.getIndex("'?j7");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile((File) null, "crea");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("A$xy~lHrd");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("alter tabledelete");
      jdbcClob0.getCharacterStream();
      String string0 = SQLUtil.normalize("'", true);
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("call");
      DBSchema dBSchema0 = new DBSchema("43X51.U", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("QP_EMjwTVD]f(I", dBSchema0);
      TableContainer tableContainer0 = new TableContainer("43X51.U");
      tableContainer0.getTable("call");
      JdbcConnectionPool.create("43X51.U", "43X51.U", "call");
      SQLUtil.removeComments("org.h2.engine.UndoLogRecord");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("call", string0);
      
      String string1 = SQLUtil.removeComments("call");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "selectk_/\"kzqj";
      SQLUtil.isQuery("selectk_/\"kzqj");
      String string1 = "  Implementation ";
      SQLUtil.parseColumnTypeAndSize("  Implementation ");
      String string2 = ",7gM";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("selectk_/\"kzqj", ",7gM", (VersionNumber) null);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable(".!C`u=u6SUX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '.!C`u=u6SUX'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.removeComments("+wivxm1jQR8)1");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop materialized view", true, "drop materialized view", "BINARY_DOUBLE");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBCheckConstraint0.equals(nameSpec0);
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized view\" CHECK BINARY_DOUBLE", string0);
      
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"drop materialized view\" ", string1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-160), "(?s\"}+d`r]So|");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e:vF|Uea", (DBTable) null, dBDataType0, integer0, integer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view{^x9c");
      defaultDBTable0.getIndex("Failed to initialize LargeObject API");
      MockFile mockFile0 = new MockFile((File) null, "+{{<[*DIF84.IR");
      mockFile0.getCanonicalPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",qmDrldygUhQg");
      DBDataType dBDataType0 = DBDataType.getInstance((-32), "y4R");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y4R", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("Y4R(3,1)", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "IdGb,_1RV#-yu";
      Integer.max((-32), (-32));
      boolean boolean0 = SQLUtil.isQuery("U~uL~,sr5t'9]D\"K(.=");
      assertFalse(boolean0);
      
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("y4R", string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("K_/\"KZqJ");
      String string0 = SQLUtil.normalize("K_/\"KZqJ", false);
      assertEquals("K_ / \"KZqJ\"", string0);
      
      boolean boolean0 = SQLUtil.isQuery("K_ / \"KZqJ\"");
      assertFalse(boolean0);
      
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(843, "K_ / \"KZqJ\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K_/\"KZqJ", (DBTable) null, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("K_/\"KZqJ", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBDataType.getInstance(981, "y*zL>_N2x[X@/?");
      Integer integer0 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("y*zL>_N2x[X@/?", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y*zL>_N2x[X@/?", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "y*zL>_N2x[X@/?";
      stringArray0[1] = "Idb,_1RV#-u";
      stringArray0[2] = "y*zL>_N2x[X@/?";
      stringArray0[3] = "Idb,_1RV#-u";
      stringArray0[4] = "y*zL>_N2x[X@/?";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBSchema dBSchema1 = new DBSchema("alter indexcreate materialized viewand");
      dBUniqueConstraint0.isIdentical(dBSchema1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("y*zL>_N2x[X@/?", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "`;;MbxItQbj64mCfwY?", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (y*zL>_N2x[X@/?, Idb,_1RV#-u, y*zL>_N2x[X@/?, Idb,_1RV#-u, y*zL>_N2x[X@/?)", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DEFAULT_COLLATION_NAME");
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Qe30/ VtmbTf5rm+<Mt", compositeDBObject0);
      tableContainer0.getTable("DEFAULT_COLLATION_NAME");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("!Ft>+}E(4X", (DBTable) null, (-1100), "updateCharaceterStream(int, Reader)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
