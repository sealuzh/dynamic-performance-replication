/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:46:16 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64(" hex=");
      assertNotNull(byteString0);
      
      Pipe pipe0 = new Pipe(964L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = byteString0.EMPTY.hmacSha512(byteString1);
      Buffer buffer1 = realBufferedSource0.buffer;
      byteString0.write(buffer1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString2.startsWith(byteArray0);
      assertTrue(boolean0);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64(";'&8`Y#hX");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = byteString0.rangeEquals(71, byteString1, 0, (int) (byte)0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      int int0 = byteString2.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, 236);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      String string0 = byteString0.toString();
      assertSame(byteString0, byteString1);
      assertEquals("[hex=09]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      byteString0.EMPTY.utf8();
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '<';
      charArray0[2] = '8';
      // Undeclared exception!
      try { 
        charBuffer0.put(charArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      byteString0.equals(object0);
      String string0 = byteString0.utf8();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      boolean boolean0 = byteString0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-514), (byte)0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      boolean boolean0 = byteString0.equals(pushbackInputStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-99);
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)99;
      byteArray1[7] = (byte)115;
      boolean boolean1 = byteString0.startsWith(byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-68);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      byteString0.EMPTY.endsWith(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.size();
      byteString1.toByteArray();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("s == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("tOj>qjb", charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byte byte0 = (byte)29;
      byteArray0[1] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toAsciiLowercase();
      byteString0.lastIndexOf(byteArray0, 824);
      ByteString.decodeBase64("<f{3fy4Z7E");
      byteString0.base64();
      byteString0.EMPTY.base64();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.hex();
      assertEquals("", string0);
      
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.base64Url();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)74;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.sha256();
      byteString1.EMPTY.sha1();
      byteString0.md5();
      byteString1.hashCode();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -7
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-802), (-802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)126;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-989), (-2775));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-989 byteCount=-2775
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      int int0 = byteString1.indexOf(byteString0, (int) (byte)0);
      assertEquals(0, int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=f0]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha512();
      byteString0.utf8 = "n7+-<";
      byteString0.indexOf(byteArray0, 4);
      byteString1.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        byteString0.substring(65, 103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(5)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      int int0 = byteString0.indexOf(byteArray0, 110);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("tOj>qjb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: tOj>qjb
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      try { 
        ByteString.read(pipedInputStream0, 50);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = false;
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      HashingSource hashingSource1 = HashingSource.md5(realBufferedSource0);
      buffer0.readUtf8();
      ByteString byteString0 = hashingSource1.hash();
      HashingSource.hmacSha1(realBufferedSource0, byteString0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(realBufferedSource0.buffer, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.compareTo(byteString1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        ByteString.read(dataInputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteString0.EMPTY.base64Url();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      int int0 = byteString1.compareTo(byteString0);
      assertSame(byteString1, byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)77;
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
      
      boolean boolean0 = byteString0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64(" hex=");
      Pipe pipe0 = new Pipe(964L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-68);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.sha1();
      byteString0.endsWith(byteArray0);
      ByteString byteString3 = byteString2.toAsciiLowercase();
      byteString3.size();
      byteString2.toByteArray();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("s == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)56;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString1 = realBufferedSource0.readByteString((long) (byte)0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte)0, byteString1, 882, (int) (byte) (-3));
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertSame(byteString0, byteString2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("<8.b|olgN90", 17);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" hex=", charset0);
      byteString0.sha1();
      ByteString byteString1 = byteString0.sha256();
      assertEquals(32, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring(42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("string == null", 11);
      assertEquals(11, int0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("t0{UHO=aMa=:%", charset0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)106;
      int int1 = byteString0.EMPTY.lastIndexOf(byteArray0);
      assertEquals((-1), int1);
      
      byteArray0[2] = (byte)70;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64(" hex=");
      Pipe pipe0 = new Pipe(964L);
      pipe0.sinkClosed = false;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.asByteBuffer();
      ByteString byteString2 = realBufferedSource0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      byteString2.string(charset0);
      byteString2.indexOf(byteString1);
      byte[] byteArray0 = byteString0.internalArray();
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-20)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = byteString1.substring(0);
      byteString0.sha256();
      boolean boolean0 = byteString2.endsWith(byteString0);
      assertFalse(boolean0);
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString1.indexOf(byteString0, 24);
      assertSame(byteString1, byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=43baf8f0307760ba0a5d0a2bd90cd7906573ed2a]", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)110;
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("16a`ME");
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "98b^LO(6# M<";
      ByteString byteString0 = ByteString.encodeUtf8("98b^LO(6# M<");
      byte[] byteArray0 = new byte[5];
      byteString0.startsWith(byteArray0);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-31);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.sha256();
      byteString0.endsWith(byteString1);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)29;
      byteString0.indexOf(byteArray0, (-995));
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte) (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -31
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("tOj>qjb", charset0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertEquals(7, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("GF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: G
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource.sha256(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      realBufferedSource0.buffer.readUtf8();
      ByteString byteString0 = hashingSource1.hash();
      ByteString byteString1 = hashingSource1.hash();
      HashingSource.hmacSha1(hashingSource1, byteString1);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString1);
      hashingSink0.hash();
      byteString0.compareTo(byteString1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(240);
      ByteString.read(pipedInputStream0, 0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("'yX{7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 'yX{7
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-106);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      int int0 = byteString1.indexOf(byteString0, (-583));
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("tOj>qjb", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.Buffer", charset0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)86;
      byteString0.base64();
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      boolean boolean0 = byteString0.EMPTY.endsWith(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString1.lastIndexOf(byteString0, (-3292));
      assertEquals((-1), int0);
      
      ByteString byteString2 = byteString0.sha256();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("<8.b|olgN90", 17);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" hex=", charset0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.substring(17);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-74);
      int int1 = byteString2.indexOf(byteArray0, 6);
      assertTrue(int1 == int0);
      
      boolean boolean0 = byteString2.equals(byteString1);
      assertEquals(3, byteString2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("(&.`YXDY)>O;Qrh*'g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: (
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      byteString0.EMPTY.hmacSha256(byteString1);
      // Undeclared exception!
      try { 
        byteString0.substring(68);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)19;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(54);
      byteString0.write(byteArrayOutputStream0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString1);
      byteString1.endsWith(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteString byteString2 = hashingSource0.hash();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte) (-4);
      byteString0.startsWith(byteArray1);
      // Undeclared exception!
      try { 
        byteString2.substring((int) (byte)41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-3);
      byteArray0[7] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(bufferedInputStream0, 99);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.endsWith(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("");
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      boolean boolean0 = byteString2.endsWith(byteString0);
      ByteString byteString3 = byteString0.substring((int) (byte)0);
      boolean boolean1 = byteString1.endsWith(byteString2);
      assertFalse(boolean1 == boolean0);
      assertSame(byteString2, byteString3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.base64Url();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)31;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)98);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      HashingSource hashingSource1 = HashingSource.md5(realBufferedSource0);
      buffer0.readUtf8();
      ByteString byteString0 = hashingSource1.hash();
      HashingSource.hmacSha1(realBufferedSource0, byteString0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(realBufferedSource0.buffer, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      String string0 = byteString1.hex();
      assertEquals("bd69530eb33b36f2388002dbe257bc84c7534f9b9bed73b922fab3523eca7f928e70664c689f673892320083b5073b090f250fd74f72cb4275760b35470bec46", string0);
      
      ByteString byteString2 = realBufferedSource0.readByteString(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)57;
      byteString1.compareTo(byteString2);
      byteString0.equals(byteString2);
      byteString2.asByteBuffer();
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=^]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("<8.b|olgN90", 17);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" hex=", charset0);
      ByteString byteString1 = byteString0.sha1();
      byteString1.substring(17);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)47;
      byteString1.endsWith(byteArray0);
      byteString0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      byteString0.toAsciiUppercase();
      ByteString byteString2 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString2.indexOf((byte[]) null, (int) (byte)19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte byte0 = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("\r", charset0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.EMPTY.hmacSha1(byteString0);
      byteString0.EMPTY.hashCode = 2285;
      byteString2.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString3 = new ByteString(byteArray0);
      byteString0.equals(byteString3);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      ByteString byteString2 = byteString0.EMPTY.toAsciiLowercase();
      assertTrue(byteString2.equals((Object)byteString1));
      
      ByteString byteString3 = byteString0.substring((int) (byte)0);
      assertSame(byteString3, byteString0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSink.hmacSha512(buffer0, byteString1);
      ByteString byteString2 = hashingSink0.hash();
      ByteString byteString3 = byteString2.sha1();
      byteString3.toString();
      int int0 = byteString3.size();
      assertEquals(20, int0);
  }
}
