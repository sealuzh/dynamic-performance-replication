/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:13:46 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(14);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 14);
      JVCParser jVCParser0 = new JVCParser(pushbackInputStream0);
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      jVCParser0.enable_tracing();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0);
      Token token0 = jVCParser0.getToken(8);
      Token token1 = jVCParser0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      JVCParser jVCParser0 = new JVCParser(mockFileReader0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      jVCParser0.disable_tracing();
      assertFalse(fileDescriptor0.valid());
      assertEquals(100, jVCParser0.debugColumn);
      
      // Undeclared exception!
      try { 
        jVCParser0.getToken(693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"fg^yH*;V");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(inputStreamReader0);
      
      JVCParser jVCParser0 = new JVCParser(inputStreamReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      Token token0 = jVCParser0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", token0.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      // Undeclared exception!
      try { 
        jVCParser0.getToken(2879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(bufferedInputStream0, (byte)85, (-739), 16);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      simpleCharStream1.adjustBeginLineColumn((-2244), (byte) (-9));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-2243), simpleCharStream1.getBeginLine());
      assertEquals((-9), simpleCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-2243), simpleCharStream1.getBeginLine());
      assertEquals((-9), simpleCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-2243), simpleCharStream1.getBeginLine());
      assertEquals((-9), simpleCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      String string0 = jVCParser0.parse();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-8), simpleCharStream1.getColumn());
      assertEquals((-2243), simpleCharStream1.getBeginLine());
      assertEquals((-2243), simpleCharStream1.getEndLine());
      assertEquals((-8), simpleCharStream1.getBeginColumn());
      assertEquals((-8), simpleCharStream1.getEndColumn());
      assertEquals((-2243), simpleCharStream1.getLine());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals("_sb.append(\"\u0000\");", string0);
      
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) bufferedInputStream0, "_sb.append(\"\u0000\");");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1792);
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[5];
      pipedWriter0.write(1792);
      pipedWriter0.write(3213);
      pipedWriter0.close();
      int int0 = pipedReader0.read(charArray0);
      assertArrayEquals(new char[] {'\u0700', '\u0C8D', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, int0);
      
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      Token token0 = jVCParser0.getToken(3213);
      assertEquals("", token0.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = jVCParser0.getToken(1792);
      assertEquals("", token1.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = Token.newToken(0);
      assertNull(token2.toString());
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      pipedWriter0.write(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0700', '\u0C8D', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jVCParser0.parse();
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertEquals("", string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) pipedInputStream0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParser0.ReInit(jVCParserTokenManager0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.ReInit((Reader) null);
      assertEquals(100, jVCParser0.debugColumn);
      
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      // Undeclared exception!
      try { 
        jVCParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)34, (byte) (-32), (byte)86, (byte)9}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)34, (byte) (-32), (byte)86, (byte)9}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)34, (byte) (-32), (byte)86, (byte)9}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)34, (byte) (-32), (byte)86, (byte)9}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)34, (byte) (-32), (byte)86, (byte)9}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      String string0 = jVCParser0.parse();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)34, (byte) (-32), (byte)86, (byte)9}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertEquals("_sb.append(\"\uFFFD\u0000\u0000\\\"\uFFFDV\t\");", string0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)34, (byte) (-32), (byte)86, (byte)9}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/fk*&RV");
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      JVCParser jVCParser0 = new JVCParser("fk*&RV", set0, false);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/fk*&RV");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[2] = "fk*&RV";
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = linkedHashSet0.add("fk*&RV");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JVCParser jVCParser0 = new JVCParser("fk*&RV", linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      String string0 = jVCParser0.parse();
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\n\");\n_sb.append(\"\u0000\");", string0);
      
      JVCParser.main(stringArray0);
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/fk*&RV");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fk*&RV";
      stringArray0[1] = "fk*&RV";
      stringArray0[3] = "fk*&RV";
      stringArray0[4] = "fk*&RV";
      stringArray0[5] = "fk*&RV";
      stringArray0[6] = "fk*&RV";
      JVCParser.main(stringArray0);
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      JVCParser jVCParser0 = new JVCParser("fk*&RV", set0, true);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      // Undeclared exception!
      try { 
        Charset.forName(", line ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , line 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/fk*&RV");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fk*&RV";
      stringArray0[1] = "fk*&RV";
      stringArray0[2] = "fk*&RV";
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JVCParser jVCParser0 = new JVCParser("fk*&RV", linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(jVCParser0);
      
      String string0 = jVCParser0.parse();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\n\");\n_sb.append(\"\\n\");\n_sb.append(\"\u0000\u0000\u0000\u0000\");", string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      JVCParser jVCParser1 = new JVCParser("fk*&RV", linkedHashSet0, true);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(100, jVCParser1.debugColumn);
      assertNotNull(jVCParser1);
      assertFalse(jVCParser1.equals((Object)jVCParser0));
      
      String string1 = jVCParser1.parse();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(100, jVCParser1.debugColumn);
      assertNotNull(string1);
      assertNotSame(jVCParser1, jVCParser0);
      assertFalse(jVCParser1.equals((Object)jVCParser0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("_sb.append(\"\\n\");                                                                                  \t// fk*&RV (1)\n_sb.append(\"\\n\");                                                                                  \t// fk*&RV (2)\n_sb.append(\"\u0000\u0000\u0000\u0000\");", string1);
      
      jVCParser1.enable_tracing();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(100, jVCParser1.debugColumn);
      assertNotSame(jVCParser1, jVCParser0);
      assertFalse(jVCParser1.equals((Object)jVCParser0));
  }
}
