/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:43:17 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2394));
      classWriter0.index = (-2394);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "-p_bS=q^F@Yh{_A", "org.apache.commons.io.filefilter.PrefixFileFilter", "-p_bS=q^F@Yh{_A", "-p_bS=q^F@Yh{_A");
      ByteVector byteVector0 = new ByteVector(8);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "9;p-(@tv&L((n", "", "9;p-(@tv&L((n", "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "9;p-(@tv&L((n", "9;p-(@tv&L((n", "9;p-(@tv&L((n", "9;p-(@tv&L((n");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "9;p-(@tv&L((n", "t", "9;p-(@tv&L((n", "t");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "$&7J((", "Gx31jP)", "$&7J((", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 0, "", "org.apache.commons.io.filefilter.DelegateFileFilter", "org.apache.commons.io.filefilter.DelegateFileFilter", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2394));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-2394), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(874);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "\"m C|n0ib", "u&2$e+2e,J>v.wD|/", "", "u&2$e+2e,J>v.wD|/");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("j\".}o^(X6Iw4", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(874);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "\"m C|n0ib", "u&2$e+2e,J>v.wD|/", "", "u&2$e+2e,J>v.wD|/");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("\"m C|n0ib", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 586, "9;p-(@tv&L((n", "AnnotationDefault", (String) null, "rq*E$h^-*10FMglB");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      classWriter0.version = 586;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-944), "F;Q0e|vY[CWr", "9!|", "9!|", (Object) null);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-944), "F;Q0e|vY[CWr", "9!|", "9!|", (Object) null);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "sFh9fO6*2|uI]%.g#f", "sFh9fO6*2|uI]%.g#f", "sFh9fO6*2|uI]%.g#f", "sFh9fO6*2|uI]%.g#f");
      Attribute attribute0 = new Attribute("sFh9fO6*2|uI]%.g#f");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      classWriter0.version = 586;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-944), "F;Q0e|vY[CWr", "9!|", "9!|", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(874);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "\"m C|n0ib", "u&2$e+2e,J>v.wD|/", "", "u&2$e+2e,J>v.wD|/");
      fieldWriter0.visitAnnotation("\"m C|n0ib", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(874);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "\"m C|n0ib", "u&2$e+2e,J>v.wD|/", "", "u&2$e+2e,J>v.wD|/");
      fieldWriter0.visitAnnotation("j\".}o^(X6Iw4", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(573);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-944), "F;Q0e|vY[CWr", "9!|", "9!|", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 586, "9;p-(@tv&L((n", "AnnotationDefault", (String) null, "rq*E$h^-*10FMglB");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "sFh9fO6*2|uI]%.g#f", "sFh9fO6*2|uI]%.g#f", "sFh9fO6*2|uI]%.g#f", "sFh9fO6*2|uI]%.g#f");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-1345), "sFh9fO6*2|uI]%.g#f", "bMo]?F6b.9UMsWfu=m", "bMo]?F6b.9UMsWfu=m", "bMo]?F6b.9UMsWfu=m");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(874);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "\"m C|n0ib", "u&2$e+2e,J>v.wD|/", "", "u&2$e+2e,J>v.wD|/");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(586);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "9;p-(@tv&L((n", "", "9;p-(@tv&L((n", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(1);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
