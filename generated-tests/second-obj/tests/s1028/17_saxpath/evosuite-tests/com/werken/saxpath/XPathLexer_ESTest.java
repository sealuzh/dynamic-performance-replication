/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:44:07 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      int int0 = (-4671);
      xPathLexer0.consume((-4671));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i+");
      xPathLexer0.literal();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wf{13ltt'3i8J#0Hw");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#OS@^iI@/DK6%378");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e ZcRE");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer1.comma();
      boolean boolean0 = xPathLexer1.isIdentifierChar('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r9?3T");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("9", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}tw.qN0=H2h@");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("t", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("qN0", token3.getTokenText());
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("}tw.qN0=H2h@");
      Token token5 = xPathLexer2.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("H", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("[", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) ()", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AUBWW");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.isIdentifierStartChar('`');
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.leftBracket();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("Kb.vT~U");
      xPathLexer0.dots();
      xPathLexer3.plus();
      xPathLexer3.dots();
      Token token1 = xPathLexer3.getPreviousToken();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GG3t`s");
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-646));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-qx {LS-uS&HCSh|q");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("_)7I_QuH/s+Mx3ZE");
      Token token1 = xPathLexer2.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertNull(token2);
      
      int int0 = xPathLexer2.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&c{'?~\"@U!*");
      xPathLexer0.setXPath("&c{'?~\"@U!*");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.and();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3034));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "aB\\I0Q^)'#O$q^'`>`";
      XPathLexer xPathLexer1 = new XPathLexer("aBI0Q^)'#O$q^'`>`");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer1.comma();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<b");
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.number();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qbT 5lhysI#Ij");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.colon();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qbT 5lhysI#Ij");
      XPathLexer xPathLexer1 = new XPathLexer("qbT 5lhysI#Ij");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.comma();
      XPathLexer xPathLexer5 = new XPathLexer("\"RH");
      xPathLexer5.colon();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer5.comma();
      xPathLexer5.nextToken();
      xPathLexer1.consume();
      xPathLexer1.dots();
      xPathLexer4.pipe();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dollar();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token0 = xPathLexer5.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("on^?z(?h:4,I6");
      xPathLexer1.doubleColon();
      xPathLexer1.leftParen();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      xPathLexer1.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_a;{V<73.Py");
      Token token0 = xPathLexer0.minus();
      assertEquals("_", token0.getTokenText());
      
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals(";", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
      
      Token token5 = xPathLexer0.relationalOperator();
      assertEquals("<", token5.getTokenText());
      assertEquals(7, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(31, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("P", token7.getTokenText());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("y", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("en.;8<o");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("e", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.dots();
      assertEquals("n.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h9?3T");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("h9", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r9?3T");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("r9", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4>Z!;m|e;NUSnXCZt");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("MA%");
      xPathLexer2.not();
      xPathLexer2.nextToken();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" ,s]&L+>fwe&o%");
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.consume(1);
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A:kXl7iOJp:0FdCD");
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D)K");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("D", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("K", token2.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rC0M]^qV;");
      xPathLexer0.pipe();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("MOfQ9D'QGS");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("rC0M]^qV;");
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "ThS2]X>>Hp:9";
      XPathLexer xPathLexer0 = new XPathLexer("ThS2]X>>Hp:9");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ",0";
      XPathLexer xPathLexer0 = new XPathLexer(",0");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-2149));
      xPathLexer0.comma();
      xPathLexer0.getPreviousToken();
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c<7");
      XPathLexer xPathLexer1 = new XPathLexer("c<7");
      xPathLexer1.slashes();
      xPathLexer1.nextToken();
      xPathLexer1.star();
      xPathLexer0.relationalOperator();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer1.number();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c<7");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      Token token2 = xPathLexer0.relationalOperator();
      assertNotNull(token2);
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer("c<7");
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (23) (c)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "/>Z!;u|';NUSeXC8t";
      XPathLexer xPathLexer0 = new XPathLexer("/>Z!;u|';NUSeXC8t");
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer1.number();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("en.;8<o");
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rC0M]^qV;");
      Token token0 = xPathLexer0.pipe();
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("rC0M]^qV;");
      XPathLexer xPathLexer2 = new XPathLexer("MOfQ9D'QGS");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("M", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("rC0M]^qV;");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.dots();
      assertEquals(13, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I{ 0:7>N6~]R[Aa^Ds^");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("0C;Jhcj=K05S");
      Token token1 = xPathLexer1.dots();
      assertEquals("0", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer2.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer2.consume();
      xPathLexer2.setPreviousToken(token0);
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.getXPath();
      xPathLexer4.div();
      xPathLexer4.endPosition();
      Token token4 = xPathLexer3.identifier();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^lZVn&9Ya|V6'c=");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("^lZVn&9Ya|V6'c=", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertNotSame(token2, token0);
      
      Token token3 = xPathLexer0.comma();
      assertEquals("l", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.rightBracket();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer1.rightBracket();
      Token token2 = xPathLexer1.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer2.setPreviousToken(token0);
      assertEquals(4, token0.getTokenType());
      
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertNull(token6);
      
      XPathLexer xPathLexer3 = new XPathLexer(":`nk_#bg~");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#OS@^iI@/DK6%378");
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("as");
      Token token0 = xPathLexer1.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("a", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("@h62QiF");
      Token token3 = xPathLexer2.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("@h", token3.getTokenText());
      
      xPathLexer1.getXPath();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("ThS2]X>>Hp:9");
      Token token2 = xPathLexer1.dollar();
      assertEquals("T", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      boolean boolean1 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Gmo3");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rpC0M]^IqV;");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("rpC0M]^IqV;");
      XPathLexer xPathLexer2 = new XPathLexer("MOfQ9D'QGS");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("C0M", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("rpC0M]^IqV;");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer4.dots();
      assertEquals(13, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
      
      xPathLexer4.relationalOperator();
      Token token3 = xPathLexer3.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      xPathLexer0.isIdentifierStartChar('l');
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.or();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.identifier();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('K');
      assertTrue(boolean0);
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~(4x[''h6{\"'5G?");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("~(4x[''h6{\"'5G?", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.equals();
      assertEquals("4", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.star();
      assertEquals(20, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("~(4x[''h6{\"'5G?");
      Token token5 = xPathLexer0.nextToken();
      assertEquals("x[''h6{\"'5G?", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token6 = xPathLexer2.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("x", token7.getTokenText());
      
      Token token8 = xPathLexer2.rightBracket();
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`.,JfQF&6o7Ys");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer("`.,JfQF&6o7Ys");
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("P\"P.n7");
      XPathLexer xPathLexer4 = new XPathLexer("`.,JfQF&6o7Ys");
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("[ (3) (`)");
      xPathLexer6.rightParen();
      xPathLexer6.relationalOperator();
      xPathLexer5.colon();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer6.number();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer6.plus();
      xPathLexer3.nextToken();
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer5.mod();
      xPathLexer4.star();
      xPathLexer8.mod();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~(4x[''h6{\"'5G?");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.not();
      assertEquals("~", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.setXPath("~(4x[''h6{\"'5G?");
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("x[", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(27, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals("h", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("6", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer3.leftParen();
      xPathLexer3.minus();
      XPathLexer xPathLexer4 = new XPathLexer("~(4x[''h6{\"'5G?");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer4.currentPosition();
      Token token10 = xPathLexer2.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A:kXl7iOJp:0FdCD");
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (2) (k)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("X", token1.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer2.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("i", token5.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (2) (k)");
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.colon();
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer1.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.or();
      xPathLexer1.operatorName();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      String string1 = token2.toString();
      assertEquals("[ (5) (7)", string1);
      
      Token token10 = xPathLexer4.equals();
      assertEquals(21, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("on^?z(?h:4,I6");
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("o", token3.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.at();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      xPathLexer1.consume();
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("z", token7.getTokenText());
      
      xPathLexer2.relationalOperator();
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("I{ 0:7>N6~]R[Aa^Ds^");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      XPathLexer xPathLexer3 = new XPathLexer("jo4L$d*");
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer2.nextToken();
      assertEquals(2, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token4 = xPathLexer6.dollar();
      assertEquals(26, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer("8IC1<B%/VO&P~/p'");
      Token token0 = xPathLexer2.minus();
      assertEquals("8", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer2.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("IC1", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@2+XN>)Jm5");
      XPathLexer xPathLexer1 = new XPathLexer("*");
      xPathLexer1.operatorName();
      xPathLexer0.consume();
      Token token0 = xPathLexer1.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("*");
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token3 = xPathLexer4.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer3.operatorName();
      Token token5 = xPathLexer2.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer4.and();
      Token token6 = xPathLexer4.notEquals();
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("@2+XN>)Jm5");
      Token token7 = xPathLexer5.not();
      assertEquals("@", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer4.identifierOrOperatorName();
      assertNotNull(token8);
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer5.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer3.and();
      Token token10 = xPathLexer0.nextToken();
      assertEquals(5, token10.getTokenType());
      assertEquals("+", token10.getTokenText());
      
      Token token11 = xPathLexer5.number();
      assertEquals("", token11.getTokenText());
      
      Token token12 = xPathLexer2.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer6.at();
      assertEquals(16, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.whitespace();
      Token token0 = xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("en.;8<o");
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer2.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.not();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.nextToken();
      xPathLexer3.nextToken();
      Token token1 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qbT 5lhysI#Ij");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      xPathLexer0.at();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("l", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.dots();
      assertEquals("h", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("NZBh6)5j3y]");
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      xPathLexer1.setPreviousToken(token1);
      assertEquals("qb", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("N", token6.getTokenText());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("Z", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("ysI", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer2.not();
      assertEquals(23, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nbD\"x\"l+8");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("nbD\"x\"l+8");
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer1.at();
      xPathLexer1.identifier();
      xPathLexer1.star();
      xPathLexer1.plus();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer1.comma();
      xPathLexer1.colon();
      xPathLexer1.leftParen();
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.star();
      xPathLexer2.currentPosition();
      xPathLexer2.setXPath("");
      assertNotSame(xPathLexer2, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer("vs<B[*HY$cEX%bH=*");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("vs<B[*HY$cEX%bH=*");
      xPathLexer6.slashes();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.setPreviousToken(token0);
      xPathLexer1.consume();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer2.and();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.div();
      xPathLexer2.relationalOperator();
      xPathLexer3.nextToken();
      xPathLexer2.mod();
      xPathLexer4.number();
      XPathLexer xPathLexer9 = new XPathLexer("on^?z(?L:4,I6");
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token1 = xPathLexer4.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ThS2]X>>Hp:9");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.and();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("h", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("S", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("2", token3.getTokenText());
      
      xPathLexer0.or();
      int int0 = xPathLexer0.endPosition();
      assertEquals(12, int0);
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("]X", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(">", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals(18, token8.getTokenType());
      assertEquals("T", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = ";PR~V/$L|*^a|F";
      XPathLexer xPathLexer0 = new XPathLexer(";PR~V/$L|*^a|F");
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.number();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "Gmgo3";
      XPathLexer xPathLexer0 = new XPathLexer("Gmgo3");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer1.rightBracket();
      xPathLexer1.identifier();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.consume();
      xPathLexer2.identifier();
      Token token0 = xPathLexer2.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("H_r|qET| ");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("H", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("_", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.and();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      assertNotNull(token2);
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.LA(3);
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("E", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("T", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.and();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A:kXl7iOJp:0FdCD");
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.comma();
      String string0 = "plCJ'r_{C=";
      XPathLexer xPathLexer1 = new XPathLexer("plCJ'r_{C=");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer("3mv?#Kgy<f!;N<");
      xPathLexer3.and();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("3mv?#Kgy<f!;N<");
      xPathLexer4.relationalOperator();
      String string1 = null;
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4");
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) (4)", string0);
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath("3$}>");
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&J");
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume((-1));
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("ZO#=$");
      assertEquals("ZO#=$", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?k)");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      Token token1 = xPathLexer3.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer2.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer2.identifierOrOperatorName();
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qbT 5lhysI#Ij");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.colon();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\u0007Dgn12");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer1.comma();
      xPathLexer1.consume();
      boolean boolean0 = xPathLexer1.isIdentifierChar('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      String string0 = "}tw.qN0=H2h@";
      XPathLexer xPathLexer1 = new XPathLexer("}tw.qN0=H2h@");
      xPathLexer1.operatorName();
      xPathLexer1.equals();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer("}tw.qN0=H2h@");
      xPathLexer1.plus();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer2.nextToken();
      xPathLexer2.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer1.relationalOperator();
      xPathLexer2.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]~%>");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      xPathLexer0.setXPath("b>fL+$]O,-+:");
      xPathLexer1.and();
      xPathLexer1.pipe();
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token1 = xPathLexer1.equals();
      assertEquals(21, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.star();
      assertEquals("f", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer2.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.not();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("L+$]O,-+:", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("b>fL+$]O,-+:");
      Token token5 = xPathLexer3.plus();
      assertEquals("b", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer3.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token7 = xPathLexer5.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer5.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer5.and();
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "as";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("as");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "on^?z(?L:4,I6";
      XPathLexer xPathLexer0 = new XPathLexer("on^?z(?L:4,I6");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.leftBracket();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) (z)");
      XPathLexer xPathLexer2 = new XPathLexer("Nu,(/k+AsW");
      xPathLexer2.whitespace();
      token0.toString();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("on^?z(?L:4,I6");
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer6.dots();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer6.plus();
      XPathLexer xPathLexer8 = null;
      try {
        xPathLexer8 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("ee Zc?RE");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("ee", token0.getTokenText());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('r');
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("c", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.leftParen();
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer1.consume();
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("-:=Mot?q_354");
      Token token1 = xPathLexer1.leftParen();
      assertEquals("-", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(":", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token4 = xPathLexer2.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer2.leftBracket();
      assertEquals(" ", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.setXPath("[ (");
      XPathLexer xPathLexer4 = new XPathLexer("82%f3wp/P&");
      Token token7 = xPathLexer4.doubleColon();
      assertEquals("82", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("=M", token8.getTokenText());
      
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("on^?z(?h:4,I6");
      Token token9 = xPathLexer4.nextToken();
      assertEquals("%f3wp/P&", token9.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer1.rightParen();
      assertEquals("o", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.getPreviousToken();
      xPathLexer1.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      String string0 = "^zGO} PH:ho{:<grYFv";
      XPathLexer xPathLexer3 = new XPathLexer("^zGO} PH:ho{:<grYFv");
      xPathLexer3.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      String string1 = null;
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("c<7");
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qbT 5lhysI#Ij");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.currentPosition();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("qbT 5lhysI#Ij");
      xPathLexer1.relationalOperator();
      xPathLexer1.comma();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.consume((-1717));
      XPathLexer xPathLexer4 = new XPathLexer("71'3");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer5.whitespace();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.consume();
      assertNotSame(xPathLexer6, xPathLexer4);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      xPathLexer0.setXPath("kM/*VJxSqmE");
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("k", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.star();
      Token token1 = xPathLexer0.comma();
      assertEquals("/", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(20, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.endPosition();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.and();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = new Token(2047, "", 2047, 2047);
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.endPosition();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.at();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("rAHaQl.19?Pl");
      xPathLexer0.and();
      Token token9 = xPathLexer0.notEquals();
      assertEquals("rA", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("H", token10.getTokenText());
      
      xPathLexer0.operatorName();
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      char char0 = xPathLexer0.LA(122);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8IC1<Bi/VO&P~/p'");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d1H~iKE@x%F+");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("mX ND 7l");
      xPathLexer1.operatorName();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.comma();
      assertEquals("H", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.hasMoreChars();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token3 = xPathLexer3.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer4.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer5.setPreviousToken(token1);
      assertEquals(30, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("d1H~iKE@x%F+");
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token5 = xPathLexer5.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer5.minus();
      assertEquals(6, token6.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer8.getXPath();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token7 = xPathLexer9.dollar();
      assertEquals(26, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~;1");
      Token token0 = xPathLexer0.colon();
      assertEquals("~", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("1", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.and();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      boolean boolean0 = xPathLexer0.isIdentifierChar(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}tw.qN0=H2h@");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.colon();
      assertEquals("t", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("}tw.qN0=H2h@");
      Token token3 = xPathLexer2.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("H", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.comma();
      Token token2 = xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer3.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals(")", token8.getTokenText());
      
      xPathLexer1.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer3.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.getPreviousToken();
      Token token10 = xPathLexer2.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("S+F4w~Flmv");
      Token token11 = xPathLexer7.number();
      assertEquals(30, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "dH~Ku@%+";
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.dots();
      XPathLexer xPathLexer3 = new XPathLexer("dH~Ku@%+");
      XPathLexer xPathLexer4 = new XPathLexer("dH~Ku@%+");
      xPathLexer2.at();
      xPathLexer3.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("as");
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("@h62QiF");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("@h62QiF");
      xPathLexer4.doubleColon();
      String string0 = xPathLexer3.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qbT 5lhysI#Ij");
      Token token0 = xPathLexer0.pipe();
      assertEquals("q", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dots();
      assertEquals("T", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("5", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("9/&|h lO4");
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("l", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("9/&|h lO4");
      Token token5 = xPathLexer2.slashes();
      assertEquals("9/", token5.getTokenText());
      assertEquals(12, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer6.dollar();
      assertEquals(26, token6.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")^`A&x-:@XN=");
      Token token0 = xPathLexer0.dots();
      assertEquals(")", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("`", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("&x", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.consume(1262);
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals("-", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("\"Kx=qK");
      xPathLexer1.operatorName();
      xPathLexer0.number();
      xPathLexer2.plus();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer2.nextToken();
      xPathLexer3.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.identifier();
      xPathLexer0.identifier();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.dots();
      token1.toString();
      xPathLexer0.consume();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      xPathLexer5.dollar();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("}tw.qN0=H2h@");
      xPathLexer1.operatorName();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("}", token1.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.colon();
      assertEquals(18, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer3.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer2.setPreviousToken(token0);
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.operatorName();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals("t", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      xPathLexer2.and();
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("66a$U/96t+:VwYoWm");
      xPathLexer0.literal();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.consume(1218);
      xPathLexer0.LA(1);
      xPathLexer0.literal();
      xPathLexer0.consume(1);
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/>Z!;m|';NUSnXCZt");
      XPathLexer xPathLexer1 = new XPathLexer("/>Z!;m|';NUSnXCZt");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer1.consume();
      xPathLexer2.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer2.dots();
      XPathLexer xPathLexer3 = new XPathLexer("/>Z!;m|';NUSnXCZt");
      xPathLexer1.operatorName();
      xPathLexer3.number();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I{ 0:7>N6~]R[Aa^Ds^");
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer1.rightBracket();
      xPathLexer1.operatorName();
      xPathLexer1.rightBracket();
      xPathLexer0.comma();
      xPathLexer1.div();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer2.minus();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer2.leftBracket();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.plus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.literal();
      Token token1 = xPathLexer4.dollar();
      xPathLexer6.and();
      xPathLexer4.relationalOperator();
      xPathLexer6.at();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer5.comma();
      xPathLexer4.or();
      xPathLexer5.operatorName();
      XPathLexer xPathLexer8 = new XPathLexer();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c<7");
      Token token0 = xPathLexer0.dollar();
      assertEquals("c", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("c<7");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("c<", token3.getTokenText());
      
      xPathLexer2.consume();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.not();
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer3.mod();
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("7", token7.getTokenText());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/>Z!;m|';NUSnXCZt");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.and();
      xPathLexer1.rightBracket();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("`Y*'f0z");
      xPathLexer0.pipe();
      xPathLexer1.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("`Y*'f0z");
      xPathLexer2.rightBracket();
      xPathLexer4.plus();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer5.getXPath();
      xPathLexer2.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer5.leftBracket();
      xPathLexer5.nextToken();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer6 = new XPathLexer("/>Z!;m|';NUSnXCZt");
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2_Sx>E.U/25.h;Qflb/");
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.and();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("_", token0.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("E", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("/2", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("5.", token4.getTokenText());
      assertEquals(31, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean1 == boolean0);
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("h", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(";", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.dollar();
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("l", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("b", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.notEquals();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }
}
