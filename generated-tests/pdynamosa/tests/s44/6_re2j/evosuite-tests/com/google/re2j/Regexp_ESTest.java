/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 08:38:55 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      Regexp.Op.values();
      Regexp regexp2 = new Regexp(regexp0);
      String string0 = regexp2.toString();
      assertEquals("\\z", string0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      boolean boolean0 = regexp1.equals(regexp_Op1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 17;
      intArray0[2] = 65110;
      regexp1.name = "";
      regexp1.runes = intArray0;
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-32);
      intArray0[1] = 1072;
      intArray0[2] = (-3655);
      regexp0.runes = intArray0;
      String string0 = regexp0.toString();
      assertEquals("[invalid char class]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.name = "Noncharacter_Code_Point";
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      regexpArray0[3].toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.maxCap();
      regexp0.toString();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexp0.flags = (-1603);
      regexpArray0[0] = regexp0;
      regexpArray0[0].max = (-1603);
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      regexp0.reinit();
      regexp0.toString();
      regexp0.maxCap();
      regexp0.toString();
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      regexp0.equals("[^x00-x{10FFFF}]");
      regexp0.maxCap();
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.maxCap();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 429;
      regexp0.max = 43045;
      regexp0.min = 429;
      regexp0.equals(regexp_Op0);
      Regexp.Op.values();
      regexp0.toString();
      regexp0.max = 14;
      regexp0.equals(regexp_Op0);
      regexp0.name = "B";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      regexp0.reinit();
      intArray0[0] = 78;
      intArray0[1] = 1488;
      intArray0[2] = 2;
      regexp0.runes = intArray0;
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      regexp1.toString();
      regexp1.reinit();
      Regexp.Op.values();
      Regexp.Op.values();
      regexp0.maxCap();
      regexp1.equals("Latin");
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[3];
      regexp0.flags = 127337;
      intArray0[1] = 17;
      intArray0[2] = 65110;
      String string0 = "";
      regexp1.name = "";
      regexp1.runes = intArray0;
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      Object object0 = new Object();
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-1);
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.cap = (-2590);
      regexp0.cap = 65019;
      regexp0.flags = 65019;
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      regexp_Op0.isPseudo();
      regexp0.reinit();
      regexp0.op.isPseudo();
      regexp0.op.isPseudo();
      Regexp.Op.valueOf("VERTICAL_BAR");
      regexp0.toString();
      regexp0.toString();
      regexp0.reinit();
      String string0 = "l'c";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("l'c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.l'c
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp0.min = 0;
      regexp0.equals(object0);
      regexp0.min = 0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("^aGpiR\"_}{E=^M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.^aGpiR\"_}{E=^M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 847;
      regexp0.max = 847;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.max = 847;
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.equals(regexp2);
      regexp1.equals(regexp0);
      regexp1.toString();
      regexp1.toString();
      regexp1.maxCap();
      regexp1.equals("(?:)");
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp0.equals(regexp3);
      Regexp.Op.values();
      regexp0.toString();
      regexp2.equals(regexp_Op1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[7];
      intArray0[0] = 545;
      intArray0[1] = 1;
      intArray0[2] = (-1368);
      intArray0[3] = 0;
      intArray0[4] = 168;
      intArray0[5] = 19;
      intArray0[6] = (-519);
      regexp1.runes = intArray0;
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("@S53Rr6;fU=?qf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.@S53Rr6;fU=?qf
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.name = "Noncharacter_Code_Point";
      regexp0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = null;
      regexp0.min = (-2);
      regexp0.max = (-1893);
      regexp0.maxCap();
      regexp0.equals(regexp_Op0);
      Regexp.Op.valueOf("VERTICAL_BAR");
      regexp0.reinit();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("\b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[5];
      regexp0.max = 0;
      intArray0[0] = 827;
      intArray0[1] = 1033;
      intArray0[2] = 78894;
      intArray0[3] = 8;
      intArray0[4] = (-1346);
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "2)O";
      regexp1.max = 8;
      boolean boolean0 = regexp1.equals(regexp0);
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "o2NjicE5^_)`";
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.equals(regexp2);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp0.op = regexp_Op1;
      regexp0.op = regexp_Op0;
      regexp0.name = "Sk";
      regexp0.equals((Object) null);
      regexp0.min = 220;
      regexp0.min = 0;
      regexp0.max = 220;
      regexp0.reinit();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp0.equals(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      boolean boolean0 = regexp0.equals(regexp1);
      regexp1.name = "2%$mwI0ocHKsyb";
      regexp0.reinit();
      boolean boolean1 = regexp0.op.isPseudo();
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp0.toString();
      Regexp.Op.values();
      boolean boolean2 = regexp1.equals((Object) null);
      assertFalse(boolean2);
      
      regexp1.reinit();
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp1);
      boolean boolean3 = regexp0.equals(regexp2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = null;
      regexp0.flags = 0;
      regexp0.flags = 0;
      regexp0.runes = null;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexp0.flags = (-1603);
      regexpArray0[0] = regexp0;
      regexpArray0[0].max = (-1603);
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      regexp0.reinit();
      regexp0.toString();
      regexp0.maxCap();
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      regexpArray0[0].op = regexp_Op1;
      Regexp.Op regexp_Op2 = Regexp.Op.LITERAL;
      Regexp regexp2 = new Regexp(regexp_Op2);
      regexp0.equals(regexp2);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.min = 4044;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 883;
      regexp0.equals(regexp1);
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.min = (-2416);
      regexp2.reinit();
      regexp0.maxCap();
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(")$n~dEK]YHy:d99");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.)$n~dEK]YHy:d99
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "(?-m:$)";
      regexp1.min = 123;
      regexp1.maxCap();
      regexp0.max = 13;
      regexp0.equals(regexp1);
      regexp0.flags = 3348;
      String string0 = "\\x{";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("x{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.x{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = null;
      regexp0.flags = 0;
      regexp0.flags = 0;
      regexp0.runes = null;
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.name;
      Regexp.Op.values();
      int int0 = 4304;
      regexp1.op = regexp_Op0;
      String string1 = "]t=";
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "com.google.re2j.Regexp";
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 0;
      regexp1.op = regexp_Op0;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[^x00-x{10FFFF}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[^x00-x{10FFFF}]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.valueOf("NO_WORD_BOUNDARY");
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = null;
      regexp0.min = 0;
      regexp0.max = (-1893);
      regexp0.maxCap();
      regexp0.equals(regexp_Op0);
      Regexp.Op.valueOf("VERTICAL_BAR");
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("\\b", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      String string0 = regexp0.toString();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 13;
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Pi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Pi
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = 252;
      intArray0[1] = (-600);
      intArray0[2] = 10;
      intArray0[3] = (-493);
      intArray0[4] = 1079;
      intArray0[5] = 3008;
      intArray0[6] = 1;
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.min = 4044;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      regexp0.runes = intArray0;
      intArray0[0] = 883;
      regexp1.max = 0;
      intArray0[1] = 1949;
      regexp0.equals(regexp1);
      intArray0[2] = 1902;
      regexp0.flags = 0;
      regexp1.min = 1902;
      intArray0[3] = 43640;
      regexp1.runes = intArray0;
      regexp1.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("?.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.?.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.min = 4044;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      regexp0.runes = intArray0;
      intArray0[0] = 883;
      regexp1.max = 883;
      intArray0[1] = 1922;
      regexp0.equals(regexp1);
      intArray0[2] = 1902;
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.min = (-2416);
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp2.reinit();
      regexp0.reinit();
      regexp0.maxCap();
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Object object0 = new Object();
      boolean boolean1 = regexp0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.name = "Noncharacter_Code_Point";
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      regexp0.name = null;
      regexp0.reinit();
      regexp0.reinit();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "o2NjicE5^_)`";
      regexp0.op = regexp_Op0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 1566;
      regexp1.op = regexp_Op0;
      regexp1.flags = 1566;
      regexp0.equals(regexp_Op0);
      regexp1.maxCap();
      Regexp.Op.values();
      regexp1.equals("Other_Math");
      Regexp.Op.values();
      regexp0.reinit();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp0.cap = 0;
      regexp0.equals(regexp_Op0);
      regexp0.cap = (-241);
      regexp0.equals(regexp_Op0);
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("g!8U/OiwK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.g!8U/OiwK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4822;
      intArray0[1] = 4822;
      intArray0[2] = 4822;
      intArray0[3] = 4822;
      regexp0.runes = intArray0;
      regexp0.reinit();
      regexp0.flags = 4042;
      regexp0.cap = 4822;
      int[] intArray1 = new int[0];
      regexp0.runes = intArray1;
      regexp0.reinit();
      regexp0.reinit();
      regexp0.reinit();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("\b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.reinit();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      regexp0.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.equals(regexp_Op1);
      regexp0.reinit();
      regexp0.name = "Tagalog";
      boolean boolean0 = regexp_Op1.isPseudo();
      Object object1 = new Object();
      regexp1.equals("$vK\u0006Nokbne{");
      regexp0.toString();
      Regexp.Op.values();
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.equals("\b");
      regexp1.reinit();
      regexp1.toString();
      Regexp regexp4 = new Regexp(regexp3);
      boolean boolean1 = regexp1.equals("\b");
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(boolean1 == boolean0);
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 4;
      regexp0.equals(regexp_Op0);
      regexp0.min = 92;
      regexp0.reinit();
      regexp0.name = ",XY2ldY/";
      Regexp.Op.values();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp0.toString();
      regexp0.equals("A");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
      
      Regexp.Op.values();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-225);
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
  }
}
