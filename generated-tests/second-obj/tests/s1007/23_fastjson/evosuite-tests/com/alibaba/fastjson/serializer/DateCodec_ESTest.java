/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:35:18 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.LabelFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Type;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Short> class0 = Short.TYPE;
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      LabelFilter labelFilter0 = dateCodec0.cast((DefaultJSONParser) null, (Type) class0, (Object) serializerFeature0, (Object) null);
      assertNull(labelFilter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      dateCodec0.write(jSONSerializer0, (Object) null, jSONSerializer0, (Type) null, (-628));
      assertEquals(0, jSONSerializer0.getIndentCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, jSONSerializer0, jSONSerializer0, (Type) null, (-628));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast((DefaultJSONParser) null, (Type) class0, (Object) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Float float0 = new Float(0.0F);
      Class<Float> class0 = Float.TYPE;
      dateCodec0.write(jSONSerializer0, float0, float0, class0, 2682);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Integer> class0 = Integer.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]15[%7y-dn&+}FO2BkE|");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "]15[%7y-dn&+}FO2BkE|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]15[%7y-dn&+}FO2BkE|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Long> class0 = Long.TYPE;
      Long.getLong("");
      Long.compareUnsigned(0, 0);
      Long.toUnsignedString(0L);
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Integer> class0 = Integer.TYPE;
      Long.getLong("]15[%7y-dn&+}FO2Bk|", 12L);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]15[%7y-dn&+}FO2Bk|");
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockDate0, (Object) "A)pH.R \">E\":]`ftl:&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A)pH.R \">E\":]`ftl:&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("0000-00-00");
      Class<Float> class1 = Float.TYPE;
      dateCodec0.cast(defaultJSONParser1, (Type) class1, (Object) "0000-00-00", (Object) "0000-00-00");
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Integer> class0 = Integer.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]15[%7y-dn&+}FO2BkE|");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "/Date(>X\u0006B.Wyv'T@{8RX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(>X\u0006B.Wyv'T@{8RX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0001-01-01T00:00:00+08:00");
      DateCodec dateCodec0 = DateCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Integer> class0 = Integer.TYPE;
      Locale locale0 = Locale.ITALIAN;
      locale0.getLanguage();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("it");
      JSONScanner jSONScanner0 = new JSONScanner("^*kP", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) "^*kP", (Object) "0001-01-01T00:00:00+08:00");
      int int0 = Calendar.NOVEMBER;
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Integer> class0 = Integer.TYPE;
      JSON.DEFFAULT_DATE_FORMAT = "/Dte(A)pH.R \">E\":]`ftl:&";
      byte[] byteArray0 = new byte[19];
      JSON.setDefaultTypeKey("/Dte(A)pH.R \">E\":]`ftl:&");
      JSON.DEFAULT_TYPE_KEY = "/Date(>X\u0006B.Wyv'T@{8X)/";
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-40);
      byteArray0[5] = (byte)7;
      JSON.DEFFAULT_DATE_FORMAT = "S`{3E";
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Date(>X\u0006B.Wyv'T@{8X)/");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]15[%7y-dn&+}FO2BkE|");
      defaultJSONParser0.getExtraProcessors();
      JSON.DEFFAULT_DATE_FORMAT = "/Date(>X\u0006B.Wyv'T@{8X)/";
      MockDate mockDate0 = new MockDate(1, (-1362), 35, 25, 0, (byte)7);
      Instant instant0 = MockInstant.ofEpochMilli((byte)7);
      Date.from(instant0);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockDate0, (Object) "/Date(>X\u0006B.Wyv'T@{8X)/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">X\u0006B.Wyv'T@{8X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      String string0 = "/Date(X807wOon";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/Date(X807wOon");
      Float float0 = new Float(0.0F);
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("dn?Gu)");
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 63;
      ZoneOffset.ofTotalSeconds(63);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) "/Date(m=at&(>O!t.Wyv'U@5A|_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(m=at&(>O!t.Wyv'U@5A|_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFAULT_TYPE_KEY = "0000-00-00T00:00:00";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00");
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null);
      dateCodec0.getFastMatchToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockDate mockDate0 = new MockDate((byte)50, (byte)0, (byte) (-15), 2, (byte) (-11));
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONSerializer0.writeWithFormat(mockGregorianCalendar0, (String) null);
      mockDate0.toInstant();
      dateCodec0.write(jSONSerializer0, (Object) null, (Object) null, class0, (-1340977150));
      dateCodec0.getFastMatchToken();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockDate0, (Object) "0000-00-00T00:00:00");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }
}
