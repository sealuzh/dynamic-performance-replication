/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:40:05 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Utility.replace("${{u", "K'xeUf", "${{u");
      assertEquals("${{u", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H;hK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H;hK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.compactClassName("java.lang.Object", "java.lang.Object", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      Utility.toHexString(byteArray0);
      Utility.setBit(2, 2);
      Utility.convertString("03 03 03 20 03 03");
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((byte) (-19), (byte) (-19));
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("6DNo", (String) null, "uN-I{KqKw+t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6DNo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = Utility.clearBit((-1960), (-1960));
      assertEquals((-16779176), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)104;
      byteArray0[2] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null, null, null, null, null, null, null");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)48;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte)96;
      byteArray1[5] = (byte) (-72);
      byteArray1[6] = (byte)42;
      byteArray1[7] = (byte) (-126);
      Utility.equals(byteArray0, byteArray1);
      Utility.convertString("RAMQNg6`h?mdYx$.");
      // Undeclared exception!
      try { 
        Utility.signatureToString("RAMQNg6`h?mdYx$.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RAMQNg6`h?mdYx$.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.decode("RAMQNg6`h?mdYx$.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(" (", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` ('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0}(/%S1#7\"N#ewCbAf8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0}(/%S1#7\"N#ewCbAf8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QksC~Rh`j5/3IayW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QksC~Rh`j5/3IayW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface((byte)51);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", ",-/T1\"", "@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      stringArray0[1] = ",:bt";
      stringArray0[2] = ",:bt";
      int int0 = Utility.setBit(2104, 78);
      assertEquals(18488, int0);
      
      String string0 = Utility.compactClassName(",:bt", true);
      assertEquals(",:bt", string0);
      
      String string1 = Utility.getSignature(",:bt");
      assertEquals("L,:bt;", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\",:bt\", \",:bt\", \",:bt\", null, null}", string2);
      
      short short0 = Utility.searchOpcode("return");
      assertEquals((short)177, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-91);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.methodSignatureReturnType("SAME_LOCALS_1_STACK_EXEDED");
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("gxMbm Y1VS4o8@hUZO", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `gxMbm Y1VS4o8@hUZO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(102);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnull\t\t#7824", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "-)~x.Y6Zz)'PIN";
      try { 
        Utility.typeOfSignature("-)~x.Y6Zz)'PIN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -)~x.Y6Zz)'PIN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.getSignature(", length = ");
      assertEquals("L,;", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte) (-86);
      byteArray1[6] = (byte) (-86);
      byteArray1[7] = (byte) (-86);
      byteArray1[8] = (byte) (-86);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = Utility.printArray((Object[]) stringArray0, true);
      assertEquals("{null, null, null, null, null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.classOrInterface((byte)12);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((-3216));
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)12;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string1 = Utility.accessToString(651, true);
      assertEquals("public private static transient", string1);
      
      MockFile mockFile0 = new MockFile("\\", "class");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(3L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.convertString("compiled from\t\t");
      ConstantClass constantClass0 = new ConstantClass(529);
      Utility.getSignature("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "compiled from\t\t";
      objectArray0[1] = (Object) "compiled from\t\t";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) constantClass0;
      objectArray0[4] = (Object) "getfield";
      objectArray0[5] = (Object) "compiled from\t\t";
      objectArray0[6] = (Object) "getfield";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.setBit(95, 3100);
      ConstantClass constantClass0 = new ConstantClass(8);
      constantClass0.setNameIndex((-857));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-50), (int) (byte) (-50), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.getSignature("From\tTo\tHandler\tType\n");
      assertEquals("LFrom;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("areturn", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte)103;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Could not create the directory ");
      assertEquals("char", string0);
      
      String string1 = Utility.methodTypeToSignature("char", (String[]) null);
      assertEquals("()C", string1);
      
      String string2 = Utility.accessToString((-1135625220), true);
      assertEquals("protected static final volatile transient native strictfp synthetic annotation", string2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.setBit((byte)0, (byte)0);
      try { 
        Utility.typeOfSignature("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.accessToString(1092);
      assertEquals("protected volatile abstract", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.convertString("Ljava/lang/Object");
      String string0 = "Could not create the directory ";
      try { 
        Utility.typeOfSignature("?p,/T!5 !'@L>U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?p,/T!5 !'@L>U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = Utility.searchOpcode("~)Wpmzo");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-99);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isJavaIdentifierPart('A');
      Utility.classOrInterface((byte) (-87));
      Utility.fillup("interface", (byte) (-99), false, 'A');
      String string0 = "fcmpg";
      String string1 = "rf}WHhrv<";
      int int0 = 154;
      Attribute[] attributeArray0 = null;
      Constant[] constantArray0 = new Constant[3];
      File file0 = MockFile.createTempFile("rf}WHhrv<", "if_icmpne");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "fcmpg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"fcmpg\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("2D;33rZ#uZ(bfR", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aaload", string0);
      
      Utility.printArray((Object[]) null);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T\"h!y}QU#KM");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.setBit((-368), (-368));
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true, true);
      Utility.isSet(42, 176);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString("ixor");
      assertEquals("ixor", string0);
      
      Utility.compactClassName("ixor");
      Utility.compactClassName("ixor");
      Utility.compactClassName("ixor", "rRH1@VuSC8-O", false);
      String string1 = Utility.classOrInterface(181);
      assertEquals("class", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Utility.setBit((byte) (-126), (-897));
      assertEquals((-126), int0);
      
      int int1 = Utility.setBit((-126), 2);
      assertEquals((-122), int1);
      
      String string2 = Utility.getSignature("rRH1@VuSC8-O");
      assertEquals("LrRH1@VuSC8-O;", string2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)44;
      byteArray2[1] = (byte)44;
      ConstantClass constantClass0 = new ConstantClass((-1715));
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(45, 9);
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(80);
      constantArray0[7] = (Constant) constantString0;
      constantArray0[8] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)44, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I");
      assertEquals((byte)10, byte0);
      
      int int0 = Utility.clearBit((byte)10, (byte)10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-65);
      byteArray0[4] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-20), (int) (byte)25);
      assertEquals("0:    <illegal opcode>\n1:    aload\t\t%191\n3:    nop\n4:    iload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "Dont call getValueFloat() on a non FLOAT ElementValue";
      Utility.typeOfSignature("Dont call getValueFloat() on a non FLOAT ElementValue");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Dont call getValueFloat() on a non FLOAT ElementValue";
      stringArray0[1] = null;
      stringArray0[2] = "Dont call getValueFloat() on a non FLOAT ElementValue";
      stringArray0[3] = null;
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.getSignature("<SzDw?5G");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      String string0 = "iconst_1";
      boolean boolean0 = false;
      Utility.compactClassName("40/'E", "iconst_1", false);
      try { 
        Utility.typeOfSignature("40/'E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 40/'E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.getSignature("null");
      String string0 = Utility.format((-743), (-743), false, '6');
      assertEquals("-743", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
      
      Utility.getSignature("if_acmpeq");
      String string2 = Utility.getSignature("if_icmpeq");
      assertEquals("Lif_icmpeq;", string2);
      
      byte[] byteArray1 = Utility.decode("_K(<", false);
      String string3 = Utility.toHexString(byteArray1);
      assertEquals("5f 4b 28 3c", string3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RAMQNg6`h?mdYx$.", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dastore", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.clearBit(1554, 792);
      Utility.printArray((Object[]) null, false);
      Utility.printArray((Object[]) null, false);
      Utility.printArray((Object[]) null, true, true);
      Utility.isSet(67, 651);
      Utility.typeOfSignature("Could not create the directory ");
      Utility.classOrInterface(61);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      String string0 = Utility.accessToString(40, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)31;
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
      
      String string0 = Utility.compactClassName("w!O(", false);
      assertEquals("w!O(", string0);
      
      String string1 = Utility.getSignature("if_icmplt");
      assertEquals("Lif_icmplt;", string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Utility.classOrInterface(3);
      assertEquals("class", string0);
      
      String string1 = Utility.accessToString(3, true);
      short short0 = Utility.searchOpcode("monitorenter");
      assertEquals((short)194, short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.compactClassName("public private");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[T070(F<:3N{J");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "O{De";
      try { 
        Utility.typeOfSignature("O{De");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O{De
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.convertString("Exceptions: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exceptions: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XQPC7jwo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XQPC7jwo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-368);
      Utility.setBit((-368), (-368));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      String string0 = Utility.printArray((Object[]) stringArray0, false);
      assertEquals(",:bt, null, null, null, null", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, false, true);
      assertEquals("\",:bt\", null, null, null, null", string1);
      
      Utility.isSet(1406, 101);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.convertString("Ljava/lang/Object");
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmple\t\t#-23386", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmple\t\t#-23386'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)0;
      String string0 = "fastore";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "fastore");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"fastore\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.convertString("line.separator");
      Utility.accessToString(125, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "boolean";
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("boolean", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)117;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit(153, (byte)117);
      assertEquals(153, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = Utility.setBit(2046, 2046);
      assertEquals(1073743870, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.compactClassName("[y");
      assertEquals("[y", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte) (-55);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      assertEquals(11, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("7,@L|c4d", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 34, 2222);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ZJY#_alM");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iinc\t\t%1\t72", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      Utility.signatureToString("D]?)v(2D4OSll,e'`", true);
      String string0 = "void";
      Utility.searchOpcode("void");
      // Undeclared exception!
      try { 
        Utility.signatureToString("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("0MhFw!dK'>dkH!cKO|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0MhFw!dK'>dkH!cKO|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.typeOfSignature("KM?O|H[gmq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KM?O|H[gmq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("~m_~$_D<~k-`4Q6W", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getfield");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(15, byteArray0.length);
      assertEquals("iand", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteSequence2;
      objectArray0[1] = (Object) byteSequence2;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) byteSequence0;
      Utility.printArray(objectArray0);
      boolean boolean0 = Utility.isSet(0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("\t\t#");
      boolean boolean0 = true;
      int int0 = 151;
      Utility.setBit(1111, 151);
      try { 
        Utility.typeOfSignature(":V^NoDOZ6M&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :V^NoDOZ6M&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "$3!Iw)6_!YkY2";
      try { 
        Utility.typeOfSignature("$3!Iw)6_!YkY2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $3!Iw)6_!YkY2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.setBit(271, 237);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 95;
      Utility.setBit(95, 3100);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2d");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("jsr");
      assertEquals("jsr", string0);
      
      String string1 = Utility.signatureToString("BootstrapMethods", true);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("if_acmpne\t\t#-22874", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      Utility.isJavaIdentifierPart('c');
      try { 
        Utility.methodSignatureToString("Z", "Kku2uI", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (-475));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.setBit(310, 310);
      Utility.clearBit(0, 0);
      boolean boolean0 = false;
      Utility.format(4194614, 0, false, '3');
      Utility.setBit(146, 146);
      Utility.clearBit(0, 2983);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("4194614");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4194614
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.accessToString(194, true);
      assertEquals("private volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("QZJ-srP&E~eZ]$4_`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QZJ-srP&E~eZ]$4_`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.compactClassName("Es@3|G]", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Es@3|G]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Es@3|G]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*O^x0+ba[A!QvL");
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1))");
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("null", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), 124);
      assertEquals("0:    ladd\n1:    ifnonnull\t\t#26592\n", string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)60;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.getSignature("nop");
      assertEquals("Lnop;", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L+jYA_'eq?j)_)T7l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L+jYA_'eq?j)_)T7l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.convertString("line.separator");
      Utility.searchOpcode("line.separator");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("line.separator");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("E':m#d_67", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E':m#d_67'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "*O^x0+ba[A!QvL";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(20);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(246, (byte)112);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.getSignature(",:bt");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("w$xkB_$Ru4$3ff", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("O{De", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("4f 7b 44 65", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-527), (-486));
      assertEquals("0:    iastore\n1:    lshr\n2:    fstore_1\n3:    lsub\n", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup_x1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-75);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-783), 151);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x2
         // 1:    ifeq\t\t#-16794
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-73);
      try { 
        Utility.typeOfSignature("O7.y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O7.y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.accessToString((int) (byte)30);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte)95;
      Utility.encode(byteArray1, false);
      Utility.setBit((byte)30, 72);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$ca_";
      byteSequence0.mark((byte) (-113));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("$ca_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ca_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char char0 = 'y';
      Utility.replace("u*qa1~&:", "u*qa1~&:", "u*qa1~&:");
      String string0 = "$o5\"B,?b4|V<";
      Utility.decode("$o5\"B,?b4|V<", false);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("KS2y\u0004< 1Abc=%", "KS2y\u0004< 1Abc=%", "KS2y\u0004< 1Abc=%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KS2y\u0004< 1Abc=%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.setBit(95, 3100);
      ConstantClass constantClass0 = new ConstantClass(8);
      constantClass0.setNameIndex((-857));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<qJx>![/;", "<qJx>![/;", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <qJx>![/;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-85));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("?PdnY [hY\"^a[Ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[hY\"^a[Ke
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Utility.setBit((byte) (-19), 2104);
      assertEquals((-19), int0);
      
      Utility.compactClassName("L;V", false);
      boolean boolean0 = Utility.isSet((-541), 8192);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("L;V", false);
      assertEquals("L;V", string0);
      
      String string1 = Utility.getSignature("L;V");
      assertEquals("LL;V;", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.convertString("line.separator");
      assertEquals("line.separator", string0);
      
      String string1 = Utility.accessToString(125, false);
      assertEquals("public protected static final synchronized volatile", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte)53;
      byteArray1[4] = (byte) (-110);
      byteArray1[5] = (byte) (-110);
      byteArray1[6] = (byte) (-110);
      byteArray1[7] = (byte)53;
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-110), (int) (byte)53);
      assertEquals("0:    saload\n1:    i2c\n2:    <illegal opcode>\n3:    saload\n4:    i2c\n5:    i2c\n6:    i2c\n7:    saload\n", string2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[11];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 107, (-2174));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RAMQNg6`h?mdYx$.", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.getSignature("RAMQNg6`h?mdYx$.");
      assertEquals("LRAMQNg6`h?mdYx$/;", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(15, byteArray0.length);
      assertEquals("fastore", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(11, byteArray0.length);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*O^x0+ba[A!QvL");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-85);
      byteArray0[5] = (byte) (-100);
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.convertString("Ljava/lang/Object");
      assertEquals("Ljava/lang/Object", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.classOrInterface((byte)0);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-368);
      Utility.setBit((-368), (-368));
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[7] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(2734);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.accessToString(0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "compiled from\t\t";
      stringArray0[1] = "<qJx>![/;";
      stringArray0[2] = "<qJx>![/;";
      stringArray0[3] = "<qJx>![/;";
      stringArray0[4] = "compiled from\t\t";
      stringArray0[5] = ")zgf-";
      stringArray0[6] = ")zgf-";
      stringArray0[7] = "<qJx>![/;";
      stringArray0[8] = "<qJx>![/;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("<qJx>![/;", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[/;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-46);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-46), (int) (byte)22, true);
      assertEquals("0:    lload\t\t%210\n", string1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = false;
      Utility.replace("invokedynamic", "invokedynamic", "p");
      try { 
        Utility.decode("double", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2887);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit(151, (byte)27);
      String string0 = "Y";
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockFile mockFile0 = new MockFile("Invalid method signature: ", "Invalid method signature: ");
      MockFile mockFile1 = new MockFile(mockFile0, "Illegal type: ");
      mockFile1.setReadable(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Illegal type: ";
      objectArray0[1] = (Object) (byte)0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) mockFile1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) null;
      Object object3 = new Object();
      objectArray0[7] = object3;
      objectArray0[8] = (Object) (byte)0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("4'g RX5v%QY@~tk$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4'g RX5v%QY@~tk$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = Utility.searchOpcode("LpS:\rTh{*o@}nlA");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.convertString("LpS:\rTh{*o@}nlA");
      assertEquals("LpS:\\rTh{*o@}nlA", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)3;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0d 6b 85 06 29 3c 03", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "LpS:\rTh{*o@}nlA";
      objectArray0[1] = (Object) (byte) (-123);
      objectArray0[2] = (Object) "0d 6b 85 06 29 3c 03";
      objectArray0[3] = (Object) (byte)3;
      String string2 = Utility.printArray(objectArray0, false);
      assertEquals("LpS:\rTh{*o@}nlA, -123, 0d 6b 85 06 29 3c 03, 3", string2);
      
      byte byte0 = Utility.typeOfSignature("SimpleElementValue doesnt know how to write out type ");
      assertEquals((byte)9, byte0);
      
      String string3 = Utility.compactClassName("org.apache.bcel.util.ByteSequence$ByteArrayStream");
      assertEquals("org.apache.bcel.util.ByteSequence$ByteArrayStream", string3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("iconst_0", 34, false, '(');
      Utility.setBit(34, 16384);
      Utility.typeOfSignature("DN/`SA&.Gzw{Xo`$ck");
      Utility.compactClassName("DN/`SA&.Gzw{Xo`$ck");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence0.readFully(byteArray0);
      try { 
        byteSequence0.readUnsignedShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-86), (-1805));
      String string0 = "3?u=EK3{gN";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3?u=EK3{gN");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-74);
      Utility.encode(byteArray0, false);
      String string0 = Utility.signatureToString("D{aIF");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("2D;33rZ#uZ(bfR", false);
      String string0 = Utility.compactClassName("ew", "I", false);
      assertEquals("ew", string0);
      
      String string1 = Utility.accessToString(1173);
      assertEquals("public protected final transient abstract", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("2D$3b33rZ$puZ$ubfR", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0K!BEI79`";
      stringArray0[1] = "ew";
      stringArray0[2] = "Warning: Padding byte != 0 in ";
      stringArray0[3] = "Warning: Padding byte != 0 in ";
      stringArray0[4] = "2D;33rZ#uZ(bfR";
      stringArray0[5] = "Warning: Padding byte != 0 in ";
      String string3 = Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", stringArray0);
      assertEquals("(L0K!BEI79`;Lew;LWarning:;LWarning:;L2D;33rZ#uZ(bfR;LWarning:;)LWarning:;", string3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.setBit(68, (-2263));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("G78]5T+*PIuq[@hv01 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G78]5T+*PIuq[@hv01 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("float", "M}G_[HtZ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("UNKNOWN (", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UNKNOWN ('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1132, 2210);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantLong constantLong0 = new ConstantLong((byte) (-86));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType0.setSignatureIndex((-472));
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType1);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 43658. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("%vVe%", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fload_3", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.convertString("Exceptions: ");
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("U6gZ%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U6gZ%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("$o5\"B,?b4|V<", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$o5\"B,?b4|V<");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[2] = (Constant) constantUtf8_0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-1598), (-1598), false, 'A');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-56);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-1598");
      byteArray0[5] = (byte) (-75);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("-1598", "-1598");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"-1598\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)72;
      byteArray1[6] = (byte)72;
      byteArray1[7] = (byte)72;
      byteArray1[8] = (byte)72;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence3.skip((-26L));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)72, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.accessToString(213, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("iastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.getSignature("void");
      try { 
        Utility.typeOfSignature("NRf<N0d)\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NRf<N0d)\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.convertString("Ljava/lang/Object");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName("breakpoint", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-20), (int) (byte)25);
      try { 
        Utility.typeOfSignature("X-0;&|={)sKPq^(u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X-0;&|={)sKPq^(u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.compactClassName("castore");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "0dst", "-::Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = null;
      String string1 = "xs.oQ{SKga\\f";
      String string2 = "agXNN.F|0KVeL";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "xs.oQ{SKga\f", "agXNN.F|0KVeL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-19);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 745, (int) (byte) (-19));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object object0 = new Object();
      ConstantClass constantClass0 = new ConstantClass(36);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "boolean", "ns", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-81);
      byteArray0[3] = (byte) (-63);
      byteArray0[6] = (byte) (-72);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3586), (-209), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.replace(";", ")", (String) null);
      String string0 = "7,P.%";
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[7] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((byte)1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NRf<N0d)\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NRf<N0d)\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.compactClassName(".-!vFx*(4=", "jsr", true);
      try { 
        Utility.typeOfSignature(".-!vFx*(4=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .-!vFx*(4=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("?w=MQ!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3273));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(59, 59);
      constantArray0[2] = (Constant) constantNameAndType0;
      Constant constant0 = constantArray0[2].copy();
      constantArray0[3] = constant0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1258), 128);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("dstore_2");
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(59, (-3273), (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("$3fw$3dMQ$nsd$A$5e9$5c", "", "j4", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $3fw$3dMQ$nsd$A$5e9$5c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(18);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 91, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "K'e{Uf";
      try { 
        Utility.typeOfSignature("K'e{Uf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K'e{Uf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-14);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte) (-14));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    nop
         // 2:    lconst_1
         // 3:    aconst_null
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.decode("1=Mp!sd$@^9", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Utility.fillup("zfyJ:'n|=w0_\"t", (-2003), false, '\'');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantClass constantClass0 = new ConstantClass((-1223));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string0 = Utility.getSignature("idiv");
      assertEquals("Lidiv;", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      String string0 = Utility.getSignature("float");
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "boolean";
      String string0 = Utility.methodTypeToSignature("boolean", stringArray0);
      assertEquals("(Z)Z", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("(Z)Z");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2887);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = false;
      Utility.compactClassName("8L>-#F[.W");
      // Undeclared exception!
      Utility.fillup("V", 24584, false, 'b');
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore\t\t%61", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer(1501);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("daload", string0);
      assertEquals(11, byteArray0.length);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("if_icmplt", stringArray0);
      assertEquals("()Lif_icmplt;", string1);
      
      String string2 = Utility.getSignature("daload");
      assertEquals("Ldaload;", string2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.accessToString(0);
      Utility.decode("", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('C');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      Utility.printArray(printWriter1, objectArray0);
      assertNotSame(printWriter1, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)91;
      byteArray0[1] = (byte) (-89);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-60);
      byteArray1[1] = (byte) (-27);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)126, 86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ConstantClass constantClass0 = new ConstantClass(1838);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "Invalid signature: ";
      Utility.signatureToString("Invalid signature: ", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pi(w:of");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pi(w:of'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("instanceof", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("instanceof");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 81, false, '2');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.convertString("GS78]5T+*PIuq[@hv01 ");
      assertEquals("GS78]5T+*PIuq[@hv01 ", string0);
      
      String string1 = Utility.accessToString(235, true);
      assertEquals("public private static volatile transient", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.setBit((-2003), (-2003));
      String string0 = "T$";
      Utility.compactClassName("T$", false);
      String string1 = "P7ce,wXGO+W.gFx9=5";
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.convertString("compiled from\t\t");
      ConstantClass constantClass0 = new ConstantClass(529);
      ConstantClass constantClass1 = new ConstantClass(8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2004), true);
      assertEquals("0:    nop\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$o5\"B,?b4|V<", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Utility.convertString("compiled from\t\t");
      assertEquals("compiled from\t\t", string0);
      
      ConstantClass constantClass0 = new ConstantClass(529);
      ConstantClass constantClass1 = new ConstantClass(8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-123);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 1473);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool2, true);
      String string1 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.clearBit(882, 882);
      Utility.isSet(882, 882);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("7,P.%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7,P.%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "1=Mp!sd$@^9\\";
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      byteSequence1.readUnsignedByte();
      byteSequence1.readUnsignedShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte) (-97);
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-16);
      byte byte1 = (byte) (-23);
      byteArray1[3] = (byte) (-23);
      try { 
        Utility.typeOfSignature("1=Mp!sd$@^9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1=Mp!sd$@^9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)119, (byte)43, (byte)107, (byte)66, (byte)95, (byte)17, (byte)117, (byte)52, (byte)63, (byte)102}, byteArray0);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.compactClassName("}RBWQmS*/5wF+0e9", true);
      assertEquals("}RBWQmS*.5wF+0e9", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "}RBWQmS*/5wF+0e9";
      objectArray0[1] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[2] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[3] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[4] = (Object) "}RBWQmS*/5wF+0e9";
      objectArray0[6] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[7] = (Object) "}RBWQmS*/5wF+0e9";
      objectArray0[8] = (Object) "}RBWQmS*/5wF+0e9";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("}RBWQmS*/5wF+0e9, }RBWQmS*.5wF+0e9, }RBWQmS*.5wF+0e9, }RBWQmS*.5wF+0e9, }RBWQmS*/5wF+0e9, null, }RBWQmS*.5wF+0e9, }RBWQmS*/5wF+0e9, }RBWQmS*/5wF+0e9", string1);
      
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"}RBWQmS*/5wF+0e9\", \"}RBWQmS*.5wF+0e9\", \"}RBWQmS*.5wF+0e9\", \"}RBWQmS*.5wF+0e9\", \"}RBWQmS*/5wF+0e9\", null, \"}RBWQmS*.5wF+0e9\", \"}RBWQmS*/5wF+0e9\", \"}RBWQmS*/5wF+0e9\"}", string2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.accessToString(4711, true);
      String string0 = "";
      Utility.convertString("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.classOrInterface((-3733));
      assertEquals("class", string0);
      
      String string1 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte", "FULL", "uV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.convertString("P6OE");
      // Undeclared exception!
      try { 
        Utility.signatureToString("P6OE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P6OE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.getSignature("From\tTo\tHandler\tType\n");
      assertEquals("LFrom;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      byteSequence0.reset();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#0", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.replace("L;V", "L;V", "L;V");
      assertEquals("L;V", string0);
      
      byte byte0 = Utility.typeOfSignature("L;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)44;
      byteArray2[1] = (byte)44;
      byteArray2[2] = (byte)44;
      ByteSequence byteSequence3 = new ByteSequence(byteArray2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertArrayEquals(new byte[] {(byte)119, (byte)43, (byte)107, (byte)66, (byte)95, (byte)17, (byte)117, (byte)52, (byte)63, (byte)102}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ny'IbMG?Uf*?%vm\"Q4l", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string0);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.convertString("Exceptions: ");
      try { 
        Utility.typeOfSignature("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.setBit((-368), 3100);
      Utility.compactClassName("T$", false);
      try { 
        Utility.methodSignatureReturnType("T$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(61, 5743);
      String string0 = "";
      String string1 = "uRZI9njVg9l";
      try { 
        Utility.methodSignatureReturnType("uRZI9njVg9l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `uRZI9njVg9l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.classOrInterface(1084);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "}RBWQmS*/5wF+0e9";
      String string1 = "SAME_LOCALS_1_STACK_EXTENDED";
      MockFile mockFile0 = new MockFile("}RBWQmS*/5wF+0e9", "SAME_LOCALS_1_STACK_EXTENDED");
      File file0 = MockFile.createTempFile("SAME_LOCALS_1_STACK_EXTENDED", "wide", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((byte)31, 62);
      String string2 = "ifnull";
      boolean boolean0 = false;
      Utility.compactClassName("invokedynamic", false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SAME_LOCALS_1_STACK_EXTENDED", "java.lang.Object");
      File file0 = MockFile.createTempFile("java.lang.Object", "java.lang.Object", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[2HtBS9}7];$qj`an#o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2HtBS9}7];$qj`an#o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifne\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.compactClassName("athrow");
      File file0 = MockFile.createTempFile("athrow", "CHgLF{e&fu ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) "CHgLF{e&fu ";
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "CHgLF{e&fu ";
      mockPrintStream0.print('K');
      objectArray0[5] = (Object) "athrow";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("1$7f$3dMp$nsd$A$5e9", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.fillup("", (-610), true, ' ');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "8_=0:jol";
      try { 
        Utility.typeOfSignature("8_=0:jol");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8_=0:jol
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = 93;
      Utility.accessToString(93);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = Utility.setBit((-368), (-368));
      assertEquals((-368), int0);
      
      String string0 = Utility.compactClassName("aload_0", "aload_0", true);
      assertEquals("", string0);
      
      String string1 = Utility.accessToString(112, true);
      assertEquals("final volatile", string1);
      
      String string2 = Utility.getSignature("Invalid type: ");
      assertEquals("LInvalid;", string2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}RBWQmS*/5wF+0e9";
      stringArray0[1] = "(8PnUjm${HhaA1lW}v,";
      stringArray0[2] = "}RBWQmS*/5wF+0e9";
      stringArray0[3] = "FLdgj~Dv!+[*z/[&Fq";
      stringArray0[4] = "}RBWQmS*/5wF+0e9";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("FLdgj~Dv!+[*z/[&Fq", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[*z/[&Fq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[2] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-101));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iflt\t\t#201", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte)72);
      assertEquals("3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.clearBit(1554, 792);
      Utility.printArray((Object[]) null, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.replace("ifnonnull\t\t#-14393", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.getSignature("L;V");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iflt\t\t#-14076", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = Utility.setBit(239, 239);
      assertEquals(33007, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "Kcuo83JZ9tB.'u,$d]";
      // Undeclared exception!
      try { 
        Utility.decode("Kcuo83JZ9tB.'u,$d]", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rf-g|e0}HB5,");
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-73);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2d");
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(")\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.setBit((-368), 3100);
      ConstantClass constantClass0 = new ConstantClass(8);
      constantClass0.clone();
      constantClass0.setNameIndex((-857));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.convertString("(start_pc = ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(start_pc = ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      try { 
        Utility.methodSignatureArgumentTypes("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid sigQaBure: ";
      stringArray0[1] = "Invalid sigQaBure: ";
      stringArray0[2] = "Invalid sigQaBure: ";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.decode("iDaFsF.`%yg", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ireturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.setBit(239, 239);
      Utility.getSignature("L;V");
      Utility.signatureToString("LL;V;");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      Utility.typeOfSignature("L;V");
      Utility.methodSignatureReturnType("L;V");
      Utility.fillup("LL;V;", 24, false, ')');
      Utility.accessToString(662, true);
      Utility.replace("9b%bjR+Mx(R", "short", "/>:9*3jHT?/");
      Utility.methodTypeToSignature("(ZGU5vOgR]L!]W", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("edh)v`", "9b%bjR+Mx(R", "Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: edh)v`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "long";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      String string1 = "$Rm0y\"9KaP";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("long", "$Rm0y\"9KaP", "\"QAE", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.convertString("compiled from\t\t");
      ConstantClass constantClass0 = new ConstantClass(529);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), (-354), false);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-)~x.Y6Zz)'PIN";
      stringArray0[1] = "LWarning:;V";
      stringArray0[2] = "LWarning:;V";
      stringArray0[3] = "-)~x.Y6Zz)'PIN";
      stringArray0[4] = "boolean";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[5] = "-)~x.Y6Zz)'PIN";
      stringArray0[6] = "boolean";
      Utility.methodTypeToSignature("LWarning:;V", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(L-)~x/Y6Zz)'PIN;LLWarning:;V;LLWarning:;V;L-)~x/Y6Zz)'PIN;ZL-)~x/Y6Zz)'PIN;Z)LLWarning:;V;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;LLWarning:;V;L-)~x/Y6Zz)'PIN;ZL-)~x/Y6Zz)'PIN;Z)LLWarning:;V;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.setBit((-368), 3124);
      ConstantClass constantClass0 = new ConstantClass(8);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`l<~THxl@y^";
      stringArray0[1] = ".f'kV(X";
      stringArray0[2] = null;
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.fillup("!v}h", (-250670452), false, 'U');
      byte byte0 = (byte)91;
      byte byte1 = (byte)30;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byte byte2 = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((-312));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.getSignature("From\tTo\tHandler\tType\n");
      assertEquals("LFrom;", string0);
      
      byte byte0 = Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dstore\t\t%56", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.methodSignatureReturnType("SourceFile: ", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.signatureToString("D,%]&#r");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, (-218));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[23] = (byte)91;
      byteArray0[2] = (byte)91;
      Utility.clearBit((byte)0, (byte)0);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("jsr\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.setBit((byte) (-19), (byte) (-19));
      Utility.compactClassName("L;V", false);
      Utility.methodSignatureReturnType("L;V", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "2byNKrUg9Wm}&l@", ")", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "-)~x.Y6Zz)'PIN";
      try { 
        Utility.typeOfSignature("-)~x.Y6Zz)'PIN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -)~x.Y6Zz)'PIN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-83));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode(":%ZJ5/zPw*Q9>", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("astore\t\t%37");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore\t\t%37
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = 0;
      Utility.setBit(0, 0);
      String string0 = "System";
      Utility.signatureToString("System");
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = Utility.setBit(310, 310);
      assertEquals(4194614, int0);
      
      int int1 = Utility.clearBit(0, 0);
      assertEquals(0, int1);
      
      String string0 = Utility.format(4194614, 0, false, '3');
      assertEquals("4194614", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$c6$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.getSignature("4194614");
      assertEquals("L4194614;", string2);
      
      boolean boolean0 = Utility.isSet(1, (-929));
      assertFalse(boolean0);
      
      Utility.compactClassName(">Mu1F,P#Zc", false);
      Utility.getSignature(" ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ">Mu1F,P#Zc";
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) ">Mu1F,P#Zc";
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) ">Mu1F,P#Zc";
      objectArray0[6] = (Object) " ";
      objectArray0[7] = (Object) " ";
      objectArray0[8] = (Object) ">Mu1F,P#Zc";
      String string3 = Utility.printArray(objectArray0, true);
      assertEquals("{>Mu1F,P#Zc, 0, 0, >Mu1F,P#Zc, 0, >Mu1F,P#Zc,  ,  , >Mu1F,P#Zc}", string3);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.convertString("Exceptions: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exceptions: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, 192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      ConstantString constantString0 = new ConstantString((byte)74);
      ConstantString constantString1 = new ConstantString(399);
      ConstantString constantString2 = new ConstantString(constantString1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)74, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "tfwNc`jg:(^ATe{RJ,";
      byte[] byteArray0 = Utility.decode("tfwNc`jg:(^ATe{RJ,", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)91;
      String string0 = Utility.accessToString((int) (byte)91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("J!^%E#5/Zd", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("4a 21 5e 25 45 23 35 2f 5a 64", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("~m_~$_D<~k-`4Q6W", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("getfield", "swap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"swap\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "!_\"C2)TnqJ??~)";
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[2HtBS9}7];$qj`an#o";
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("[2HtBS9}7];$qj`an#o", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-81);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("7,P.%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7,P.%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.convertString("G78]5T+*PIuq[@hv01 ");
      Utility.isJavaIdentifierPart(';');
      Utility.compactClassName("org.apache.bcel.classfile.Utility$1");
      Utility.isJavaIdentifierPart(';');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)61;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(11, byteArray0.length);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("instanceof", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.convertString("Exceptions: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exceptions: ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("tJ}?iq,zL^k1so7", (String[]) null);
      assertEquals("()LtJ}?iq,zL^k1so7;", string0);
      
      Utility.methodSignatureArgumentTypes("()LtJ}?iq,zL^k1so7;");
      byte byte0 = Utility.typeOfSignature("V1");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)4);
      assertEquals("4:    fneg\n", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-)~x.Y6Zz)'PIN";
      stringArray0[1] = "L$o5\"B,?b4|V<;V";
      stringArray0[2] = "LWarning:;V";
      stringArray0[3] = "-)~x.Y6Zz)'PIN";
      stringArray0[4] = "boolean";
      stringArray0[5] = "-)~x.Y6Zz)'PIN";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmplt\t\t#-10345", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte byte0 = (byte) (-70);
      byte byte1 = (byte) (-86);
      byte byte2 = (byte)105;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = (-368);
      Utility.setBit((-368), (-368));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.classOrInterface((byte) (-74));
      Utility.getSignature("interface");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Invalid method signature: ", "-i-jbfFu=ArY|o)", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(220);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        Utility.methodSignatureToString("\"QAE", "", "\tdefault = ", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"QAE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.printArray((Object[]) null);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("|bWynf^Nu.m.\"r{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |bWynf^Nu.m.\"r{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2287, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = Utility.printArray((Object[]) stringArray0, false);
      assertEquals("null", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, false, true);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("2D;33rZ#uZ(bfR", false);
      Utility.printArray((Object[]) null, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-787), 191);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)114;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a7 5c 86 10 72", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$o5\"B,?b4|V<", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.equals(byteArray0, byteArray0);
      String string1 = Utility.compactClassName("$o5\"B,?b4|V<");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("~m_~$_D<~k-`4Q6W", false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2391, 2391);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("U ", "a>2", true);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.signatureToString("V", false);
      Utility.classOrInterface((-887));
      try { 
        Utility.methodSignatureReturnType("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "interface";
      stringArray0[2] = "interface";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byte[] byteArray1 = Utility.decode("'d1p*2K'<)+.pcI", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_1", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('H');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)53;
      byteArray0[3] = (byte)53;
      byte byte2 = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-55);
      MockFile mockFile0 = new MockFile("java.lang.Object@6356bc39, java.lang.Object@5d7e94f2, java.lang.Object@2c064bd5");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "java.lang.Object@6356bc39, java.lang.Object@5d7e94f2, java.lang.Object@2c064bd5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"java.lang.Object@6356bc39, java.lang.Object@5d7e94f2, java.lang.Object@2c064bd5\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.getSignature("null");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(160);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_icmpgt\t\t#16687", "if_icmpgt\t\t#16687", "if_icmpgt\t\t#16687", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt\t\t#16687
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("$o5\"B,?b4|V<", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$o5\"B,?b4|V<");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3317), (-3317));
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass(181);
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-33), 91);
      assertEquals("0:    fload_0\n1:    saload\n2:    fload_0\n3:    lstore_3\n4:    aload_2\n5:    lstore_0\n6:    fadd\n7:    caload\n8:    iushr\n9:    sastore\n10:   istore_1\n", string0);
      
      String string1 = Utility.getSignature("$o5\"B,?b4|V<");
      assertEquals("L$o5\"B,?b4|V<;", string1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[2HtBS9}7];$qj`an#o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2HtBS9}7];$qj`an#o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.fillup("s;*Z#oV6u]", 93, false, 'y');
      Utility.setBit(93, (byte)91);
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.getSignature("L;V");
      Utility.setBit(34, 239);
      Utility.compactClassName("", false);
      try { 
        Utility.methodSignatureReturnType("lookupswitch", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lookupswitch'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "3Yp_0$bf)9";
      try { 
        Utility.typeOfSignature("3Yp_0$bf)9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Yp_0$bf)9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.clearBit(16, 16);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p");
      Utility.printArray(objectArray0, false, true);
      Utility.fillup("\"java.lang.Object@331b361\", \"java.lang.Object@744e55bd\", \"java.lang.Object@4ce0d654\", \"java.lang.Object@7c4f4a53\", \"java.lang.Object@726b5400\"", (-2410), false, 'k');
      Utility.setBit(541, 541);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@331b361\", \"java.lang.Object@744e55bd\", \"java.lang.Object@4ce0d654\", \"java.lang.Object@7c4f4a53\", \"java.lang.Object@726b5400\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@331b361\", \"java.lang.Object@744e55bd\", \"java.lang.Object@4ce0d654\", \"java.lang.Object@7c4f4a53\", \"java.lang.Object@726b5400\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G78]5T+*PIuq[@hv01 ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G78]5T+*PIuq[@hv01 '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.compactClassName("\tdefault = ", "iaload", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-128);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(1024);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)107);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.convertString("line.separator");
      Utility.searchOpcode("line.separator");
      // Undeclared exception!
      try { 
        Utility.signatureToString("M@K}' ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M@K}' '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.available();
      byteSequence2.readByte();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(102);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.setBit(5, (-2003));
      Utility.getSignature("monitorexit");
      String string0 = Utility.getSignature("yA=s^p<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-99);
      Utility.encode(byteArray0, false);
      String string1 = Utility.replace("", "Lmonitorexit;", "TH_");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = Utility.compactClassName(".", "", true);
      assertEquals(".", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)49;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "HiVT7_H?c= S{\"8";
      try { 
        Utility.typeOfSignature("HiVT7_H?c= S{\"8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HiVT7_H?c= S{\"8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.convertString("compiled from\t\t");
      ConstantClass constantClass0 = new ConstantClass(529);
      ConstantClass constantClass1 = new ConstantClass(8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 2234, (-940));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = "[]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-11);
      Utility.compactClassName("[]", true);
      Utility.typeOfSignature("[]");
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[6] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 36);
      assertEquals("0:    saload\n1:    nop\n2:    saload\n3:    nop\n4:    nop\n5:    saload\n6:    saload\n7:    iconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("5`]+MZ0e$", false);
      assertArrayEquals(new byte[] {(byte)53, (byte)96, (byte)93, (byte)43, (byte)77, (byte)90, (byte)48, (byte)101}, byteArray0);
      
      short short0 = Utility.searchOpcode("5`]+MZ0e$");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "<qJx>![/;";
      String[] stringArray0 = new String[9];
      stringArray0[8] = "compiled from\t\t";
      stringArray0[1] = "<qJx>![/;";
      stringArray0[2] = "<qJx>![/;";
      stringArray0[3] = "<qJx>![/;";
      stringArray0[5] = ")zgf-";
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes(stringArray0[0], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("", "", "\tdefault = ", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('5');
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("{org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa, org.evosuite.runtime.testdata.FileSystemHandling@5d77e3fa}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = "\t<";
      Utility.compactClassName("\t<");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\t<";
      objectArray0[1] = (Object) "\t<";
      objectArray0[2] = (Object) "\t<";
      objectArray0[3] = (Object) "\t<";
      objectArray0[4] = (Object) "\t<";
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-114);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byteSequence1.skip((byte) (-74));
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("4'g RX5v%QY@~tk$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, 43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-81);
      byteSequence0.skipBytes(152);
      objectArray0[1] = (Object) (byte)73;
      objectArray0[2] = (Object) (byte) (-63);
      objectArray0[3] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("EC:R-Ap=-SEXi4CGZhg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EC:R-Ap=-SEXi4CGZhg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantUtf8.getCachedInstance("P&OE");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence4, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = Utility.compactClassName("org.apache.commons.io.IOCase", "org.apache.commons.io.IOCase", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("m!4ae/o", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("caload", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.format((short)27937, (-4257), false, 'T');
      assertEquals("27937", string1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.getSignature("vid");
      Utility.typeOfSignature("B`0pG]p");
      try { 
        Utility.methodSignatureReturnType("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.getSignature("unknown");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wq<Q1YYlPKPp_B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wq<Q1YYlPKPp_B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = Utility.classOrInterface((-646));
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.convertString("Exceptions: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    wide\t(wide)
         // 1:    dreturn
         // 2:    iload_1
         // 3:    iconst_m1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.decode("w+kB_$Ru4?f", false);
      Utility.setBit(28, 5);
      Utility.getSignature("monitorexit");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "L;V";
      objectArray0[1] = (Object) "Lmonitorexit;";
      objectArray0[2] = (Object) "L;V";
      objectArray0[3] = (Object) "L;V";
      objectArray0[4] = (Object) "w+kB_$Ru4?f";
      objectArray0[5] = (Object) "monitorexit";
      Utility.compactClassName("{VXE6tsH", true);
      Utility.getSignature("L;V");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'6ILWj");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Object[] objectArray0 = new Object[1];
          Object object0 = new Object();
          objectArray0[0] = object0;
          Utility.printArray(objectArray0);
          boolean boolean0 = false;
          Utility.printArray(objectArray0, false, true);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor118.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("$o5\"B,?b4|V<", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("multianewarray", "compiled from\t\t", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.codeToString(byteSequence1, constantPool0);
      try { 
        Utility.methodSignatureReturnType("instanceof", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("instanceof", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lmul", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sipush\t\t-6940", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$o5\"B,?b4|V<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(34, int0);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = Utility.setBit(310, 310);
      assertEquals(4194614, int0);
      
      int int1 = Utility.clearBit(0, 0);
      assertEquals(0, int1);
      
      String string0 = Utility.format(4194614, 0, false, '3');
      assertEquals("4194614", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.getSignature("4194614");
      String string1 = Utility.getSignature("tableswitch");
      assertEquals("Ltableswitch;", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$c6$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("c6 00 00 00 00 00 00 00", string3);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = " ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      boolean boolean0 = false;
      Utility.convertString("]T[");
      Utility.setBit((byte)91, (-1412));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeInterface");
      try { 
        Utility.typeOfSignature("5_z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5_z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("tfwNc`jg:(^ATe{RJ,", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("ineg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ineg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-23);
      byteArray1[4] = (byte) (-94);
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)71;
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      byteSequence2.read();
      Utility.codeToString(byteSequence4, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 509, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte byte0 = (byte)44;
      byte byte1 = (byte)96;
      byte byte2 = (byte)117;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      Utility.format(34, 16384, false, 't');
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.convertString("RAMQNg6`h?mdYx$.");
      assertEquals("RAMQNg6`h?mdYx$.", string0);
      
      byte byte0 = Utility.typeOfSignature("Could not create the directory ");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.fillup("short", (byte)5, true, '<');
      assertEquals("short", string1);
      
      String string2 = Utility.compactClassName("c3UZts4z!|a", true);
      assertEquals("c3UZts4z!|a", string2);
      
      String string3 = Utility.classOrInterface((byte)5);
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.convertString("RAMQNg6`h?mdYx$.");
      Utility.isSet((-1022), (-1022));
      String string0 = "Could not create the directory ";
      try { 
        Utility.typeOfSignature("RAMQNg6`h?mdYx$.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RAMQNg6`h?mdYx$.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = "compiled from\t\t";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ")zgf-";
      objectArray0[1] = (Object) "compiled from\t\t";
      objectArray0[2] = (Object) ")zgf-";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string1 = "Invalid Stack map table tag: ";
      try { 
        Utility.typeOfSignature("'vGN-!!EF^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'vGN-!!EF^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("org.apache.bcel.classfile.Utility$JavaWriter", (String) null, ">\t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("if_icmpgt\t\t#2", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aload_3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("0MhFw!dK'>dkH!cKO|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0MhFw!dK'>dkH!cKO|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("3gz3,r%DRr=qJgq", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      byteSequence1.readChar();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "instanceof";
      stringArray0[1] = "3gz3,r%DRr=qJgq";
      stringArray0[2] = "instanceof";
      stringArray0[3] = "instanceof";
      stringArray0[4] = "3gz3,r%DRr=qJgq";
      stringArray0[5] = "instanceof";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("instanceof", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      String string0 = Utility.fillup("8 S1Qw", 2137, true, 'n');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      int int0 = 92;
      ConstantClass constantClass0 = new ConstantClass(92);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantString0;
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8 S1Qwnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2887);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("bipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = false;
      String string0 = "(";
      try { 
        Utility.methodSignatureToString("(", "(", "h)+u8VBBYQu@HNWy", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("77 2b 6b 42 5f 11 75 34 3f 66", string0);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(4000.159F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-879), (-879));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("77 2b 6b 42 5f 11 75 34 3f 66");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `77 2b 6b 42 5f 11 75 34 3f 66'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("aload_0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1877), (int) (byte)95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-51);
      byteArray0[7] = (byte) (-117);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RAMQNg6`h?mdYx$.", false);
      int int0 = Utility.setBit(5, 80);
      assertEquals(65541, int0);
      
      String string0 = Utility.getSignature("dstore");
      assertEquals("Ldstore;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dastore", string1);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(97, (-15));
      String string0 = Utility.getSignature("L;V");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) "L;V";
      objectArray0[2] = (Object) "LL;V;";
      objectArray0[3] = (Object) "L;V";
      objectArray0[4] = (Object) "LL;V;";
      objectArray0[5] = (Object) "L;V";
      objectArray0[6] = (Object) "L;V";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.isSet(10, (byte)96);
      boolean boolean1 = Utility.isJavaIdentifierPart('0');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("lconst_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lconst_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = Utility.convertString(":O^JZeMgi.u{OuO");
      assertEquals(":O^JZeMgi.u{OuO", string0);
      
      Utility.compactClassName("I", "if_acmpne", false);
      byte byte0 = Utility.typeOfSignature("FIh/n#aU`PQ?0!1\"O");
      assertEquals((byte)6, byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0, false);
      String string1 = Utility.compactClassName("FIh/n#aU`PQ?0!1\"O");
      assertEquals("FIh.n#aU`PQ?0!1\"O", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = Utility.setBit((-368), 3100);
      assertEquals((-368), int0);
      
      byte byte0 = Utility.typeOfSignature("ZJ5&q5b1znP5");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("tfwNc`jg:(^ATe{RJ,", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-92);
      byteArray1[2] = (byte) (-95);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("ineg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ineg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)98;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "The list of suffixes must not be null", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("java.lang.StringBuffer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.StringBuffer
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.setBit(0, 0);
      String string0 = "";
      String string1 = null;
      String string2 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Object object0 = new Object();
      Utility.decode("xaH>g~`*NQ}%Cq", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "enum");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte) (-96);
      byteArray1[6] = (byte) (-71);
      byteArray1[7] = (byte) (-71);
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Utility.format(10, 442, true, 'P');
      MockFile mockFile0 = new MockFile
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "10PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "10PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Utility.accessToString((-4248));
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.accessToString(0);
      Utility.decode("", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",2' Iinj)@nrk>a:u";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "jRGr]H+eI6V";
      stringArray0[5] = "S.q &M-'BD";
      Utility.methodTypeToSignature("", stringArray0);
      byte byte0 = (byte)28;
      try { 
        Utility.methodSignatureArgumentTypes("Bwj9{alr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Bwj9{alr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (-1014));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) "fload_2";
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) byteSequence0;
      objectArray0[4] = (Object) (byte) (-93);
      objectArray0[5] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      int int0 = Utility.clearBit(2546, 2546);
      assertEquals(2546, int0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Utility.convertString("G78]5T+*PIuq[@hv01 ");
      Utility.compactClassName("G78]5T+*PIuq[@hv01 ", "I", true);
      try { 
        Utility.typeOfSignature("G78]5T+*PIuq[@hv01 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G78]5T+*PIuq[@hv01 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = Utility.convertString("compiled from\t\t");
      ConstantClass constantClass0 = new ConstantClass(529);
      ConstantClass constantClass1 = new ConstantClass(8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)106;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[7] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = Utility.compactClassName("FY", false);
      assertEquals("FY", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(",:bt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,:bt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = Utility.convertString("compiled from\t\t");
      assertEquals("compiled from\t\t", string0);
      
      ConstantClass constantClass0 = new ConstantClass(529);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifeq\t\t#22341", string1);
      
      String string2 = Utility.getSignature("L\"3ekCn|@FU$p3? ");
      assertEquals("LL\"3ekCn|@FU$p3?;", string2);
      
      Utility.printArray((Object[]) null);
      String string3 = Utility.compactClassName("2N}*M^eYO1w");
      assertEquals("2N}*M^eYO1w", string3);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.convertString("compiled from\t\t");
      ConstantClass constantClass0 = new ConstantClass(529);
      ConstantClass constantClass1 = new ConstantClass(8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(bytes = ", "compiled from\t\t", "compiled from\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bytes = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-)~x.Y6Zz)'PIN";
      stringArray0[1] = "L$o5\"B,?b4|V<;V";
      stringArray0[2] = "LWarning:;V";
      stringArray0[3] = "-)~x.Y6Zz)'PIN";
      stringArray0[4] = "boolean";
      stringArray0[5] = "-)~x.Y6Zz)'PIN";
      stringArray0[6] = "boolean";
      Utility.methodTypeToSignature("L$o5\"B,?b4|V<;V", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(L-)~x/Y6Zz)'PIN;LL$o5\"B,?b4|V<;V;LLWarning:;V;L-)~x/Y6Zz)'PIN;ZL-)~x/Y6Zz)'PIN;Z)LL$o5\"B,?b4|V<;V;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L-)~x/Y6Zz)'PIN;LL$o5\"B,?b4|V<;V;LLWarning:;V;L-)~x/Y6Zz)'PIN;ZL-)~x/Y6Zz)'PIN;Z)LL$o5\"B,?b4|V<;V;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = Utility.format(31, 131, false, 'P');
      assertEquals("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP31", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = Utility.getSignature("L;V");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "instanceof");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)119, (byte)43, (byte)107, (byte)66, (byte)95, (byte)17, (byte)117, (byte)52, (byte)63, (byte)102}, byteArray0);
      
      String string0 = Utility.signatureToString("CONSTANT_NameAndType", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = Utility.printArray((Object[]) stringArray0, false);
      assertEquals("null, null", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iload_3");
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.getSignature("saload");
      String string1 = Utility.methodSignatureReturnType("Lsaload;");
      assertEquals("saload", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("1d 1d 35 1d 35 00 00", string2);
      
      Utility.codeToString(byteSequence0, constantPool2);
      String string3 = Utility.getSignature("if_acmpeq");
      assertEquals("Lif_acmpeq;", string3);
      
      String string4 = Utility.accessToString(189);
      assertEquals("public protected static final synchronized transient", string4);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("SAME_LOCALS_1_STACK_EXTENDED/java.lang.Object/java.lang.Object0java.lang.Object");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "SAME_LOCALS_1_STACK_EXEDED");
      Utility.signatureToString("SAME_LOCALS_1_STACK_EXEDED", true);
      String string0 = "Fa5 [c229R*^o}T\\u|";
      String string1 = Utility.compactClassName("]$FHm1xv{'M%p-", string0, true);
      assertEquals("]$FHm1xv{'M%p-", string1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "lmul";
      objectArray0[1] = (Object) null;
      byteSequence2.skipBytes(139);
      objectArray0[2] = (Object) (byte)105;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte) (-14);
      objectArray0[5] = (Object) (byte) (-86);
      objectArray0[6] = (Object) byteSequence2;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) byteSequence1;
      Utility.printArray(objectArray0);
      String string0 = Utility.accessToString((int) (byte) (-14), false);
      assertEquals("private final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.accessToString(3544);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace(",:bt", (String) null, ">gnsk?}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.searchOpcode("<");
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid method signature: ", true);
      assertEquals("Invalid method signature: ", string0);
      
      boolean boolean0 = Utility.isSet(2793, 2793);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      Utility.printArray((Object[]) stringArray0, true);
      Utility.printArray((Object[]) stringArray0, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorexit", (String) null, "{\",:bt\", null, null, null, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = Utility.getSignature(",:bt");
      assertEquals("L,:bt;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmpge\t\t#-18048", string1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      int int0 = Utility.setBit(32, 32);
      assertEquals(33, int0);
      
      String string0 = Utility.compactClassName("aload_0", "", false);
      assertEquals("aload_0", string0);
      
      String string1 = Utility.accessToString(32, false);
      assertEquals("synchronized", string1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      Utility.compactClassName("L;V");
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 103, (int) (byte)54, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ConstantClass constantClass0 = new ConstantClass(1956);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1497.8572692601288));
      constantArray0[6] = (Constant) constantDouble0;
      constantArray0[7] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte) (-115);
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte)23;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool1 = new ConstantPool(dataInputStream0);
      Utility.codeToString(byteSequence2, constantPool1, false);
      ConstantPool constantPool2 = constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, 228, (-2122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.convertString("G78]5T+*PIuq[@hv01 ");
      Utility.compactClassName("G78]5T+*PIuq[@hv01 ", "I", true);
      Utility.accessToString(1173);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)11;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "I";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "interface";
      stringArray0[1] = "interface";
      stringArray0[2] = "interface";
      stringArray0[3] = "interface";
      stringArray0[4] = "interface";
      String string0 = Utility.methodTypeToSignature("interface", stringArray0);
      assertEquals("(Linterface;Linterface;Linterface;Linterface;Linterface;)Linterface;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Linterface;Linterface;Linterface;Linterface;Linterface;)Linterface;");
      String string1 = Utility.printArray((Object[]) stringArray1, false);
      assertEquals("interface, interface, interface, interface, interface", string1);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-28);
      Utility.typeOfSignature("Lv9J^");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lv9J^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lv9J^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      int int0 = Utility.setBit(239, 239);
      assertEquals(33007, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%203", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-121);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (int) (byte) (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)0, false, 'k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1799, 58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("L$o5\"B,?b4|V<;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L$o5\"B,?b4|V<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "L$o5\"B,?b4|V<;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L$o5\"B,?b4|V<;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L$o5\"B,?b4|V<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = Utility.compactClassName("TSSpjvQ");
      assertEquals("TSSpjvQ", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(1838);
      byteSequence0.readUnsignedByte();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)88;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)88;
      byteArray2[1] = (byte)29;
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(199);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.accessToString((-312));
      try { 
        Utility.typeOfSignature("!9Ko");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9Ko
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Object object0 = new Object();
      Utility.searchOpcode("O{De");
      // Undeclared exception!
      try { 
        Utility.signatureToString("O{De", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O{De'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.decode("Kcuo 3JZ9tB.u,$d]", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("G78]5T+*PIuq[@hv01 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[@hv01 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Utility.setBit((byte) (-19), 2104);
      assertEquals((-19), int0);
      
      Utility.compactClassName("L;V", false);
      String string0 = Utility.methodSignatureReturnType("L;V", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantClass constantClass0 = new ConstantClass((-312));
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.accessToString((int) (byte) (-113));
      try { 
        Utility.typeOfSignature("&^C*x.5x`ZF_)%OnG<3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &^C*x.5x`ZF_)%OnG<3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("4oa+0\"B,?b4*V<", false);
      Utility.accessToString((-1), false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("4oa+0\"B,?b4*V<", "4oa+0\"B,?b4*V<", "4oa+0\"B,?b4*V<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4oa+0\"B,?b4*V<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("newarray", false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)117;
      byteArray1[1] = (byte) (-14);
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte)59;
      byteArray1[6] = (byte) (-95);
      byteArray1[7] = (byte) (-79);
      byteArray1[8] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-20), (int) (byte)41);
      assertEquals("0:    <illegal opcode>\n1:    dload_3\n2:    athrow\n3:    saload\n4:    iload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-70);
      try { 
        Utility.typeOfSignature("=yqVg555cH.9i^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =yqVg555cH.9i^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Utility.setBit(46, 146);
      Utility.clearBit((-3590), (-3408));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-17);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)44;
      Utility.signatureToString("Byte code error: ", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("R9P&R\"t+x\"bNB@#I", (String) null, "R9P&R\"t+x\"bNB@#I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R9P&R\"t+x\"bNB@#I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L$o5\",?b4|<;V", "L$o5\",?b4|<;V", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Object object0 = new Object();
      Utility.accessToString((int) (byte)18, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = "%+R]}TOx!5)B\\";
      try { 
        Utility.typeOfSignature("%+R]}TOx!5)B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %+R]}TOx!5)B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = "Exceptions: ";
      Utility.convertString("Exceptions: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exceptions: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byte byte0 = (byte)61;
      byteArray0[1] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4868, 4868);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Utility.decode("O#g(EBwfuQ{Pp", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-408), 1395);
      String string1 = Utility.compactClassName("0:    iastore\n1:    fload_1\n2:    dsub\n3:    dload_2\n4:    fstore_2\n5:    lstore_3\n6:    dneg\n7:    fsub\n8:    lneg\n9:    fastore\n10:   lshr\n11:   lastore\n12:   irem\n");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Utility.classOrInterface(3);
      Utility.accessToString(3, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      int int0 = byteSequence1.skipBytes((byte) (-72));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      Utility.accessToString(134, true);
      String string0 = "#^[X?w!1]tRvW";
      MockPrintStream mockPrintStream0 = new MockPrintStream("#^[X?w!1]tRvW");
      mockPrintStream0.print(true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "#^[X?w!1]tRvW");
      Utility.printArray(printStream0, (Object[]) null);
      Utility.clearBit(134, 3750);
      try { 
        Utility.methodSignatureArgumentTypes("private protected transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "V";
      try { 
        Utility.typeOfMethodSignature("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = " entries\n";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" entries\n", " entries\n", " [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  entries
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = Utility.convertString(")zgf-");
      assertEquals(")zgf-", string0);
      
      String string1 = Utility.compactClassName("k!", false);
      assertEquals("k!", string1);
      
      String string2 = Utility.getSignature(" ");
      assertEquals("L;", string2);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(1389);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.getSignature("*O^x0+ba[A!QvL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[A!QvL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1132, (-2960));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)113;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.convertString("line.separator");
      Utility.searchOpcode("line.separator");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1595, (-408));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.isSet(1554, (-2358));
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2887);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((-1970630625));
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String[] stringArray0 = new String[6];
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.getSignature("iload\t\t%220");
      Utility.printArray((Object[]) stringArray0);
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("Liload;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Liload;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[7] = (byte) (-14);
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.setBit((-368), 3100);
      ConstantClass constantClass0 = new ConstantClass(8);
      constantClass0.clone();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readInt();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = ",:bt";
      byte byte0 = Utility.typeOfSignature("B");
      assertEquals((byte)8, byte0);
      
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) stringArray0, false);
      String string1 = Utility.compactClassName(",:bt, null");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SAME_LOCALS_1_STACK_EXTENDED", "java.lang.Object");
      File file0 = MockFile.createTempFile("java.lang.Object", "java.lang.Object", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((byte)31, (byte) (-70));
      boolean boolean0 = true;
      Utility.compactClassName("ifnull", true);
      Utility.getSignature("return");
      mockFile0.toPath();
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.typeOfMethodSignature("Lreturn;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lreturn;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("null", "null", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("jsr\t\t#24239", string0);
      
      String string1 = Utility.classOrInterface(2579);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      int int0 = 8;
      Utility.classOrInterface(8);
      Utility.accessToString(8, true);
      try { 
        Utility.typeOfSignature("MaB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MaB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.getSignature("nd xFc&c_wC!1!!0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-982), (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpg
         // 1:    dcmpg
         // 2:    monitorexit
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      try { 
        Utility.typeOfSignature("328%[m7[/`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 328%[m7[/`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*O^x0+ba[A!QvL");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      char char0 = 'k';
      Utility.fillup("", (-1067), false, 'k');
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "2D;33rZ#uZ(bfR";
      byte[] byteArray0 = Utility.decode("2D;33rZ#uZ(bfR", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      ConstantString constantString0 = new ConstantString(byteSequence0);
      try { 
        Utility.typeOfSignature("2D;33rZ#uZ(bfR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2D;33rZ#uZ(bfR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = Utility.getSignature("arraylength");
      assertEquals("Larraylength;", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ny'IbMG?Uf*?%vm\"Q4l", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lshl", string0);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.setBit(239, 239);
      String string0 = "L;V";
      Utility.getSignature("L;V");
      Utility.compactClassName("lookupswitch", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      try { 
        Utility.typeOfMethodSignature("(^$$:IXGS@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (^$$:IXGS@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      int int0 = Utility.setBit(28, 5);
      assertEquals(60, int0);
      
      Utility.getSignature("monitorexit");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "L;V";
      objectArray0[1] = (Object) "Lmonitorexit;";
      objectArray0[2] = (Object) "L;V";
      objectArray0[3] = (Object) "L;V";
      objectArray0[4] = (Object) "w+kB_$Ru4?f";
      objectArray0[5] = (Object) "monitorexit";
      Utility.compactClassName("{VXE6tsH", true);
      String string0 = Utility.getSignature("L;V");
      assertEquals("LL;V;", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("w$xkB_$Ru4$3ff", string1);
      
      String string2 = Utility.replace("monitorexit", "QvU", "{VXE6tsH");
      assertEquals("monitorexit", string2);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      int int0 = Utility.setBit((-2003), (-2003));
      assertEquals((-2003), int0);
      
      String string0 = Utility.compactClassName("T$", false);
      assertEquals("T$", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString((int) (byte) (-57), true);
      assertEquals("public private protected volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = Utility.getSignature("L;V");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = "";
      String string1 = "\\n";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = Utility.convertString("P&OE");
      assertEquals("P&OE", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P&OE");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet((byte)76, 2761);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RAMQNg6`h?mdYx$.", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RAMQNg6`h?mdYx$.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark(1527);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dastore", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = Utility.format(0, 12, true, '[');
      assertEquals("0[[[[[[[[[[[", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("oHk.A+MqY+q", false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2391, (-958));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = Utility.convertString("):\n");
      assertEquals("):\\n", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byte byte0 = (byte)93;
      byteArray0[1] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("T", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
      
      byte byte0 = Utility.typeOfSignature("T");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.clearBit(1554, 792);
      Utility.printArray((Object[]) null, false);
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("dy'aihZ#.d\"`+p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dy'aihZ#.d\"`+p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)60;
      byte byte0 = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      ConstantClass constantClass0 = new ConstantClass(360);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XK,jpp,$J", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XK,jpp,$J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = Utility.getSignature(",:bt");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = Utility.getSignature("void");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I%jVGt4;A})vHbJ");
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)55;
      byteArray0[1] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.encode(byteArray0, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-14);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, 255, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    nop
         // 2:    lconst_1
         // 3:    aconst_null
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)8;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "YR[*IS8Dg0Td";
      try { 
        Utility.typeOfSignature("YR[*IS8Dg0Td");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YR[*IS8Dg0Td
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2d");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("H;hK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H;hK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "int";
      stringArray0[1] = "aload_0";
      stringArray0[2] = "aload_0";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantClass constantClass0 = new ConstantClass(2601);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.accessToString((int) (byte) (-113));
      try { 
        Utility.typeOfSignature("9]a~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9]a~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KS2y\u0004 1Abc=%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KS2y\u0004 1Abc=%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Utility.convertString("Ljava/lang/Object");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t<");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("Ljava/lang/Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ljava/lang/Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Utility.compactClassName("}RBWQmS*/5wF+0e9", true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "}RBWQmS*/5wF+0e9";
      objectArray0[1] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[2] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[3] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[4] = (Object) "}RBWQmS*/5wF+0e9";
      objectArray0[5] = (Object) "}RBWQmS*/5wF+0e9";
      objectArray0[6] = (Object) "}RBWQmS*.5wF+0e9";
      objectArray0[7] = (Object) "}RBWQmS*/5wF+0e9";
      objectArray0[8] = (Object) "}RBWQmS*/5wF+0e9";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      Utility.toHexString(byteArray0);
      Utility.setBit(2051, (byte)3);
      Utility.convertString("}RBWQmS*.5wF+0e9");
      Utility.printArray(objectArray0);
      Utility.setBit(1929, 58);
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)3, 2957);
      // Undeclared exception!
      try { 
        Utility.signatureToString("}RBWQmS*/5wF+0e9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}RBWQmS*_/5wF+0e9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Object object0 = new Object();
      Utility.signatureToString("Z", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LL$o5\"B,?b4|V<;V;V", "Z", "@%=uur;_{V6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LL$o5\"B,?b4|V<;V;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      short short0 = Utility.searchOpcode("LpS:\rTh{*o@}nlA");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.convertString("LpS:\rTh{*o@}nlA");
      assertEquals("LpS:\\rTh{*o@}nlA", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)3;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0d 6b 85 06 29 35 03", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "LpS:\rTh{*o@}nlA";
      objectArray0[1] = (Object) (byte) (-123);
      objectArray0[2] = (Object) "0d 6b 85 06 29 35 03";
      objectArray0[3] = (Object) (byte)3;
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{LpS:\rTh{*o@}nlA, -123, 0d 6b 85 06 29 35 03, 3}", string2);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte byte0 = (byte) (-63);
      byte byte1 = (byte) (-86);
      byte byte2 = (byte)105;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-86);
      byte byte3 = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = 1132;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(1L);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      int int0 = Utility.clearBit(1554, 792);
      assertEquals(1554, int0);
      
      String string0 = Utility.format(50, (-1), false, '3');
      assertEquals("50", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)0;
      byte byte0 = Utility.typeOfSignature("Invalid Stack map table tag: ");
      assertEquals((byte)10, byte0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) "Invalid Stack map table tag: ";
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte) (-58);
      objectArray0[5] = (Object) (byte)0;
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureReturnType("Invalid Stack map table tag: ", true);
      boolean boolean0 = Utility.isSet((-1047), 71);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 458, 458);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      boolean boolean0 = Utility.isSet(581, (-1502));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(11, 237, false, ' ');
      int int0 = 32;
      Utility.setBit(32, 237);
      int int1 = (-131);
      Utility.clearBit((-131), 146);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-20);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("                                                                                                                                                                                                                                           11");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:                                                                                                                                                                                                                                            11
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Utility.convertString("G78]5T+*PIuq[@hv01 ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("G78]5T+*PIuq[@hv01 ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G78]5T+*PIuq[@hv01 '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("checkcast", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `checkcast'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-119);
      Utility.fillup("u*qa1~&:", (-119), false, 'y');
      String string0 = "$o5\"B,?b4|V<";
      Utility.decode("$o5\"B,?b4|V<", false);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      short short0 = Utility.searchOpcode("new");
      assertEquals((short)187, short0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Utility.typeOfSignature("V");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V";
      stringArray0[1] = "castore";
      stringArray0[2] = "castore";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",HbM", "castore", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,HbM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)53;
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1075));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-85));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      int int0 = (-2003);
      Utility.setBit((-2003), (-2003));
      Utility.compactClassName("T$", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("T$", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-51), (-2204));
      assertEquals("0:    <illegal opcode>\n1:    dload_3\n2:    dload_3\n3:    saload\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RAMQNg6`h?mdYx$.", false);
      assertEquals(15, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass(208);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.getSignature("lstore_2");
      assertEquals("Llstore_2;", string0);
      
      Utility.printArray((Object[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('I');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2887);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Integer integer0 = new Integer((-1970630625));
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iadd";
      stringArray0[1] = "iadd";
      stringArray0[2] = "iadd";
      stringArray0[3] = "iadd";
      stringArray0[4] = "iadd";
      stringArray0[5] = "iadd";
      String string0 = Utility.methodTypeToSignature("iadd", stringArray0);
      assertEquals("(Liadd;Liadd;Liadd;Liadd;Liadd;Liadd;)Liadd;", string0);
      
      String string1 = Utility.getSignature("newarray");
      assertEquals("Lnewarray;", string1);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Utility.compactClassName("QksC~Rh`j5/3IayW", "QksC~Rh`j5/3IayW", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("QksC~Rh`j5/3IayW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QksC~Rh`j5/3IayW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Utility.signatureToString("From\tTo\tHandler\tType\n", false);
      try { 
        Utility.typeOfMethodSignature("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SAME_LOCALS_1_STACK_EXTENDED", "java.lang.Object");
      MockFile.createTempFile("java.lang.Object", "java.lang.Object", (File) mockFile0);
      Utility.isSet((-646), 12);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = Utility.format(194, (-3083), false, 'o');
      assertEquals("194", string0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("2D;33rZ#uZ(bfR", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(1838);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readLong();
      int int0 = byteSequence1.readUnsignedByte();
      assertEquals(117, int0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Utility.setBit(837, 51);
      String string0 = "SJXSxBP~[p_4{I@9]U";
      Utility.replace("SJXSxBP~[p_4{I@9]U", "L% .}D]M", "L% .}D]M");
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-175), 102, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(92);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)119, (byte)43, (byte)107, (byte)66, (byte)95, (byte)17, (byte)117, (byte)52, (byte)63, (byte)102}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      byteSequence0.read();
      byteSequence1.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-20), 0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Utility.convertString("P&OE");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("P&OE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P&OE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "";
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "";
      Object object1 = new Object();
      objectArray1[3] = object1;
      Utility.printArray(objectArray1, false);
      Utility.printArray(objectArray1, false, false);
      int int0 = 1180;
      Utility.isSet(59, 1180);
      try { 
        Utility.typeOfSignature("M[ (zf]:diGcdJJ|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M[ (zf]:diGcdJJ|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Utility.convertString(")zgf-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName(" ", false);
      Utility.compactClassName(")zgf-", false);
      Utility.classOrInterface(16384);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifnull", " ", "class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Utility.accessToString(1323);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte) (-77);
      byteArray1[5] = (byte)23;
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte) (-77);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("Invalid frame type found while parsing stack map table: ");
      assertEquals("Invalid frame type found while parsing stack map table: ", string0);
      
      int int0 = Utility.clearBit(128, 4);
      assertEquals(128, int0);
      
      String string1 = Utility.compactClassName("", "Invalid frame type found while parsing stack map table: ", false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1166, false, 'n');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readUnsignedShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("-f1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-f1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      try { 
        Utility.typeOfSignature("QA@}c-\"}odjt +9?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QA@}c-\"}odjt +9?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V|2F");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((byte) (-19), (byte) (-19));
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0, true);
      Utility.typeOfSignature("Invalid Stack map table tag: ");
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureReturnType("%L/Vp+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%L/Vp+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Utility.convertString("\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantClass constantClass0 = new ConstantClass(1838);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence4, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = "!v}h";
      try { 
        Utility.typeOfMethodSignature("!v}h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !v}h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-407L));
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Utility.fillup("!v}h", (-250670452), false, 'U');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((-312));
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*O^x0+ba[A!QvL");
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1))");
      Utility.printArray(objectArray0, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte) (-46);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-46), (int) (byte)70, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (-475));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-20), (int) (byte)41);
      assertEquals("0:    <illegal opcode>\n1:    dload_3\n2:    athrow\n3:    saload\n4:    saload\n", string0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Utility.compactClassName("}RBWQmS*/5wF+0e9", true);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.getSignature("[G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(220);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-83);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte)121, true);
      assertEquals("public static final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Utility.compactClassName("T$", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("XieSqm^4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XieSqm^4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      stringArray0[1] = ",:bt";
      stringArray0[2] = ",:bt";
      stringArray0[3] = ",:bt";
      stringArray0[4] = ",:bt";
      Utility.methodTypeToSignature(",:bt", stringArray0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      try { 
        Utility.methodSignatureArgumentTypes(",:bt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,:bt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "I7/KYRVn:J4} fCw", "I7/KYRVn:J4} fCw", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String string0 = ".";
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "interface";
      stringArray0[2] = "interface";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      Utility.isSet((-112), 6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((byte) (-19), 2104);
      Utility.compactClassName("L;V", false);
      Utility.methodSignatureReturnType("L;V", false);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Utility.signatureToString("L;V");
      byte byte0 = Utility.typeOfSignature("L;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.compactClassName("if_acmpn8");
      assertEquals("if_acmpn8", string0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = Utility.compactClassName("compiled from\t\t", false);
      assertEquals("compiled from\t\t", string0);
      
      String string1 = Utility.getSignature("compiled from\t\t");
      assertEquals("Lcompiled;", string1);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      try { 
        Utility.decode(";ZwSx|F", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.getSignature("ixor");
      assertEquals("Lixor;", string0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnull");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.fillup("ifnull", (byte)92, false, '%');
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ifnull", string0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip((-2339L));
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (-2960));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = "!v}h";
      Utility.fillup("!v}h", (-250670452), false, 'U');
      String string1 = "V|2F";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lushr");
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ConstantClass constantClass0 = new ConstantClass(1838);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Utility.setBit((-368), 3100);
      ConstantClass constantClass0 = new ConstantClass(8);
      constantClass0.setNameIndex((-857));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = "(Q.2[CVx&whF{";
      try { 
        Utility.typeOfSignature("(Q.2[CVx&whF{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Q.2[CVx&whF{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.classOrInterface((byte)12);
      try { 
        Utility.methodSignatureReturnType("t)HHjF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HHjF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-75);
      byteArray0[0] = (byte)113;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZJ5&q5b1znP5");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("2D;33rZ#uZ(bfR", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(1838);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readLong();
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)27;
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence4, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("java.lang.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      String string0 = Utility.convertString("line.separator");
      assertEquals("line.separator", string0);
      
      String string1 = Utility.accessToString(125, false);
      assertEquals("public protected static final synchronized volatile", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte)75;
      byteArray1[4] = (byte) (-110);
      byteArray1[5] = (byte) (-110);
      byteArray1[6] = (byte) (-110);
      byteArray1[7] = (byte)75;
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-110), (int) (byte)75);
      assertEquals("0:    astore_0\n1:    i2c\n2:    <illegal opcode>\n3:    astore_0\n4:    i2c\n5:    i2c\n6:    i2c\n7:    astore_0\n", string2);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Utility.isJavaIdentifierPart('1');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-42);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-42);
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("{-42}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {-42}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Utility.setBit(310, 310);
      Utility.clearBit(0, 0);
      Utility.format(4194614, 0, false, '3');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.getSignature("4194614");
      Utility.isSet(1, (-929));
      Utility.compactClassName("/R{V?@ A\"}", false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Utility.convertString("line.separator");
      try { 
        Utility.typeOfSignature(";/s|G5/FxXgB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;/s|G5/FxXgB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = Utility.convertString("SZ");
      assertEquals("SZ", string0);
      
      byte byte0 = Utility.typeOfSignature("SZ");
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.compactClassName("niXDg`K[");
      assertEquals("niXDg`K[", string1);
      
      int int0 = Utility.clearBit((byte)9, 80);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(220);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-55);
      byteArray0[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      try { 
        Utility.typeOfSignature("Azsz$X85QxYX\")E!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Azsz$X85QxYX\")E!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = Utility.convertString("&:M*B'9::");
      assertEquals("&:M*B\\'9::", string0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.classOrInterface((byte) (-70));
      Utility.classOrInterface((byte) (-70));
      Utility.convertString("8H~*|s:/-a_-Q");
      try { 
        Utility.methodSignatureArgumentTypes("8H~*|s:/-a_-Q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8H~*|s:/-a_-Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Utility.convertString("RAMQNg6`h?mdYx$.");
      // Undeclared exception!
      try { 
        Utility.signatureToString("RAMQNg6`h?mdYx$.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RAMQNg6`h?mdYx$.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-114));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rf-g|e0}HB5,");
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-106);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "breakpoint";
      stringArray0[1] = "rf-g|e0}HB5,";
      stringArray0[2] = "rf-g|e0}HB5,";
      stringArray0[3] = "rf-g|e0}HB5,";
      String string0 = Utility.methodTypeToSignature("rf-g|e0}HB5,", stringArray0);
      assertEquals("(Lbreakpoint;Lrf-g|e0}HB5,;Lrf-g|e0}HB5,;Lrf-g|e0}HB5,;)Lrf-g|e0}HB5,;", string0);
      
      String string1 = Utility.accessToString(722);
      assertEquals("private final volatile transient interface", string1);
      
      String string2 = Utility.classOrInterface((byte) (-126));
      assertEquals("interface", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('&');
      assertFalse(boolean0);
      
      String string3 = Utility.accessToString(3855, false);
      assertEquals("public private protected static native interface abstract strictfp", string3);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = byteSequence0.skipBytes(189);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Utility.compactClassName("Ljava/lang/Object");
      try { 
        Utility.methodSignatureReturnType("Ljava/lang/Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ljava/lang/Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 110, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-86);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      Utility.printArray((Object[]) stringArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2468, 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.classOrInterface((byte)12);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0);
      byteSequence0.readInt();
      Utility.isJavaIdentifierPart('1');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 86, (int) (byte)12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Utility.decode("1=Mp!sd$@^9", false);
      try { 
        Utility.typeOfSignature("1=Mp!sd$@^9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1=Mp!sd$@^9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("IBwo7=SR<V!h>q");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("invokeinterface");
      assertEquals("invokeinterface", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      byte byte0 = (byte)18;
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      String string0 = "EnclosingMethod";
      Utility.compactClassName("EnclosingMethod", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2d");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      String string0 = "P&OE";
      try { 
        Utility.typeOfSignature("P&OE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P&OE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString((int) (byte)18, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("U$9-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U$9-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      Utility.printArray((Object[]) stringArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("KI!`S(\u0005", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KI!`S(\u0005'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Utility.convertString("?PdnY [hY\"^a;Ke");
      String string0 = "m[d*dB";
      // Undeclared exception!
      try { 
        Utility.signatureToString("m[d*dB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m[d*dB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      int int0 = Utility.setBit(239, 239);
      assertEquals(33007, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-36);
      byteArray1[2] = (byte) (-103);
      byteArray1[3] = (byte) (-36);
      byteArray1[4] = (byte) (-36);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#-9063", string0);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Utility.classOrInterface(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String string0 = Utility.convertString("Ljava/lang/Object");
      assertEquals("Ljava/lang/Object", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifge\t\t#0", string1);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = "instanceof";
      Method method0 = new Method();
      try { 
        Utility.typeOfSignature("5k|t-r0[>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5k|t-r0[>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = "):\n";
      try { 
        Utility.typeOfSignature("):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = "FIh/n#aU`PQ?P:0!1\"O";
      try { 
        Utility.typeOfSignature("+@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = Utility.convertString("pw5J\"{*_,");
      assertEquals("pw5J\\\"{*_,", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Utility.compactClassName("monitorexit", "P&OE", false);
      try { 
        Utility.typeOfSignature("P&OE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P&OE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      String string0 = Utility.fillup("!v}h", (-250670452), false, 'U');
      assertEquals("!v}h", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((-312));
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte) (-113);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.accessToString((-250670452), true);
      assertEquals("protected static transient synthetic", string1);
      
      MockFile mockFile0 = new MockFile("Illegally nested brackets:", "dload_2");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) constantArray0);
      assertEquals(43L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String string0 = "~)WpxmzoI";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~)WpxmzoI");
      byte[] byteArray0 = new byte[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-57), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Utility.convertString("getfield");
      String string0 = "<clinit>";
      try { 
        Utility.typeOfSignature("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Utility.setBit(239, 239);
      byte byte0 = (byte)46;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Utility.clearBit(582, 582);
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray(objectArray0, false, true);
      char char0 = 'k';
      Utility.fillup("\"java.lang.Object@58e0c8fc\", \"java.lang.Object@5c41d8fa\", \"java.lang.Object@5a6816da\", \"java.lang.Object@14ab8cb3\", \"java.lang.Object@4a5201f2\"", (-2449), false, 'k');
      Utility.setBit((-2449), (-2449));
      try { 
        Utility.typeOfSignature("\"java.lang.Object@58e0c8fc\", \"java.lang.Object@5c41d8fa\", \"java.lang.Object@5a6816da\", \"java.lang.Object@14ab8cb3\", \"java.lang.Object@4a5201f2\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@58e0c8fc\", \"java.lang.Object@5c41d8fa\", \"java.lang.Object@5a6816da\", \"java.lang.Object@14ab8cb3\", \"java.lang.Object@4a5201f2\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.getSignature("nop");
      assertEquals("Lnop;", string0);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String string0 = "/";
      try { 
        Utility.methodSignatureReturnType("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = "The list of names must not be null";
      try { 
        Utility.methodSignatureArgumentTypes("The list of names must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "compiled from\t\t";
      stringArray0[1] = "<qJx>![/;";
      stringArray0[2] = "<qJx>![/;";
      stringArray0[3] = "<qJx>![/;";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence4, (ConstantPool) null, true);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(173, (byte)80, localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" ecy)lMgWn4R$i", "\"A^Pap1i`q&s:K", (String) null, false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantString constantString1 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(40);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(193);
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Utility.decode("1=Mp!sd$@^9", false);
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1523), (-1523), true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Utility.convertString("compiled from\t\t");
      Utility.setBit(8, (-6));
      String string0 = "2re~Ynt!,";
      Utility.compactClassName("2re~Ynt!,", false);
      String string1 = "?\\PdnY [hY\"^a;Ke";
      // Undeclared exception!
      try { 
        Utility.getSignature("?PdnY [hY\"^a;Ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[hY\"^a;Ke
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K'xeUf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'xeUf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = Utility.convertString("new");
      assertEquals("new", string0);
      
      String string1 = Utility.compactClassName(".", "", true);
      assertEquals(".", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)49;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Utility.convertString("G78]5T+*PIuq[@hv01 ");
      Utility.isJavaIdentifierPart(';');
      Utility.compactClassName("org.apache.bcel.classfile.Utility$1");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1078, 190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("(reference_kind = ", (String[]) null);
      assertEquals("()L(reference_kind;", string0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2887);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("w+kB_$Ru4?f", false);
      Utility.setBit(28, 5);
      Utility.getSignature("monitorexit");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "L;V";
      objectArray0[1] = (Object) "Lmonitorexit;";
      objectArray0[2] = (Object) "L;V";
      objectArray0[3] = (Object) "L;V";
      objectArray0[4] = (Object) "w+kB_$Ru4?f";
      objectArray0[5] = (Object) "monitorexit";
      Utility.signatureToString("Lmonitorexit;", true);
      Utility.classOrInterface(181);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_0;
      // Undeclared exception!
      try { 
        ConstantUtf8.getInstance((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "interface";
      stringArray0[1] = "interface";
      stringArray0[2] = "interface";
      stringArray0[3] = "interface";
      stringArray0[4] = "interface";
      Utility.methodTypeToSignature("interface", stringArray0);
      Utility.methodSignatureArgumentTypes("(Linterface;Linterface;Linterface;Linterface;Linterface;)Linterface;");
      try { 
        Utility.methodSignatureArgumentTypes("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-2202), 95, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-113));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25600. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("jsr", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*O^x0+ba[A!QvL");
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("", (-1067), false, 'k');
      Utility.setBit((-1412), 89);
      try { 
        Utility.typeOfSignature("*O^x0+ba[A!QvL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O^x0+ba[A!QvL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      String string0 = "compiled from\t\t";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")zgf-", "compiled from\t\t", "compiled from\t\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )zgf-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("dreturn", "dreturn", "dreturn");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">+}OXb-y;3]f|-p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >+}OXb-y;3]f|-p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "*\\";
      try { 
        Utility.typeOfSignature("*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = Utility.typeOfSignature("J7k!2$&n5");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Utility.signatureToString("ZJ5&q5b1znP5");
      // Undeclared exception!
      try { 
        Utility.signatureToString("KS2y\u0004 1Abc=%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KS2y\u0004 1Abc=%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+k_$R4?(", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(1838);
      Utility.encode(byteArray0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantClass constantClass1 = new ConstantClass(1778);
      Utility.accessToString(2601);
      try { 
        Utility.typeOfSignature(":8%vc`)ac");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :8%vc`)ac
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = Utility.convertString(")zgf-");
      assertEquals(")zgf-", string0);
      
      String string1 = Utility.getSignature("k!");
      assertEquals("Lk!;", string1);
      
      String string2 = Utility.fillup(")zgf-", 108, true, 'e');
      assertEquals(")zgf-eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string2);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!]w%/]$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]w%/]$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X[QPhC7j4wo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X[QPhC7j4wo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(220);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String string0 = "z +-wnl]P4Oh";
      Utility.compactClassName("z +-wnl]P4Oh");
      // Undeclared exception!
      try { 
        Utility.signatureToString("z +-wnl]P4Oh", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z +-wnl]P4Oh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      Utility.signatureToString("From\tTo\tHandler\tType\n", false);
      try { 
        Utility.typeOfMethodSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      stringArray0[1] = ",:bt";
      stringArray0[2] = ",:bt";
      stringArray0[3] = ",:bt";
      stringArray0[4] = ",:bt";
      Utility.methodTypeToSignature(",:bt", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Utility.getSignature("vid");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String string0 = Utility.getSignature("org.apache.commons.io.filefilter.OrFileFilter");
      assertEquals("Lorg/apache/commons/io/filefilter/OrFileFilter;", string0);
      
      String string1 = Utility.methodSignatureReturnType("Lorg/apache/commons/io/filefilter/OrFileFilter;");
      assertEquals("org.apache.commons.io.filefilter.OrFileFilter", string1);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("w_G<u&Z[k~~0B$", false);
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.methodSignatureReturnType("Y2E<%kIj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y2E<%kIj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String string0 = Utility.getSignature("compiled from\t\t");
      assertEquals("Lcompiled;", string0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      String string0 = Utility.convertString("Ljava/lang/Object");
      assertEquals("Ljava/lang/Object", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifgt\t\t#0", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readShort();
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/o;bCTaiXcg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /o;bCTaiXcg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V|2F");
      String string0 = Utility.methodTypeToSignature("Invalid signature: ", (String[]) null);
      assertEquals("()LInvalid;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodTypeToSignature("V|2F", (String[]) null);
      String string1 = Utility.accessToString(48);
      assertEquals("final synchronized", string1);
      
      String string2 = Utility.classOrInterface(48);
      assertEquals("class", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      String string3 = Utility.accessToString((int) (byte)45, false);
      assertEquals("public protected static synchronized", string3);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W5&AQN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W5&AQN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String string0 = "'Hie(kre6w!V\"";
      try { 
        Utility.typeOfSignature("'Hie(kre6w!V\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'Hie(kre6w!V\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore\t\t%0", string0);
      
      boolean boolean0 = Utility.isSet((byte)56, (byte)56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V|2F");
      Utility.methodTypeToSignature("Invalid signature: ", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)45;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V|2F");
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-86), (-1805));
      constantArray0[0] = (Constant) constantNameAndType0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantLong constantLong0 = new ConstantLong((byte) (-86));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("8d f2 c1 aa 69", string0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('z');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.LocalVariableTypeTable", "9tnxi=.lb", "SAME_EXTENDED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String string0 = ";";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)10;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 733, (int) (byte)1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)71;
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("astore_3", stringArray0);
      assertEquals("()Lastore_3;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()Lastore_3;");
      String string1 = Utility.printArray((Object[]) stringArray1, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ")zgf-";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(2620);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.getSignature("{3X<wf3+N,LSG,P z(");
      assertEquals("L{3X<wf3+N,LSG,P;", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Class[7](name_index = 2620), CONSTANT_Class[7](name_index = 2620), CONSTANT_Class[7](name_index = 2620), CONSTANT_Class[7](name_index = 2620), CONSTANT_Class[7](name_index = 2620)}", string1);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      Utility.typeOfSignature("V");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V";
      stringArray0[1] = "castore";
      stringArray0[2] = "castore";
      Utility.methodTypeToSignature("castore", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -102
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      String string0 = Utility.convertString("line.separator");
      assertEquals("line.separator", string0);
      
      short short0 = Utility.searchOpcode("line.separator");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertEquals("ifnonnull\t\t#0", string1);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      String string0 = Utility.replace("-)~x.Y6Zz)'PIN", "-)~x.Y6Zz)'PIN", "-)~x.Y6Zz)'PIN");
      assertEquals("-)~x.Y6Zz)'PIN", string0);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)31;
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V,Z=o9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.print(true);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      String string0 = Utility.accessToString(77);
      assertEquals("public protected static volatile", string0);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Utility.convertString("new");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2004), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("w+kBL$Ru4?f", false);
      Utility.setBit(0, 5083);
      int int0 = 0;
      Utility.classOrInterface(0);
      String string0 = "ZcY$RZv-pAJH1";
      // Undeclared exception!
      Utility.replace("ZcY$RZv-pAJH1", "", "");
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Utility.replace("compiled from\t\t", "compiled from\t\t", "compiled from\t\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "compiled from\t\t";
      objectArray0[1] = (Object) "compiled from\t\t";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Utility.getSignature(",:bt");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("w+k_$R4?(", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(1838);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(54);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, 1838, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2345, 156);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      try { 
        Utility.typeOfSignature("|+R=hV9f02dje.}U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |+R=hV9f02dje.}U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("$Rm0y\"9KaP", "$Rm0y\"9KaP", "$Rm0y\"9KaP", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Rm0y\"9KaP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Utility.setBit((-2003), (-2003));
      String string0 = "T$";
      boolean boolean0 = false;
      Utility.compactClassName("T$", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(14);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.typeOfSignature("T$");
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String string0 = "[]";
      Utility.isJavaIdentifierPart('1');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup_x2", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)91, true);
      assertEquals("0:    dup_x2\n1:    nop\n2:    impdep2\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n", string1);
      
      String string2 = Utility.compactClassName("dup_x2");
      assertEquals("dup_x2", string2);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ak+PxVBFG$}#", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, 86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Utility.convertString("line.separator");
      boolean boolean0 = true;
      Utility.accessToString(125, true);
      Utility.searchOpcode("monitorenter");
      String string0 = "\\n";
      // Undeclared exception!
      try { 
        Utility.signatureToString("M@K}' ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M@K}' '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)13;
      Utility.fillup("ifnull", 245, true, '8');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-93));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(88, 1268, byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingClass();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("`l<~THxl@y^", stringArray0);
      assertEquals("()L`l<~THxl@y^;", string0);
      
      String string1 = Utility.accessToString(201);
      assertEquals("public static volatile transient", string1);
      
      String string2 = Utility.classOrInterface((byte)127);
      assertEquals("class", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      String string3 = Utility.accessToString(190, true);
      assertEquals("private protected static final transient", string3);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = byteSequence1.readUnsignedByte();
      assertEquals(11, byteArray0.length);
      assertEquals(49, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(3185);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)91;
      byteArray0[20] = (byte)30;
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.clearBit(1524, 195);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dup_x2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup_x2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      String string0 = Utility.convertString("RAMQNg6`h?mdYx$.");
      assertEquals("RAMQNg6`h?mdYx$.", string0);
      
      byte byte0 = Utility.typeOfSignature("Could not create the directory ");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.compactClassName("w*D3");
      assertEquals("w*D3", string1);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SAME_LOCALS_1_STACK_EXTENDED", "java.lang.Object");
      File file0 = MockFile.createTempFile("java.lang.Object", "java.lang.Object", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockFile0.setReadable(true);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[2HtBS9}7];$qj`an#o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2HtBS9}7];$qj`an#o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "2D;33rZ#uZ(bfR";
      try { 
        Utility.typeOfSignature("2D;33rZ#uZ(bfR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2D;33rZ#uZ(bfR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("gF/,3PiG", (String) null, "gF/,3PiG", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gF/,3PiG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      Utility.convertString("P&OE");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("h6F~I<(w<Ox;=f$uJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `h6F~I<(w<Ox;=f$uJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      Utility.clearBit(1554, 792);
      Utility.printArray((Object[]) null, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#-14393", string0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1=Mp!sd$@^9", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("]tLO@v&:~9(g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]tLO@v&:~9(g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      short short0 = Utility.searchOpcode("ret");
      assertEquals((short)169, short0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b6 00", string0);
  }
}
