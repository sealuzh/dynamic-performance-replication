/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:31:28 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "[Mp[n4Gqky=V>,;Q~\"";
      Utility.typeOfSignature("[Mp[n4Gqky=V>,;Q~\"");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = (-3312);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-3312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.replace("o!akY#BXW%5PQ", "o!akY#BXW%5PQ", "o!akY#BXW%5PQ");
      String string0 = Utility.fillup("o!akY#BXW%5PQ", 4096, false, '.');
      Utility.setBit((-1814), 847);
      Utility.fillup(string0, (-1814), false, '.');
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.getSignature(", high = ");
      assertEquals("L,;", string0);
      
      String string1 = Utility.classOrInterface((-1848228874));
      assertEquals("interface", string1);
      
      String string2 = Utility.compactClassName("areturn", "areturn", true);
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)0;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(117, 40);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("L,;");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-125));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble0.toString();
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteArray0, constantPool1, (-1), 9, true);
      assertEquals("0:    istore_0\n1:    lxor\n2:    iand\n3:    nop\n", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3413), (-329), true);
      assertEquals("0:    l2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)8;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), 72);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    ifeq\t\t#-16034\n5:    iconst_5\n", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte) (-56);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-104);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 911, (-889275714), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((-1409), (-1409));
      String string0 = "@DRdD\"J$r1fk,6";
      try { 
        Utility.typeOfSignature("@DRdD\"J$r1fk,6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @DRdD\"J$r1fk,6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.format(1909, 1909, true, 'O');
      Utility.format(1862, (-677), false, 'O');
      Utility.compactClassName("tableswitch", false);
      Utility.isJavaIdentifierPart('O');
      try { 
        Utility.typeOfSignature("1862");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1862
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      Utility.equals(byteArray0, byteArray0);
      int int0 = 46;
      Utility.fillup("(@", 46, false, 'F');
      Utility.typeOfSignature("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF(@");
      Utility.format((byte)88, 133, true, ']');
      Utility.format((-54), (-54), true, 'F');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("U>z 94!mW2", "[", "if_icmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U>z 94!mW2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2296), (int) (byte)26, true);
      try { 
        Utility.methodSignatureArgumentTypes("0:    iload_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)105;
      objectArray0[1] = (Object) (byte) (-16);
      objectArray0[2] = (Object) (byte) (-45);
      objectArray0[3] = (Object) (byte)40;
      objectArray0[4] = (Object) (byte)105;
      objectArray0[5] = (Object) (byte)33;
      objectArray0[6] = (Object) (byte)72;
      objectArray0[7] = (Object) (byte)6;
      objectArray0[8] = (Object) (byte) (-16);
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, 4321, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.setBit(178, 178);
      Utility.format(2044, 178, false, 'H');
      try { 
        Utility.typeOfSignature("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH2044");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH2044
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-127);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte)120, false);
      assertEquals("0:    ishl\n1:    lor\n", string0);
      
      String string1 = Utility.compactClassName("0:    ishl\n1:    lor\n", "0:    ishl\n1:    lor\n", true);
      assertEquals("", string1);
      
      int int0 = Utility.clearBit((byte) (-127), 9);
      assertEquals((-639), int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.getSignature("0:    ishl\n1:    lor\n");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-127);
      objectArray0[1] = (Object) "ishl";
      objectArray0[2] = (Object) (byte) (-127);
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{-127, ishl, -127}", string2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = (-2074);
      Utility.classOrInterface((-2074));
      try { 
        Utility.typeOfSignature("Yuw;j6'B)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yuw;j6'B)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.isSet((-2718), (-2718));
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("XfCt3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XfCt3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.methodSignatureReturnType("C");
      Utility.clearBit(1720, 1720);
      Utility.isSet(1720, 1720);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)71;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-6));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 56143. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O#@$w(O3vMn]\"jm,'G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O#@$w(O3vMn]\"jm,'G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "#Kg0?Xsl0I.]";
      try { 
        Utility.typeOfSignature("#Kg0?Xsl0I.]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Kg0?Xsl0I.]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.compactClassName("ON-MI");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteSequence0.skip((byte) (-76));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-76), (byte)32);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-76), (int) (byte)32);
      try { 
        Utility.typeOfMethodSignature("0:    iconst_3\n1:    lload\t\t%180\n3:    lload_2\n4:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iconst_3
         // 1:    lload\t\t%180
         // 3:    lload_2
         // 4:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.replace("o!akY#BXW%5PQ", "o!akY#BXW%5PQ", "o!akY#BXW%5PQ");
      String string0 = Utility.fillup("o!akY#BXW%5PQ", 4096, false, '.');
      Utility.setBit((-1814), 847);
      Utility.fillup(string0, (-1814), false, '.');
      Utility.typeOfSignature("V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic((ConstantInvokeDynamic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInvokeDynamic", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!7\"_Pe!o= 5XX,W*#l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7\"_Pe!o= 5XX,W*#l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Unknown");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface((-299));
      Utility.isJavaIdentifierPart('w');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)92;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.typeOfSignature("JavaClass.debug");
      Utility.typeOfSignature("JavaClass.debug");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("ireturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.convertString("lookupswitch");
      assertEquals("lookupswitch", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-105), 84);
      assertEquals("0:    dcmpl\n1:    <illegal opcode>\n2:    saload\n3:    istore\t\t%28\n5:    <illegal opcode>\n6:    dup_x1\n", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-10);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 248, (-390), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, (int) (byte) (-126));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)56;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_2
         // 1:    nop
         // 2:    ior
         // 3:    dload_0
         // 4:    lstore_1
         // 5:    lshr
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, 83);
      assertEquals("3:    aload_1\n4:    faload\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("05 88 26 2b 30", string1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, true);
      Utility.format(39, (-207), true, 'e');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.compactClassName("f;X%L@*d&,3");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.getSignature("Deprecated attribute with length > 0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)35;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 380, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)74;
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-21);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2671, (int) (byte) (-75));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.replace("checkcast", "checkcast", "K0?i");
      assertEquals("K0?i", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iinc\t\t%184\t69", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("fcmpg", false);
      boolean boolean1 = false;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 360, 360);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-122);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("2v(A>&PCI?");
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[0] = constant0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-122), (byte) (-122));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)114, (byte) (-72));
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-72), 5622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45650. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "Gmgc'(";
      try { 
        Utility.typeOfSignature("Gmgc'(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gmgc'(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.compactClassName("q7$3Xgw");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "P{0o$Yo~D";
      try { 
        Utility.typeOfSignature("P{0o$Yo~D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P{0o$Yo~D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byte byte0 = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 148;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 148, (-2055), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 248, (-390), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((byte) (-84));
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)49;
      Utility.toHexString(byteArray0);
      Utility.convertString("1a 70 c6 1c da aa a3 01 31");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("y96-f@Z\"5XIbN]");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1650, (byte)1);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[2] = (Constant) constantInteger0;
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)38;
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1953817336));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-21), 920);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(920);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-25));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-25), 943);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 39, (int) (byte)29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vB+=5f.OwRTlQ[}\"9%");
      boolean boolean0 = true;
      Utility.compactClassName("T4nmfs;E1e?IO", "T4nmfs;E1e?IO", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = false;
      Utility.methodSignatureReturnType("T4nmfs;E1e?IO", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("t7O.y+K", "^<w )Ks", "T4nmfs;E1e?IO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: t7O.y+K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.compactClassName("X", "X", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-64), 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      String string0 = Utility.accessToString(568);
      assertEquals("static final synchronized interface", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(568);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)54, (-2092));
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore\t\t%86", string1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "9";
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.clearBit(192, (-324));
      String string0 = "%";
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.compactClassName("#u~4F", "#u~4F", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)30;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "checkcast";
      boolean boolean0 = false;
      Utility.compactClassName("checkcast", "m1EWLV~3=0m2-", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), 4441, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.fillup("r", 3014, true, '%');
      Utility.compactClassName(string0, true);
      Utility.fillup(">", (-1731759082), true, '%');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 39. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-104);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 911, (-889275714), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.convertString("\t\t");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = Utility.searchOpcode("CONSTANT_NameAndType");
      assertEquals((short) (-1), short0);
      
      Utility.clearBit(112, 2);
      Utility.fillup("CONSTANT_NameAndType", 2, false, 's');
      int int0 = Utility.clearBit(66, 112);
      assertEquals(66, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 2, 187, true);
      assertEquals("2:    lstore_0\n3:    areturn\n4:    fstore_2\n", string0);
      
      String string1 = Utility.format(8, 2, true, 'w');
      assertEquals("8w", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("{}", true);
      String string0 = Utility.classOrInterface(90);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)120;
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)120, 62);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)99, (byte)114);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("athrow");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("athrow");
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-121));
      constantArray0[4] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)120);
      constantArray0[5] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(202, (byte)120);
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-30), (-3195));
      assertEquals("0:    frem\n1:    <illegal opcode>\n2:    ixor\n3:    fload_2\n4:    i2d\n5:    dadd\n6:    fstore_2\n7:    dload_2\n8:    ishl\n", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 178;
      boolean boolean0 = false;
      Utility.classOrInterface(178);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "class";
      Utility.printArray(objectArray0, false);
      String string0 = "Y:u8/";
      Utility.replace("class", "class", "class");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("gjU^j3Te[=R5]*i`u");
      try { 
        Utility.typeOfMethodSignature("JfRg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JfRg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55808. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K+]JQ/0sq:*FSn(68a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K+]JQ/0sq:*FSn(68a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = Utility.decode("SuLvr#^", false);
      String string0 = "4h[8o[[u^Zfsy";
      Utility.compactClassName("4h[8o[[u^Zfsy");
      Utility.replace("4h[8o[[u^Zfsy", "SuLvr#^", "{\"java.lang.Object@6d1e874a\", \"java.lang.Object@456ab5cd\"}");
      int int0 = (-2057);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2057), (-2057), false);
      String string1 = "org.apache.bcel.classfile.utility$javareader";
      boolean boolean0 = true;
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getGenericSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.replace("N^ ", "N^ ", "N^ ");
      try { 
        Utility.typeOfSignature("N^ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N^ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ",*";
      Utility.searchOpcode(",*");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (-1714), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "8fR";
      try { 
        Utility.typeOfSignature("8fR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8fR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnull\t\t#-142", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.format(122, 122, false, ':');
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::122", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)90;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-9);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::122");
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1125821945), (-1661));
      assertEquals("0:    <illegal opcode>\n1:    f2l\n2:    ifne\t\t#-15268\n5:    fload_3\n6:    <illegal opcode>\n", string1);
      
      String string2 = Utility.classOrInterface((byte) (-102));
      assertEquals("interface", string2);
      
      boolean boolean0 = Utility.isSet(253, 253);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.classOrInterface(72);
      String string1 = Utility.getSignature(":5(a>S;6~y+2");
      assertEquals("L:5(a>S;6~y+2;", string1);
      
      short short0 = Utility.searchOpcode("tableswitch");
      assertEquals((short)170, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)21;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string2 = Utility.replace("class", "org.apache.bcel.classfile.ConstantString", "V");
      assertTrue(string2.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      Constant constant0 = constantClass1.copy();
      constantArray0[1] = constant0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(43, (byte)68);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("jsr_w");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload\t\t%42", string3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "SRm][B3A[p";
      // Undeclared exception!
      try { 
        Utility.getSignature("SRm][B3A[p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B3A[p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.setBit(254, 78);
      Utility.compactClassName("wide", "wide", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, 254, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byte byte0 = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byte byte1 = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byte byte2 = (byte)112;
      byteArray0[3] = (byte)112;
      byte byte3 = (byte)74;
      byteArray0[4] = (byte)74;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16384, 59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-9);
      ConstantPool constantPool0 = null;
      int int0 = 58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature("//`$/^1-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: //`$/^1-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)88;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2237, 1048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte) (-33);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte) (-23);
      byteArray1[5] = (byte) (-33);
      byteArray1[6] = (byte) (-87);
      byteArray1[7] = (byte)69;
      byteArray1[8] = (byte)56;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit((-1770), 26);
      assertEquals((-1770), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)116;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)98, (byte)120);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 3, (int) (byte)116, true);
      assertEquals("5:    ineg\n", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-40);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, 925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "?p#";
      try { 
        Utility.typeOfSignature("?p#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?p#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface(2);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-42);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), (-1237));
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    ixor\n3:    iushr\n4:    bastore\n5:    <illegal opcode>\n6:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.replace("", "ndr)?l%~J(tW3o", "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)79;
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(197, 187);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(197, (byte)79);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-554), 187);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "OnHaDt)rT";
      Utility.compactClassName("OnHaDt)rT");
      Utility.clearBit(3087, 11);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)123;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("char", "l2i", "x1P.):9F9q!'|{\"r");
      Utility.clearBit(36, 36);
      Utility.getSignature("9Gs\"9mm1F{+tM8-$>");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (int) (byte) (-122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.setBit(230, 230);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.convertString("invokevirtual");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.compactClassName("invokevirtual");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G\"3DH,YP-");
      byteArray0[0] = (byte)1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-41);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.fillup("fstore_0", 2308, false, '2');
      Utility.accessToString(1657, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)76, (byte)76);
      constantArray0[0] = (Constant) constantFieldref0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, false, true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"";
      stringArray0[1] = "\"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"";
      stringArray0[2] = "\"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"";
      stringArray0[3] = "\"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"";
      stringArray0[4] = "\"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"";
      Utility.methodTypeToSignature("\"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"", stringArray0);
      Utility.isSet(2737, 2737);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@268fdaeb\", \"java.lang.Object@1b87fe9d\", \"java.lang.Object@7167c47e\", \"java.lang.Object@4211666b\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, 174);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1441144234));
      int int0 = Utility.clearBit((-1137), 92);
      assertEquals((-268436593), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)9;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("interface");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format((byte) (-113), (byte) (-113), true, ',');
      assertEquals("-113", string2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) (byte)9;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) byteSequence0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte) (-113);
      objectArray0[6] = (Object) "interface";
      objectArray0[7] = (Object) "interface";
      objectArray0[8] = (Object) byteSequence0;
      Utility.printArray(objectArray0, false, false);
      String string3 = Utility.getSignature("interface, 9, null, org.apache.bcel.util.ByteSequence@22e9106a, null, -113, interface, interface, org.apache.bcel.util.ByteSequence@22e9106a");
      assertEquals("Linterface,;", string3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.format(5, 5, true, 'e');
      assertEquals("5eeee", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)6;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1752), (int) (byte) (-46));
      assertEquals("0:    lreturn\n1:    fload_2\n2:    lconst_0\n3:    <illegal opcode>\n4:    impdep2\n5:    istore_3\n6:    athrow\n7:    iconst_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.compactClassName(".pn)(;c``S\fb:", true);
      Utility.format((-503), 504, true, 'W');
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString((byte)93);
      constantArray0[0] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong(1300L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\n");
      Utility.convertString(")\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ")\n";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) ")\n";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) ")\n";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) ")\n";
      Utility.printArray(objectArray0, true);
      StringWriter stringWriter0 = new StringWriter(103);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.println(103);
      PrintWriter printWriter0 = mockPrintWriter0.printf("{)\n, null, )\n, null, null, )\n, null, )\n}", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("75 78 00", string0);
      
      int int0 = Utility.clearBit((byte)120, 761);
      assertEquals(120, int0);
      
      String string1 = Utility.format((-2648), (-2648), true, '#');
      assertEquals("-2648", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1129195910), 1100, true);
      assertEquals("0:    lneg\n1:    ishl\n2:    nop\n", string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0:    lneg\n1:    ishl\n2:    nop\n";
      stringArray0[1] = "~cSa?C+L%1n";
      stringArray0[2] = "-2648";
      stringArray0[3] = "0:    lneg\n1:    ishl\n2:    nop\n";
      stringArray0[4] = "0:    lneg\n1:    ishl\n2:    nop\n";
      stringArray0[5] = "0:    lneg\n1:    ishl\n2:    nop\n";
      stringArray0[6] = "0:    lneg\n1:    ishl\n2:    nop\n";
      String string3 = Utility.methodTypeToSignature("0:    lneg\n1:    ishl\n2:    nop\n", stringArray0);
      assertEquals("(L0:;L~cSa?C+L%1n;L-2648;L0:;L0:;L0:;L0:;)L0:;", string3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)79;
      byte byte0 = (byte)2;
      byteArray0[2] = (byte)2;
      byte byte1 = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byte byte2 = (byte)101;
      byteArray0[4] = (byte)101;
      byte byte3 = (byte)4;
      byteArray0[5] = (byte)4;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 118, (int) (byte)101, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)88;
      Utility.toHexString(byteArray0);
      Utility.isSet(177, 0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), 181, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dadd
         // 1:    istore_2
         // 2:    freturn
         // 3:    <illegal opcode>
         // 4:    dload_2
         // 5:    faload
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.typeOfSignature("D$!g#h?]Bapm");
      String string0 = "[]";
      boolean boolean0 = false;
      Utility.compactClassName("[]", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]rG,:");
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.format(245, 125, true, 'H');
      Utility.compactClassName("245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[1] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[2] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[3] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[4] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[5] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[6] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[7] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      objectArray0[8] = (Object) "245HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("p.rv?%:F]}:xX(pCHH", "sFzY]6^jp[zxAO'pHVq", "sFzY]6^jp[zxAO'pHVq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p.rv?%:F]}:xX(pCHH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getfield");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getfield");
      Utility.compactClassName("newarray", "boolean", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "newarray";
      stringArray0[1] = "newarray";
      stringArray0[2] = "jsr_w";
      stringArray0[3] = "newarray";
      stringArray0[4] = "newarray";
      stringArray0[5] = "boolean";
      stringArray0[6] = "int";
      stringArray0[7] = "newarray";
      Utility.methodTypeToSignature("int", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)100;
      byteArray0[0] = (byte)100;
      byte byte1 = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      byte byte2 = (byte)68;
      byteArray0[2] = (byte)68;
      byte byte3 = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byte byte4 = (byte)99;
      byteArray0[4] = (byte)99;
      byte byte5 = (byte) (-82);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte) (-82));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)30;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(67, 59);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1800, 150, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)46;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 252, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string1 = "";
      Utility.compactClassName("");
      String string2 = "2/AP";
      try { 
        Utility.typeOfSignature("2/AP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2/AP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getstatic");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2094, 72);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((byte)57, (byte)57);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore\t\t%122", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = Utility.clearBit((-1818), 1846);
      assertEquals((-4196122), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)92;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4196122), 155, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-302), 2393);
      assertEquals("0:    <illegal opcode>\n1:    aload\t\t%42\n3:    fconst_0\n4:    bipush\t\t92\n", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0:    <illegal opcode>\n1:    aload\t\t%42\n3:    fconst_0\n4:    bipush\t\t92\n";
      stringArray0[1] = "0:    <illegal opcode>\n1:    aload\t\t%42\n3:    fconst_0\n4:    bipush\t\t92\n";
      stringArray0[2] = "0:    <illegal opcode>\n1:    aload\t\t%42\n3:    fconst_0\n4:    bipush\t\t92\n";
      stringArray0[3] = "4rA|4^ZP=hXlV1a?";
      stringArray0[4] = "0:    <illegal opcode>\n1:    aload\t\t%42\n3:    fconst_0\n4:    bipush\t\t92\n";
      stringArray0[5] = "4rA|4^ZP=hXlV1a?";
      String string1 = Utility.methodTypeToSignature("4rA|4^ZP=hXlV1a?", stringArray0);
      assertEquals("(L0:;L0:;L0:;L4rA|4^ZP=hXlV1a?;L0:;L4rA|4^ZP=hXlV1a?;)L4rA|4^ZP=hXlV1a?;", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte)96;
      byteArray0[1] = (byte)96;
      byte byte1 = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)40;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('V');
      String string0 = "/cobCF$-Z~-,[";
      try { 
        Utility.decode("/cobCF$-Z~-,[", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.signatureToString("FVdjPtzVff1Y(P");
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)118;
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E4`LVW9G1etJ");
      Utility.isSet(1609, (-126));
      Utility.codeToString(byteArray0, (ConstantPool) null, (-203), 66, true);
      Utility.compactClassName("0:    lmul\n1:    fneg\n", false);
      Utility.compactClassName("0:    lmul\n1:    fneg\n");
      String string0 = "H^jw`{`2nG7K";
      try { 
        Utility.typeOfMethodSignature("H^jw`{`2nG7K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H^jw`{`2nG7K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6t0PC;z\"");
      Utility.compactClassName("");
      Utility.fillup("", 1123, false, 'z');
      try { 
        Utility.typeOfSignature("!]{TEruor2}=g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]{TEruor2}=g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("java.lang.Object@7e396f1d", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.methodSignatureToString("()Ljava/lang/Object@7e396f1d;", "()Ljava/lang/Object@7e396f1d;", "()Ljava/lang/Object@7e396f1d;");
      Utility.isJavaIdentifierPart('G');
      Utility.searchOpcode("java.lang.Object@7e396f1d");
      Utility.compactClassName("()Ljava/lang/Object@7e396f1d; Object@7e396f1d ()Ljava/lang/Object@7e396f1d;()", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-291);
      Utility.clearBit((-291), (-291));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0I&2|8FH[MHjFQc]]_";
      stringArray0[1] = "2rur|";
      stringArray0[2] = "2rur|";
      stringArray0[3] = "2rur|";
      stringArray0[4] = "2rur|";
      stringArray0[5] = "2rur|";
      stringArray0[6] = "2rur|";
      stringArray0[7] = "2rur|";
      stringArray0[8] = "2rur|";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("2rur|", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[MHjFQc]]_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.setBit(1924, 1924);
      Utility.convertString("{\"java.lang.Object@15f87f60\"}");
      Utility.clearBit(1924, 1924);
      try { 
        Utility.typeOfMethodSignature("{\"java.lang.Object@15f87f60\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@15f87f60\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 194;
      Utility.format(194, 520, true, ')');
      try { 
        Utility.typeOfSignature("MI.faqZ>Elu'e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MI.faqZ>Elu'e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W-<x;b&X1e22rRt-5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W-<x;b&X1e22rRt-5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = ")--";
      try { 
        Utility.typeOfSignature(")--");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )--
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lreturn");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lreturn");
      boolean boolean0 = false;
      Utility.compactClassName("lreturn", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "byte";
      stringArray0[1] = "lreturn";
      stringArray0[2] = "lreturn";
      stringArray0[3] = "lreturn";
      stringArray0[4] = "lreturn";
      Utility.methodTypeToSignature("lreturn", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(BLlreturn;Llreturn;Llreturn;Llreturn;)Llreturn;", false);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M0{");
      Utility.isJavaIdentifierPart('');
      Utility.convertString("M0{");
      Utility.accessToString(2043, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2043, (-1693));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "N=";
      // Undeclared exception!
      try { 
        Utility.signatureToString("N=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`nJ41";
      stringArray0[1] = "`nJ41";
      Utility.methodTypeToSignature("`nJ41", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-23);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-3661));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    faload\n3:    <illegal opcode>\n4:    <illegal opcode>\n", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\"`nJ41\", \"`nJ41\"}", string1);
      
      String string2 = Utility.methodTypeToSignature("*EZaNw", stringArray0);
      assertEquals("(L`nJ41;L`nJ41;)L*EZaNw;", string2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "UhB>>8N6W=<Ih$b<";
      // Undeclared exception!
      try { 
        Utility.decode("UhB>>8N6W=<Ih$b<", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byte byte0 = (byte)31;
      byteArray0[1] = (byte)31;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "long", true);
      Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      Utility.convertString("long");
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.format(122, 122, false, ':');
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::122", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)90;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::122");
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1125821945), (-1661));
      assertEquals("0:    <illegal opcode>\n1:    f2l\n2:    freturn\n3:    wide\t(wide)\n4:    dup_x1\n5:    fload_3\n6:    impdep2\n", string1);
      
      String string2 = Utility.classOrInterface((byte) (-82));
      assertEquals("interface", string2);
      
      boolean boolean0 = Utility.isSet(253, 253);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-20);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (int) (byte) (-74), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ", ";
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "<*cDAz;$%X";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      Utility.searchOpcode("<*cDAz;$%X");
      Utility.typeOfSignature("ZKfcsyq0$RZ>");
      try { 
        Utility.decode("ZKfcsyq0$RZ>", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.typeOfSignature("Tw");
      Utility.classOrInterface(1628);
      try { 
        Utility.methodSignatureReturnType("Tw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)1;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, 6, true);
      assertEquals("1:    fload_2\n2:    aload_0\n3:    aconst_null\n", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{%^bOk0Z-!%X");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 73;
      Utility.clearBit(73, 73);
      char char0 = 'J';
      Utility.format((-1984720662), (-1923), false, 'J');
      Utility.setBit(123, 73);
      try { 
        Utility.typeOfSignature("-1984720662");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1984720662
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.fillup("The suffix must not be null", 1450, false, 'u');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)78;
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)78, 7);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1024, (-2504));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4626);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantInvokeDynamic1.dump(dataOutputStream0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), (int) (byte) (-112), true);
      assertEquals("0:    dup_x1\n1:    d2f\n2:    astore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)1;
      byteArray0[0] = (byte)4;
      byteArray0[8] = (byte)65;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)39);
      constantDouble0.clone();
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantDouble0);
      Utility.codeToString(byteArray0, constantPool0, (-92), 63);
      try { 
        Utility.methodSignatureReturnType("breakpoint", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.typeOfSignature("Cache hit ");
      String string0 = "org.apache.bcel.generic.Type";
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.generic.Type", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.generic.Type'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString(568);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(568);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)54, (-2092));
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)101;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)70, (byte)19);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)19, 270);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-4);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$c4$7bt$ee$fb$p$L$fc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $c4$7bt$ee$fb$p$L$fc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "\t\t#";
      Utility.replace("invokestatic", "\t\t#", "invokestatic");
      try { 
        Utility.typeOfSignature("=O#:2>2eB2Op6h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =O#:2>2eB2Op6h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'n',*5;$l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'n',*5;$l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-98);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid method signature: ");
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-81);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 228, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4642, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-65);
      byte byte0 = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-68));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 198, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zd#aJ|Bt8|T|4rkzy");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "QP@Gs,)m6G";
      String string0 = Utility.methodTypeToSignature("QP@Gs,)m6G", stringArray0);
      assertEquals("(LQP@Gs,)m6G;)LQP@Gs,)m6G;", string0);
      
      byte[] byteArray0 = Utility.decode("EDl%$vVffc%T", false);
      int int0 = Utility.setBit((-835), (-835));
      assertEquals((-835), int0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals(11, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.format(53, 1, true, '(');
      Utility.getSignature("boolean");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char char0 = 'j';
      Utility.isJavaIdentifierPart('j');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2839), 207);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)59;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1477), 254, true);
      assertEquals("0:    <illegal opcode>\n1:    pop\n2:    iflt\t\t#5253\n5:    f2i\n6:    iconst_1\n7:    istore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "3HXXDrT$GY6f$d";
      try { 
        Utility.typeOfSignature("3HXXDrT$GY6f$d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3HXXDrT$GY6f$d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = " SeNSfLpLhc/%;:z";
      Utility.getSignature(" SeNSfLpLhc/%;:z");
      String string1 = "l@QpTM*&;";
      String string2 = "5";
      Utility.replace("l@QpTM*&;", "LSeNSfLpLhc/%;:z;", "5");
      String string3 = "5OtDua!R";
      try { 
        Utility.typeOfSignature("5OtDua!R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5OtDua!R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("jsr_w", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", false);
      Utility.isJavaIdentifierPart('e');
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.typeOfSignature("K*s&$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K*s&$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.accessToString(81);
      Utility.getSignature("jsr_w");
      Utility.typeOfSignature("Ljsr_w;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "a0jh205eL*HQ\"";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a0jh205eL*HQ\"");
      String string1 = "&U\"Mn:wiF";
      try { 
        Utility.typeOfSignature("&U\"Mn:wiF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &U\"Mn:wiF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B(a5+B?N{U%-$kIF[-7");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "B(a5+B?N{U%-$kIF[-7";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, B(a5+B?N{U%-$kIF[-7}", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifgt\t\t#22425", string1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false, false);
      Utility.convertString("java.lang.Object@9ff770e, java.lang.Object@c246a5c");
      Utility.compactClassName("java.lang.Object@9ff770e, java.lang.Object@c246a5c", true);
      try { 
        Utility.methodSignatureReturnType("=*]g", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=*]g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureReturnType("W B2tBy4}yiGeKdA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W B2tBy4}yiGeKdA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.isSet((-5165), 1909);
      Utility.replace("\t", "1_PrsxgWhh", "\t");
      Utility.getSignature("\t");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      String string0 = "ap_l:$oB";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("1_PrsxgWhh", "ap_l:$oB", "ap_l:$oB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1_PrsxgWhh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "Byte code error: ";
      Utility.typeOfSignature("Byte code error: ");
      boolean boolean0 = true;
      Utility.compactClassName("D", "Byte code error: ", true);
      String string1 = "Mh";
      String string2 = "org.apache.bcel.classfile.Utility";
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "D}@RgAuobA;_EGVY";
      Utility.decode("D}@RgAuobA;_EGVY", false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('g');
      Utility.decode("D}@RgAuobA;_EGVY", false);
      Utility.searchOpcode("V;zJ.&0!mrO]{_MBla");
      Utility.methodSignatureReturnType("D}@RgAuobA;_EGVY", false);
      Utility.clearBit((-2751), 1072);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`nJ41";
      stringArray0[1] = "`nJ41";
      Utility.methodTypeToSignature("`nJ41", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (-3661));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.getSignature("OlQ?");
      String string0 = "O4P;bb{_A";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("O4P;bb{_A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O4P;bb{_A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 178;
      boolean boolean0 = false;
      Utility.accessToString(178, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "private final synchronized transient";
      Utility.printArray(objectArray0, false);
      String string0 = "Y:u8/";
      try { 
        Utility.methodSignatureReturnType("Y:u8/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y:u8/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Utility.compactClassName("StackMap", false);
      Utility.isSet(1609, 1609);
      Utility.typeOfSignature("StackMap");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "StackMap";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "StackMap";
      objectArray0[3] = (Object) "StackMap";
      objectArray0[4] = (Object) "StackMap";
      objectArray0[5] = (Object) "StackMap";
      objectArray0[6] = (Object) "StackMap";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      Utility.fillup("{\"java.lang.Object@5203b7f4\", \"java.lang.Object@33bfc59a\", \"java.lang.Object@1210e50d\", \"java.lang.Object@5c0599e0\", \"java.lang.Object@13f62983\", \"java.lang.Object@5ea8bd72\", \"java.lang.Object@4b850327\"}", 773, true, '[');
      try { 
        Utility.methodSignatureReturnType("L<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "U8DL\"#F8$uVXO7R";
      try { 
        Utility.typeOfSignature("U8DL\"#F8$uVXO7R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U8DL\"#F8$uVXO7R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "QI\"p(M12.zH";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QI\"p(M12.zH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QI\"p(M12.zH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Z", false);
      Utility.getSignature("boolean");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-68);
      byte byte0 = (byte)103;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte) (-15);
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-72));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[1] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(179);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Z");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[4] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_1 = null;
      try {
        constantUtf8_1 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.replace("long", "long", "long");
      boolean boolean0 = true;
      char char0 = '1';
      Utility.fillup("long", 76, true, '1');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)119;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-2662), (-873));
      // Undeclared exception!
      try { 
        constantPool0.getConstantString(67, (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      byte byte1 = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-108);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-107);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1025), (int) (byte) (-108));
      Utility.classOrInterface((-2505));
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "}S3KpN$GD,sZnPh ,^";
      boolean boolean0 = true;
      try { 
        Utility.decode("}S3KpN$GD,sZnPh ,^", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-1), (byte)81);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "I:o.*ajm-B#\\bd7J)R";
      Utility.getSignature("I:o.*ajm-B#\bd7J)R");
      try { 
        Utility.methodSignatureReturnType("I:o.*ajm-B#\bd7J)R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("MOJ^A:D\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MOJ^A:D\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.signatureToString("Invalid type: ", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G~KHJ6U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G~KHJ6U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(10, 2651);
      Utility.setBit(2651, 65);
      Utility.searchOpcode("freturn");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-4);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P*/:Q,1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P*_/:Q,1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short short0 = Utility.searchOpcode("jnx9d9");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jnx9d9");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "jnx9d9";
      objectArray0[1] = (Object) "jnx9d9";
      objectArray0[2] = (Object) "jnx9d9";
      objectArray0[3] = (Object) "jnx9d9";
      objectArray0[4] = (Object) "jnx9d9";
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("jnx9d9, jnx9d9, jnx9d9, jnx9d9, jnx9d9", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-108);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("q$5bU$c4$bb$fe_$94", string1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.compactClassName("g/fnOB%");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[B%.$XMJE*b";
      stringArray0[1] = "g.fnOB%";
      stringArray0[2] = " (";
      stringArray0[3] = "g/fnOB%";
      stringArray0[4] = "g.fnOB%";
      stringArray0[5] = "g/fnOB%";
      stringArray0[6] = "[B%.$XMJE*b";
      stringArray0[7] = "g/fnOB%";
      stringArray0[8] = "g/fnOB%";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[B%.$XMJE*b", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [B%.$XMJE*b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(67, true);
      int int0 = 64;
      Utility.classOrInterface(64);
      int int1 = 2699;
      Utility.classOrInterface(2699);
      String string0 = "Hrc!6g*=wY1I/";
      try { 
        Utility.methodSignatureReturnType("Hrc!6g*=wY1I/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hrc!6g*=wY1I/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)7;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)10;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)72, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(</m`@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (</m`@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.accessToString((-788), true);
      Utility.replace("'", "protected static volatile transient abstract strictfp synthetic annotation enum", "protected static volatile transient abstract strictfp synthetic annotation enum");
      Utility.convertString("'");
      Utility.format((-788), (-788), true, 'k');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "protected static volatile transient abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "-788";
      objectArray0[3] = (Object) "protected static volatile transient abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "\\'";
      objectArray0[5] = (Object) "\\'";
      objectArray0[6] = (Object) "'";
      Utility.printArray(objectArray0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.isJavaIdentifierPart('M');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-108);
      byte byte0 = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)92;
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)86);
      // Undeclared exception!
      try { 
        Utility.signatureToString("5:    sastore\n6:    fadd\n7:    astore_2\n8:    dup2\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5:    sastore
         // 6:    fadd
         // 7:    astore_2
         // 8:    dup2
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "L',^Q%";
      try { 
        Utility.methodSignatureReturnType("L',^Q%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L',^Q%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), 43, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.setBit(92, 92);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(20);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      Utility.clearBit(91, (-668));
      Utility.format(1432, 81, true, 'J');
      Utility.typeOfSignature("Illegally nested brackets:");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Illegally nested brackets:", "Illegally nested brackets:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "X,]7ZJx";
      try { 
        Utility.methodSignatureReturnType("X,]7ZJx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X,]7ZJx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)94;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)39);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-71), 63);
      assertEquals("0:    <illegal opcode>\n1:    castore\n2:    if_acmpeq\t\t#-19671\n5:    aconst_null\n6:    pop2\n7:    iconst_1\n8:    dup2_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(">9TyO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >9TyO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-123);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte) (-123));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "85");
      Utility.getSignature(")MVkWS");
      Utility.clearBit((byte) (-123), (byte) (-123));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-50);
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte) (-123);
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.methodSignatureReturnType("]@a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]@a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.compactClassName(" &Ch", true);
      Utility.accessToString((-389), true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("\t\t", "[QS", true);
      Utility.accessToString(2264, true);
      Utility.compactClassName("public private static final volatile abstract strictfp synthetic annotation enum");
      int int0 = 4332;
      Utility.isSet((-389), 4332);
      int int1 = 197;
      Utility.isSet(147, 197);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/P2Ybvm-#M'hL|7@";
      stringArray0[1] = "wide";
      stringArray0[2] = "/P2Ybvm-#M'hL|7@";
      stringArray0[3] = "/P2Ybvm-#M'hL|7@";
      stringArray0[4] = "6~[#4T ";
      stringArray0[5] = "/P2Ybvm-#M'hL|7@";
      stringArray0[6] = "/P2Ybvm-#M'hL|7@";
      stringArray0[7] = "/P2Ybvm-#M'hL|7@";
      stringArray0[8] = "/P2Ybvm-#M'hL|7@";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("/P2Ybvm-#M'hL|7@", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[#4T 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Utility.compactClassName("vz|0Oeu_^h=bYfsj%", "Q{qV)", true);
      Utility.printArray((Object[]) null, true, true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dstore_1";
      stringArray0[1] = "vz|0Oeu_^h=bYfsj%";
      stringArray0[2] = "dstore_1";
      stringArray0[3] = "vz|0Oeu_^h=bYfsj%";
      stringArray0[4] = "vz|0Oeu_^h=bYfsj%";
      Utility.methodTypeToSignature("dstore_1", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vz|0Oeu_^h=bYfsj%");
      Utility.isJavaIdentifierPart('Z');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "vz|0Oeu_^h=bYfsj%";
      objectArray0[2] = (Object) "dstore_1";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "vz|0Oeu_^h=bYfsj%";
      objectArray0[5] = (Object) "vz|0Oeu_^h=bYfsj%";
      objectArray0[6] = (Object) "dstore_1";
      objectArray0[7] = (Object) "vz|0Oeu_^h=bYfsj%";
      objectArray0[8] = (Object) "dstore_1";
      Utility.printArray(objectArray0);
      Utility.convertString("dstore_1");
      Utility.signatureToString("J", true);
      String string1 = Utility.compactClassName(")", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-231), 1456, false);
      assertEquals("0:    astore_2\n1:    dload_3\n2:    lstore_0\n3:    impdep2\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)39;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, 221, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.replace("bytes must not be null!", " arg", " arg");
      int int0 = 239;
      Utility.format(239, 239, false, '$');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)107;
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("bytes must not be null!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.toHexString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0DF?");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Utility.printArray(objectArray0);
      Utility.searchOpcode("if_acmpeq");
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "Exception";
      try { 
        Utility.typeOfSignature("Exception");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exception
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("J674@~RtTWD+F%CO", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J674@~RtTWD+F%CO");
      Utility.compactClassName("J674@~RtTWD+F%CO");
      Utility.compactClassName("impdep2");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)62;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a9$mi$3e", string0);
      
      String string1 = Utility.methodSignatureReturnType("C");
      assertEquals("char", string1);
      
      short short0 = Utility.searchOpcode("J674@~RtTWD+F%CO");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.convertString("lload_2");
      String[] stringArray0 = new String[6];
      String string0 = "mVF$yl`E";
      stringArray0[0] = "mVF$yl`E";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[1] = "lload_2";
      stringArray0[2] = "lload_2";
      stringArray0[3] = "lload_2";
      stringArray0[4] = "lload_2";
      stringArray0[5] = "lload_2";
      Utility.methodTypeToSignature("lload_2", stringArray0);
      Utility.compactClassName("putfield");
      String string1 = "monitorexit";
      Utility.searchOpcode("monitorexit");
      Utility.compactClassName("freturn");
      Utility.printArray((Object[]) stringArray0);
      try { 
        Utility.typeOfSignature("lload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.convertString("<lIB)Fv&C7&k'Y@j0x");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("int");
      mockPrintWriter0.close();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "+7y`gqQyZm3Ua_$\"<NZ";
      objectArray0[1] = (Object) "+7y`gqQyZm3Ua_$\"<NZ";
      mockPrintWriter0.printf("+7y`gqQyZm3Ua_$\"<NZ", objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "int";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\nException handler(s) = \n";
      stringArray0[1] = "\nException handler(s) = \n";
      stringArray0[2] = "\nException handler(s) = \n";
      stringArray0[3] = "int";
      Utility.methodTypeToSignature("\nException handler(s) = \n", stringArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\\";
      stringArray0[1] = "\\";
      stringArray0[2] = "\\";
      stringArray0[3] = "\\";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("\\", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.compactClassName("boolean", "4_`X*0+:54", true);
      String string0 = "The wildcard must not be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The wildcard must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.compactClassName("athrow");
      assertEquals("athrow", string0);
      
      String string1 = Utility.methodTypeToSignature("athrow", (String[]) null);
      assertEquals("()Lathrow;", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)74;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantLong constantLong0 = new ConstantLong((byte) (-99));
      constantArray0[0] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString((byte)5);
      constantArray0[1] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-6855), 73);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)74, (byte)74);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(194);
      constantArray0[5] = (Constant) constantMethodType0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[6] = constant0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("GCm&F5005i:WQCowaSn");
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 17, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.compactClassName("#u~4F", "#u~4F", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 231, 231, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)74;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-49);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte) (-49);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      boolean boolean1 = Utility.isJavaIdentifierPart('5');
      assertFalse(boolean1 == boolean0);
      
      int int0 = Utility.setBit((-1290), (byte)2);
      assertEquals((-1290), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("SAME_LOCALS_1_STACK", true);
      Utility.signatureToString("SAME_LOCALS_1_STACK");
      try { 
        Utility.methodSignatureArgumentTypes("char", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "D}@RgAuobA;_EGVY";
      Utility.decode("D}@RgAuobA;_EGVY", false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isJavaIdentifierPart('g');
      Utility.decode("D}@RgAuobA;_EGVY", false);
      Utility.searchOpcode("V;zJ.&0!mrO]{_MBla");
      Utility.signatureToString("V;zJ.&0!mrO]{_MBla", false);
      Utility.clearBit((-2751), 1072);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "static", "static", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "byte";
      stringArray0[1] = "Rix, </lb4";
      String string0 = Utility.methodTypeToSignature("byte", stringArray0);
      assertEquals("(BLRix,;)B", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.getSignature("Unreachable default case reached!");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte)24;
      byteArray1[5] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "lconst_1";
      Utility.getSignature("lconst_1");
      Utility.getSignature("Llconst_1;");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("HS$yE", "@MM?.hEft ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @MM?.hEft 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byte byte0 = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-57);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      int int0 = 1981;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1981, (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = (-1290);
      Utility.setBit(237, (-1290));
      String string0 = "[]";
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.replace("9Ir:lm\"", "9Ir:lm\"", "9Ir:lm\"");
      Utility.accessToString((-2359));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "public static volatile transient interface abstract synthetic annotation enum";
      objectArray0[1] = (Object) "9Ir:lm\"";
      objectArray0[2] = (Object) "public static volatile transient interface abstract synthetic annotation enum";
      objectArray0[3] = (Object) "9Ir:lm\"";
      objectArray0[4] = (Object) "public static volatile transient interface abstract synthetic annotation enum";
      objectArray0[5] = (Object) "public static volatile transient interface abstract synthetic annotation enum";
      objectArray0[6] = (Object) "9Ir:lm\"";
      objectArray0[7] = (Object) "public static volatile transient interface abstract synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[8] = object0;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("3(", "public static volatile transient interface abstract synthetic annotation enum", "3(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-112);
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", true);
      assertTrue(string1.equals((Object)string0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$l$8b$I$A$A$A$A$A$A$A", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "$l$8b$I$A$A$A$A$A$A$A", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      String string2 = Utility.accessToString((-2181), true);
      assertEquals("public private static final volatile native abstract synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Vf8kIRZZM(m";
      stringArray0[1] = "Vf8kIRZZM(m";
      stringArray0[2] = "Vf8kIRZZM(m";
      stringArray0[3] = "Vf8kIRZZM(m";
      String string0 = Utility.methodTypeToSignature("Vf8kIRZZM(m", stringArray0);
      assertEquals("(LVf8kIRZZM(m;LVf8kIRZZM(m;LVf8kIRZZM(m;LVf8kIRZZM(m;)LVf8kIRZZM(m;", string0);
      
      String string1 = Utility.replace("Vf8kIRZZM(m", "(LVf8kIRZZM(m;LVf8kIRZZM(m;LVf8kIRZZM(m;LVf8kIRZZM(m;)LVf8kIRZZM(m;", " 1");
      assertEquals("Vf8kIRZZM(m", string1);
      
      String string2 = Utility.compactClassName("NiKIlgzyd tIPpgu", false);
      assertEquals("NiKIlgzyd tIPpgu", string2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.accessToString(71);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)66;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "public private protected volatile");
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)73, 89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "RuntimeInvisibleParameterAnnotations";
      try { 
        Utility.typeOfSignature("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("... (truncated)");
      assertEquals("L///;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)89;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$a0$9e3Y", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "V;zJ.&0!mr\\O]{_MBla";
      Utility.compactClassName("V;zJ.&0!mrO]{_MBla", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("V;zJ.&0!mrO]{_MBla");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "V;zJ.&0!mrO]{_MBla");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "V;zJ.&0!mrO]{_MBla";
      Utility.printArray(printStream0, objectArray0);
      String string1 = ":ou+ E;jAClw8e/";
      boolean boolean0 = false;
      int int0 = 8;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 49
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.clearBit(3625, 3625);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-421), (-421));
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("*sK;\"*8Rrv9ZCt8q9");
      assertEquals("*sK;\"*8Rrv9ZCt8q9", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-42);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      try { 
        Utility.decode("}fS28m,>';@zH_(.3FO", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.accessToString(1124, true);
      assertEquals("protected volatile abstract", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('x');
      String string0 = "*'tyuy:4#F.II T6";
      MockPrintStream mockPrintStream0 = new MockPrintStream("*'tyuy:4#F.II T6");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) mockPrintStream1;
      Object object0 = new Object();
      mockPrintStream1.println(object0);
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "*'tyuy:4#F.II T6";
      // Undeclared exception!
      try { 
        mockPrintStream1.printf((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = 176;
      Utility.accessToString(176);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("final synchronized transient", "java.lang.java.lang.", "qvtxT<3'px");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: final synchronized transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=");
      mockPrintWriter0.print(false);
      Object[] objectArray0 = new Object[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "double";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      mockPrintWriter0.printf((Locale) null, "double", objectArray0);
      Object[] objectArray1 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("double", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.accessToString(0, false);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-110);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-47);
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) (byte) (-110);
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) (byte) (-47);
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (-374), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.replace("\t<", "|hP]4N$fBbI9:A", "|hP]4N$fBbI9:A");
      Utility.clearBit((-4024), 0);
      try { 
        Utility.methodSignatureArgumentTypes("\t<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "ER@/!xVxb.{k]aEVal-";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("ER@/!xVxb.{k]aEVal-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ER@/!xVxb.{k]aEVal-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3255, 3255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = Utility.classOrInterface(3633);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.setBit(1074, 1074);
      Utility.clearBit(2028, 18);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)67;
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 96
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.fillup("%J9KTH%VO'", 3648, false, 'p');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "%J9KTH%VO'";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "%J9KTH%VO'";
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) string0;
      String string1 = Utility.printArray(objectArray0, false, true);
      Utility.compactClassName("%J9KTH%VO'", string1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.compactClassName(string1);
      // Undeclared exception!
      try { 
        Utility.signatureToString(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"%J9KTH%VO'\", \"java.lang.Object@50d69f6\", \"%J9KTH%VO'\", \"pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp%J9KTH%VO'\", \"pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp%J9KTH%VO'\", \"pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp%J9KTH%VO'\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("41 0b 05 eb 00", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "boolean";
      try { 
        Utility.typeOfMethodSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid signature: ", true);
      Utility.getSignature("lH,");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.java.lang.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      String string0 = "$vH,*m^";
      String string1 = null;
      int int0 = 3073;
      int int1 = 76;
      MockFile mockFile0 = new MockFile("dd3h@,^uSt");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "{}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"{}\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("vTL(3#S3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vTL(3#S3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "java.lang.";
      Utility.compactClassName("java.lang.");
      String string1 = "0Mo";
      // Undeclared exception!
      Utility.replace(":RdDiHJfD6", "", "0Mo");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.setBit((-2183), (-2183));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)106;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "~QW~,1Lnh";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("~QW~,1Lnh", "~QW~,1Lnh", "~QW~,1Lnh", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~QW~,1Lnh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("qU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)4;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$baQ$E", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "(type=";
      try { 
        Utility.methodSignatureArgumentTypes("(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `type='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-531317692), (int) (byte) (-34), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("putstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "invokedynamic";
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "invokedynamic";
      stringArray0[3] = "invokedynamic";
      stringArray0[4] = "invokedynamic";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodTypeToSignature("invokedynamic", stringArray0);
      assertEquals("(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "invokedynamic";
      objectArray0[1] = (Object) "invokedynamic";
      objectArray0[2] = (Object) "(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;";
      objectArray0[3] = (Object) "invokedynamic";
      objectArray0[4] = (Object) "invokedynamic";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"invokedynamic\", \"invokedynamic\", \"(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;\", \"invokedynamic\", \"invokedynamic\"", string1);
      
      String string2 = Utility.methodSignatureToString("(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;", "invokedynamic", "uY}tU+:D\"", true);
      assertEquals("uY}tU+:D\" invokedynamic invokedynamic(invokedynamic arg1, invokedynamic arg2, invokedynamic arg3, invokedynamic arg4, invokedynamic arg5)", string2);
      
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "\"invokedynamic\", \"invokedynamic\", \"(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;\", \"invokedynamic\", \"invokedynamic\"";
      objectArray1[1] = (Object) "uY}tU+:D\" invokedynamic invokedynamic(invokedynamic arg1, invokedynamic arg2, invokedynamic arg3, invokedynamic arg4, invokedynamic arg5)";
      objectArray1[2] = (Object) "invokedynamic";
      objectArray1[3] = (Object) "(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;";
      objectArray1[4] = (Object) "\"invokedynamic\", \"invokedynamic\", \"(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;\", \"invokedynamic\", \"invokedynamic\"";
      objectArray1[5] = (Object) "invokedynamic";
      objectArray1[6] = (Object) "invokedynamic";
      objectArray1[7] = (Object) "uY}tU+:D\"";
      String string3 = Utility.printArray(objectArray1);
      assertEquals("{\"invokedynamic\", \"invokedynamic\", \"(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;\", \"invokedynamic\", \"invokedynamic\", uY}tU+:D\" invokedynamic invokedynamic(invokedynamic arg1, invokedynamic arg2, invokedynamic arg3, invokedynamic arg4, invokedynamic arg5), invokedynamic, (Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;, \"invokedynamic\", \"invokedynamic\", \"(Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;Linvokedynamic;)Linvokedynamic;\", \"invokedynamic\", \"invokedynamic\", invokedynamic, invokedynamic, uY}tU+:D\"}", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("athrow", false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      String string1 = Utility.format((-491), 0, true, '*');
      assertEquals("-491", string1);
      
      String string2 = Utility.convertString("Cjg-D");
      assertEquals("Cjg-D", string2);
      
      byte[] byteArray0 = Utility.decode("Hv", false);
      assertArrayEquals(new byte[] {(byte)72, (byte)118, (byte)127}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("+n*o`cAv[OT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n*o`cAv[OT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      String string0 = Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) (byte) (-124);
      objectArray0[3] = (Object) (byte) (-124);
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte) (-124);
      Object object1 = new Object();
      objectArray0[6] = object1;
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }
}
