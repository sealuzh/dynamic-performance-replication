/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:56:30 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.PipedOutputStream;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("");
      MockIOException mockIOException1 = new MockIOException("", mockIOException0);
      asyncTimeout0.clearDeadline();
      mockIOException1.getStackTrace();
      asyncTimeout0.exit((IOException) mockIOException1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Buffer buffer0 = new Buffer();
      asyncTimeout0.enter();
      Source source0 = asyncTimeout0.source(buffer0);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Pipe pipe0 = new Pipe(3025L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Sink sink0 = asyncTimeout0.sink(buffer0);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.enter();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.exit();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.deadlineNanoTime(0L);
      AsyncTimeout.head.exit(iOException0);
      MockIOException mockIOException0 = new MockIOException("timeout", iOException0);
      Buffer buffer0 = new Buffer();
      AsyncTimeout.head.enter();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout0.deadlineNanoTime((-737L));
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.exit(false);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.enter();
      System.setCurrentTimeMillis((-1392409281254464L));
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime((-73450003319247936L));
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.newTimeoutException(iOException0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      inflaterSource0.timeout();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      asyncTimeout0.source(hashingSource1);
      asyncTimeout0.deadlineNanoTime((-72057594037927936L));
      IOException iOException0 = null;
      IOException iOException1 = asyncTimeout0.newTimeoutException((IOException) null);
      inflater0.finished();
      asyncTimeout0.enter();
      asyncTimeout0.newTimeoutException(iOException1);
      asyncTimeout0.source(hashingSource0);
      asyncTimeout0.exit(false);
      System.setCurrentTimeMillis((-72057594037927936L));
      System.setCurrentTimeMillis((-3615L));
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      // Undeclared exception!
      try { 
        asyncTimeout1.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(65536L);
      MockIOException mockIOException0 = new MockIOException("base64 == null");
      asyncTimeout1.exit((IOException) mockIOException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Buffer buffer0 = new Buffer();
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      MockIOException mockIOException1 = new MockIOException((Throwable) null);
      asyncTimeout2.newTimeoutException(mockIOException1);
      System.setCurrentTimeMillis(483L);
      asyncTimeout0.exit();
      asyncTimeout0.exit();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(65536L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Buffer buffer0 = new Buffer();
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout2.newTimeoutException(mockIOException0);
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout0.exit((IOException) interruptedIOException0);
      asyncTimeout0.newTimeoutException(interruptedIOException1);
      asyncTimeout1.timedOut();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("");
      MockIOException mockIOException1 = new MockIOException("", mockIOException0);
      asyncTimeout0.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      asyncTimeout0.timeout(65536L, timeUnit0);
      mockIOException1.getStackTrace();
      asyncTimeout0.exit((IOException) mockIOException1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Buffer buffer0 = new Buffer();
      asyncTimeout0.enter();
      asyncTimeout0.source(buffer0);
  }
}
